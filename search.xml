<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Part 1 Using Github Pages and Hexo to manage personal blogs on Ubuntu</title>
    <url>//blog/Using-Github-Pages-and-Hexo-to-manage-personal-blogs/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/98df88a8/">Part 1: Using Github Pages and Hexo to manage personal blogs on Ubuntu.</a></strong></li>
<li><a href="https://kezunlin.me/post/41448ed1/">Part 2: Using Github Pages and Hexo to manage personal blogs on windows.</a></li>
</ul>
<h2 id="Hexo-Tutorial"><a href="#Hexo-Tutorial" class="headerlink" title="Hexo Tutorial"></a>Hexo Tutorial</h2><p>Github recommends us to use Jekyll to manage static pages, which is based on Ruby and is difficult for us to install and configure. So we use Hexo instead. Hexo is a static blog framework similar to Jekyll ,which is based on Node.js and easier for use to use.</p>
<h3 id="use-Github-to-create-repo"><a href="#use-Github-to-create-repo" class="headerlink" title="use Github to create repo"></a>use Github to create repo</h3><ol>
<li><p>create a new repo in github, name by <code>username</code>.github.io: <code>kezunlin.github.io</code></p>
</li>
<li><p>Setting | Github Pages, choose a theame and deploy.</p>
</li>
</ol>
<h3 id="install-nodejs-by-apt-get"><a href="#install-nodejs-by-apt-get" class="headerlink" title="install nodejs by apt-get"></a><del>install nodejs by apt-get</del></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install nodejs</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install nodejs-legacy</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install npm</span><br><span class="line">node -v </span><br><span class="line">npm -v </span><br></pre></td></tr></table></figure>

<h3 id="install-nodejs-from-source"><a href="#install-nodejs-from-source" class="headerlink" title="install nodejs from source"></a>install nodejs from source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download and compile</span></span><br><span class="line">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3.tar.gz</span><br><span class="line">tar xzvf node-v8.9.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v8.9.3</span><br><span class="line">./configure</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># link to /usr/bin</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/bin/node /usr/bin/node</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/bin/npm /usr/bin/npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># check version</span></span><br><span class="line">node -v </span><br><span class="line">npm -v </span><br></pre></td></tr></table></figure>

<h3 id="test-node"><a href="#test-node" class="headerlink" title="test node"></a>test node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> hello.js</span><br><span class="line">console.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line">node hello.js</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<h3 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install hexo globally</span></span><br><span class="line"><span class="built_in">sudo</span> npm install hexo-cli -g</span><br><span class="line"><span class="comment">#sudo npm install hexo --save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use cnpm from taobao instead of offical npm, which is slow for chinese users.</span></span><br><span class="line"><span class="built_in">sudo</span> npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>use <code>cnpm</code> instead of <code>npm</code> (optional)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cnpm install </span></span><br><span class="line"><span class="built_in">sudo</span> cnpm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># check version</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h3 id="create-hexo-site"><a href="#create-hexo-site" class="headerlink" title="create hexo site"></a>create hexo site</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace</span><br><span class="line"><span class="built_in">mkdir</span> blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#npm install</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="localhost:4000">localhost:4000</a> and create posts.</p>
</blockquote>
<h3 id="deploy-to-github"><a href="#deploy-to-github" class="headerlink" title="deploy to github"></a>deploy to github</h3><p>vim <code>blog/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span>   <span class="string">git@github.com:kezunlin/kezunlin.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span>    </span><br></pre></td></tr></table></figure>
<p>generate ssh-key and copy to <code>github</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># generate ssh-key </span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="built_in">cat</span> .ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy content to github</span></span><br><span class="line"><span class="comment"># https://github.com/settings/keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install plungin and deploy to github</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#x6f;&#x75;&#114;&#x5f;&#101;&#109;&#97;&#105;&#108;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#x79;&#x6f;&#x75;&#114;&#x5f;&#101;&#109;&#97;&#105;&#108;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>“</p>
</blockquote>
<blockquote>
<p>now we can visit <a href="https://kezunlin.github.io/">https://kezunlin.github.io/</a></p>
</blockquote>
<h3 id="add-README-and-skip-render"><a href="#add-README-and-skip-render" class="headerlink" title="add README and skip render"></a>add <strong>README</strong> and skip render</h3><ol>
<li><p>add <code>README.md</code> to <strong>source</strong> folder</p>
</li>
<li><p>edit <code>blog/_config.yml</code> to skip render <code>README.md</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">README.md</span>        </span><br></pre></td></tr></table></figure>
</li>
<li><p>use <code>hexo generate</code> to copy <code>README.md</code> from <strong>source&#x2F;</strong> to <strong>public&#x2F;</strong></p>
</li>
</ol>
<h3 id="new-post-and-deploy-again"><a href="#new-post-and-deploy-again" class="headerlink" title="new post and deploy again"></a>new post and deploy again</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;first post&#x27;</span></span><br><span class="line">vim <span class="built_in">source</span>/_posts/first-post.md</span><br><span class="line"></span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>now we can visit <a href="https://kezunlin.github.io/">https://kezunlin.github.io/</a> and see our first post.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="hexo-commands"><a href="#hexo-commands" class="headerlink" title="hexo commands"></a>hexo commands</h3><p>Hexo common commands：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span>       <span class="comment">#new post</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span>  <span class="comment">#new page</span></span><br><span class="line">hexo generate             <span class="comment">#generate static files to public/</span></span><br><span class="line">hexo server               <span class="comment">#start server on localhost:4000 </span></span><br><span class="line">hexo deploy               <span class="comment">#push .deploy_git/ to GitHub</span></span><br><span class="line">hexo clean                <span class="comment">#clean files  </span></span><br></pre></td></tr></table></figure>

<p>Hexo short commands:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy    </span><br></pre></td></tr></table></figure>

<p>Hexo composite commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -g</span><br><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure>

<h3 id="front-matter"><a href="#front-matter" class="headerlink" title="front-matter"></a>front-matter</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Using Github Pages and Hexo to manage personal blogs</span><br><span class="line">date: 2017-12-26 17:28:10</span><br><span class="line">categories: tutorial</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">    -</span> github pages</span><br><span class="line"><span class="bullet">    -</span> hexo</span><br><span class="line"><span class="bullet">    -</span> nodejs</span><br><span class="line"><span class="bullet">    -</span> npm</span><br><span class="line">---    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>see <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">front-matter details</a></p>
</blockquote>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>use <code>&lt;!--more--&gt;</code> to control web content</p>
<h3 id="Use-next-theme"><a href="#Use-next-theme" class="headerlink" title="Use next theme"></a>Use next theme</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>vim <code>blog/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h3 id="Avatar"><a href="#Avatar" class="headerlink" title="Avatar"></a>Avatar</h3><p>edit <code>blog\themes\next\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>

<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>install plugin by </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>

<h4 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo admin"></a>hexo admin</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-admin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a></p>
</blockquote>
<h4 id="git-deployer"><a href="#git-deployer" class="headerlink" title="git deployer"></a>git deployer</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="rss-feed"><a href="#rss-feed" class="headerlink" title="rss feed"></a>rss feed</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p> visit <a href="http://localhost:4000/atom.xml">http://localhost:4000/atom.xml</a></p>
</blockquote>
<h4 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>vim <code>blog/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="http://localhost:4000/sitemap.xml">http://localhost:4000/sitemap.xml</a></p>
</blockquote>
<h4 id="baidu-sitemap"><a href="#baidu-sitemap" class="headerlink" title="baidu sitemap"></a>baidu sitemap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>vim <code>blog/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="http://localhost:4000/baidusitemap.xml">http://localhost:4000/baidusitemap.xml</a></p>
</blockquote>
<h4 id="perment-link"><a href="#perment-link" class="headerlink" title="perment link"></a>perment link</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>will fill <code>abbrlink</code> in your post.md</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> tutorial</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line">abbrlink: 4a17b156</span><br><span class="line"><span class="section">date: 2017-12-26 17:20:10</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h4 id="index-archive-category-tag"><a href="#index-archive-category-tag" class="headerlink" title="index&#x2F;archive&#x2F;category&#x2F;tag"></a>index&#x2F;archive&#x2F;category&#x2F;tag</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure>

<h4 id="tags-list-page"><a href="#tags-list-page" class="headerlink" title="tags list page"></a>tags list page</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="comment"># generate source/tags/index.md</span></span><br></pre></td></tr></table></figure>

<p>edit <code>source/tags/index.md</code></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-12-27 15:46:09</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="http://localhost:4000/tags/">http://localhost:4000/tags/</a></p>
</blockquote>
<h4 id="categories-list-page"><a href="#categories-list-page" class="headerlink" title="categories list page"></a>categories list page</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="comment"># generate source/categories/index.md</span></span><br></pre></td></tr></table></figure>

<p>edit <code>source/categories/index.md</code></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-12-27 15:46:03</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>now we can visit <a href="http://localhost:4000/categories/">http://localhost:4000/categories/</a></p>
</blockquote>
<h4 id="local-search"><a href="#local-search" class="headerlink" title="local search"></a>local search</h4><p>install search plugin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>edit <code>themes\next\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># create a new &#x27;Search&#x27; button next to &#x27;Archives&#x27;</span></span><br><span class="line">    <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">    <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="Upload-images-to-cnblog"><a href="#Upload-images-to-cnblog" class="headerlink" title="Upload images to cnblog"></a>Upload images to cnblog</h3><ol>
<li>install <a href="https://github.com/FrankFan/img-uploader">img-uploader</a> chrome extension by <a href="https://chrome.google.com/webstore/detail/image-uploader/ncdoclefjnhbjnbcdpekmmgmgbdodklo?hl=zh-CN">here</a></li>
<li>upload image and get url.</li>
<li>use url in markdown.</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">![alt](http://images2017.cnblogs.com/.../123.png &quot;title&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="Multiple-deploy"><a href="#Multiple-deploy" class="headerlink" title="Multiple deploy"></a>Multiple deploy</h3><ul>
<li>deploy to github.com: <code>username.github.io</code></li>
<li>deploy to coding.net (gitcaffe): <code>username</code></li>
</ul>
<p>vim <code>blog/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git,master</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">git@git.coding.net:&lt;username&gt;/&lt;username&gt;.git,master</span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="custom-domain-and-https"><a href="#custom-domain-and-https" class="headerlink" title="custom domain and https"></a>custom domain and https</h3><ul>
<li>blog: Github pages</li>
<li>SSL：CloudFlare</li>
<li>domain: Godaddy (dns nameservers from CloudFlare)</li>
</ul>
<p>get ips by </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig kezunlin.github.io +noall +answer</span><br><span class="line"></span><br><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure>

<ul>
<li>A: point to 185.199.108&#x2F;109&#x2F;110&#x2F;111.153 </li>
<li>CNAME: point to <code>kezunlin.me</code></li>
</ul>
<p>steps:</p>
<ol>
<li>get <code>kezunlin.me</code> from <code>Godaddy.com</code></li>
<li>add <code>kezunlin.me</code> to github blog’s <code>blog\source\CNAME</code> file</li>
<li>register <code>CloudFlare.com</code> and add <code>A</code> record with github page IP <code>185.199.108/109/110/111.153</code><br><img src="https://kezunlin.me/images/posts/1864218-20191127161452692-1952610702.png" alt="cloudflare a records"></li>
<li>Go to <code>Godaddy.com</code> and add dns nameservers <code>dina.ns.cloudflare.com</code> and <code>paul.ns.cloudflare.com</code> from <a href="https://dcc.godaddy.com/manage/KEZUNLIN.ME/dns">here</a><br><img src="https://kezunlin.me/images/posts/1864218-20191127161934648-550417912.png" alt="godaddy dns"></li>
<li>wait for some hours(24 hours) and we get results from <code>CloudFlare</code></li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">kezunlin.me</span><br><span class="line">Status: Active</span><br><span class="line"></span><br><span class="line">This website is active on Cloudflare.</span><br><span class="line"></span><br><span class="line">Universal SSL Status Active Certificate</span><br></pre></td></tr></table></figure>

<p><code>Active</code> means nameservers take effect.</p>
<p>configure <code>Page Rules | rules for Always use HTTPS</code></p>
<h3 id="google-analytics"><a href="#google-analytics" class="headerlink" title="google analytics"></a>google analytics</h3><ol>
<li>get <code>google-site-verification</code> from google search console and add to <code>themes/next/layout/_partials/head.swig</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;google-site-verification&quot;</span> content=<span class="string">&quot;***&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
<li>get <code>google_analytics</code> and edit <code>themes\next\_config.yml</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-***</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="google-adsense"><a href="#google-adsense" class="headerlink" title="google adsense"></a>google adsense</h3><ul>
<li>google-adsense-header.js</li>
<li>google-adsense-display.js</li>
<li>google-adsense-article.js</li>
</ul>
<p>google-adsense-header.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script data-ad-client=<span class="string">&quot;ca-pub-5653382914441020&quot;</span> <span class="keyword">async</span> src=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="baidu-zhanzhang"><a href="#baidu-zhanzhang" class="headerlink" title="baidu zhanzhang"></a>baidu zhanzhang</h3><p>get <code>baidu-site-verification</code> from <code>https://ziyuan.baidu.com/</code> and add to <code>themes/next/layout/_partials/head.swig</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;baidu-site-verification&quot;</span> content=<span class="string">&quot;***&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="360-zhanzhang"><a href="#360-zhanzhang" class="headerlink" title="360 zhanzhang"></a>360 zhanzhang</h3><p>get <code>360-site-verification</code> from <code>http://zhanzhang.so.com/sitetool/</code> and add to <code>themes/next/layout/_partials/head.swig</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;360-site-verification&quot;</span> content=<span class="string">&quot;***&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="nofollow"><a href="#nofollow" class="headerlink" title="nofollow"></a>nofollow</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude1.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude2.com&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>see <a href="https://blog.skk.moe/post/hexo-filter-nofollow-joined-hexo-official-plugin/">hexo-filter-nofollow</a></p>
</blockquote>
<h3 id="code-highlight"><a href="#code-highlight" class="headerlink" title="code highlight"></a>code highlight</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-prism-plugin</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">&#x27;preprocess&#x27;</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;tomorrow&#x27;</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>see <a href="https://prismjs.com/#languages-list">prismjs</a> and <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery</a></p>
</blockquote>
<h3 id="permalink-pinyin"><a href="#permalink-pinyin" class="headerlink" title="permalink-pinyin"></a>permalink-pinyin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>only for post url with chinese words</p>
</blockquote>
<h3 id="recommend-posts"><a href="#recommend-posts" class="headerlink" title="recommend posts"></a>recommend posts</h3><p>install plugin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-recommended-posts --save</span><br><span class="line">hexo recommend</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recommended_posts:</span></span><br><span class="line">  <span class="attr">autoDisplay:</span> <span class="literal">false</span> <span class="comment"># 自动在文章底部显示推荐文章，如果你使用Material-X主题，这里要设置为false。</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">https://api.truelaurel.com</span> <span class="comment"># 后端推荐服务器地址</span></span><br><span class="line">  <span class="attr">timeoutInMillis:</span> <span class="number">10000</span> <span class="comment"># 服务时长，超过此时长，则使用离线推荐模式</span></span><br><span class="line">  <span class="attr">excludePattern:</span> []</span><br><span class="line">  <span class="attr">titleHtml:</span> <span class="string">Related</span> <span class="string">Recommend</span> <span class="string">Posts</span> <span class="comment">#自定义标题</span></span><br><span class="line">  <span class="attr">internalLinks:</span> <span class="number">4</span> <span class="comment"># 内部文章数量</span></span><br><span class="line">  <span class="attr">externalLinks:</span> <span class="number">1</span> <span class="comment"># 外部文章数量</span></span><br><span class="line">  <span class="attr">fixedNumber:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="related-posts"><a href="#related-posts" class="headerlink" title="related posts"></a>related posts</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>see <a href="https://leafjame.github.io/posts/2114475547.html">here</a></p>
</blockquote>
<h3 id="pin-top-post"><a href="#pin-top-post" class="headerlink" title="pin top post"></a>pin top post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-index-pin-top --save </span><br></pre></td></tr></table></figure>

<p>and edit <code>_posts/your-post.md</code></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo blog</span><br><span class="line">top: 1</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet"> -</span> hexo</span><br><span class="line">categories:</span><br><span class="line"><span class="section"> - blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>see <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/">here</a></p>
<h3 id="404"><a href="#404" class="headerlink" title="404"></a>404</h3><ol>
<li><code>hexo new page &quot;404&quot;</code></li>
<li>edit <code>blog\source\404\index.md</code></li>
<li><code>hexo generate</code> to generate <code>blog\public\404.html</code> </li>
<li><code>hexo deploy</code> to deploy blog to github.</li>
<li>now we can access <code>https://kezunlin.me/404.html</code></li>
</ol>
<blockquote>
<p>when 404 error occur, github will serve <code>https://kezunlin.me/404.html</code> as result.</p>
</blockquote>
<h3 id="stats-busuanzi"><a href="#stats-busuanzi" class="headerlink" title="stats busuanzi"></a>stats busuanzi</h3><p>edit <code>/theme/next/layout/_third-party/analytics/busuanzi-counter.swig</code></p>
<p>replace </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>with</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\themes\next\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">    <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">    <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-user&quot;&gt;&lt;/i&gt;</span> </span><br><span class="line">    <span class="attr">site_uv_footer:</span> <span class="string">Visitors</span></span><br><span class="line">    <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">    <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-eye&quot;&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="attr">site_pv_footer:</span> <span class="string">Total</span> <span class="string">Visits</span></span><br><span class="line">    <span class="comment"># custom pv span for one page only</span></span><br><span class="line">    <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-eye&quot;&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="attr">page_pv_footer:</span> <span class="string">Reads</span></span><br></pre></td></tr></table></figure>

<h3 id="gitment-for-comment-not"><a href="#gitment-for-comment-not" class="headerlink" title="gitment for comment (not)"></a>gitment for comment (not)</h3><p>We can use github repo to store blog site’s comments in <code>issues</code></p>
<h4 id="register-OAuth-Application"><a href="#register-OAuth-Application" class="headerlink" title="register OAuth Application"></a>register OAuth Application</h4><ol>
<li>visit <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></li>
<li>fill in blanks, callback URL: <code>https://kezunlin.me</code></li>
<li>get <code>client ID</code> and <code>client secret</code></li>
</ol>
<blockquote>
<p>go to <a href="https://github.com/settings/developers">https://github.com/settings/developers</a> to check your OAuth Apps</p>
</blockquote>
<h4 id="gitment-config"><a href="#gitment-config" class="headerlink" title="gitment config"></a>gitment config</h4><ol>
<li>create a new repo named <code>gitment</code> in Github for storing comments in issues</li>
<li>edit <code>blog\themes\next\_config.yml</code></li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">    <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line">    <span class="attr">lazy:</span> <span class="literal">true</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line">    <span class="attr">cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide &#x27;Powered by ...&#x27; on footer, and more</span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line">    <span class="attr">github_user:</span> <span class="string">kezunlin</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line">    <span class="attr">github_repo:</span> <span class="string">gitment</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">xxx</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">yyy</span>  <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line">    <span class="attr">proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line">    <span class="attr">redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure>

<p><strong>Notice</strong></p>
<ul>
<li>github_user: kezunlin</li>
<li>github_repo: gitment</li>
</ul>
<h4 id="init-page-comment"><a href="#init-page-comment" class="headerlink" title="init page comment"></a>init page comment</h4><ol>
<li><code>hexo deploy</code> to deploy blogs</li>
<li>visit page and click button <code>Initialize Comment</code></li>
<li>post your first comment.</li>
</ol>
<blockquote>
<p>error fix: <a href="https://github.com/imsun/gitment/issues/188">https://github.com/imsun/gitment/issues/188</a></p>
</blockquote>
<h3 id="gitalk-for-comment"><a href="#gitalk-for-comment" class="headerlink" title="gitalk for comment"></a>gitalk for comment</h3><p>see <a href="https://introspelliam.github.io/2018/07/09/hexo/NexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%9B%86%E6%88%90gitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">gitalk for hexo next</a></p>
<h3 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h3><p>skip now.</p>
<h3 id="copy-code-not"><a href="#copy-code-not" class="headerlink" title="copy code (not)"></a>copy code (not)</h3><ul>
<li><p>see <a href="https://leafjame.github.io/posts/2114475547.html">hexo-copy</a></p>
</li>
<li><p>see <a href="https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%EF%BC%89/">hexo copy 2</a></p>
</li>
</ul>
<h3 id="customize-hexo"><a href="#customize-hexo" class="headerlink" title="customize hexo"></a>customize hexo</h3><ul>
<li><a href="https://bestzuo.cn/posts/1689445187.html">bestzuo </a></li>
<li><a href="https://leafjame.github.io/posts/507826828.html">leafjame</a></li>
<li><a href="https://inspurer.github.io/2018/11/11/hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/">customize</a></li>
</ul>
<h3 id="shareJS"><a href="#shareJS" class="headerlink" title="shareJS"></a>shareJS</h3><blockquote>
<p>see <a href="https://leafjame.github.io/posts/2114475547.html">here</a></p>
</blockquote>
<h3 id="optimize-for-speed"><a href="#optimize-for-speed" class="headerlink" title="optimize for speed"></a>optimize for speed</h3><h4 id="multiple-deploy"><a href="#multiple-deploy" class="headerlink" title="multiple deploy"></a>multiple deploy</h4><p>deploy to <code>coding.net</code>.</p>
<h4 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">output:</span></span><br><span class="line">    <span class="attr">compress:</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="hexo-all-minifier-not"><a href="#hexo-all-minifier-not" class="headerlink" title="hexo-all-minifier (not)"></a>hexo-all-minifier (not)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>

<p>edit <code>blog\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: not enable minifier currently because not stable.</p>
</blockquote>
<h4 id="hexo-filter-optimize-not"><a href="#hexo-filter-optimize-not" class="headerlink" title="hexo-filter-optimize (not)"></a>hexo-filter-optimize (not)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-filter-optimize</span><br></pre></td></tr></table></figure>

<p>and edit <code>blog\theme\next\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filter_optimize:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="Lazy-load"><a href="#Lazy-load" class="headerlink" title="Lazy load"></a>Lazy load</h4><blockquote>
<p><a href="https://web.dev/codelab-use-lazysizes-to-lazyload-images/">Lazy load offscreen images with lazysizes</a></p>
</blockquote>
<h4 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h4><p>skip </p>
<h3 id="multi-language"><a href="#multi-language" class="headerlink" title="multi language"></a>multi language</h3><ul>
<li><a href="https://dengcb.com/zh/hexo-minos-multi-language/">multi-language</a></li>
<li><a href="https://tstrs.me/1448.html">multi language</a></li>
<li><a href="http://bambooom.github.io/2018/03/08/hexo-multi-lang/">hexo-multi-lang</a></li>
</ul>
<h3 id="sel-tools"><a href="#sel-tools" class="headerlink" title="sel tools"></a>sel tools</h3><ul>
<li><a href="https://www.alexa.com/siteinfo/kezunlin.me">alexa</a></li>
<li><a href="https://alexa.chinaz.com/kezunlin.me">chinaz</a></li>
<li><a href="https://www.opace.co.uk/">opace SEO</a></li>
</ul>
<blockquote>
<p>very good ref <a href="https://bawodu.com/plagiarized-site-case-study/">here</a></p>
</blockquote>
<h3 id="get-alexa-rank"><a href="#get-alexa-rank" class="headerlink" title="get alexa rank"></a>get alexa rank</h3><p>access <a href="http://data.alexa.com/data?cli=10&dat=snbamz&url=kezunlin.me">alexa rank for kezunlin.me</a></p>
<p>output </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> Need more Alexa data?  Find our APIs here: https://aws.amazon.com/alexa/ </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ALEXA</span> <span class="attr">VER</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">URL</span>=<span class="string">&quot;kezunlin.me/&quot;</span> <span class="attr">HOME</span>=<span class="string">&quot;0&quot;</span> <span class="attr">AID</span>=<span class="string">&quot;=&quot;</span> <span class="attr">IDN</span>=<span class="string">&quot;kezunlin.me/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RLS</span> <span class="attr">PREFIX</span>=<span class="string">&quot;http://&quot;</span> <span class="attr">more</span>=<span class="string">&quot;0&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">RLS</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SD</span> <span class="attr">TITLE</span>=<span class="string">&quot;A&quot;</span> <span class="attr">FLAGS</span>=<span class="string">&quot;&quot;</span> <span class="attr">HOST</span>=<span class="string">&quot;kezunlin.me&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">SD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">POPULARITY</span> <span class="attr">URL</span>=<span class="string">&quot;kezunlin.me/&quot;</span> <span class="attr">TEXT</span>=<span class="string">&quot;4070983&quot;</span> <span class="attr">SOURCE</span>=<span class="string">&quot;panel&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">REACH</span> <span class="attr">RANK</span>=<span class="string">&quot;3600610&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RANK</span> <span class="attr">DELTA</span>=<span class="string">&quot;+1226051&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ALEXA</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>kezunlin.me</code> alexa rank is 4070983.</p>
</blockquote>
<h3 id="image-resource"><a href="#image-resource" class="headerlink" title="image resource"></a>image resource</h3><ul>
<li><a href="https://www.gaoding.com/design?id=125755&simple=1">gaoding</a></li>
</ul>
<h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><h3 id="hexo-Error-watch-ENOSPC"><a href="#hexo-Error-watch-ENOSPC" class="headerlink" title="hexo Error watch ENOSPC"></a>hexo Error watch ENOSPC</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; hexo server </span><br><span class="line">(node:7563) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: watch /media/kezunlin/Workspace/git/blog/source/_posts ENOSPC</span><br></pre></td></tr></table></figure>

<p>solution:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> fs.inotify.max_user_watches=524288 | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf &amp;&amp; <span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="ERROR-Local-hexo-not-found-in"><a href="#ERROR-Local-hexo-not-found-in" class="headerlink" title="ERROR Local hexo not found in"></a>ERROR Local hexo not found in</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br><span class="line">ERROR Local hexo not found <span class="keyword">in</span> /home/kezunlin/git/blog</span><br></pre></td></tr></table></figure>

<p>solution:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="built_in">rm</span> node_modules</span><br><span class="line">cnpm install --save</span><br></pre></td></tr></table></figure>

<h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>google chrome force reload page without cache</p>
<p>steps</p>
<blockquote>
<p>F12-&gt;Application-&gt;Clear Storage-&gt;Clear site data</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20191009101920292-50734223.png" alt="clear site data"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://dearmadman.com/2015/10/11/Error-watch-ENOSPC/">error watch ENOSPC</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#disqus">third party services</a></li>
<li><a href="https://imsun.net/posts/gitment-introduction/#more">gitment</a></li>
<li><a href="https://rainylog.com/post/hexo-post-image-manage/">hexo image manage</a></li>
<li><a href="http://yangq.me/post/19acb239.html">hexo prement link</a></li>
<li><a href="http://cnodejs.org/topic/566ff3421d2912ce2a35aa51">using cnblogs and chrome extension to upload iamges</a></li>
<li><a href="http://cnodejs.org/topic/566ff3421d2912ce2a35aa51">img uploader</a></li>
<li><a href="https://www.hrwhisper.me/baidu-share-not-support-https-solution/">baidushare support https</a></li>
<li><a href="https://github.com/chenzhutian/hexo-all-minifier">hexo minifier</a></li>
<li><a href="https://segmentfault.com/a/1190000008082288">hexo neat</a></li>
<li><a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/">domain dnspod godaddy</a></li>
<li><a href="https://thecodeway.com/blog/?p=1447">use https</a></li>
<li><a href="http://www.joryhe.com/2016-06-05-hexo_site_seo_speed_more_optimization.html">optimize for speed</a></li>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/">github page IP</a></li>
<li><a href="https://yaml.vip/">google adsense demo site</a></li>
<li><a href="https://yaml.vip/2019/03/19/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0google-adsense-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8/">google adsense for hexo blog</a></li>
<li><a href="https://leafjame.github.io/posts/662668482.html">leafjame google adsense</a></li>
<li><a href="https://github.com/huiwang/hexo-recommended-posts">hexo-recommended-posts</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/pull/2054/files">hexo-theme-next hexo-recommended-posts</a></li>
<li><a href="https://blog.shuiba.co/comment-systems-recommendation">hexo comment systems</a></li>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a></li>
<li><a href="https://yunhao.space/2018/07/04/hexo-next-gitalk-comments-tutor/">gitalk for hexo next</a></li>
<li><a href="https://introspelliam.github.io/2018/07/09/hexo/NexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%9B%86%E6%88%90gitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">gitalk for hexo next 2</a></li>
<li><a href="http://x1aoboo.com/posts/3a6c8e44/">gitalk for hexo next 3</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2017&#x2F;12&#x2F;26: created.</li>
<li>2017&#x2F;12&#x2F;27: add Appendix,use next theame,add tags&#x2F;categories page.</li>
<li>2017&#x2F;12&#x2F;28: add Advanced, use gitment,baidushare,local search,etc.</li>
<li>2018&#x2F;01&#x2F;02: upload images to cnblogs.</li>
<li>2018&#x2F;01&#x2F;03: hexo-neat to compress,cdn,etc.</li>
<li>2018&#x2F;01&#x2F;22: add part2.</li>
<li>2018&#x2F;09&#x2F;05: add ssl.</li>
<li>2019&#x2F;11&#x2F;07: reorganize post contents.</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-next</tag>
        <tag>nodejs</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//blog/hello-world/</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2017&#x2F;12&#x2F;26: created</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-next</tag>
        <tag>nodejs</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Brewing Logistic Regression then Going Deeper</title>
    <url>//blog/Brewing-Logistic-Regression-then-Going-Deeper/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>While Caffe is made for deep networks it can likewise represent “shallow” models like logistic regression for classification. We’ll do simple logistic regression on synthetic data that we’ll generate and save to HDF5 to feed vectors to Caffe. Once that model is done, we’ll add layers to improve accuracy. That’s what Caffe is about: define a model, experiment, and then deploy.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">&#x27;./python&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<p>Synthesize a dataset of 10,000 4-vectors for binary classification with 2 informative features and 2 noise features.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y = sklearn.datasets.make_classification(</span><br><span class="line">    n_samples=<span class="number">10000</span>, n_features=<span class="number">4</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>, </span><br><span class="line">    n_clusters_per_class=<span class="number">2</span>, hypercube=<span class="literal">False</span>, random_state=<span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;data,&#x27;</span>,X.shape,y.shape <span class="comment"># (10000, 4) (10000,) x0,x1,x2,x3, y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Split into train and test</span></span><br><span class="line">X, Xt, y, yt = sklearn.model_selection.train_test_split(X, y)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;train,&#x27;</span>,X.shape,y.shape  <span class="comment">#train: (7500, 4) (7500,)</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;test,&#x27;</span>, Xt.shape,yt.shape<span class="comment">#test:  (2500, 4) (2500,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualize sample of the data</span></span><br><span class="line">ind = np.random.permutation(X.shape[<span class="number">0</span>])[:<span class="number">1000</span>] <span class="comment"># (7500,)---&gt;(1000,)   x0,x1,x2,x3, y</span></span><br><span class="line">df = pd.DataFrame(X[ind])</span><br><span class="line">_ = pd.plotting.scatter_matrix(df, figsize=(<span class="number">9</span>, <span class="number">9</span>), diagonal=<span class="string">&#x27;kde&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">40</span>, alpha=<span class="number">.4</span>, c=y[ind])</span><br></pre></td></tr></table></figure>

<pre><code>data, (10000, 4) (10000,)
train, (7500, 4) (7500,)
test, (2500, 4) (2500,)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180102164944737-905775071.png" alt="scatter matrix"></p>
<p>Learn and evaluate scikit-learn’s logistic regression with stochastic gradient descent (SGD) training. Time and check the classifier’s accuracy.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"><span class="comment"># Train and test the scikit-learn SGD logistic regression.</span></span><br><span class="line">clf = sklearn.linear_model.SGDClassifier(</span><br><span class="line">    loss=<span class="string">&#x27;log&#x27;</span>, n_iter=<span class="number">1000</span>, penalty=<span class="string">&#x27;l2&#x27;</span>, alpha=<span class="number">5e-4</span>, class_weight=<span class="string">&#x27;balanced&#x27;</span>)</span><br><span class="line"></span><br><span class="line">clf.fit(X, y)</span><br><span class="line">yt_pred = clf.predict(Xt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy: &#123;:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(sklearn.metrics.accuracy_score(yt, yt_pred)))</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.781
Accuracy: 0.781
Accuracy: 0.781
Accuracy: 0.781
1 loop, best of 3: 372 ms per loop
</code></pre>
<p>Save the dataset to HDF5 for loading in Caffe.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write out the data to HDF5 files in a temp directory.</span></span><br><span class="line"><span class="comment"># This file is assumed to be caffe_root/examples/hdf5_classification.ipynb</span></span><br><span class="line">dirname = os.path.abspath(<span class="string">&#x27;./examples/hdf5_classification/data&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirname):</span><br><span class="line">    os.makedirs(dirname)</span><br><span class="line"></span><br><span class="line">train_filename = os.path.join(dirname, <span class="string">&#x27;train.h5&#x27;</span>)</span><br><span class="line">test_filename = os.path.join(dirname, <span class="string">&#x27;test.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HDF5DataLayer source should be a file containing a list of HDF5 filenames.</span></span><br><span class="line"><span class="comment"># To show this off, we&#x27;ll list the same data file twice.</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(train_filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f[<span class="string">&#x27;data&#x27;</span>] = X</span><br><span class="line">    f[<span class="string">&#x27;label&#x27;</span>] = y.astype(np.float32)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(dirname, <span class="string">&#x27;train.txt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(train_filename + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(train_filename + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># HDF5 is pretty efficient, but can be further compressed.</span></span><br><span class="line">comp_kwargs = &#123;<span class="string">&#x27;compression&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;compression_opts&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">with</span> h5py.File(test_filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.create_dataset(<span class="string">&#x27;data&#x27;</span>, data=Xt, **comp_kwargs)</span><br><span class="line">    f.create_dataset(<span class="string">&#x27;label&#x27;</span>, data=yt.astype(np.float32), **comp_kwargs)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(dirname, <span class="string">&#x27;test.txt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(test_filename + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Let’s define logistic regression in Caffe through Python net specification. This is a quick and natural way to define nets that sidesteps manually editing the protobuf model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> layers <span class="keyword">as</span> L</span><br><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> params <span class="keyword">as</span> P</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logreg</span>(<span class="params">hdf5, batch_size</span>):</span><br><span class="line">    <span class="comment"># logistic regression: data, matrix multiplication, and 2-class softmax loss</span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    n.data, n.label = L.HDF5Data(batch_size=batch_size, source=hdf5, ntop=<span class="number">2</span>)</span><br><span class="line">    n.ip1 = L.InnerProduct(n.data, num_output=<span class="number">2</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    n.accuracy = L.Accuracy(n.ip1, n.label)</span><br><span class="line">    n.loss = L.SoftmaxWithLoss(n.ip1, n.label)</span><br><span class="line">    <span class="keyword">return</span> n.to_proto()</span><br><span class="line"></span><br><span class="line">train_net_path = <span class="string">&#x27;examples/hdf5_classification/logreg_auto_train.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(train_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(logreg(<span class="string">&#x27;examples/hdf5_classification/data/train.txt&#x27;</span>, <span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line">test_net_path = <span class="string">&#x27;examples/hdf5_classification/logreg_auto_test.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(test_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(logreg(<span class="string">&#x27;examples/hdf5_classification/data/test.txt&#x27;</span>, <span class="number">10</span>)))</span><br></pre></td></tr></table></figure>

<p>Now, we’ll define our “solver” which trains the network by specifying the locations of the train and test nets we defined above, as well as setting values for various parameters used for learning, display, and “snapshotting”.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe.proto <span class="keyword">import</span> caffe_pb2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>(<span class="params">train_net_path, test_net_path</span>):</span><br><span class="line">    s = caffe_pb2.SolverParameter()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify locations of the train and test networks.</span></span><br><span class="line">    s.train_net = train_net_path</span><br><span class="line">    s.test_net.append(test_net_path)</span><br><span class="line"></span><br><span class="line">    s.test_interval = <span class="number">1000</span>  <span class="comment"># Test after every 1000 training iterations.</span></span><br><span class="line">    s.test_iter.append(<span class="number">250</span>) <span class="comment"># Test 250 &quot;batches&quot; each time we test.</span></span><br><span class="line"></span><br><span class="line">    s.max_iter = <span class="number">10000</span>      <span class="comment"># # of times to update the net (training iterations)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the initial learning rate for stochastic gradient descent (SGD).</span></span><br><span class="line">    s.base_lr = <span class="number">0.01</span>        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set `lr_policy` to define how the learning rate changes during training.</span></span><br><span class="line">    <span class="comment"># Here, we &#x27;step&#x27; the learning rate by multiplying it by a factor `gamma`</span></span><br><span class="line">    <span class="comment"># every `stepsize` iterations.</span></span><br><span class="line">    s.lr_policy = <span class="string">&#x27;step&#x27;</span></span><br><span class="line">    s.gamma = <span class="number">0.1</span></span><br><span class="line">    s.stepsize = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set other optimization parameters. Setting a non-zero `momentum` takes a</span></span><br><span class="line">    <span class="comment"># weighted average of the current gradient and previous gradients to make</span></span><br><span class="line">    <span class="comment"># learning more stable. L2 weight decay regularizes learning, to help prevent</span></span><br><span class="line">    <span class="comment"># the model from overfitting.</span></span><br><span class="line">    s.momentum = <span class="number">0.9</span></span><br><span class="line">    s.weight_decay = <span class="number">5e-4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Display the current training loss and accuracy every 1000 iterations.</span></span><br><span class="line">    s.display = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Snapshots are files used to store networks we&#x27;ve trained.  Here, we&#x27;ll</span></span><br><span class="line">    <span class="comment"># snapshot every 10K iterations -- just once at the end of training.</span></span><br><span class="line">    <span class="comment"># For larger networks that take longer to train, you may want to set</span></span><br><span class="line">    <span class="comment"># snapshot &lt; max_iter to save the network and training state to disk during</span></span><br><span class="line">    <span class="comment"># optimization, preventing disaster in case of machine crashes, etc.</span></span><br><span class="line">    s.snapshot = <span class="number">10000</span></span><br><span class="line">    s.snapshot_prefix = <span class="string">&#x27;examples/hdf5_classification/data/train&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># We&#x27;ll train on the CPU for fair benchmarking against scikit-learn.</span></span><br><span class="line">    <span class="comment"># Changing to GPU should result in much faster training!</span></span><br><span class="line">    s.solver_mode = caffe_pb2.SolverParameter.CPU</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">solver_path = <span class="string">&#x27;examples/hdf5_classification/logreg_solver.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(solver_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(solver(train_net_path, test_net_path)))</span><br></pre></td></tr></table></figure>

<p>Time to learn and evaluate our Caffeinated logistic regression in Python.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">caffe.set_mode_cpu()</span><br><span class="line">solver = caffe.get_solver(solver_path)</span><br><span class="line">solver.solve()</span><br><span class="line"></span><br><span class="line">accuracy = <span class="number">0</span></span><br><span class="line">batch_size = solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;data&#x27;</span>].num</span><br><span class="line">test_iters = <span class="built_in">int</span>(<span class="built_in">len</span>(Xt) / batch_size)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(test_iters):</span><br><span class="line">    solver.test_nets[<span class="number">0</span>].forward()</span><br><span class="line">    accuracy += solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;accuracy&#x27;</span>].data</span><br><span class="line">accuracy /= test_iters</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(accuracy))</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.770
Accuracy: 0.770
Accuracy: 0.770
Accuracy: 0.770
1 loop, best of 3: 195 ms per loop
</code></pre>
<p>Do the same through the command line interface for detailed output on the model and solving.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!./build/tools/caffe train -solver examples/hdf5_classification/logreg_solver.prototxt</span><br></pre></td></tr></table></figure>

<pre><code>I0224 00:32:03.232779   655 caffe.cpp:178] Use CPU.
I0224 00:32:03.391911   655 solver.cpp:48] Initializing solver from parameters: 
train_net: &quot;examples/hdf5_classification/logreg_auto_train.prototxt&quot;
test_net: &quot;examples/hdf5_classification/logreg_auto_test.prototxt&quot;
......
I0224 00:32:04.087514   655 solver.cpp:406]     Test net output #0: accuracy = 0.77
I0224 00:32:04.087532   655 solver.cpp:406]     Test net output #1: loss = 0.593815 (* 1 = 0.593815 loss)
I0224 00:32:04.087541   655 solver.cpp:323] Optimization Done.
I0224 00:32:04.087548   655 caffe.cpp:222] Optimization Done.
</code></pre>
<p>If you look at output or the <code>logreg_auto_train.prototxt</code>, you’ll see that the model is simple logistic regression.<br>We can make it a little more advanced by introducing a non-linearity between weights that take the input and weights that give the output – now we have a two-layer network.<br>That network is given in <code>nonlinear_auto_train.prototxt</code>, and that’s the only change made in <code>nonlinear_logreg_solver.prototxt</code> which we will now use.</p>
<p>The final accuracy of the new network should be higher than logistic regression!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> layers <span class="keyword">as</span> L</span><br><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> params <span class="keyword">as</span> P</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nonlinear_net</span>(<span class="params">hdf5, batch_size</span>):</span><br><span class="line">    <span class="comment"># one small nonlinearity, one leap for model kind</span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    n.data, n.label = L.HDF5Data(batch_size=batch_size, source=hdf5, ntop=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># define a hidden layer of dimension 40</span></span><br><span class="line">    n.ip1 = L.InnerProduct(n.data, num_output=<span class="number">40</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    <span class="comment"># transform the output through the ReLU (rectified linear) non-linearity</span></span><br><span class="line">    n.relu1 = L.ReLU(n.ip1, in_place=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># score the (now non-linear) features</span></span><br><span class="line">    n.ip2 = L.InnerProduct(n.ip1, num_output=<span class="number">2</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    <span class="comment"># same accuracy and loss as before</span></span><br><span class="line">    n.accuracy = L.Accuracy(n.ip2, n.label)</span><br><span class="line">    n.loss = L.SoftmaxWithLoss(n.ip2, n.label)</span><br><span class="line">    <span class="keyword">return</span> n.to_proto()</span><br><span class="line"></span><br><span class="line">train_net_path = <span class="string">&#x27;examples/hdf5_classification/nonlinear_auto_train.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(train_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(nonlinear_net(<span class="string">&#x27;examples/hdf5_classification/data/train.txt&#x27;</span>, <span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line">test_net_path = <span class="string">&#x27;examples/hdf5_classification/nonlinear_auto_test.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(test_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(nonlinear_net(<span class="string">&#x27;examples/hdf5_classification/data/test.txt&#x27;</span>, <span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line">solver_path = <span class="string">&#x27;examples/hdf5_classification/nonlinear_logreg_solver.prototxt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(solver_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(solver(train_net_path, test_net_path)))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">caffe.set_mode_cpu()</span><br><span class="line">solver = caffe.get_solver(solver_path)</span><br><span class="line">solver.solve()</span><br><span class="line"></span><br><span class="line">accuracy = <span class="number">0</span></span><br><span class="line">batch_size = solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;data&#x27;</span>].num</span><br><span class="line">test_iters = <span class="built_in">int</span>(<span class="built_in">len</span>(Xt) / batch_size)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(test_iters):</span><br><span class="line">    solver.test_nets[<span class="number">0</span>].forward()</span><br><span class="line">    accuracy += solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;accuracy&#x27;</span>].data</span><br><span class="line">accuracy /= test_iters</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(accuracy))</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.838
Accuracy: 0.837
Accuracy: 0.838
Accuracy: 0.834
1 loop, best of 3: 277 ms per loop
</code></pre>
<p>Do the same through the command line interface for detailed output on the model and solving.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!./build/tools/caffe train -solver examples/hdf5_classification/nonlinear_logreg_solver.prototxt</span><br></pre></td></tr></table></figure>

<pre><code>I0224 00:32:05.654265   658 caffe.cpp:178] Use CPU.
I0224 00:32:05.810444   658 solver.cpp:48] Initializing solver from parameters: 
train_net: &quot;examples/hdf5_classification/nonlinear_auto_train.prototxt&quot;
test_net: &quot;examples/hdf5_classification/nonlinear_auto_test.prototxt&quot;
......
I0224 00:32:06.078208   658 solver.cpp:406]     Test net output #0: accuracy = 0.8388
I0224 00:32:06.078225   658 solver.cpp:406]     Test net output #1: loss = 0.382042 (* 1 = 0.382042 loss)
I0224 00:32:06.078234   658 solver.cpp:323] Optimization Done.
I0224 00:32:06.078241   658 caffe.cpp:222] Optimization Done.
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Clean up (comment this out if you want to examine the hdf5_classification/data directory).</span></span><br><span class="line">shutil.rmtree(dirname)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180102: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Configure ROS Kinetic on Ubuntu 16.04</title>
    <url>//blog/Install-and-Configure-ROS-Kinetic-on-Ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Install-Guide"><a href="#Install-Guide" class="headerlink" title="Install Guide"></a>Install Guide</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><pre><code>ROS release 	  ROS version	      Ubuntu version
2016.3	     ROS Kinetic Kame	Ubuntu 16.04(Xenial)/Ubuntu 15.10
</code></pre>
<h3 id="quick-commands"><a href="#quick-commands" class="headerlink" title="quick commands"></a>quick commands</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb [arch=amd64] http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ros-kinetic-desktop-full</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<h3 id="update-source"><a href="#update-source" class="headerlink" title="update source"></a>update source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tinghua source<br><code>http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial</code></p>
</blockquote>
<h3 id="Configure-ros-source"><a href="#Configure-ros-source" class="headerlink" title="Configure ros source"></a>Configure ros source</h3><h4 id="ros-offical-NOT-RECOMMEND"><a href="#ros-offical-NOT-RECOMMEND" class="headerlink" title="ros offical(NOT RECOMMEND)"></a>ros offical(NOT RECOMMEND)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NOT RECOMMEND，when <code>apt-get update</code>, error will occur <code>Hash Sum mismatch</code></p>
</blockquote>
<h4 id="ros-china-RECOMMEND"><a href="#ros-china-RECOMMEND" class="headerlink" title="ros china(RECOMMEND)"></a>ros china(RECOMMEND)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb [arch=amd64] http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br></pre></td></tr></table></figure>

<p>cat <code>ros-latest.list</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb [<span class="built_in">arch</span>=amd64] http://mirrors.ustc.edu.cn/ros/ubuntu/ xenial main</span><br></pre></td></tr></table></figure>

<h3 id="Install-ros"><a href="#Install-ros" class="headerlink" title="Install ros"></a>Install ros</h3><p>ROS, rqt, rviz, robot-generic libraries, 2D&#x2F;3D simulators, navigation and 2D&#x2F;3D perception</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ros-kinetic-desktop-full</span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo apt-get install ros-kinetic-desktop</span></span><br><span class="line"><span class="comment">#sudo apt-get install ros-kinetic-ros-base</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo apt-get install ros-kinetic-&lt;PACKAGE&gt;</span></span><br><span class="line"><span class="comment">#sudo apt-get install ros-kinetic-slam-gmapping</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#apt-cache search ros-kinetic</span></span><br></pre></td></tr></table></figure>
<h3 id="Initialize-rosdep"><a href="#Initialize-rosdep" class="headerlink" title="Initialize rosdep"></a>Initialize rosdep</h3><p>Before you can use ROS, you will need to initialize rosdep. rosdep enables you to easily install system dependencies for source you want to compile and is required to run some core components in ROS.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<p>will output </p>
<pre><code>reading in sources list data from /etc/ros/rosdep/sources.list.d
Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml
Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml
Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml
Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml
Hit https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml
Query rosdistro index https://raw.githubusercontent.com/ros/rosdistro/master/index.yaml
Add distro &quot;groovy&quot;
Add distro &quot;hydro&quot;
Add distro &quot;indigo&quot;
Add distro &quot;jade&quot;
Add distro &quot;kinetic&quot;
Add distro &quot;lunar&quot;
updated cache in /home/kezunlin/.ros/rosdep/sources.cache
</code></pre>
<h3 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="check-ROS"><a href="#check-ROS" class="headerlink" title="check  ROS"></a>check  ROS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> | grep ROS</span><br><span class="line"><span class="built_in">export</span> | grep ROS</span><br><span class="line"><span class="built_in">declare</span> -x ROSLISP_PACKAGE_DIRECTORIES=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x ROS_DISTRO=<span class="string">&quot;kinetic&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x ROS_ETC_DIR=<span class="string">&quot;/opt/ros/kinetic/etc/ros&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x ROS_MASTER_URI=<span class="string">&quot;http://localhost:11311&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x ROS_PACKAGE_PATH=<span class="string">&quot;/opt/ros/kinetic/share&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x ROS_ROOT=<span class="string">&quot;/opt/ros/kinetic/share/ros&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Dependencies-for-building-packages"><a href="#Dependencies-for-building-packages" class="headerlink" title="Dependencies for building packages"></a>Dependencies for building packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>

<h3 id="Test-install"><a href="#Test-install" class="headerlink" title="Test install"></a>Test install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>output </p>
<pre><code>... logging to /home/kezunlin/.ros/log/b777db6c-ff85-11e8-93c2-80fa5b47928a/roslaunch-ke-17139.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is &lt;1GB.

started roslaunch server http://ke:36319/
ros_comm version 1.12.14


SUMMARY
========

PARAMETERS
 * /rosdistro: kinetic
 * /rosversion: 1.12.14

NODES

auto-starting new master
process[master]: started with pid [17162]
ROS_MASTER_URI=http://ke:11311/

setting /run_id to b777db6c-ff85-11e8-93c2-80fa5b47928a
process[rosout-1]: started with pid [17175]
started core service [/rosout]
^C[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
done
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Create-Workspace"><a href="#Create-Workspace" class="headerlink" title="Create Workspace"></a>Create Workspace</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>Let’s create and build a catkin workspace:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> .</span><br><span class="line">build dist src</span><br></pre></td></tr></table></figure>

<p><code>tree src</code> folder</p>
<pre><code>src/
└── CMakeLists.txt -&gt; /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake

0 directories, 1 file
</code></pre>
<p><code>tree devel</code> folder  </p>
<pre><code>devel
├── env.sh
├── lib
├── setup.bash
├── setup.sh
├── _setup_util.py
└── setup.zsh

1 directory, 5 files
</code></pre>
<p>The <code>catkin_make</code> command is a convenience tool for working with <code>catkin workspaces</code>. </p>
<h3 id="source-devel-setup"><a href="#source-devel-setup" class="headerlink" title="source devel setup"></a>source devel setup</h3><p>before <code>source devel/setup.bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> | grep ROS</span><br><span class="line">ROS_ROOT=/opt/ros/kinetic/share/ros</span><br><span class="line">ROS_PACKAGE_PATH=/opt/ros/kinetic/share</span><br><span class="line">ROS_MASTER_URI=http://localhost:11311</span><br><span class="line">ROSLISP_PACKAGE_DIRECTORIES=</span><br><span class="line">ROS_DISTRO=kinetic</span><br><span class="line">ROS_ETC_DIR=/opt/ros/kinetic/etc/ros</span><br></pre></td></tr></table></figure>

<p>after <code>source devel/setup.bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> | grep ROS</span><br><span class="line">ROS_ROOT=/opt/ros/kinetic/share/ros</span><br><span class="line">ROS_PACKAGE_PATH=/home/kezunlin/catkin_ws/src:/opt/ros/kinetic/share</span><br><span class="line">ROS_MASTER_URI=http://localhost:11311</span><br><span class="line">ROSLISP_PACKAGE_DIRECTORIES=/home/kezunlin/catkin_ws/devel/share/common-lisp</span><br><span class="line">ROS_DISTRO=kinetic</span><br><span class="line">ROS_ETC_DIR=/opt/ros/kinetic/etc/ros</span><br></pre></td></tr></table></figure>

<p>To make sure your workspace is properly overlayed by the setup script, make sure <code>ROS_PACKAGE_PATH</code> environment variable includes the directory you’re in.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br><span class="line">/home/kezunlin/catkin_ws/src:/opt/ros/kinetic/share</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://wiki.ros.org/kinetic/Installation/Ubuntu">Official Install Guide</a></li>
<li><a href="http://wiki.ros.org/ROS/Installation/UbuntuMirrors">Ubuntu ROS mirrors</a></li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment">Configure ROS Environment</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2018&#x2F;01&#x2F;04: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>Part-1: Install and Configure Qt5 on Ubuntu 16.04</title>
    <url>//blog/Getting-Started-With-Qt-and-Qt-Creator-on-Ubuntu/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/91842b71/"><strong>Part-1: Install and Configure Qt5 on Ubuntu 16.04</strong></a></li>
<li><a href="https://kezunlin.me/post/b901735e/">Part-2: Install and Configure VTK 8.1.0 from source with Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/137aa5fc/">Part-3: Install and Configure PCL 1.8.1 with vtk qt support on Ubuntu 16.04 from source</a></li>
<li><a href="https://kezunlin.me/post/2d809f92/">Part-4: Install and Configure PCL 1.8.1 with vtk qt support on windows 10 from source</a></li>
</ul>
<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><ul>
<li>qt: 5.7.0</li>
<li>qmake: 3.0 based on Qt 5.7.0</li>
<li>qtcreator: 3.5.1 based on Qt 5.5.1</li>
</ul>
<h3 id="purge-existing-qt"><a href="#purge-existing-qt" class="headerlink" title="purge existing qt"></a>purge existing qt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge qt5-default qtcreator </span><br><span class="line"><span class="built_in">sudo</span> apt-get purge qt4-designer qt4-dev-tools</span><br></pre></td></tr></table></figure>

<h3 id="install-qt57"><a href="#install-qt57" class="headerlink" title="install qt57"></a>install qt57</h3><p>In addition, building graphical Qt applications requires OpenGL libraries and headers installed. On Ubuntu and other Debian-based Linux systems you can get OpenGL and the minimal set of development tools by installing the packages  <strong>libgl1-mesa-dev</strong> and <strong>build-essential</strong>, i.e. by running this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libgl1-mesa-dev</span><br></pre></td></tr></table></figure>

<p>Download qt and install.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libgl1-mesa-dev</span><br><span class="line">wget http://download.qt.io/official_releases/qt/5.7/5.7.0/qt-opensource-linux-x64-5.7.0.run</span><br><span class="line"><span class="built_in">chmod</span> +x qt-opensource-linux-x64-5.7.0.run</span><br><span class="line">./qt-opensource-linux-x64-5.7.0.run</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>/opt/Qt5.7.0</code></p>
</blockquote>
<p>create links to <code>/opt/qt/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /opt/Qt5.7.0 qt</span><br></pre></td></tr></table></figure>

<h3 id="qtchooser"><a href="#qtchooser" class="headerlink" title="qtchooser"></a>qtchooser</h3><h4 id="add-qt57-conf"><a href="#add-qt57-conf" class="headerlink" title="add qt57.conf"></a>add qt57.conf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/share/qtchooser/qt57.conf </span><br><span class="line"></span><br><span class="line">/opt/qt/5.7/gcc_64/bin</span><br><span class="line">/opt/qt/5.7/gcc_64/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># link to qt57</span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/x86_64-linux-gnu/qtchooser</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/qtchooser/qt57.conf qt57.conf</span><br></pre></td></tr></table></figure>

<h4 id="link-to-default"><a href="#link-to-default" class="headerlink" title="link to default"></a>link to default</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/x86_64-linux-gnu/qt-default/qtchooser</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> default.conf</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/qtchooser/qt57.conf default.conf</span><br><span class="line"><span class="built_in">ls</span> -l default.conf</span><br><span class="line">default.conf -&gt; /usr/share/qtchooser/qt57.conf</span><br></pre></td></tr></table></figure>

<h4 id="qt-conf"><a href="#qt-conf" class="headerlink" title="qt conf"></a>qt conf</h4><p><code>/usr/share/qtchooser/</code></p>
<ul>
<li>qt4-x86_64-linux-gnu.conf   (FILE)</li>
<li>qt5-x86_64-linux-gnu.conf   (FILE)</li>
<li>qt57.conf                   (FILE)</li>
</ul>
<p><code>/usr/lib/x86_64-linux-gnu/qtchooser/</code></p>
<ul>
<li>4.conf      (link)</li>
<li>5.conf      (link)</li>
<li>qt4.conf    (link)</li>
<li>qt5.conf    (link)</li>
<li>qt57.conf   (link)</li>
</ul>
<p><code>/usr/lib/x86_64-linux-gnu/qt-default/qtchooser/</code></p>
<ul>
<li>default.conf (link) qt57.conf</li>
</ul>
<h4 id="qtchooser-1"><a href="#qtchooser-1" class="headerlink" title="qtchooser"></a>qtchooser</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> qtchooser </span><br><span class="line">/usr/bin/qtchooser</span><br><span class="line"></span><br><span class="line">qtchooser -l</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">default</span><br><span class="line">qt4-x86_64-linux-gnu</span><br><span class="line">qt4</span><br><span class="line">qt5-x86_64-linux-gnu</span><br><span class="line">qt5</span><br></pre></td></tr></table></figure>

<h4 id="qtchooser-env"><a href="#qtchooser-env" class="headerlink" title="qtchooser env"></a>qtchooser env</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qtchooser -print-env</span><br><span class="line">QT_SELECT=<span class="string">&quot;default&quot;</span></span><br><span class="line">QTTOOLDIR=<span class="string">&quot;/opt/qt/5.7/gcc_64/bin&quot;</span></span><br><span class="line">QTLIBDIR=<span class="string">&quot;/opt/qt/5.7/gcc_64/lib&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="export-QT-QPA-PLATFORM-PLUGIN-PATH"><a href="#export-QT-QPA-PLATFORM-PLUGIN-PATH" class="headerlink" title="export QT_QPA_PLATFORM_PLUGIN_PATH"></a>export QT_QPA_PLATFORM_PLUGIN_PATH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bashrc</span><br><span class="line"><span class="built_in">export</span> QT_QPA_PLATFORM_PLUGIN_PATH=/opt/qt/5.7/gcc_64/plugins/platforms</span><br></pre></td></tr></table></figure>

<blockquote>
<p>otherwise,errors may occur. <code>Failed to load platform plugin &quot;xcb&quot;.</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="QtCreator-Tutorial"><a href="#QtCreator-Tutorial" class="headerlink" title="QtCreator Tutorial"></a>QtCreator Tutorial</h2><h3 id="install-qtcreator"><a href="#install-qtcreator" class="headerlink" title="install qtcreator"></a>install qtcreator</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install qtcreator</span><br><span class="line"></span><br><span class="line">qtcreator -version</span><br><span class="line">Qt Creator 3.5.1 based on Qt 5.5.1</span><br></pre></td></tr></table></figure>

<h3 id="create-application"><a href="#create-application" class="headerlink" title="create application"></a>create application</h3><ol>
<li><p>Start <code>qtcreator</code> and create a <code>Qt Widget Application</code> named <code>hello</code>.</p>
</li>
<li><p>Add a resource file named <code>resource.qrc</code>.</p>
<pre><code> hello--&gt;right click--&gt; Add New... ---&gt;qt---&gt; qt resource file---&gt; name resource---&gt; generate resource.qrc
</code></pre>
</li>
<li><p>and then import images to resource.qrc</p>
<pre><code> Resources | resource.qrt---&gt;right click---&gt; Add Prefix...---&gt; name /prefix
 Resources | resource.qrt | /prefix---&gt;right click ---&gt; Add Existing Files... ---&gt; choose images ---&gt; OK
</code></pre>
</li>
<li><p>use resource in <code>mainwindow.ui</code></p>
<pre><code> button ---&gt; property page ---&gt; icon ---&gt; Choose Resource... ---&gt; select image ---&gt; OK
</code></pre>
</li>
</ol>
<h3 id="qt-slots"><a href="#qt-slots" class="headerlink" title="qt slots"></a>qt slots</h3><h4 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h4><p>steps: </p>
<pre><code>mainwindow.ui ---&gt; choose button ---&gt; right click ---&gt; Go to slot... ---&gt; choose clicked() ---&gt; OK
</code></pre>
<p>will add slots in <code>mainwindow.h</code> automatically</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonOK_clicked</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>and in <code>mainwindow.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonOK_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: if we use <code>on_pushButtonOK_clicked</code> style, there is no need to connect with slots in <code>MainWindow</code> constructor by hand.</p>
</blockquote>
<h4 id="method-2-OK"><a href="#method-2-OK" class="headerlink" title="method 2 (OK)"></a>method 2 (OK)</h4><p>add slots in <code>mainwindow.h</code> by hand</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushButtonCancel_clicked</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>and in <code>mainwindow.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::pushButtonCancel_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>connect button with slot in <code>mainwindow.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButtonCancel, <span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">pushButtonCancel_clicked</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><h3 id="folder"><a href="#folder" class="headerlink" title="folder"></a>folder</h3><p>folder structure like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree hello/</span><br><span class="line"></span><br><span class="line">hello/</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── hello.pro</span><br><span class="line">├── hello.pro.user</span><br><span class="line">├── images</span><br><span class="line">│   ├── kezunlin_logo.png</span><br><span class="line">│   ├── logo.svg</span><br><span class="line">│   └── searchicon.png</span><br><span class="line">├── main.cpp</span><br><span class="line">├── mainwindow.cpp</span><br><span class="line">├── mainwindow.h</span><br><span class="line">├── mainwindow.ui</span><br><span class="line">└── resource.qrc</span><br><span class="line"></span><br><span class="line">1 directory, 11 files</span><br></pre></td></tr></table></figure>

<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><h4 id="mainwinow-h"><a href="#mainwinow-h" class="headerlink" title="mainwinow.h"></a>mainwinow.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonOK_clicked</span><span class="params">()</span></span>; <span class="comment">// method1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushButtonCancel_clicked</span><span class="params">()</span></span>; <span class="comment">// method2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure>

<h4 id="mainwindow-cpp"><a href="#mainwindow-cpp" class="headerlink" title="mainwindow.cpp"></a>mainwindow.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButtonCancel, <span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">pushButtonCancel_clicked</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonOK_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString text = ui-&gt;lineEditName-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;OK&quot;</span>, text);</span><br><span class="line">    ui-&gt;pushButtonOK-&gt;<span class="built_in">setText</span>( <span class="built_in">tr</span>(<span class="string">&quot;(OK. click me)&quot;</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::pushButtonCancel_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString text = ui-&gt;lineEditName-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Cancel&quot;</span>, text);</span><br><span class="line">    ui-&gt;pushButtonCancel-&gt;<span class="built_in">setText</span>( <span class="built_in">tr</span>(<span class="string">&quot;(Cancel.click me)&quot;</span>) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(helloworld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find includes in corresponding build directories</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Instruct CMake to run moc automatically when needed.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;QT_INCLUDE_DIRS&#125; $&#123;QT_LIBRARIES&#125; and so on are all Qt4 Macro Definitions!!!!!</span></span><br><span class="line"><span class="comment"># Find the QtWidgets library</span></span><br><span class="line"><span class="keyword">find_package</span>(Qt5Core)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Widgets)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Gui)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5OpenGL)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Xml)</span><br><span class="line"></span><br><span class="line"><span class="comment">#message( [qt] $&#123;Qt5Core_INCLUDE_DIRS&#125; )</span></span><br><span class="line"><span class="comment">#message( [qt] $&#123;Qt5Core_LIBRARIES&#125; )</span></span><br><span class="line"><span class="comment">#message( [qt] $&#123;Qt5Widgets_INCLUDE_DIRS&#125; )</span></span><br><span class="line"><span class="comment">#message( [qt] $&#123;Qt5Widgets_LIBRARIES&#125; )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cpp files</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ui files</span></span><br><span class="line">qt5_wrap_ui(ui_FILES mainwindow.ui)</span><br><span class="line"><span class="comment"># resource files</span></span><br><span class="line">qt5_add_resources(qrc_FILES resource.qrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;SRC_LIST&#125;</span> ) <span class="comment"># ./main.cpp./mainwindow.cpp</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;ui_FILES&#125;</span> ) <span class="comment"># build/ui_mainwindow.h</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;qrc_FILES&#125;</span> )<span class="comment"># build/qrc_resource.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell CMake to create the helloworld executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SRC_LIST&#125;</span> <span class="variable">$&#123;ui_FILES&#125;</span> <span class="variable">$&#123;qrc_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">qt5_use_modules</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> Core Widgets OpenGL Xml Gui)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the Widgets module from Qt 5.</span></span><br><span class="line"><span class="comment">#qt5_use_modules(helloworld Widgets)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># link other libraries</span></span><br><span class="line"><span class="comment">#target_link_libraries ($&#123;PROJECT_NAME&#125; $&#123;SPEC_OPENCV_LIBS&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt-2"><a href="#CMakeLists-txt-2" class="headerlink" title="CMakeLists.txt 2"></a>CMakeLists.txt 2</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)  <span class="comment"># bin/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment">#set(CMAKE_PREFIX_PATH $&#123;QTDIR&#125;)</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># QT5_DIR /opt/Qt5.7.0/5.7/gcc_64/lib/cmake/Qt5</span></span><br><span class="line"><span class="keyword">find_package</span>(Qt5 REQUIRED Widgets Core Gui Network OpenGL)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d )</span><br><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED) <span class="comment"># 3.6.1</span></span><br><span class="line"><span class="keyword">find_package</span>(VTK REQUIRED) <span class="comment"># 8.1.2</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; VTK_INCLUDE_DIRS = $&#123;VTK_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; VTK_LIBRARIES = $&#123;VTK_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(PCL REQUIRED) <span class="comment"># 1.9.1</span></span><br><span class="line"><span class="comment">#find_package(PCL REQUIRED COMPONENTS common io filters visualization)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_DIR = $&#123;PCL_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_FOUND = $&#123;PCL_FOUND&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_INCLUDE_DIRS = $&#123;PCL_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_LIBRARIES = $&#123;PCL_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_LIBRARY_DIRS = $&#123;PCL_LIBRARY_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_COMMON_LIBRARIES = $&#123;PCL_COMMON_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_IO_LIBRARIES = $&#123;PCL_IO_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_FILTERS_LIBRARIES = $&#123;PCL_FILTERS_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_VISUALIZATION_LIBRARIES = $&#123;PCL_VISUALIZATION_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">	./ <span class="comment"># current folder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#	$&#123;GFLAGS_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="comment">#	$&#123;GLOG_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="comment">#	$&#123;GTEST_INCLUDE_DIRS&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PROTOBUF_INCLUDE_DIRS&#125;</span></span><br><span class="line">	<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span> </span><br><span class="line">	<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span></span><br><span class="line">	<span class="variable">$&#123;VTK_INCLUDE_DIRS&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCE_FILES</span><br><span class="line">    main.cpp</span><br><span class="line">    MainWindow.cpp</span><br><span class="line">    ./proto/camera_image.pb.cc</span><br><span class="line">    ./proto/point_cloud.pb.cc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(RESOURCE_FILE resource.qrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCE_FILES&#125;</span> <span class="variable">$&#123;RESOURCE_FILE&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">    Qt5::Widgets Qt5::Gui Qt5::Core Qt5::OpenGL Qt5::Network</span><br><span class="line">	<span class="variable">$&#123;Boost_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PROTOBUF_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;VTK_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_LIBRARIES&#125;</span>    </span><br><span class="line">    pthread</span><br><span class="line">    rt</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./helloworld</span><br></pre></td></tr></table></figure>

<p>screen snapshot like this:</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180108163402269-37644849.png" alt="qt demo window"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://wiki.qt.io/Install_Qt_5_on_Ubuntu">Install_Qt_5_on_Ubuntu</a></li>
<li><a href="http://sourcedigit.com/20623-how-to-install-qt-creator-on-ubuntu-16-04/">install-qt-creator-on-ubuntu-16-04</a></li>
<li><a href="https://www.ics.com/blog/getting-started-qt-and-qt-creator-linux">getting-started-qt-and-qt-creator-linux</a></li>
<li><a href="https://stackoverflow.com/questions/17106315/failed-to-load-platform-plugin-xcb-while-launching-qt5-app-on-linux-without">failed-to-load-platform-plugin-xcb</a></li>
<li><a href="https://lemirep.wordpress.com/2013/06/01/deploying-qt-applications-on-linux-and-windows-3/">deploying-qt-applications-on-linux-and-windows-3</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180108: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>qt</tag>
        <tag>qtcreator</tag>
        <tag>qt5</tag>
      </tags>
  </entry>
  <entry>
    <title>Part-2: Install and Configure VTK 8.1.0 from source with Qt5 on Ubuntu 16.04</title>
    <url>//blog/Guide-to-compile-VTK-with-Qt-on-Ubuntu/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/91842b71/">Part-1: Install and Configure Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/b901735e/"><strong>Part-2: Install and Configure VTK 8.1.0 from source with Qt5 on Ubuntu 16.04</strong></a></li>
<li><a href="https://kezunlin.me/post/137aa5fc/">Part-3: Install and Configure PCL 1.8.1 with vtk qt support on Ubuntu 16.04 from source</a></li>
<li><a href="https://kezunlin.me/post/2d809f92/">Part-4: Install and Configure PCL 1.8.1 with vtk qt support on windows 10 from source</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>qt: 5.7.0</li>
<li>qmake: 3.0</li>
<li>qtcreator: 3.5.1</li>
<li>vtk: 8.1.0  (from source)</li>
</ul>
<h3 id="install-qt57"><a href="#install-qt57" class="headerlink" title="install qt57"></a>install qt57</h3><p>see <a href="https://kezunlin.me/post/91842b71/"><strong>Part-1: Install and Configure Qt5 on Ubuntu 16.04</strong></a></p>
<blockquote>
<p>install qt57 and qtcreator.</p>
</blockquote>
<h3 id="install-vtk"><a href="#install-vtk" class="headerlink" title="install vtk"></a>install vtk</h3><h4 id="download-source"><a href="#download-source" class="headerlink" title="download source"></a>download source</h4><p>Download vtk source</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.vtk.org/files/release/8.1/VTK-8.1.0.tar.gz</span><br><span class="line">wget https://www.vtk.org/files/release/8.1/VTKData-8.1.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>integrate VTK with Qt for a pretty graphical user interface, we need to turn on some options.</p>
<h4 id="configure-vtk-with-qt"><a href="#configure-vtk-with-qt" class="headerlink" title="configure vtk with qt"></a>configure vtk with qt</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> VTK-8.1.0</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options:</p>
<pre><code>VTK_Group_Qt       ON
VTK_QT_VERSION     5 # default
QT5_DIR            /opt/qt/5.7/gcc_64/lib/cmake/Qt5

VTK_RENDERING_BACKEND OpenGL2 # default
BUILD_SHARED_LIBS  ON
CMAKE_BUILD_TYPE   Release
CMAKE_INSTALL_PREFIX /usr/local
</code></pre>
<blockquote>
<p>set <code>QT5_Dir</code> to <code>/opt/qt/5.7/gcc_64/lib/cmake/Qt5</code></p>
</blockquote>
<h4 id="download-MD5-VTKData"><a href="#download-MD5-VTKData" class="headerlink" title="download MD5 VTKData"></a>download MD5 VTKData</h4><p>tar <code>VTKData-8.1.0.tar.gz</code> and copy <code>MD5</code> to <code>VTK-8.1.0/build/ExternalData/Objects/MD5</code></p>
<h4 id="make-and-install"><a href="#make-and-install" class="headerlink" title="make and install"></a>make and install</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make -j8 install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>/usr/local/include/vtk-8.1</code> and <code>/usr/local/lib/cmake/vtk-8.1</code></p>
</blockquote>
<h4 id="install-QVTKWidget-plugin"><a href="#install-QVTKWidget-plugin" class="headerlink" title="install QVTKWidget plugin"></a>install QVTKWidget plugin</h4><ol>
<li>copy <code>libQVTKWidgetPlugin.so</code> to<br>install path: <code>/usr/lib/x86_64-linux-gnu/qt5/plugins/designer</code></li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build/lib</span><br><span class="line"><span class="built_in">ls</span> -al libQVTKWidgetPlugin.so </span><br><span class="line"></span><br><span class="line"><span class="comment"># copy to qt creator</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> libQVTKWidgetPlugin.so /usr/lib/x86_64-linux-gnu/qt5/plugins/designer </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>now list designer plugins</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/lib/x86_64-linux-gnu/qt5/plugins/designer</span><br><span class="line">libqquickwidget.so  libQVTKWidgetPlugin.so  libqwebview.so</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>if we start <code>qtcreator</code> we will see an <code>QVTKWidget</code> at the bottom of <code>VTK</code> container of <code>Design</code> layout.</li>
</ol>
<p><img src="https://kezunlin.me/images/posts/635233-20180109102359785-330027676.png" alt="QVTKWidget for qtcreator"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="VTK-Example"><a href="#VTK-Example" class="headerlink" title="VTK Example"></a>VTK Example</h2><h3 id="CylinderRenderingProperties-cpp"><a href="#CylinderRenderingProperties-cpp" class="headerlink" title="CylinderRenderingProperties.cpp"></a>CylinderRenderingProperties.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkCylinderSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkCamera.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span>, <span class="type">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// This creates a polygonal cylinder model with eight circumferential facets</span></span><br><span class="line">  <span class="comment">// (i.e, in practice an octagonal prism).</span></span><br><span class="line">  vtkSmartPointer&lt;vtkCylinderSource&gt; cylinder =</span><br><span class="line">    vtkSmartPointer&lt;vtkCylinderSource&gt;::<span class="built_in">New</span>();</span><br><span class="line">  cylinder-&gt;<span class="built_in">SetResolution</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The mapper is responsible for pushing the geometry into the graphics library.</span></span><br><span class="line">  <span class="comment">// It may also do color mapping, if scalars or other attributes are defined.</span></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; cylinderMapper =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::<span class="built_in">New</span>();</span><br><span class="line">  cylinderMapper-&gt;<span class="built_in">SetInputConnection</span>(cylinder-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The actor is a grouping mechanism: besides the geometry (mapper), it</span></span><br><span class="line">  <span class="comment">// also has a property, transformation matrix, and/or texture map.</span></span><br><span class="line">  <span class="comment">// Here we set its color and rotate it around the X and Y axes.</span></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; cylinderActor =</span><br><span class="line">    vtkSmartPointer&lt;vtkActor&gt;::<span class="built_in">New</span>();</span><br><span class="line">  cylinderActor-&gt;<span class="built_in">SetMapper</span>(cylinderMapper);</span><br><span class="line">  cylinderActor-&gt;<span class="built_in">GetProperty</span>()-&gt;<span class="built_in">SetColor</span>(<span class="number">1.0000</span>, <span class="number">0.3882</span>, <span class="number">0.2784</span>);</span><br><span class="line">  cylinderActor-&gt;<span class="built_in">RotateX</span>(<span class="number">30.0</span>);</span><br><span class="line">  cylinderActor-&gt;<span class="built_in">RotateY</span>(<span class="number">-45.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The renderer generates the image</span></span><br><span class="line">  <span class="comment">// which is then displayed on the render window.</span></span><br><span class="line">  <span class="comment">// It can be thought of as a scene to which the actor is added</span></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderer&gt;::<span class="built_in">New</span>();</span><br><span class="line">  renderer-&gt;<span class="built_in">AddActor</span>(cylinderActor);</span><br><span class="line">  renderer-&gt;<span class="built_in">SetBackground</span>(<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="comment">// Zoom in a little by accessing the camera and invoking its &quot;Zoom&quot; method.</span></span><br><span class="line">  renderer-&gt;<span class="built_in">ResetCamera</span>();</span><br><span class="line">  renderer-&gt;<span class="built_in">GetActiveCamera</span>()-&gt;<span class="built_in">Zoom</span>(<span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The render window is the actual GUI window</span></span><br><span class="line">  <span class="comment">// that appears on the computer screen</span></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindow&gt;::<span class="built_in">New</span>();</span><br><span class="line">  renderWindow-&gt;<span class="built_in">SetSize</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">  renderWindow-&gt;<span class="built_in">AddRenderer</span>(renderer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The render window interactor captures mouse events</span></span><br><span class="line">  <span class="comment">// and will perform appropriate camera or actor manipulation</span></span><br><span class="line">  <span class="comment">// depending on the nature of the events.</span></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::<span class="built_in">New</span>();</span><br><span class="line">  renderWindowInteractor-&gt;<span class="built_in">SetRenderWindow</span>(renderWindow);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This starts the event loop and as a side effect causes an initial render.</span></span><br><span class="line">  renderWindowInteractor-&gt;<span class="built_in">Start</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line"> </span><br><span class="line">PROJECT(CylinderRenderingProperties)</span><br><span class="line"> </span><br><span class="line">find_package(VTK REQUIRED)</span><br><span class="line">include(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/local/lib/cmake/vtk-8.0/UseVTK.cmake</span></span><br><span class="line"><span class="comment"># C:/Program Files/PCL 1.8.1/3rdParty/VTK/lib/cmake/vtk-8.0/UseVTK.cmake</span></span><br><span class="line"></span><br><span class="line">message ([vtk] <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable(CylinderRenderingProperties MACOSX_BUNDLE CylinderRenderingProperties.cxx )</span><br><span class="line"> </span><br><span class="line">target_link_libraries(CylinderRenderingProperties <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><pre><code class="bash">mkdir build &amp;&amp; cd build &amp;&amp; cmake-gui ..
make -j8
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.vtk.org/Wiki/VTK/Configure_and_Build">Configure_and_Build vtk</a></li>
<li><a href="https://www.vtk.org/Wiki/VTK/Tutorials/QtSetup">vtk qt setup</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180108: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>qt</tag>
        <tag>vtk</tag>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Build and Use user-defined QT Library</title>
    <url>//blog/guide-to-build-qt-library-and-use-in-another-project/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><h3 id="build-qt-library"><a href="#build-qt-library" class="headerlink" title="build qt library"></a>build qt library</h3><h4 id="QObject-class"><a href="#QObject-class" class="headerlink" title="QObject class"></a>QObject class</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">SHARED_EXPORT</span> CameraGrabber : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line">		signals :</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">sendFrameTrash</span><span class="params">(<span class="type">int</span> nCameraID, <span class="type">int</span> nTotalTrashFrame)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">CameraGrabber</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)  <span class="comment"># for qt SLOTS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;CAMERA_GRABBER_TARGET&#125;</span></span><br><span class="line">    CaptureProcess.h</span><br><span class="line">    CaptureProcess.cpp</span><br><span class="line">    FindGrabber.h </span><br><span class="line">    FindGrabber.cpp</span><br><span class="line">    CameraGrabber.h</span><br><span class="line">    CameraGrabber.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">qt5_use_modules</span>(<span class="variable">$&#123;CAMERA_GRABBER_TARGET&#125;</span> Core)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">$&#123;CAMERA_GRABBER_TARGET&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;CONGIF_TARGET&#125;</span></span><br><span class="line">    <span class="variable">$&#123;SAPERA_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>build and get <code>CameraGrabber.h</code>,<code>CameraGrabber.lib</code>,<code>CameraGrabber.dll</code> and <code>mocs_compilation.cpp</code>.</p>
<h3 id="use-qt-library"><a href="#use-qt-library" class="headerlink" title="use qt library"></a>use qt library</h3><h4 id="MainWindow-h"><a href="#MainWindow-h" class="headerlink" title="MainWindow.h"></a>MainWindow.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Sensor/CameraGrabber/CameraGrabber.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent=<span class="number">0</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CameraGrabber *graber = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="MainWindow-cpp"><a href="#MainWindow-cpp" class="headerlink" title="MainWindow.cpp"></a>MainWindow.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// moc cpp files for QObject</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;build/src/car/Sensor/CameraGrabber/MySensorCameraGrabber_autogen/mocs_compilation.cpp&quot;</span></span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h4 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)  <span class="comment"># for qt project</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># cpp,ui,resource files</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># cpp files</span></span><br><span class="line"><span class="comment">#aux_source_directory(. SRC_LIST)</span></span><br><span class="line"><span class="keyword">set</span>(SRC_LIST </span><br><span class="line">	main.cpp</span><br><span class="line">	mainwindow.h</span><br><span class="line">	mainwindow.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ui files</span></span><br><span class="line">qt5_wrap_ui(ui_FILES mainwindow.ui)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resource files</span></span><br><span class="line">qt5_add_resources(qrc_FILES resource.qrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;SRC_LIST&#125;</span> ) </span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;ui_FILES&#125;</span> ) </span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;qrc_FILES&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># generate and link target for point_cloud_viewer</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="keyword">set</span>(TARGET_NAME aa_qt_main)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;TARGET_NAME&#125;</span> <span class="variable">$&#123;SRC_LIST&#125;</span> <span class="variable">$&#123;ui_FILES&#125;</span> <span class="variable">$&#123;qrc_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link qt libraries</span></span><br><span class="line"><span class="keyword">qt5_use_modules</span>(<span class="variable">$&#123;TARGET_NAME&#125;</span> Core Widgets OpenGL Xml Gui Sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link vtk and pcl libraries</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;TARGET_NAME&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;CONFIG_TARGET&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;UTIL_TARGET&#125;</span>  </span><br><span class="line">    <span class="variable">$&#123;MODEL_TARGET&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;DETECTION_TARGET&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;DATABASE_TARGET&#125;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># sensor</span></span><br><span class="line">    <span class="variable">$&#123;CODER_LINKER_TARGET&#125;</span></span><br><span class="line">    <span class="variable">$&#123;RFID_TARGET&#125;</span></span><br><span class="line">    <span class="variable">$&#123;CAMERA_GRABBER_TARGET&#125;</span></span><br><span class="line">    <span class="variable">$&#123;LIDAR_GRABBER_TARGET&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;BOOST_THREAD_LIBRARY&#125;</span></span><br><span class="line">    <span class="variable">$&#123;GLOG_LIBRARIES&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$&#123;Boost_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;OpenCV_LIBS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;PCL_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>If we reference qt dll which use QObject,when we include header in <code>MainWindow.h</code>,we must also include <code>mocs_compilation.cpp</code> in <code>MainWindow.cpp</code>. Otherwise error will occur:</p>
<pre><code>error LNK2001: 无法解析的外部符号 &quot;public: static struct QMetaObject const staticMetaObject
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180409: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Network Configuration</title>
    <url>//blog/ubuntu-network-proxy/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><h3 id="network-proxy"><a href="#network-proxy" class="headerlink" title="network proxy"></a>network proxy</h3><ul>
<li>System wide: Network—&gt;None&#x2F;Manual</li>
<li>chrome: can not set</li>
<li>firefox: about:preferences—&gt; Network Proxy</li>
</ul>
<h3 id="eth0-config"><a href="#eth0-config" class="headerlink" title="eth0 config"></a>eth0 config</h3><h4 id="rename-xxx-to-eth0"><a href="#rename-xxx-to-eth0" class="headerlink" title="rename xxx to eth0"></a>rename xxx to eth0</h4><p>errors may occur:</p>
<pre><code>Ubuntu networking restart | cannot find device &#39;eth0&#39;
</code></pre>
<p>check eth0 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg | grep eth </span><br><span class="line"></span><br><span class="line">[5.715564] e1000 0000:02:01.0 eth0: (PCI:66MHz:32-bit) 00:0c:29:7d:bf:43</span><br><span class="line">[5.715573] e1000 0000:02:01.0 eth0: Intel(R) PRO/1000 Network Connection</span><br><span class="line">[5.719709] e1000 0000:02:01.0 ens33: renamed from eth0</span><br></pre></td></tr></table></figure>

<p>and we get <code>ens33</code> renamed from <code>eth0</code>, we need to change it back to <code>eth0</code>.</p>
<h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><ol>
<li><p>edit grub and update</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim /etc/default/grub</span><br><span class="line"></span><br><span class="line"><span class="comment">#GRUB_CMDLINE_LINUX=&quot;&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;net.ifnames=0 biosdevname=0&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>
</li>
<li><p>edit network interfaces <code>/etc/network/interfaces</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.77 </span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1 </span><br></pre></td></tr></table></figure>
</li>
<li><p>reboot </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot now</span><br></pre></td></tr></table></figure>
</li>
<li><p>check eth0</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ifconfig</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 80:fa:5b:47:92:8a  </span><br><span class="line">            inet addr:192.168.1.77  Bcast:192.168.1.255  Mask:255.255.255.0</span><br><span class="line">            UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">            RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">            TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">            collisions:0 txqueuelen:1000 </span><br><span class="line">            RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">            inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">            inet6 addr: ::1/128 Scope:Host</span><br><span class="line">            UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">            RX packets:4640 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">            TX packets:4640 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">            collisions:0 txqueuelen:1000 </span><br><span class="line">            RX bytes:865530 (865.5 KB)  TX bytes:865530 (865.5 KB)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>OK. Now we get <code>eth0</code>,<code>wlan0</code> properly set.</p>
<h2 id="ldconfig"><a href="#ldconfig" class="headerlink" title="ldconfig"></a>ldconfig</h2><h3 id="libEGL"><a href="#libEGL" class="headerlink" title="libEGL"></a>libEGL</h3><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ldconfig</span><br><span class="line"></span><br><span class="line">/sbin/ldconfig.real: /usr/lib/nvidia-384/libEGL.so.1 is not a symbolic <span class="built_in">link</span></span><br><span class="line">/sbin/ldconfig.real: /usr/lib32/nvidia-384/libEGL.so.1 is not a symbolic <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<h4 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib/nvidia-384/libEGL.so </span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib/nvidia-384/libEGL.so.1 </span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/nvidia-384/libEGL.so.384.90 /usr/lib/nvidia-384/libEGL.so.1</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/nvidia-384/libEGL.so.1 /usr/lib/nvidia-384/libEGL.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix lib32</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib32/nvidia-384/libEGL.so </span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib32/nvidia-384/libEGL.so.1 </span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib32/nvidia-384/libEGL.so.384.90 /usr/lib32/nvidia-384/libEGL.so.1</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib32/nvidia-384/libEGL.so.1 /usr/lib32/nvidia-384/libEGL.so</span><br></pre></td></tr></table></figure>

<p>list libEGL.so of lib</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al libEGL.so*</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root    33 1月   8 11:24 libEGL.so -&gt; /usr/lib/nvidia-384/libEGL.so.1</span><br><span class="line">lrwxrwxrwx 1 root root    38 1月   8 11:24 libEGL.so.1 -&gt; /usr/lib/nvidia-384/libEGL.so.384.90</span><br><span class="line">-rw-r--r-- 1 root root 15012 9月  20 08:44 libEGL.so.384.90</span><br></pre></td></tr></table></figure>

<p>list libEGL.so of lib32</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al libEGL.so*</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root    33 1月   8 11:24 libEGL.so -&gt; /usr/lib32/nvidia-384/libEGL.so.1</span><br><span class="line">lrwxrwxrwx 1 root root    38 1月   8 11:24 libEGL.so.1 -&gt; /usr/lib32/nvidia-384/libEGL.so.384.90</span><br><span class="line">-rw-r--r-- 1 root root 15012 9月  20 08:44 libEGL.so.384.90</span><br></pre></td></tr></table></figure>

<h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><pre><code class="bash">$ sudo ldconfig
</code></pre>
<p>OK.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://askubuntu.com/questions/900285/libegl-so-1-is-not-a-symbolic-link">libegl so not symbolic link</a></li>
<li><a href="http://www.iesensor.com/blog/2017/02/27/solved-fenics-2016-2-cpp-code-compiling-error-on-ubuntu-16-04/">libvtkRenderingPythonTkWidgets.so</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180108: created</li>
<li>20180222: add eth0 part.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Part-3: Install and Configure PCL 1.8.1 with vtk qt support on Ubuntu 16.04 from source</title>
    <url>//blog/Install-and-Configure-PCL-on-Ubuntu-16-04-from-source/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/91842b71/">Part-1: Install and Configure Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/b901735e/">Part-2: Install and Configure VTK 8.1.0 from source with Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/137aa5fc/"><strong>Part-3: Install and Configure PCL 1.8.1 with vtk qt support on Ubuntu 16.04 from source</strong></a></li>
<li><a href="https://kezunlin.me/post/2d809f92/">Part-4: Install and Configure PCL 1.8.1 with vtk qt support on windows 10 from source</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>qt: 5.7.0</li>
<li>qmake: 3.0</li>
<li>qtcreator: 3.5.1</li>
<li>vtk: 8.1.0 (source)</li>
<li>pcl :1.8.1 (source)</li>
</ul>
<h3 id="Setup-Prerequisites"><a href="#Setup-Prerequisites" class="headerlink" title="Setup Prerequisites"></a>Setup Prerequisites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install git build-essential linux-libc-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake cmake-gui </span><br><span class="line"><span class="built_in">sudo</span> apt-get install libusb-dev libudev-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install mpi-default-dev openmpi-bin openmpi-common </span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libpcap-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libflann1.8 libflann-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libopenni2-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libqhull7 libqhull-dev </span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install freeglut3-dev pkg-config</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libxmu-dev libxi-dev </span><br><span class="line"><span class="built_in">sudo</span> apt-get install mono-complete</span><br><span class="line"><span class="built_in">sudo</span> apt-get install openjdk-8-jdk openjdk-8-jre</span><br></pre></td></tr></table></figure>

<h4 id="metslib"><a href="#metslib" class="headerlink" title="metslib"></a>metslib</h4><p>for cmake error:</p>
<pre><code>no metslib found.
</code></pre>
<p>fix by</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.coin-or.org/download/source/metslib/metslib-0.5.3.tgz</span><br><span class="line">tar xzvf metslib-0.5.3.tgz</span><br><span class="line"><span class="built_in">cd</span> metslib-0.5.3</span><br><span class="line">./configure</span><br><span class="line">make </span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="glxinfo"><a href="#glxinfo" class="headerlink" title="glxinfo"></a>glxinfo</h4><p>install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mesa-utils</span><br><span class="line">glxinfo </span><br></pre></td></tr></table></figure>

<p>possible error</p>
<p>  X Error of failed request:  BadRequest (invalid request code or no such operation)<br>  Major opcode of failed request:  154 (GLX)<br>  Minor opcode of failed request:  34 ()<br>  Serial number of failed request:  34<br>  Current serial number in output stream:  33</p>
<p>fix,make sure NVIDIA drivers are installed successfully and no conflict.<br>check display OpenGL info</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ glxinfo | grep OpenGL</span><br><span class="line"></span><br><span class="line">OpenGL vendor string: NVIDIA Corporation</span><br><span class="line">OpenGL renderer string: GeForce GTX 1060/PCIe/SSE2</span><br><span class="line">OpenGL core profile version string: 4.5.0 NVIDIA 384.90</span><br><span class="line">OpenGL core profile shading language version string: 4.50 NVIDIA</span><br><span class="line">OpenGL core profile context flags: (none)</span><br><span class="line">OpenGL core profile profile mask: core profile</span><br><span class="line">OpenGL core profile extensions:</span><br><span class="line">OpenGL version string: 4.5.0 NVIDIA 384.90</span><br><span class="line">OpenGL shading language version string: 4.50 NVIDIA</span><br><span class="line">OpenGL context flags: (none)</span><br><span class="line">OpenGL profile mask: (none)</span><br><span class="line">OpenGL extensions:</span><br><span class="line">OpenGL ES profile version string: OpenGL ES 3.2 NVIDIA 384.90</span><br><span class="line">OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20</span><br><span class="line">OpenGL ES profile extensions:</span><br></pre></td></tr></table></figure>

<p>It means we use OpenGL version 4.5.0 for NVIDIA display.</p>
<p>Or by <code>nvidia-settings</code>, NVIDIA X Server Settings–&gt; X Screen 0 –&gt; OpenGL&#x2F;GLX Information.</p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pcl</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options</p>
<pre><code> QT_USE_FILE /home/kezunlin/program/pcl-1.8.1/build/use-qt5.cmake
 
 VTK_DIR  /usr/local/lib/cmake/vtk-8.1
 
 CMAKE_BUILD_TYPE       Release
 CMAKE_CONFIGURATION_TYPES Release
 CMAKE_INSTALL_PREFIX  /usr/local
 
 PCL_SHARED_LIBS       ON
 PCL_QT_VERSION        5
 PCL_ENABLE_SSE        ON
 
 Build_visualization ON
 Build_apps ON
 Build_examples OFF # error may occur
</code></pre>
<blockquote>
<p>Using CPU native flags for SSE optimization:  <code>-march=native</code></p>
</blockquote>
<p>make and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># it may take several minutes, wait ...</span></span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make -j8 install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>cmake install to <code>/usr/local/bin</code>, <code>/usr/local/lib/</code>, <code>/usr/local/include/pcl-1.8</code><br><code>PCL_DIR</code> will be <code>/usr/local/share/pcl-1.8</code></p>
</blockquote>
<h4 id="error-for-example"><a href="#error-for-example" class="headerlink" title="error for example"></a>error for example</h4><pre><code>/home/kezunlin/program/pcl-1.8.1/examples/segmentation/example_cpc_segmentation.cpp:493:17: error: ‘class vtkUnsignedCharArray’ has no member named ‘InsertNextTupleValue’
         colors-&gt;InsertNextTupleValue (color);
</code></pre>
<p>so cmake with options </p>
<pre><code>Build_examples OFF
</code></pre>
<h3 id="Test-pcl-viewer"><a href="#Test-pcl-viewer" class="headerlink" title="Test pcl_viewer"></a>Test pcl_viewer</h3><p>test <code>pcl_viewer</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/pcl_viewer ~/program/pcl-1.8.1/test/car6.pcd</span><br></pre></td></tr></table></figure>

<p>Success.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180105160000315-1719986018.png" alt="car"></p>
<blockquote>
<p>Tips: screen snapshot by <code>gnome-screenshot -a</code>.</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Cloud-Viewer"><a href="#Cloud-Viewer" class="headerlink" title="Cloud Viewer"></a>Cloud Viewer</h2><h3 id="cloud-viewer-cpp"><a href="#cloud-viewer-cpp" class="headerlink" title="cloud_viewer.cpp"></a>cloud_viewer.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> user_data;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> </span></span><br><span class="line"><span class="function"><span class="title">viewerOneOff</span> <span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    viewer.<span class="built_in">setBackgroundColor</span> (<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    pcl::PointXYZ o;</span><br><span class="line">    o.x = <span class="number">1.0</span>;</span><br><span class="line">    o.y = <span class="number">0</span>;</span><br><span class="line">    o.z = <span class="number">0</span>;</span><br><span class="line">    viewer.<span class="built_in">addSphere</span> (o, <span class="number">0.25</span>, <span class="string">&quot;sphere&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i only run once&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> </span></span><br><span class="line"><span class="function"><span class="title">viewerPsycho</span> <span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> count = <span class="number">0</span>;</span><br><span class="line">    std::stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;Once per viewer loop: &quot;</span> &lt;&lt; count++;</span><br><span class="line">    viewer.<span class="built_in">removeShape</span> (<span class="string">&quot;text&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    viewer.<span class="built_in">addText</span> (ss.<span class="built_in">str</span>(), <span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;text&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span> possible race condition here:</span></span><br><span class="line">    user_data++;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> </span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// car6 x y z</span></span><br><span class="line">    <span class="comment">// colored_cloud x y z rbga</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line">    pcl::io::<span class="built_in">loadPCDFile</span> (<span class="string">&quot;colored_cloud.pcd&quot;</span>, *cloud);</span><br><span class="line">    </span><br><span class="line">    pcl::<span class="function">visualization::CloudViewer <span class="title">viewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//blocks until the cloud is actually rendered</span></span><br><span class="line">    viewer.<span class="built_in">showCloud</span>(cloud);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//use the following functions to get access to the underlying more advanced/powerful</span></span><br><span class="line">    <span class="comment">//PCLVisualizer</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//This will only get called once</span></span><br><span class="line">    viewer.<span class="built_in">runOnVisualizationThreadOnce</span> (viewerOneOff);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//This will get called once per visualization iteration</span></span><br><span class="line">    viewer.<span class="built_in">runOnVisualizationThread</span> (viewerPsycho);</span><br><span class="line">    <span class="keyword">while</span> (!viewer.<span class="built_in">wasStopped</span> ())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//you can also do cool processing here</span></span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span> Note that this is running in a separate thread from viewerPsycho</span></span><br><span class="line">    <span class="comment">//and you should guard against race conditions yourself...</span></span><br><span class="line">    user_data++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http://pointclouds.org/documentation/tutorials/cloud_viewer.php</span></span><br><span class="line"><span class="comment">http://pointclouds.org/documentation/tutorials/pcl_visualizer.php</span></span><br><span class="line"><span class="comment">http://docs.pointclouds.org/1.7.0/structpcl_1_1_point_x_y_z_r_g_b.html</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8 FATAL_ERROR)</span><br><span class="line"></span><br><span class="line">project(cloud_viewer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set bin folder</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line">find_package(PCL 1.8.1 REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment">#message( [***] $&#123;PCL_INCLUDE_DIRS&#125;)</span></span><br><span class="line"><span class="comment">#message( [***] $&#123;PCL_LIBRARY_DIRS&#125;)</span></span><br><span class="line"><span class="comment">#message( [***] $&#123;PCL_DEFINITIONS&#125;)</span></span><br><span class="line"><span class="comment">#message( [***] $&#123;PCL_LIBRARIES&#125;)</span></span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable (cloud_viewer cloud_viewer.cpp)</span><br><span class="line">target_link_libraries (cloud_viewer <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="compile-1"><a href="#compile-1" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="run-demo"><a href="#run-demo" class="headerlink" title="run demo"></a>run demo</h3><p>bin folder</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree bin/</span><br><span class="line"></span><br><span class="line">bin/</span><br><span class="line">├── cloud_viewer</span><br><span class="line">└── colored_cloud.pcd</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure>

<p>run demo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./cloud_viewer</span><br></pre></td></tr></table></figure>

<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><blockquote>
<p>see <a href="https://kezunlin.me/post/2d809f92/">Part-4: Install and Configure PCL 1.8.1 with vtk qt support on windows 10 from source</a></p>
</blockquote>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/compiling_pcl_posix.php#compiling-pcl-posix">compile pcl on posix</a></li>
<li><a href="https://larrylisky.com/2016/11/03/point-cloud-library-on-ubuntu-16-04-lts/">pcl on ubuntu 16.04</a></li>
<li><a href="http://www.jfyang.com/wordpress/?cat=5">compile pcl on windows</a></li>
<li><a href="https://github.com/Microsoft/vcpkg/">vcpkg</a></li>
</ul>
<p>for windows</p>
<ul>
<li><a href="http://pointclouds.org/documentation/tutorials/compiling_pcl_windows.php">compiling pcl on windows</a></li>
<li><a href="https://github.com/PointCloudLibrary/pcl/blob/master/doc/tutorials/content/compiling_pcl_dependencies_windows.rst">compiling pcl dependencies on windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180105: created.</li>
<li>20180227: rewrite pcl compile part.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>qt</tag>
        <tag>vtk</tag>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>compile gtest on ubuntu 16.04</title>
    <url>//blog/gtest-quick-start-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/4a1427cf/">compile gtest on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/aca50ff8/">compile gtest on windows 10</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a><del>apt-get</del></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libgtest-dev</span><br><span class="line"><span class="built_in">cd</span> /usr/src/gtest <span class="comment"># only source files</span></span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/google/googletest.git</span><br><span class="line">wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> googletest</span><br><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br><span class="line">make -j8 </span><br><span class="line"><span class="built_in">sudo</span> make install </span><br></pre></td></tr></table></figure>

<p>options:</p>
<pre><code>BUILD_SHARED_LIBS=ON
</code></pre>
<blockquote>
<p>install to <code>/usr/local/</code></p>
</blockquote>
<ul>
<li>for static library, we use <code>libgtest.a</code></li>
<li>for shared library, use use <code>ligbtest.so</code>.</li>
</ul>
<h3 id="gtest-config-cmake"><a href="#gtest-config-cmake" class="headerlink" title="gtest-config.cmake"></a>gtest-config.cmake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find GTEST</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following variables are optionally searched for defaults</span></span><br><span class="line"><span class="comment">#  GTEST_ROOT_DIR:            Base directory where all GTEST components are found</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following are set after configuration is done:</span></span><br><span class="line"><span class="comment">#  GTEST_FOUND</span></span><br><span class="line"><span class="comment">#  GTEST_INCLUDE_DIRS</span></span><br><span class="line"><span class="comment">#  GTEST_LIBRARIES</span></span><br><span class="line"><span class="comment">#  GTEST_LIBRARYRARY_DIRS</span></span><br><span class="line"></span><br><span class="line">include(FindPackageHandleStandardArgs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(GTEST_ROOT_DIR <span class="string">&quot;&quot;</span> CACHE PATH <span class="string">&quot;Folder contains Google gtest&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    find_path(GTEST_INCLUDE_DIR gtest/gtest.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_path(GTEST_INCLUDE_DIR gtest/gtest.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">    find_library(GTEST_LIBRARY_RELEASE gtest</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line">    find_library(GTEST_MAIN_LIBRARY_RELEASE gtest_main</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line"></span><br><span class="line">    find_library(GTEST_LIBRARY_DEBUG gtest</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line">    find_library(GTEST_MAIN_LIBRARY_DEBUG gtest_main</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>(GTEST_LIBRARY optimized <span class="variable">$&#123;GTEST_LIBRARY_RELEASE&#125;</span> <span class="variable">$&#123;GTEST_MAIN_LIBRARY_RELEASE&#125;</span> debug <span class="variable">$&#123;GTEST_LIBRARY_DEBUG&#125;</span> <span class="variable">$&#123;GTEST_MAIN_LIBRARY_DEBUG&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_library(GTEST_LIBRARY gtest</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES lib lib64)</span><br><span class="line"></span><br><span class="line">    find_library(GTEST_MAIN_LIBRARY gtest_main</span><br><span class="line">        PATHS <span class="variable">$&#123;GTEST_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES lib lib64)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(GTEST DEFAULT_MSG GTEST_INCLUDE_DIR GTEST_LIBRARY GTEST_MAIN_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(GTEST_FOUND)</span><br><span class="line">  <span class="built_in">set</span>(GTEST_INCLUDE_DIRS <span class="variable">$&#123;GTEST_INCLUDE_DIR&#125;</span>)</span><br><span class="line">  <span class="built_in">set</span>(GTEST_LIBRARIES <span class="variable">$&#123;GTEST_LIBRARY&#125;</span> <span class="variable">$&#123;GTEST_MAIN_LIBRARY&#125;</span>)</span><br><span class="line">  message(STATUS <span class="string">&quot;Found gtest    (include: <span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>, library: <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span>)&quot;</span>)</span><br><span class="line">  mark_as_advanced(GTEST_ROOT_DIR GTEST_LIBRARY_RELEASE GTEST_LIBRARY_DEBUG</span><br><span class="line">                                GTEST_MAIN_LIBRARY_RELEASE GTEST_MAIN_LIBRARY_DEBUG</span><br><span class="line">                                 GTEST_LIBRARY GTEST_MAIN_LIBRARY GTEST_INCLUDE_DIR)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><h4 id="whattotest-cpp"><a href="#whattotest-cpp" class="headerlink" title="whattotest.cpp"></a>whattotest.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">squareRoot</span><span class="params">(<span class="type">const</span> <span class="type">double</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> b = <span class="built_in">sqrt</span>(a);</span><br><span class="line">    <span class="keyword">if</span>(b != b) &#123; <span class="comment">// nan check</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="tests-cpp"><a href="#tests-cpp" class="headerlink" title="tests.cpp"></a>tests.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;whattotest.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">TEST</span>(SquareRootTest, PositiveNos) &#123; </span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">6</span>, <span class="built_in">squareRoot</span>(<span class="number">36.0</span>));</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">18.0</span>, <span class="built_in">squareRoot</span>(<span class="number">324.0</span>));</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">25.4</span>, <span class="built_in">squareRoot</span>(<span class="number">645.16</span>));</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">0</span>, <span class="built_in">squareRoot</span>(<span class="number">0.0</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">TEST</span>(SquareRootTest, NegativeNos) &#123;</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">-1.0</span>, <span class="built_in">squareRoot</span>(<span class="number">-15.0</span>));</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="number">-1.0</span>, <span class="built_in">squareRoot</span>(<span class="number">-0.2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    testing::<span class="built_in">InitGoogleTest</span>(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RUN_ALL_TESTS</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.6)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC) </span><br><span class="line">	SET(GTEST_ROOT <span class="string">&quot;C:/Program Files/gtest&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># BOOST_THREAD_LIBRARY  /usr/lib/x86_64-linux-gnu/libpthread.so</span></span><br><span class="line">	MESSAGE( [Main] <span class="string">&quot; BOOST_THREAD_LIBRARY = <span class="variable">$&#123;BOOST_THREAD_LIBRARY&#125;</span>&quot;</span>)</span><br><span class="line">endif(MSVC)</span><br><span class="line"></span><br><span class="line">find_package(GTest REQUIRED) <span class="comment"># GTest 1.8.0</span></span><br><span class="line">include_directories(<span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Link runTests with what we want to test and the GTest and pthread library</span></span><br><span class="line">add_executable(runTests tests.cpp)</span><br><span class="line">target_link_libraries(runTests <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span> <span class="variable">$&#123;BOOST_THREAD_LIBRARY&#125;</span>)</span><br><span class="line"><span class="comment">#target_link_libraries(runTests gtest pthread)</span></span><br></pre></td></tr></table></figure>

<h3 id="compile-1"><a href="#compile-1" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./runTests</span><br></pre></td></tr></table></figure>

<h3 id="link-optional"><a href="#link-optional" class="headerlink" title="link (optional)"></a>link (optional)</h3><p>use <code>-lgtest</code> as linker flag and optionally, if you did not write your own test mainroutine, the explicit <code>-lgtest_main</code> flag.</p>
<p>gtest use pthread, so we need <code>-lpthread</code> as well.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-lgtest -lgtest_main -lpthread</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.eriksmistad.no/getting-started-with-google-test-on-ubuntu/">getting-started-with-google-test-on-ubuntu</a></li>
<li><a href="https://github.com/google/googletest.git">googletest repo</a></li>
<li><a href="https://github.com/bast/gtest-demo">gtest-demo</a></li>
<li><a href="https://stackoverflow.com/questions/13513905/how-to-setup-googletest-as-a-shared-library-on-linux">setup-googletest-as-a-shared-library-on-linux</a></li>
<li><a href="https://cmake.org/cmake/help/latest/module/FindGTest.html">FindGTest</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180118: created.</li>
<li>20180122: add shared library part.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>gtest</tag>
      </tags>
  </entry>
  <entry>
    <title>instal mysql cpp connector on ubuntu 16.04</title>
    <url>//blog/instal-mysql-cpp-connector-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-mysql-connector-for-c"><a href="#install-mysql-connector-for-c" class="headerlink" title="install mysql connector for c++"></a>install mysql connector for c++</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#root,xxxxxx</span></span><br><span class="line">mysql -uroot -pxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libboost-all-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-cache search libmysqlcppconn</span><br><span class="line"></span><br><span class="line">    <span class="comment">#libmysqlcppconn-dev - MySQL Connector for C++ (development files)</span></span><br><span class="line">    <span class="comment">#libmysqlcppconn7v5 - MySQL Connector for C++ (library)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libmysqlcppconn-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libmysqlcppconn7v5</span><br></pre></td></tr></table></figure>

<h3 id="link-in-CMakeLists-txt"><a href="#link-in-CMakeLists-txt" class="headerlink" title="link in CMakeLists.txt"></a>link in CMakeLists.txt</h3><p>target link with options <code>mysqlcppconn</code></p>
<p>eg.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target_link_libraries (Backend  </span><br><span class="line">    Config</span><br><span class="line">    Util</span><br><span class="line">    Model</span><br><span class="line">    mysqlcppconn</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h3 id="mysqlcppconn-config-cmake"><a href="#mysqlcppconn-config-cmake" class="headerlink" title="mysqlcppconn-config.cmake"></a>mysqlcppconn-config.cmake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find MYSQLCPPCONN</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following variables are optionally searched for defaults</span></span><br><span class="line"><span class="comment">#  MYSQLCPPCONN_ROOT_DIR:            Base directory where all MYSQLCPPCONN components are found</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following are set after configuration is done:</span></span><br><span class="line"><span class="comment">#  MYSQLCPPCONN_FOUND</span></span><br><span class="line"><span class="comment">#  MYSQLCPPCONN_INCLUDE_DIRS</span></span><br><span class="line"><span class="comment">#  MYSQLCPPCONN_LIBRARIES</span></span><br><span class="line"><span class="comment">#  MYSQLCPPCONN_LIBRARYRARY_DIRS</span></span><br><span class="line"></span><br><span class="line">include(FindPackageHandleStandardArgs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(MYSQLCPPCONN_ROOT_DIR <span class="string">&quot;&quot;</span> CACHE PATH <span class="string">&quot;Folder contains mysqlcppconn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    find_path(MYSQLCPPCONN_INCLUDE_DIR cppconn/driver.h</span><br><span class="line">        PATHS <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_path(MYSQLCPPCONN_INCLUDE_DIR cppconn/dirver.h</span><br><span class="line">        PATHS <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">    find_library(MYSQLCPPCONN_LIBRARY_RELEASE mysqlcppconn</span><br><span class="line">        PATHS <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line"></span><br><span class="line">    find_library(MYSQLCPPCONN_LIBRARY_DEBUG mysqlcppconn</span><br><span class="line">        PATHS <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>(MYSQLCPPCONN_LIBRARY optimized <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY_RELEASE&#125;</span> debug <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY_DEBUG&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_library(MYSQLCPPCONN_LIBRARY mysqlcppconn</span><br><span class="line">        PATHS <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES lib lib64)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(MYSQLCPPCONN DEFAULT_MSG MYSQLCPPCONN_INCLUDE_DIR MYSQLCPPCONN_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MYSQLCPPCONN_FOUND)</span><br><span class="line">  <span class="built_in">set</span>(MYSQLCPPCONN_INCLUDE_DIRS <span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIR&#125;</span>)</span><br><span class="line">  <span class="built_in">set</span>(MYSQLCPPCONN_LIBRARIES <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY&#125;</span>)</span><br><span class="line">  message(STATUS <span class="string">&quot;Found mysqlcppconn    (include: <span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIR&#125;</span>, library: <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY&#125;</span>)&quot;</span>)</span><br><span class="line">  mark_as_advanced(MYSQLCPPCONN_ROOT_DIR MYSQLCPPCONN_LIBRARY_RELEASE MYSQLCPPCONN_LIBRARY_DEBUG</span><br><span class="line">                                 MYSQLCPPCONN_LIBRARY MYSQLCPPCONN_INCLUDE_DIR)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><blockquote>
<p>for <code>find_package(MYSQLCPPCONN REQUIRED)</code> we copy user-defined <code>mysqlcppconn-config.cmake</code> to <code>/usr/lib/cmake/mysqlcppconn</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find_package(MYSQLCPPCONN REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">target_link_libraries (demo  <span class="variable">$&#123;MYSQLCPPCONN_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://aaronxu17.github.io/blog/install-mysql-connector/">install-mysql-connector</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2180118: created.</li>
<li>20180223: add mysqlcppconn-config.cmake.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysqlcppconn</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>using boost.date_time to get time in millisecond microsecond level</title>
    <url>//blog/using-boost-date-time-to-get-time-in-millisecond-microsecond-level/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="format-flags"><a href="#format-flags" class="headerlink" title="format flags"></a>format flags</h3><p><code>second millisecond microsecond nanosecond</code></p>
<p>Format Flags</p>
<ul>
<li><p>%f<br>Fractional seconds are always used, even when their value is zero<br>“13:15:16.000000”</p>
</li>
<li><p>%F *<br>Fractional seconds are used only when their value is not zero.<br>“13:15:16”<br>“05:04:03.001234”</p>
</li>
</ul>
<h3 id="to-string"><a href="#to-string" class="headerlink" title="to string"></a>to string</h3><p>The Boost.Date_Time library provides the following <code>ptime</code> to <code>std::string</code> conversions within the <code>boost::posix_time</code> namespace:</p>
<ul>
<li><code>std::string to_simple_string(ptime)</code> returns a string in the form of <code>YYYY-mmm-DD HH:MM:SS.fffffffff</code> format where mmm is the three character month name.</li>
<li><code>std::string to_iso_string(ptime)</code> returns a string in the form of <code>YYYYMMDDTHHMMSS,fffffffff</code> where T is the date-time separator.</li>
<li><code>std::string to_iso_extended_string(ptime)</code> returns a string in the form of <code>YYYY-MM-DDTHH:MM:SS,fffffffff</code> where T is the date-time separator.</li>
</ul>
<h3 id="date-time-cpp"><a href="#date-time-cpp" class="headerlink" title="date_time.cpp"></a>date_time.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/date_time/gregorian/gregorian.hpp&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost::posix_time;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost::gregorian;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">second millisecond microsecond nanosecond</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Format Flags</span></span><br><span class="line"><span class="comment">%f</span></span><br><span class="line"><span class="comment">Fractional seconds are always used, even when their value is zero</span></span><br><span class="line"><span class="comment">&quot;13:15:16.000000&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">%F *</span></span><br><span class="line"><span class="comment">Fractional seconds are used only when their value is not zero.</span></span><br><span class="line"><span class="comment">&quot;13:15:16&quot;</span></span><br><span class="line"><span class="comment">&quot;05:04:03.001234&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">ptime_2_str_name</span><span class="params">(boost::posix_time::ptime now)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="comment">// https://stackoverflow.com/questions/5018188/how-to-format-a-datetime-to-string-using-boost</span></span><br><span class="line">	<span class="comment">// for multiple use</span></span><br><span class="line">	</span><br><span class="line">	std::stringstream ss;</span><br><span class="line">	<span class="comment">//static std::locale loc(std::cout.getloc(), new time_facet(&quot;%Y%m%d_%H%M%S_%f&quot;));</span></span><br><span class="line">	<span class="function"><span class="type">static</span> std::locale <span class="title">loc</span><span class="params">(ss.getloc(), <span class="keyword">new</span> time_facet(<span class="string">&quot;%Y%m%d_%H%M%S_%f&quot;</span>))</span></span>;</span><br><span class="line">	ss.<span class="built_in">imbue</span>(loc);</span><br><span class="line">	ss &lt;&lt; now;</span><br><span class="line">	<span class="keyword">return</span> ss.<span class="built_in">str</span>(); <span class="comment">// 20180118_111501_208797</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">str_name_2_iso_format</span><span class="params">(std::string str_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	20180118_111501_208797 ===&gt; 20180118T111501.208797===&gt;from_iso_string===&gt;ptime</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">//std::cout &lt;&lt; &quot;time length: &quot; &lt;&lt; str_ptime.length() &lt;&lt; endl; //22</span></span><br><span class="line">	<span class="type">size_t</span> first_pos = str_name.<span class="built_in">find_first_of</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">	<span class="type">size_t</span> second_pos = str_name.<span class="built_in">find_last_of</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">	str_name[first_pos] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">	str_name[second_pos] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> str_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ptime <span class="title">from_name_string</span><span class="params">(std::string str_ptime)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	std::string str_iso_ptime = <span class="built_in">str_name_2_iso_format</span>(str_ptime);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">from_iso_string</span>(str_iso_ptime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ptime <span class="title">p1</span><span class="params">(date(<span class="number">2001</span>, <span class="number">1</span>, <span class="number">1</span>), hours(<span class="number">1</span>))</span></span>;               </span><br><span class="line">	ptime p2 = <span class="built_in">time_from_string</span>(<span class="string">&quot;2002-2-2 02:00:00.999888&quot;</span>); <span class="comment">// fraction part: 6 bits  </span></span><br><span class="line">	ptime p3 = <span class="built_in">from_iso_string</span>(<span class="string">&quot;20030303T031233.777666&quot;</span>);    <span class="comment">// fraction part: 6 bits   </span></span><br><span class="line">	ptime p4 = second_clock::<span class="built_in">local_time</span>();                   <span class="comment">// in second              </span></span><br><span class="line">	ptime p5 = microsec_clock::<span class="built_in">universal_time</span>();             <span class="comment">// UTC World time in millisecond,microsecond       </span></span><br><span class="line">	ptime p6 = microsec_clock::<span class="built_in">local_time</span>();                 <span class="comment">// UTC local time in millisecond,microsecond           </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; p1 &lt;&lt; endl</span><br><span class="line">		&lt;&lt; p2 &lt;&lt; endl</span><br><span class="line">		&lt;&lt; p3 &lt;&lt; endl</span><br><span class="line">		&lt;&lt; p4 &lt;&lt; endl</span><br><span class="line">		&lt;&lt; p5 &lt;&lt; endl</span><br><span class="line">		&lt;&lt; p6 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* date()</span></span><br><span class="line"><span class="comment">	* time_of_day()</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	date d = p<span class="number">1.</span><span class="built_in">date</span>();</span><br><span class="line">	time_duration td = p<span class="number">1.</span><span class="built_in">time_of_day</span>();</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; td &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">to_simple_string</span>(p2) &lt;&lt; endl               <span class="comment">//YYYY-mmm-DD HH:MM:SS.ffffff  </span></span><br><span class="line">		&lt;&lt; <span class="built_in">to_iso_string</span>(p2) &lt;&lt; endl               <span class="comment">//YYYYMMDDTHHMMSS,ffffff  </span></span><br><span class="line">		&lt;&lt; <span class="built_in">to_iso_extended_string</span>(p2) &lt;&lt; endl;     <span class="comment">//YYYY-MM-DDTHH:MM:SS,ffffff  </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;User defined format time:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	std::string str_name = <span class="built_in">ptime_2_str_name</span>(p6);</span><br><span class="line">	ptime p7 = <span class="built_in">from_name_string</span>(str_name);</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;                      p6: &quot;</span>&lt;&lt; <span class="built_in">ptime_2_str_name</span>(p6) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;p7 from String2Ptime(p6): &quot;</span>&lt;&lt; <span class="built_in">ptime_2_str_name</span>(p7) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Specify the minimum version for CMake</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Project&#x27;s name</span></span><br><span class="line"><span class="keyword">project</span>(date_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#find_package(Boost 1.5.8 REQUIRED COMPONENTS date_time system filesystem iostreams)</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.5</span>.<span class="number">8</span> REQUIRED COMPONENTS date_time)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;Boost_LIBRARY_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following folder will be included</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(date_time <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/date_time.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(date_time <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="run-and-output"><a href="#run-and-output" class="headerlink" title="run and output"></a>run and output</h2><p>compile program and run </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./date_time</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>2001-Jan-01 01:00:00
2002-Feb-02 02:00:00.999888
2003-Mar-03 03:12:33.777666
2018-Jan-18 15:20:47
2018-Jan-18 07:20:47.815415
2018-Jan-18 15:20:47.815419

2001-Jan-01, 01:00:00

2002-Feb-02 02:00:00.999888
20020202T020000.999888
2002-02-02T02:00:00.999888
User defined format time:
                      p6: 20180118_152047_815419
p7 from String2Ptime(p6): 20180118_152047_815419
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/5018188/how-to-format-a-datetime-to-string-using-boost">how-to-format-a-datetime-to-string-using-boost</a></li>
<li><a href="https://stackoverflow.com/questions/22975077/how-to-convert-a-boostptime-to-string">boost ptime tostring</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180118: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>using mysql datetime and datetime(6) with c++ and sql</title>
    <url>//blog/using-mysql-datetime-and-datetime-6-with-c/</url>
    <content><![CDATA[<h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p>no fraction part.</p>
<h3 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `camera` (\</span><br><span class="line">	`id`  <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,\</span><br><span class="line">	`camera_id`  tinyint(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,\</span><br><span class="line">	`create_time`  datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,\</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`id`)\</span><br><span class="line">	)\</span><br><span class="line">	ENGINE <span class="operator">=</span> InnoDB\</span><br><span class="line">	<span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci\</span><br><span class="line">	AUTO_INCREMENT <span class="operator">=</span> <span class="number">0</span>\</span><br><span class="line">	ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>\</span><br><span class="line">	;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>camera.CreateTime of type <code>time_t</code></p>
</blockquote>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h4 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> camera(camera_id,create_time) <span class="keyword">VALUES</span> ( ?,FROM_UNIXTIME(?) );</span><br></pre></td></tr></table></figure>

<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pstmt-&gt;<span class="built_in">setUInt64</span>(<span class="number">2</span>, camera.CreateTime); <span class="comment">// unix_ts(integer) ===&gt;mysql_ts(string)</span></span><br></pre></td></tr></table></figure>

<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><h4 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,camera_id,UNIX_TIMESTAMP(create_time) <span class="keyword">as</span> unix_ts <span class="keyword">FROM</span> camera;</span><br></pre></td></tr></table></figure>

<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">camera.CreateTime = res-&gt;<span class="built_in">getUInt64</span>(<span class="string">&quot;unix_ts&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="datetime-6"><a href="#datetime-6" class="headerlink" title="datetime(6)"></a>datetime(6)</h2><p>with fraction part: <code>millisecond</code>,<code>microsecond</code></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/fractional-seconds.html">fractional-seconds</a></li>
<li><a href="https://stackoverflow.com/questions/26299149/timestamp-with-a-millisecond-precision-how-to-save-them-in-mysql">timestamp-with-a-millisecond-precision-how-to-save-them-in-mysql</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180118: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>Part 2 Using Github Pages and Hexo to manage personal blogs on windows</title>
    <url>//blog/Part-2-Using-Github-Pages-and-Hexo-to-manage-personal-blogs-on-windows/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/98df88a8/">Part 1: Using Github Pages and Hexo to manage personal blogs on Ubuntu.</a></li>
<li><strong><a href="https://kezunlin.me/post/41448ed1/">Part 2: Using Github Pages and Hexo to manage personal blogs on windows.</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-node"><a href="#install-node" class="headerlink" title="install node"></a>install node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi</span><br></pre></td></tr></table></figure>

<p>start node installer and install node,npm to windows.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v </span><br><span class="line">v8.9.4</span><br><span class="line"></span><br><span class="line">npm -v </span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure>

<h3 id="install-hexo-global"><a href="#install-hexo-global" class="headerlink" title="install hexo global"></a>install hexo global</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="clone-create-your-blog"><a href="#clone-create-your-blog" class="headerlink" title="clone&#x2F;create your blog"></a>clone&#x2F;create your blog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@xxxx/blog.git </span><br><span class="line"><span class="comment"># or create your blog</span></span><br></pre></td></tr></table></figure>

<h3 id="install-hexo-packages"><a href="#install-hexo-packages" class="headerlink" title="install hexo packages"></a>install hexo packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog </span><br><span class="line"><span class="built_in">ls</span> package.json</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.4.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-abbrlink&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-admin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-search&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-neat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-wordcount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>install packages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save</span><br><span class="line">cnpm update --save</span><br></pre></td></tr></table></figure>

<h3 id="start-hexo"><a href="#start-hexo" class="headerlink" title="start hexo"></a>start hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>and visit </p>
<ul>
<li><a href="http://localhost:4000/">http://localhost:4000/</a> for view site; </li>
<li><a href="http://localhost:4000/admin">http://localhost:4000/admin</a> for writing posts.</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/98df88a8/">Part 1: Using Github Pages and Hexo to manage personal blogs on Ubuntu.</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180122: created.</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-next</tag>
        <tag>nodejs</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>compile cmake from source on ubuntu and write your own user defined FindXXX.cmake</title>
    <url>//blog/cmake-with-user-defined-entry/</url>
    <content><![CDATA[<h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line">wget http://www.cmake.org/files/v3.2/cmake-3.2.2.tar.gz</span><br><span class="line">tar xf cmake-3.2.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.2.2</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> cmake</span><br><span class="line"><span class="comment">#/usr/local/bin/cmake</span></span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure>

<blockquote>
<p>or by <code>apt-get -y install cmake </code></p>
</blockquote>
<h2 id="User-defined-cmake"><a href="#User-defined-cmake" class="headerlink" title="User defined cmake"></a>User defined cmake</h2><ul>
<li><code>FindXXX.cmake</code> in <code>CMAKE_MODULE_PATH</code></li>
<li><code>xxx-config.cmake</code> in <code>CMAKE_PREFIX_PATH</code></li>
</ul>
<h3 id="cmake-default-package"><a href="#cmake-default-package" class="headerlink" title="cmake default package"></a>cmake default package</h3><h4 id="FindXXX-cmake"><a href="#FindXXX-cmake" class="headerlink" title="FindXXX.cmake"></a>FindXXX.cmake</h4><ol>
<li><p>use <code>find_package</code> to find default package with name <code>XXX</code></p>
</li>
<li><p>and cmake file <code>C:\Program Files\CMake\share\cmake-3.10\Modules\FindXXX.cmake</code> </p>
</li>
<li><p>use <code>$&#123;XXX_INCLUDE_DIRS&#125;</code> in include, and <code>$&#123;XXX_LIBRARIES&#125;</code> in libraries</p>
</li>
</ol>
<h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.5</span>.<span class="number">8</span> REQUIRED COMPONENTS date_time system filesystem)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span> <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="user-defined-package"><a href="#user-defined-package" class="headerlink" title="user-defined package"></a>user-defined package</h3><h4 id="xxx-config-cmake"><a href="#xxx-config-cmake" class="headerlink" title="xxx-config.cmake"></a>xxx-config.cmake</h4><p>both names are ok.</p>
<ul>
<li>xxx-config.cmake</li>
<li>XXXConfig.cmake, e.g.  OpenCVConfig.cmake</li>
</ul>
<p>mysqlcppconn-config.cmake</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Name: &lt;Name&gt;Config.cmake  or &lt;lower name&gt;-config.cmake</span></span><br><span class="line"><span class="comment"># mysqlcppconn-config.cmake or MYSQLCPPCONNConfig.cmake  </span></span><br><span class="line"><span class="comment"># similar to OpenCVConfig.cmake   </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tips for MYSQLCPPCONN_ROOT_DIR</span></span><br><span class="line"><span class="comment"># use &quot;C:/Program Files/MySQL/Connector.C++ 1.1&quot;, otherwise cmake-gui can not auto find include and library</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_ROOT_DIR <span class="string">&quot;C:/Program Files/MySQL/Connector.C++ 1.1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(MYSQLCPPCONN_INCLUDE_DIR NAMES cppconn/driver.h PATHS <span class="string">&quot;$&#123;MYSQLCPPCONN_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(MYSQLCPPCONN_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(MYSQLCPPCONN_LIBRARY NAMES mysqlcppconn.lib PATHS <span class="string">&quot;$&#123;MYSQLCPPCONN_ROOT_DIR&#125;/lib/opt&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(MYSQLCPPCONN_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_INCLUDE_DIRS <span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_LIBRARIES <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmake entry will be saved to build/CMakeCache.txt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;mysqlcppconn-config.cmake &quot;</span> <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>halcon-config.cmake</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># halcon-config.cmake or HALCONConfig.cmake  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(HALCON_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(HALCON_ROOT_DIR E:/git/car/windows/lib/halcon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(HALCON_INCLUDE_DIR NAMES halconcpp/HalconCpp.h PATHS <span class="string">&quot;$&#123;HALCON_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(HALCON_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(HALCON_LIBRARY NAMES halconcpp.lib PATHS <span class="string">&quot;$&#123;HALCON_ROOT_DIR&#125;/lib/x64-win64&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(HALCON_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(HALCON_INCLUDE_DIRS <span class="variable">$&#123;HALCON_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(HALCON_LIBRARIES <span class="variable">$&#123;HALCON_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;halcon-config.cmake &quot;</span> <span class="variable">$&#123;HALCON_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="usage-1"><a href="#usage-1" class="headerlink" title="usage"></a>usage</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(HALCON REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HALCON_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(MYSQLCPPCONN REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;HALCON_LIBRARIES&#125;</span> <span class="variable">$&#123;MYSQLCPPCONN_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="cmake-gui-entry"><a href="#cmake-gui-entry" class="headerlink" title="cmake-gui entry"></a>cmake-gui entry</h4><ol>
<li>start cmake-gui, and at first,we should set</li>
</ol>
<ul>
<li><code>HALCON_DIR</code> &#x3D; <code>E:/git/car/share/cmake-3.10/Modules</code> </li>
<li><code>MYSQLCPPCONN_DIR</code> &#x3D; <code>E:/git/car/share/cmake-3.10/Modules</code></li>
</ul>
<ol start="2">
<li>then configure</li>
</ol>
<ul>
<li><code>HALCON_INCLUDE_DIR</code> and <code>HALCON_LIBRARY</code> will be found.</li>
<li><code>MYSQLCPPCONN_INCLUDE_DIR</code> and <code>MYSQLCPPCONN_LIBRARY</code> will be found.</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20180122172154084-46926416.png" alt="cmake-gui user defined entry"></p>
<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="execute-process"><a href="#execute-process" class="headerlink" title="execute_process"></a>execute_process</h3><p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">execute_process</span>(</span><br><span class="line">    <span class="keyword">COMMAND</span> bash <span class="string">&quot;-c&quot;</span> <span class="string">&quot;echo -n hello | sed &#x27;s/hello/world/;&#x27;&quot;</span> </span><br><span class="line">    OUTPUT_VARIABLE VARIABLE</span><br><span class="line">)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; VARIABLE = $&#123;VARIABLE&#125;&quot;</span>) <span class="comment"># world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">execute_process</span>(</span><br><span class="line">    <span class="keyword">COMMAND</span> bash <span class="string">&quot;-c&quot;</span> <span class="string">&quot;echo -n $(uname -p)&quot;</span> </span><br><span class="line">    OUTPUT_VARIABLE ARCH</span><br><span class="line">)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; ARCH = $&#123;ARCH&#125;&quot;</span>) <span class="comment"># aarch64 x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># glib   header only</span></span><br><span class="line"><span class="keyword">set</span>(GLIB_INCLUDE_DIRS <span class="string">&quot;/usr/include/glib-2.0/&quot;</span>) <span class="comment"># glib.h </span></span><br><span class="line"><span class="keyword">set</span>(GLIBCONFIG_INCLUDE_DIRS <span class="string">&quot;/usr/lib/$&#123;ARCH&#125;-linux-gnu/glib-2.0/include/&quot;</span>) <span class="comment"># glibconfig.h </span></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; GLIB_INCLUDE_DIRS = $&#123;GLIB_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; GLIBCONFIG_INCLUDE_DIRS = $&#123;GLIBCONFIG_INCLUDE_DIRS&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="PIC-error"><a href="#PIC-error" class="headerlink" title="PIC error"></a>PIC error</h3><p>error</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ld: /usr/local/lib/libdlib.a(test_for_odr_violations.cpp.o): relocation R_X86_64_32 against `.bss<span class="string">&#x27; can not be used when making a shared object; recompile with -fPIC</span></span><br><span class="line"><span class="string">/usr/local/lib/libdlib.a: error adding symbols: Bad value</span></span><br><span class="line"><span class="string">collect2: error: ld returned 1 exit status</span></span><br></pre></td></tr></table></figure>

<p>solution</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span>) <span class="comment"># release</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/35689501/cmakes-execute-process-and-arbitrary-shell-scripts">cmakes-execute-process-and-arbitrary-shell-scripts</a></li>
<li><a href="https://askubuntu.com/questions/610291/how-to-install-cmake-3-2-on-ubuntu-14-04">how-to-install-cmake-3-2-on-ubuntu-14-04</a></li>
<li><a href="https://stackoverflow.com/questions/8474582/multiple-library-cmakelists-txt">multiple-library-cmakelists-txt</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180122: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>Part-4: Install PCL with vtk qt support on windows 10</title>
    <url>//blog/compile-and-install-pcl-from-source-on-windows/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/91842b71/">Part-1: Install and Configure Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/b901735e/">Part-2: Install and Configure VTK 8.1.0 from source with Qt5 on Ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/137aa5fc/">Part-3: Install and Configure PCL 1.8.1 with vtk qt support on Ubuntu 16.04 from source</a></li>
<li><a href="https://kezunlin.me/post/2d809f92/"><strong>Part-4: Install and Configure PCL 1.8.1 with vtk qt support on windows 10 from source</strong></a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>Tips</p>
<blockquote>
<p>we’d better to use SSD to compile source code instead HDD. So put source code in C folder on windows.<br>use multiple processor to compile with <code>/MP</code> options.</p>
</blockquote>
<h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h3><h4 id="software"><a href="#software" class="headerlink" title="software"></a>software</h4><ul>
<li>vs: vs2015 installer</li>
<li>qt: <a href="http://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.7/5.7.1/qt-opensource-windows-x86-msvc2015_64-5.7.1.exe">http://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.7/5.7.1/qt-opensource-windows-x86-msvc2015_64-5.7.1.exe</a></li>
<li>qt vs tools: <a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/qt-vs-tools-msvc2015-2.1.1.vsix">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/qt-vs-tools-msvc2015-2.1.1.vsix</a></li>
<li>pcl installer: <a href="https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.8.1/PCL-1.8.1-AllInOne-msvc2015-win64.exe">https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.8.1/PCL-1.8.1-AllInOne-msvc2015-win64.exe</a></li>
<li>vtk source:    <a href="https://www.vtk.org/files/release/8.1/VTK-8.1.0.zip">https://www.vtk.org/files/release/8.1/VTK-8.1.0.zip</a></li>
<li>vtk data:     <a href="https://www.vtk.org/files/release/8.1/VTKData-8.1.0.zip">https://www.vtk.org/files/release/8.1/VTKData-8.1.0.zip</a></li>
<li>pcl source:    <a href="https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.1.zip">https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.1.zip</a></li>
</ul>
<p>download </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.vtk.org/files/release/8.1/VTK-8.1.0.zip</span><br><span class="line">wget https://www.vtk.org/files/release/8.1/VTKData-8.1.0.zip</span><br><span class="line">wget https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.1.zip</span><br></pre></td></tr></table></figure>

<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><pre><code>window: 10
qt: 5.7.1
qmake: 3.0 based on Qt 5.7.1
qtcreator: 4.2.0 based on Qt 5.7.1

qt-vs-tools: 2.2.1 
cmake/gui: 3.10.0

vtk: 8.1.0 (source)
vtk data: 8.1.0
pcl: 1.8.1 (source)

$ qmake -v
QMake version 3.0
Using Qt version 5.7.1 in C:/Qt/Qt5.7.1/5.7/msvc2015_64/lib

$ qtcreator -version
Qt Creator 4.2.0 based on Qt 5.7.1

$ cmake -version
cmake version 3.10.0
</code></pre>
<h4 id="install-vs2015"><a href="#install-vs2015" class="headerlink" title="install vs2015"></a>install vs2015</h4><p>skip.</p>
<h4 id="configure-vs2015-with-admin"><a href="#configure-vs2015-with-admin" class="headerlink" title="configure vs2015 with admin"></a>configure vs2015 with admin</h4><p>when we compile pcl by vs2015 and install to folder <code>C:/Program Files/PCL</code> , we need administrative priviledges.<br>follow steps：</p>
<pre><code>cmd+r 
regeidt
HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers

# new string entry
key: C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe
value: ~ RUNASADMIN
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180211194409045-927426521.png" alt="vs2015 regedit for runasadmin"></p>
<h4 id="install-qt"><a href="#install-qt" class="headerlink" title="install qt"></a>install qt</h4><p>install qt to path <code>C:\Qt\Qt5.7.1</code></p>
<p>add the following to system path.</p>
<pre><code>C:\Qt\Qt5.7.1\5.7\msvc2015_64\bin
C:\Qt\Qt5.7.1\Tools\QtCreator\bin
</code></pre>
<h4 id="install-qt-vs-tools"><a href="#install-qt-vs-tools" class="headerlink" title="install qt-vs-tools"></a>install qt-vs-tools</h4><h5 id="online-install-by-vs2015"><a href="#online-install-by-vs2015" class="headerlink" title="online install by vs2015"></a>online install by vs2015</h5><p>start vs2015, install <code>Qt Visual Sutido Tools</code> by:</p>
<pre><code>Tools---&gt; Extensions and Update... ---&gt; online search qt ---&gt; install Qt Visual Sutido Tools ---&gt; OK
</code></pre>
<p>restart vs2015 and new menu <code>Qt VS Tools</code> will be added to VS Main menu.</p>
<h5 id="offline-install-by-vsix"><a href="#offline-install-by-vsix" class="headerlink" title="offline install by vsix"></a>offline install by vsix</h5><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/qt-vs-tools-msvc2015-2.1.1.vsix
</code></pre>
<p>double click <code>qt-vs-tools-msvc2015-2.1.1.vsix</code> and install.</p>
<h4 id="configure-qt-for-vs"><a href="#configure-qt-for-vs" class="headerlink" title="configure qt for vs"></a>configure qt for vs</h4><p>follow steps</p>
<pre><code>Qt VS Tools ---&gt; Qt Options ---&gt; Add name and path
</code></pre>
<p>Add qt path for vs2015 so that we can find <code>%PATH%\bin\qmake.exe</code></p>
<pre><code>Name: Qt 5.7.1
Path: C:\Qt\Qt5.7.1\5.7\msvc2015_64\
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180112145011910-995769793.png" alt="qt options"></p>
<h4 id="new-qt-project-from-vs"><a href="#new-qt-project-from-vs" class="headerlink" title="new qt project from vs"></a>new qt project from vs</h4><p>start vs2015, and new <code>Qt Gui Application</code>. </p>
<p><img src="https://kezunlin.me/images/posts/635233-20180112145039222-1499154536.png" alt="new qt gui application"></p>
<p>Compile and run first qt program.<br>Success. </p>
<h3 id="install-pcl-third-parties"><a href="#install-pcl-third-parties" class="headerlink" title="install pcl third parties"></a>install pcl third parties</h3><h4 id="install-pcl-by-installer"><a href="#install-pcl-by-installer" class="headerlink" title="install pcl by installer"></a>install pcl by installer</h4><p>install pcl to <code>C:\Program Files\PCL 1.8.1\</code></p>
<p>choose to install OpenNI2 to <code>C:\Program Files\PCL 1.8.1\3rdParty\OpenNI2\</code></p>
<p>this process will add 4 system env.</p>
<pre><code>PCL_ROOT          C:\Program Files\PCL 1.8.1
OPENNI2_INCLUDE64 C:\Program Files\PCL 1.8.1\3rdParty\OpenNI2\Include\
OPENNI2_LIB64     C:\Program Files\PCL 1.8.1\3rdParty\OpenNI2\Lib\ 
OPENNI2_REDIST64  C:\Program Files\PCL 1.8.1\3rdParty\OpenNI2\Redist\
</code></pre>
<h4 id="configure-env"><a href="#configure-env" class="headerlink" title="configure env"></a>configure env</h4><p>add env to <code>Path</code>.</p>
<pre><code>%PCL_ROOT\bin
%PCL_ROOT%\3rdParty\FLANN\bin
%PCL_ROOT%\3rdParty\OpenNI2\Redist
%PCL_ROOT%\3rdParty\OpenNI2\Tools
%PCL_ROOT%\3rdParty\Qhull\bin
%PCL_ROOT%\3rdParty\VTK\bin
</code></pre>
<h4 id="copy-winpap-package"><a href="#copy-winpap-package" class="headerlink" title="copy winpap package"></a>copy winpap package</h4><p>copy winpap to <code>C:\Program Files\PCL 1.8.1\3rdParty\</code>, and 3rdParty folder looks like this:</p>
<pre><code>$ ls -al

total 16
drwxr-xr-x 1 zunli 197609 0 1月  11 12:47 ./
drwxr-xr-x 1 zunli 197609 0 1月  11 08:03 ../
drwxr-xr-x 1 zunli 197609 0 1月  11 08:02 Boost/
drwxr-xr-x 1 zunli 197609 0 1月  11 08:01 Eigen/
drwxr-xr-x 1 zunli 197609 0 1月  11 08:02 FLANN/
drwxr-xr-x 1 zunli 197609 0 1月  11 08:04 OpenNI2/
drwxr-xr-x 1 zunli 197609 0 1月  11 08:02 Qhull/
drwxr-xr-x 1 zunli 197609 0 1月  11 08:03 VTK/
drwxr-xr-x 1 zunli 197609 0 1月  11 12:47 winpcap/
</code></pre>
<h2 id="compile-vtk"><a href="#compile-vtk" class="headerlink" title="compile vtk"></a>compile vtk</h2><h3 id="download-vtk-and-data"><a href="#download-vtk-and-data" class="headerlink" title="download vtk and data"></a>download vtk and data</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.vtk.org/files/release/8.1/VTK-8.1.0.zip</span><br><span class="line">wget https://www.vtk.org/files/release/8.1/VTKData-8.1.0.zip</span><br></pre></td></tr></table></figure>

<h3 id="configure-source"><a href="#configure-source" class="headerlink" title="configure source"></a>configure source</h3><p>we need to compile vtk to replace <code>C:\Program Files\PCL 1.8.1\3rdParty\VTK\</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:/compile/VTK-8.1.0</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>configure generator to <code>Visual Studio 14 2015 Win64</code> with options </p>
<pre><code>VTK_Group_Qt  ON
VTK_QT_VERSION     5  # by default 4
VTK_RENDERING_BACKEND OpenGL2 # by default OpenGL
Qt5_DIR  C:/Qt/Qt5.7.1/5.7/msvc2015_64/lib/cmake/Qt5

CMAKE_INSTALL_PREFIX  C:/Program Files/VTK  # by default
BUILD_SHARED_LIBS  ON
CMAKE_CONFIGURATION_TYPES Release # Release
CMAKE_CXX_FLAGS_RELEASE /MD /O2 /Ob2 /DNDEBUG /MP # for multiple processor
</code></pre>
<blockquote>
<p>unzip <code>VTKData-8.1.0.zip</code> and copy <code>MD5</code> to <code>VTK-8.1.0/build/ExternalData/Objects/MD5</code></p>
</blockquote>
<p>Detailed steps as follows: </p>
<ol>
<li><p>With VTK &#x3D; 8.1.0:</p>
<pre><code> VTK_Group_Qt  ON
</code></pre>
<p> configure again, and then <code>QT_QMAKE_EXECUTABLE</code> and <code>VTK_QT_VERSION</code>  will appear.</p>
</li>
<li><p>we need to change <code>VTK_QT_VERSION</code> from 4 to 5.</p>
<pre><code> VTK_QT_VERSION     5  # by default 4
</code></pre>
</li>
<li><p>change <code>VTK_RENDERING_BACKEND</code> from OpenGL to OpenGL2.</p>
<pre><code> VTK_RENDERING_BACKEND OpenGL2 # by default OpenGL
</code></pre>
</li>
<li><p>set install path <code>C:\Program Files\VTK\</code></p>
<pre><code> CMAKE_INSTALL_PREFIX  C:/Program Files/VTK  
</code></pre>
<blockquote>
<p>we need write privileges to install to <code>C:\Program Files\VTK\</code></p>
</blockquote>
</li>
<li><p>we should also notice <code>BUILD_SHARED_LIBS </code></p>
<pre><code> BUILD_SHARED_LIBS  ON
</code></pre>
</li>
<li><p>add <code>/MP</code> for multiple processor compile </p>
<pre><code> CMAKE_CXX_FLAGS_RELEASE /MD /O2 /Ob2 /DNDEBUG /MP # for multiple processor
 
 CMAKE_CXX_MP_FLAG ON
 CMAKE_CXX_MP_NUM_PROCESSORS 8
</code></pre>
</li>
<li><p>Configure</p>
</li>
</ol>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>If everything goes well, then generate <code>VTK.sln</code>.</p>
<p>Open <code>VTK.sln</code> in vs2015 and build with <code>Release X64</code>.</p>
<blockquote>
<p>NOTICE: this build process will take about 10 minutes.(10:35-10:45)</p>
</blockquote>
<h3 id="install-vtk"><a href="#install-vtk" class="headerlink" title="install vtk"></a>install vtk</h3><p>choose <code>INSTALL</code> and generate , and VTK will be installed to <code>C:\Program Files\VTK\</code>.</p>
<p>Notice for <code>QVTKWidgetPlugin</code> and copy dll and lib to <code>C:\Program Files\VTK\</code>.</p>
<ul>
<li>dll: copy <code>C:\compile\VTK-8.1.0\build\bin\Release\QVTKWidgetPlugin.dll</code> to <code>C:\Program Files\VTK\bin\QVTKWidgetPlugin.dll</code></li>
<li>lib:  copy <code>C:\compile\VTK-8.1.0\build\lib\Release\QVTKWidgetPlugin.lib</code>to <code>C:\Program Files\VTK\lib\QVTKWidgetPlugin.lib</code></li>
</ul>
<p>we should also notice that dll has been copied to <code>C:\Program Files\VTK\plugins\designer\QVTKWidgetPlugin.dll</code></p>
<h3 id="copy-vtk-to-pcl"><a href="#copy-vtk-to-pcl" class="headerlink" title="copy vtk to pcl"></a>copy vtk to pcl</h3><p>copy vtk from  <code>C:\Program Files\VTK\</code> to <code>C:/Program Files/PCL 1.8.1/3rdParty/VTK</code> to replace old one.</p>
<h3 id="install-QVTKWidgetPlugin"><a href="#install-QVTKWidgetPlugin" class="headerlink" title="install QVTKWidgetPlugin"></a>install QVTKWidgetPlugin</h3><p>copy <code>C:\Program Files\VTK\plugins\designer\QVTKWidgetPlugin.dll</code> to<br><code>C:\Qt\Qt5.7.1\5.7\msvc2015_64\plugins\designer</code></p>
<p>start vs2015 again, view <code>mainwindow.ui</code> in <code>Qt Designer</code>.</p>
<p>Now <code>QVTKWidget</code> will occur.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180112233204410-2114402383.png" alt="qvtkwidget_in_qt_designer"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="compile-pcl"><a href="#compile-pcl" class="headerlink" title="compile pcl"></a>compile pcl</h2><h3 id="3rdParty"><a href="#3rdParty" class="headerlink" title="3rdParty"></a>3rdParty</h3><p>install pcl to get 3rdparty libraries and copy to proper folder.</p>
<ul>
<li>Boost:  C:&#x2F;Boost&#x2F;include lib  version: 1.64        (auto find by cmake)</li>
<li>eigen3: C:&#x2F;Program Files&#x2F;Eigen&#x2F;eigen3, version: 3.3.4 (auto find by cmake)</li>
<li>FLANN:  C:&#x2F;Program Files&#x2F;FLANN&#x2F;include lib bin      (auto find by cmake)</li>
<li>OpenNI2: C:&#x2F;Program Files&#x2F;OpenNI2&#x2F;Include Lib Redist  (<strong>user input</strong>)</li>
<li>Qhull:  C:&#x2F;Program Files&#x2F;Qhull&#x2F;include lib bin      (auto find by cmake)</li>
<li>winpcap: C:&#x2F;Program Files&#x2F;winpcap&#x2F;Include Lib      (<strong>user input</strong>)</li>
</ul>
<p>cmake options </p>
<pre><code>OpenNI2 include: C:/Program Files/OpenNI2/Include
OpenNI2 LIBRARY: C:/Program Files/OpenNI2/Lib/OpenNI2.lib

pcap  include: C:/Program Files/winpcap/Include
pcap  library: C:/Program Files/winpcap/Lib/x64/wpcap.lib
</code></pre>
<h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cd c:/compile/pcl-<span class="number">1.8</span>.<span class="number">1</span></span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>QT_USE_FILE C:/compile/pcl-1.8.1/build/use-qt5.cmake
VTK_DIR  C:/Program Files/VTK/lib/cmake/vtk-8.1
CMAKE_INSTALL_PREFIX  C:/Program Files/PCL 

PCL_SHARED_LIBS       ON
PCL_QT_VERSION        5
PCL_ENABLE_SSE        ON

CMAKE_BUILD_TYPE       Release
CMAKE_CONFIGURATION_TYPES Release
CMAKE_INSTALL_PREFIX  C:/Program Files/PCL
CMAKE_CXX_FLAGS_RELEASE /MD /O2 /Ob2 /DNDEBUG /MP # for multiple processor

Build_visualization ON
Build_apps OFF
Build_examples OFF # error may occur

# Fix zlib and png
zlib include: C:/Program Files/VTK/include/vtk-8.1/vtkzlib
zlib library: C:/Program Files/VTK/lib/vtkzlib-8.1.lib

png include:  C:/Program Files/VTK/include/vtk-8.1/vtkpng
png library:  C:/Program Files/VTK/lib/vtkpng-8.1.lib
</code></pre>
<p>configure output </p>
<pre><code>code;arch=compute_53,code=sm_53;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61
...
Boost version: 1.64.0
Found the following Boost libraries:
  system
  filesystem
  thread
  date_time
  iostreams
  chrono
  atomic
  regex
DOXYGEN_FOUND 
HTML_HELP_COMPILER 
Found CPack generators: NSIS
The following subsystems will be built:
  common
  octree
  io
  kdtree
  search
  sample_consensus
  filters
  2d
  geometry
  features
  ml
  segmentation
  surface
  registration
  keypoints
  tracking
  recognition
  stereo
  tools
The following subsystems will not be built:
  visualization: Disabled manually.
  apps: Disabled: visualization missing.
  outofcore: Requires visualization.
  examples: Code examples are disabled by default.
  people: Requires visualization.
  simulation: Disabled: visualization missing.
  global_tests: No reason
Configuring done
</code></pre>
<p>OK. </p>
<h3 id="compile-1"><a href="#compile-1" class="headerlink" title="compile"></a>compile</h3><p>If everything goes well, then generate <code>PCL.sln</code></p>
<p>Open <code>PCL.sln</code> in vs2015 and build with <code>Release X64</code>.</p>
<p>NOTICE: this build process will take about 30 minutes.</p>
<h3 id="install-pcl"><a href="#install-pcl" class="headerlink" title="install pcl"></a>install pcl</h3><blockquote>
<p>by default install need administrator privilidges to write to <code>C:/Program Files/PCL/</code>.</p>
</blockquote>
<p>choose <code>INSTALL</code> and generate , and PCL will be installed to <code>C:/Program Files/PCL</code>.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="pcl-only"><a href="#pcl-only" class="headerlink" title="pcl only"></a>pcl only</h3><h4 id="pcd-write-cpp"><a href="#pcd-write-cpp" class="headerlink" title="pcd_write.cpp"></a>pcd_write.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill in the cloud data</span></span><br><span class="line">  cloud.width    = <span class="number">5</span>;</span><br><span class="line">  cloud.height   = <span class="number">1</span>;</span><br><span class="line">  cloud.is_dense = <span class="literal">false</span>;</span><br><span class="line">  cloud.points.<span class="built_in">resize</span> (cloud.width * cloud.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    cloud.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pcl::io::<span class="built_in">savePCDFileASCII</span> (<span class="string">&quot;test_pcd.pcd&quot;</span>, cloud);</span><br><span class="line">  std::cerr &lt;&lt; <span class="string">&quot;Saved &quot;</span> &lt;&lt; cloud.points.<span class="built_in">size</span> () &lt;&lt; <span class="string">&quot; data points to test_pcd.pcd.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud.points[i].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud.points[i].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud.points[i].z &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8 FATAL_ERROR)</span><br><span class="line">project(pcd_write_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set(PCL_DIR &quot;/path/to/PCLConfig.cmake&quot;)</span></span><br><span class="line"><span class="comment">#find_package(PCL 1.8.1 REQUIRED)</span></span><br><span class="line">find_package(PCL 1.8.1 REQUIRED COMPONENTS common io)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">message ([main] <span class="string">&quot;PCL_DIR = <span class="variable">$&#123;PCL_DIR&#125;</span>&quot;</span>)</span><br><span class="line">message ([main] <span class="string">&quot;PCL_FOUND = <span class="variable">$&#123;PCL_FOUND&#125;</span>&quot;</span>)</span><br><span class="line">message ([main] <span class="string">&quot;PCL_INCLUDE_DIRS = <span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line">message ([main] <span class="string">&quot;PCL_LIBRARIES = <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line">message ([main] <span class="string">&quot;PCL_COMMON_LIBRARIES = <span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line">message ([main] <span class="string">&quot;PCL_IO_LIBRARIES = <span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">add_executable(pcd_write_test pcd_write.cpp)</span><br><span class="line">target_link_libraries(pcd_write_test <span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span> <span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="run-demo"><a href="#run-demo" class="headerlink" title="run demo"></a>run demo</h4><p>compile to <code>pcd_write_test.exe</code> and run, errors may occur:</p>
<pre><code>pcd_write_test.exe: error while loading shared libraries: ?: cannot open shared object file: No such file or directory
</code></pre>
<p>we need to find out which dlls are imported by exe.</p>
<pre><code>wget http://www.dependencywalker.com/depends22_x64.zip
</code></pre>
<blockquote>
<p>Tips: use <code>dependency walker</code> to check which dlls are imported, and then copy dll to exe folder.<br>copy <code>pcl/bin/*.dll</code> and <code>vtk/bin/*.dll</code> to exe folder.</p>
</blockquote>
<p>run exe and output </p>
<pre><code>$ ./pcd_write_test.exe   

Saved 5 data points to test_pcd.pcd.
    1.28125 577.094 197.938
    828.125 599.031 491.375
    358.688 917.438 842.563
    764.5 178.281 879.531
    727.531 525.844 311.281
</code></pre>
<h4 id="cat-pcd"><a href="#cat-pcd" class="headerlink" title="cat pcd"></a>cat pcd</h4><pre><code>$ cat test_pcd.pcd    

# .PCD v0.7 - Point Cloud Data file format
VERSION 0.7
FIELDS x y z
SIZE 4 4 4
TYPE F F F
COUNT 1 1 1
WIDTH 5
HEIGHT 1
VIEWPOINT 0 0 0 1 0 0 0
POINTS 5
DATA ascii
1.28125 577.09375 197.9375
828.125 599.03125 491.375
358.6875 917.4375 842.5625
764.5 178.28125 879.53125
727.53125 525.84375 311.28125
</code></pre>
<p>create pcl project with vtk and qt support.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="pcl-vtk-qt-PointCloud-Viewer-RECOMMEND"><a href="#pcl-vtk-qt-PointCloud-Viewer-RECOMMEND" class="headerlink" title="pcl+vtk+qt PointCloud Viewer (RECOMMEND)"></a>pcl+vtk+qt PointCloud Viewer (RECOMMEND)</h3><p>This project use <code>QVTKWidgetPlugin</code> to display point cloud data.</p>
<ul>
<li>mainwindow.h</li>
<li>mainwindow.cpp</li>
<li>mainwindow.ui  (Contains QVTKWidgetPlugin)</li>
<li>main.cpp</li>
<li>CMakeLists.txt</li>
</ul>
<h4 id="mainwindow-h"><a href="#mainwindow-h" class="headerlink" title="mainwindow.h"></a>mainwindow.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PCL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZRGB PointT;</span><br><span class="line"><span class="keyword">typedef</span> pcl::PointCloud&lt;PointT&gt; PointCloudT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boost</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/math/special_functions/round.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonOK_clicked</span><span class="params">()</span></span>; <span class="comment">// method1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushButtonCancel_clicked</span><span class="params">()</span></span>; <span class="comment">// method2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	boost::shared_ptr&lt;pcl::visualization::PCLVisualizer&gt; viewer;</span><br><span class="line">	PointCloudT::Ptr cloud;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">initCloud</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">initialVtkWidget</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> red;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> green;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> blue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="mainwindow-cpp"><a href="#mainwindow-cpp" class="headerlink" title="mainwindow.cpp"></a>mainwindow.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// qt</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vtk</span></span><br><span class="line"><span class="comment">//#include &lt;vtkAutoInit.h&gt; </span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkRenderingOpenGL2);</span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkInteractionStyle);</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindow.h&gt;</span> <span class="comment">// must include</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pcl </span></span><br><span class="line"><span class="comment">//#include &lt;pcl/io/ply_io.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;pcl/io/pcd_io.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;pcl/filters/filter.h&gt;</span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;PCL viewer&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// init point cloud data</span></span><br><span class="line">	<span class="built_in">initCloud</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set up the QVTK window</span></span><br><span class="line">	<span class="built_in">initialVtkWidget</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// connect</span></span><br><span class="line">	<span class="built_in">connect</span>(ui-&gt;pushButtonCancel, <span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">pushButtonCancel_clicked</span>()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::initCloud</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Setup the cloud pointer</span></span><br><span class="line">	cloud.<span class="built_in">reset</span>(<span class="keyword">new</span> PointCloudT);</span><br><span class="line">	<span class="comment">// The number of points in the cloud</span></span><br><span class="line">	cloud-&gt;points.<span class="built_in">resize</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The default color</span></span><br><span class="line">	red = <span class="number">128</span>;</span><br><span class="line">	green = <span class="number">128</span>;</span><br><span class="line">	blue = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Fill the cloud with some points</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i].r = red;</span><br><span class="line">		cloud-&gt;points[i].g = green;</span><br><span class="line">		cloud-&gt;points[i].b = blue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::initialVtkWidget</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	viewer.<span class="built_in">reset</span>(<span class="keyword">new</span> pcl::visualization::<span class="built_in">PCLVisualizer</span>(<span class="string">&quot;viewer&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">	viewer-&gt;<span class="built_in">addPointCloud</span>(cloud, <span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">	viewer-&gt;<span class="built_in">resetCamera</span>();</span><br><span class="line"></span><br><span class="line">	ui-&gt;qvtkWidget-&gt;<span class="built_in">SetRenderWindow</span>(viewer-&gt;<span class="built_in">getRenderWindow</span>());</span><br><span class="line">	viewer-&gt;<span class="built_in">setupInteractor</span>(ui-&gt;qvtkWidget-&gt;<span class="built_in">GetInteractor</span>(), ui-&gt;qvtkWidget-&gt;<span class="built_in">GetRenderWindow</span>());</span><br><span class="line">	ui-&gt;qvtkWidget-&gt;<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonOK_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString text = ui-&gt;lineEditName-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;OK&quot;</span>, text);</span><br><span class="line">    ui-&gt;pushButtonOK-&gt;<span class="built_in">setText</span>( <span class="built_in">tr</span>(<span class="string">&quot;(OK. click me)&quot;</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::pushButtonCancel_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString text = ui-&gt;lineEditName-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Cancel&quot;</span>, text);</span><br><span class="line">    ui-&gt;pushButtonCancel-&gt;<span class="built_in">setText</span>( <span class="built_in">tr</span>(<span class="string">&quot;(Cancel.click me)&quot;</span>) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="mainwindow-ui"><a href="#mainwindow-ui" class="headerlink" title="mainwindow.ui"></a>mainwindow.ui</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ui version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">class</span>&gt;MainWindow&lt;/<span class="keyword">class</span>&gt;</span><br><span class="line"> &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMainWindow&quot;</span> name=<span class="string">&quot;MainWindow&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">   &lt;rect&gt;</span><br><span class="line">    &lt;x&gt;<span class="number">0</span>&lt;/x&gt;</span><br><span class="line">    &lt;y&gt;<span class="number">0</span>&lt;/y&gt;</span><br><span class="line">    &lt;width&gt;<span class="number">553</span>&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;<span class="number">372</span>&lt;/height&gt;</span><br><span class="line">   &lt;/rect&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;windowTitle&quot;</span>&gt;</span><br><span class="line">   &lt;string&gt;MainWindow&lt;/string&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;centralWidget&quot;</span>&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;labelName&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">     &lt;rect&gt;</span><br><span class="line">      &lt;x&gt;<span class="number">30</span>&lt;/x&gt;</span><br><span class="line">      &lt;y&gt;<span class="number">20</span>&lt;/y&gt;</span><br><span class="line">      &lt;width&gt;<span class="number">67</span>&lt;/width&gt;</span><br><span class="line">      &lt;height&gt;<span class="number">17</span>&lt;/height&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">     &lt;string&gt;Name&lt;/string&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonOK&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">     &lt;rect&gt;</span><br><span class="line">      &lt;x&gt;<span class="number">20</span>&lt;/x&gt;</span><br><span class="line">      &lt;y&gt;<span class="number">250</span>&lt;/y&gt;</span><br><span class="line">      &lt;width&gt;<span class="number">99</span>&lt;/width&gt;</span><br><span class="line">      &lt;height&gt;<span class="number">27</span>&lt;/height&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">     &lt;string&gt;OK&lt;/string&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;icon&quot;</span>&gt;</span><br><span class="line">     &lt;iconset resource=<span class="string">&quot;resource.qrc&quot;</span>&gt;</span><br><span class="line">      &lt;normaloff&gt;:/prefix/images/kezunlin_logo.png&lt;/normaloff&gt;:/prefix/images/kezunlin_logo.png&lt;/iconset&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLineEdit&quot;</span> name=<span class="string">&quot;lineEditName&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">     &lt;rect&gt;</span><br><span class="line">      &lt;x&gt;<span class="number">90</span>&lt;/x&gt;</span><br><span class="line">      &lt;y&gt;<span class="number">20</span>&lt;/y&gt;</span><br><span class="line">      &lt;width&gt;<span class="number">71</span>&lt;/width&gt;</span><br><span class="line">      &lt;height&gt;<span class="number">27</span>&lt;/height&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonCancel&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">     &lt;rect&gt;</span><br><span class="line">      &lt;x&gt;<span class="number">330</span>&lt;/x&gt;</span><br><span class="line">      &lt;y&gt;<span class="number">250</span>&lt;/y&gt;</span><br><span class="line">      &lt;width&gt;<span class="number">99</span>&lt;/width&gt;</span><br><span class="line">      &lt;height&gt;<span class="number">27</span>&lt;/height&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">     &lt;string&gt;Cancel&lt;/string&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QVTKWidget&quot;</span> name=<span class="string">&quot;qvtkWidget&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">     &lt;rect&gt;</span><br><span class="line">      &lt;x&gt;<span class="number">240</span>&lt;/x&gt;</span><br><span class="line">      &lt;y&gt;<span class="number">10</span>&lt;/y&gt;</span><br><span class="line">      &lt;width&gt;<span class="number">261</span>&lt;/width&gt;</span><br><span class="line">      &lt;height&gt;<span class="number">201</span>&lt;/height&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">  &lt;/widget&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMenuBar&quot;</span> name=<span class="string">&quot;menuBar&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">    &lt;rect&gt;</span><br><span class="line">     &lt;x&gt;<span class="number">0</span>&lt;/x&gt;</span><br><span class="line">     &lt;y&gt;<span class="number">0</span>&lt;/y&gt;</span><br><span class="line">     &lt;width&gt;<span class="number">553</span>&lt;/width&gt;</span><br><span class="line">     &lt;height&gt;<span class="number">25</span>&lt;/height&gt;</span><br><span class="line">    &lt;/rect&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMenu&quot;</span> name=<span class="string">&quot;menuHello_MainWIndow&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">     &lt;string&gt;File&lt;/string&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;addaction name=<span class="string">&quot;separator&quot;</span>/&gt;</span><br><span class="line">    &lt;addaction name=<span class="string">&quot;actionOpen&quot;</span>/&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMenu&quot;</span> name=<span class="string">&quot;menuHelp&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">     &lt;string&gt;Help&lt;/string&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;addaction name=<span class="string">&quot;actionHelp&quot;</span>/&gt;</span><br><span class="line">   &lt;/widget&gt;</span><br><span class="line">   &lt;addaction name=<span class="string">&quot;menuHello_MainWIndow&quot;</span>/&gt;</span><br><span class="line">   &lt;addaction name=<span class="string">&quot;menuHelp&quot;</span>/&gt;</span><br><span class="line">  &lt;/widget&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QToolBar&quot;</span> name=<span class="string">&quot;mainToolBar&quot;</span>&gt;</span><br><span class="line">   &lt;attribute name=<span class="string">&quot;toolBarArea&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">enum</span>&gt;TopToolBarArea&lt;/<span class="keyword">enum</span>&gt;</span><br><span class="line">   &lt;/attribute&gt;</span><br><span class="line">   &lt;attribute name=<span class="string">&quot;toolBarBreak&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">   &lt;/attribute&gt;</span><br><span class="line">  &lt;/widget&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QStatusBar&quot;</span> name=<span class="string">&quot;statusBar&quot;</span>/&gt;</span><br><span class="line">  &lt;action name=<span class="string">&quot;actionFile&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;string&gt;Open&lt;/string&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/action&gt;</span><br><span class="line">  &lt;action name=<span class="string">&quot;actionSave&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;string&gt;Save&lt;/string&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/action&gt;</span><br><span class="line">  &lt;action name=<span class="string">&quot;actionExit&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;string&gt;Exit&lt;/string&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/action&gt;</span><br><span class="line">  &lt;action name=<span class="string">&quot;actionHelp&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;string&gt;Help&lt;/string&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/action&gt;</span><br><span class="line">  &lt;action name=<span class="string">&quot;actionOpen&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;string&gt;Open&lt;/string&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/action&gt;</span><br><span class="line"> &lt;/widget&gt;</span><br><span class="line"> &lt;layoutdefault spacing=<span class="string">&quot;6&quot;</span> margin=<span class="string">&quot;11&quot;</span>/&gt;</span><br><span class="line"> &lt;customwidgets&gt;</span><br><span class="line">  &lt;customwidget&gt;</span><br><span class="line">   &lt;<span class="keyword">class</span>&gt;QVTKWidget&lt;/<span class="keyword">class</span>&gt;</span><br><span class="line">   &lt;extends&gt;QWidget&lt;/extends&gt;</span><br><span class="line">   &lt;header&gt;QVTKWidget.h&lt;/header&gt;</span><br><span class="line">  &lt;/customwidget&gt;</span><br><span class="line"> &lt;/customwidgets&gt;</span><br><span class="line"> &lt;resources&gt;</span><br><span class="line">  &lt;include location=<span class="string">&quot;resource.qrc&quot;</span>/&gt;</span><br><span class="line"> &lt;/resources&gt;</span><br><span class="line"> &lt;connections/&gt;</span><br><span class="line">&lt;/ui&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(point_cloud_viewer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find includes in corresponding build directories</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Instruct CMake to run moc automatically when needed.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GFLAGS REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">find_package</span>(GLOG REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GFLAGS_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GLOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add macro GLOG_NO_ABBREVIATED_SEVERITIES</span></span><br><span class="line"><span class="keyword">add_definitions</span>( -DGLOG_NO_ABBREVIATED_SEVERITIES ) </span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># PCL (include qt+vtk)</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># better not use $&#123;PCL_LIBRARIES&#125;, use what we need:</span></span><br><span class="line"><span class="comment"># e.g. $&#123;PCL_COMMON_LIBRARIES&#125; $&#123;PCL_VISUALIZATION_LIBRARIES&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find_package(PCL 1.8.1 REQUIRED)</span></span><br><span class="line"><span class="keyword">find_package</span>(PCL <span class="number">1.8</span>.<span class="number">1</span> REQUIRED COMPONENTS common io filters visualization)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="comment">#link_directories($&#123;PCL_LIBRARY_DIRS&#125;)</span></span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_DIR = $&#123;PCL_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_FOUND = $&#123;PCL_FOUND&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_INCLUDE_DIRS = $&#123;PCL_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_LIBRARY_DIRS = $&#123;PCL_LIBRARY_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_LIBRARIES = $&#123;PCL_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_COMMON_LIBRARIES = $&#123;PCL_COMMON_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_IO_LIBRARIES = $&#123;PCL_IO_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_FILTERS_LIBRARIES = $&#123;PCL_FILTERS_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> ([main] <span class="string">&quot;PCL_VISUALIZATION_LIBRARIES = $&#123;PCL_VISUALIZATION_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># Boost</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="keyword">set</span>(Boost_USE_RELEASE_LIBS <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(Boost_USE_MULTITHREAD <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.5</span>.<span class="number">8</span> REQUIRED COMPONENTS math_tr1)</span><br><span class="line"><span class="comment">#include_directories($&#123;Boost_INCLUDE_DIRS&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># cpp,ui,resource files</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># cpp files</span></span><br><span class="line"><span class="comment">#aux_source_directory(. SRC_LIST)</span></span><br><span class="line"><span class="keyword">set</span>(SRC_LIST </span><br><span class="line">	main.cpp</span><br><span class="line">	mainwindow.h</span><br><span class="line">	mainwindow.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ui files</span></span><br><span class="line">qt5_wrap_ui(ui_FILES mainwindow.ui)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resource files</span></span><br><span class="line">qt5_add_resources(qrc_FILES resource.qrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;SRC_LIST&#125;</span> ) <span class="comment"># ./main.cpp./mainwindow.cpp</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;ui_FILES&#125;</span> ) <span class="comment"># build/ui_mainwindow.h</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;qrc_FILES&#125;</span> )<span class="comment"># build/qrc_resource.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment"># generate and link target</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SRC_LIST&#125;</span> <span class="variable">$&#123;ui_FILES&#125;</span> <span class="variable">$&#123;qrc_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link qt libraries</span></span><br><span class="line"><span class="keyword">qt5_use_modules</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> Core Widgets OpenGL Xml Gui Sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link vtk and pcl libraries</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">	<span class="variable">$&#123;GLOG_LIBRARIES&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_FILTERS_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_VISUALIZATION_LIBRARIES&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#$&#123;PCL_LIBRARIES&#125; # lead to error when build target (no error now)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test_pcd</span></span><br><span class="line"><span class="keyword">add_executable</span>(test_pcd test_pcd.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(test_pcd</span><br><span class="line">	<span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_FILTERS_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_VISUALIZATION_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="snapshot"><a href="#snapshot" class="headerlink" title="snapshot"></a>snapshot</h4><pre><code>./point_cloud_viewer.exe
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180208210623795-1984024029.png" alt="Point Cloud Viewer for pcd file"></p>
<h4 id="errors"><a href="#errors" class="headerlink" title="errors"></a><del>errors</del></h4><p>when run example, errors may occur: (which has been fixed by now.)<br><img src="https://kezunlin.me/images/posts/635233-20180114210710582-1020157530.png" alt="vtkOutputWindow error: no overide found for &#39;vtkPolyDataMapper&#39;"></p>
<h3 id="fix-error"><a href="#fix-error" class="headerlink" title="fix error"></a>fix error</h3><p>fix pcl min,max conflict with windows.h macro</p>
<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><blockquote>
<p>C:\Boost\include\boost-1_64\boost\asio\detail\socket_types.hpp(37):#   include &lt;windows.h&gt;<br>we use boost which includes <code>&lt;windows.h&gt;</code> and import macro <code>min/max</code>.<br>in pcl, <code>std::numeric_limits&lt;int&gt;::max</code> conflict with <code>min/max</code>.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PointT&gt; <span class="function"><span class="type">static</span> std::string</span></span><br><span class="line"><span class="function"><span class="title">generateHeader</span> <span class="params">(<span class="type">const</span> pcl::PointCloud&lt;PointT&gt; &amp;cloud,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> <span class="type">int</span> nr_points = std::numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m = std::numeric_limits&lt;<span class="type">float</span>&gt;::<span class="built_in">max</span>();</span><br></pre></td></tr></table></figure>

<h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// method(1): put this befor pcl headers</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> max</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> min </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// method(2):</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOMINMAX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pcl headers</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000007125502">good pcl tutorials</a></li>
<li><a href="https://gist.github.com/UnaNancyOwen/59319050d53c137ca8f3#file-pcl1-8-0-md">Building PCL 1.7.2 with Visual Studio</a></li>
<li><a href="http://www.pointclouds.org/documentation/tutorials/compiling_pcl_windows.php">offical: compile pcl on windows</a></li>
<li><a href="http://www.pointclouds.org/documentation/tutorials/using_pcl_pcl_config.php#using-pcl-pcl-config">offical: using pcl example</a></li>
<li><a href="http://www.pointclouds.org/documentation/tutorials/writing_pcd.php#writing-pcd">offical: writing pcd</a></li>
<li><a href="http://pointclouds.org/documentation/tutorials/qt_visualizer.php">offical pcl with qt visualizer</a></li>
<li><a href="http://wiki.ros.org/pcl/Overview">offical: pcl with ros</a></li>
<li><a href="http://www.eaglevi.com/archives/27">install pcl by isstallers</a></li>
<li><a href="https://segmentfault.com/a/1190000012719850">pcl point cloud realtime viewer</a></li>
<li><a href="https://stackoverflow.com/questions/18642155/no-override-found-for-vtkpolydatamapper">no-override-found-for-vtkpolydatamappe</a></li>
<li><a href="https://www.vtk.org/Wiki/VTK/VTK_6_Migration/Factories_now_require_defines">VTK 6 Migration&#x2F;Factories now require defines</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180112: created.</li>
<li>20180208: add DependencyWalker,add pcl pcd demo, pcl+vtk+qt demo.</li>
<li>20180211: add vs2015 regedit for runasadmin.</li>
<li>20180301: change VTK-8.0.1 to VTK-8.1.0.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>qt</tag>
        <tag>vtk</tag>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>store fractional seconds in mysql with boost and c++</title>
    <url>//blog/guide-to-store-fractional-seconds-in-mysql-with-boost-and-c/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>for only storing seconds time_t in mysql with c++, see <a href="https://kezunlin.me/post/52a71f5d/">guide to store time_t with mysql cpp connector in c++</a>.</p>
<h3 id="fractional-second-part"><a href="#fractional-second-part" class="headerlink" title="fractional second part"></a>fractional second part</h3><p>From Mysql 5.6.4 then on，<code>date</code>,<code>datetime</code>,<code>timestamp</code> support <code>fractional second part</code> (fsp), with up to <strong>microseconds (6 digits) precision</strong>:</p>
<h4 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h4><p>To define a column that includes a <code>fractional seconds part</code>, use the syntax <code>type_name(fsp)</code>, where type_name is <code>TIME, DATETIME, or TIMESTAMP</code>, and fsp is the fractional seconds precision. For example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (t <span class="type">TIME</span>(<span class="number">3</span>), dt DATETIME(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<p>The fsp value, if given, must be in the range 0 to 6, by default is 0.</p>
<h4 id="rounding"><a href="#rounding" class="headerlink" title="rounding"></a>rounding</h4><p>Inserting a <code>TIME, DATE, or TIMESTAMP</code> value with a fractional seconds part into a column of the same type but <strong>having fewer fractional digits results in rounding</strong>, as shown in this example:</p>
<p>use time format <code>YYYY-MM-DD HH:MM:SS[.fraction]</code></p>
<p>insert </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mydb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> fractest ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> fractest( c1 <span class="type">TIME</span>(<span class="number">2</span>), c2 DATETIME(<span class="number">3</span>), c3 <span class="type">TIMESTAMP</span>(<span class="number">6</span>) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> fractest </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;17:51:04.777666&#x27;</span>, <span class="string">&#x27;2014-09-08 17:51:04.777666&#x27;</span>, <span class="string">&#x27;2014-09-08 17:51:04.777666&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>select </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> fractest;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> c1          <span class="operator">|</span> c2                      <span class="operator">|</span> c3                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">04.78</span> <span class="operator">|</span> <span class="number">2014</span><span class="number">-09</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">04.778</span> <span class="operator">|</span> <span class="number">2014</span><span class="number">-09</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">04.777666</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------------+----------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>No warning or error is given when such rounding occurs. </p>
<h4 id="how-to-generate-fsp-time"><a href="#how-to-generate-fsp-time" class="headerlink" title="how to generate fsp time"></a>how to generate fsp time</h4><p>Functions that take <strong>temporal arguments</strong> accept values with fractional seconds. Return values from <strong>temporal functions</strong> include fractional seconds as appropriate. </p>
<p>For example, <code>NOW()</code> with no argument returns the current date and time with no fractional part, but takes an optional argument from 0 to 6 to specify that the return value includes a fractional seconds part of that many digits.</p>
<p>now() or now(6)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> now();</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> now()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2018</span><span class="number">-01</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">58</span>:<span class="number">31</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> now(<span class="number">6</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br><span class="line"><span class="operator">|</span> now(<span class="number">6</span>)                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2018</span><span class="number">-01</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">58</span>:<span class="number">37.223305</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="store-and-select-with-c"><a href="#store-and-select-with-c" class="headerlink" title="store and select with c++"></a>store and select with c++</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><blockquote>
<p>we use <code>DATETIME(6)</code> in mysql to store fsp.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> fractest( create_time DATETIME(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><blockquote>
<p>both format are ok to insert to mysql,we use <code>to_iso_extended_string</code> in c++ code to get string <code>2014-09-08T17:51:04.777668</code>.</p>
</blockquote>
<p> sql </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#std::string to_iso_string(ptime)         : YYYYMMDDTHHMMSS,fffffffff      <span class="number">20180908</span>T175104<span class="number">.777668</span></span><br><span class="line">#std::string to_iso_extended_string(ptime): YYYY<span class="operator">-</span>MM<span class="operator">-</span>DDTHH:MM:SS,fffffffff  <span class="number">2014</span><span class="number">-09</span><span class="number">-08</span>T17:<span class="number">51</span>:<span class="number">04.77766</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> fractest <span class="keyword">VALUES</span> (<span class="string">&#x27;2014-09-08T17:51:04.777668&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>code </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># <span class="number">2014</span><span class="number">-0</span>9<span class="number">-0</span>8T17:<span class="number">51</span>:<span class="number">04.777668</span></span><br><span class="line">std::string iso_extended_string = boost::posix_time::<span class="built_in">to_iso_extended_string</span>(camera.CreateTime);</span><br><span class="line">pstmt-&gt;<span class="built_in">setString</span>(<span class="number">1</span>, iso_string);</span><br></pre></td></tr></table></figure>

<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><blockquote>
<p>we need to select datetime as string, because we must keep fsp,we use <code>concat(&quot;&quot;,create_time) as create_time</code> to get string time <code>2014-09-08 17:51:04.777668</code>, and then process with c++ to get boost ptime.</p>
</blockquote>
<p>sql </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">select</span> datetime <span class="keyword">as</span> string </span><br><span class="line"># (<span class="number">1</span>) concat(&quot;&quot;,create_time) <span class="keyword">as</span> create_time     [we can have fsp]</span><br><span class="line"># (<span class="number">2</span>) DATE_FORMAT(create_time,<span class="string">&#x27;%Y-%m-%d %h:%m:%s&#x27;</span>) <span class="keyword">AS</span> create_time  [we can <span class="keyword">not</span> have fsp]</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id, create_time,concat(&quot;&quot;,create_time) <span class="keyword">as</span> create_time <span class="keyword">from</span> camera <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>code </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string mysql_string = res-&gt;<span class="built_in">getString</span>(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line"><span class="comment">// 2014-09-08 17:51:04.777668 ===&gt; 2014-09-08T17:51:04.777668</span></span><br><span class="line">camera.CreateTime = Util::<span class="built_in">from_mysql_string</span>(mysql_string);</span><br></pre></td></tr></table></figure>

<h4 id="different-datetime-string"><a href="#different-datetime-string" class="headerlink" title="different datetime string"></a>different datetime string</h4><pre><code>filename_string 20180118_111501_208797 
iso_string      20180118T111501.208797  ===&gt; from_iso_string

mysql_string           2014-09-08 17:51:04.777668
ios_extended_string    2014-09-08T17:51:04.777668  ===&gt; from_iso_extended_string
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/fractional-seconds.html">offical mysql fractional-seconds</a></li>
<li><a href="https://www.cnblogs.com/ivictor/p/5028368.html">datetime vs timestamp</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180122: created.</li>
<li>20180214: add store and select with c++.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>boost</tag>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>store time_t with mysql cpp connector in c++</title>
    <url>//blog/guide-to-store-time-t-with-mysql-cpp-connector-in-c/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `camera` (\</span><br><span class="line">        `id`  <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,\</span><br><span class="line">        `camera_id`  tinyint(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,\</span><br><span class="line">        `create_time`  datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>camera.CreateTime of type in c++.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">time_t</span> CreateTime;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>time_t can at most contain seconds, if we want to get millisecond or microsecond, we can use boost.date_time.<br>see ref: <a href="https://kezunlin.me/post/107cbcbb/">using boost.date_time to get time in millisecond microsecond level</a></p>
</blockquote>
<p>in sql, we use <code>FROM_UNIXTIME</code> and <code>UNIX_TIMESTAMP</code> to insert and select <code>time_t</code> value.</p>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h4 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> camera(camera_id,create_time) <span class="keyword">VALUES</span> ( ?,FROM_UNIXTIME(?) );</span><br></pre></td></tr></table></figure>

<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pstmt-&gt;<span class="built_in">setUInt64</span>(<span class="number">2</span>, camera.CreateTime); <span class="comment">// unix_ts(integer) ===&gt;mysql_ts(string)</span></span><br></pre></td></tr></table></figure>

<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><h4 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,camera_id,UNIX_TIMESTAMP(create_time) <span class="keyword">as</span> unix_ts <span class="keyword">FROM</span> camera;</span><br></pre></td></tr></table></figure>

<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">camera.CreateTime = res-&gt;<span class="built_in">getUInt64</span>(<span class="string">&quot;unix_ts&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/d0fb133a/">instal mysql cpp connector on ubuntu 16.04</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180122: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysqlcppconn</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>how to implement singleton class in cpp</title>
    <url>//blog/singleton-class-and-usage-in-cpp/</url>
    <content><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><h3 id="what-singleton-solve"><a href="#what-singleton-solve" class="headerlink" title="what singleton solve?"></a>what singleton solve?</h3><blockquote>
<p>from <a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">stackoverflow here</a></p>
</blockquote>
<p>Singletons solve one (and only one) problem.</p>
<blockquote>
<p>Resource Contention.<br>If you have some resource that<br>(1) can only have a single instance, and<br>(2) you need to manage that single instance,<br>you need a singleton.</p>
</blockquote>
<p>There aren’t many examples. A log file is the big one. You don’t want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</p>
<p>It’s rare that you need a singleton. The reason they’re bad is that they feel like a global and they’re a fully paid up member of the GoF Design Patterns book.</p>
<p>When you think you need a global, you’re probably making a terrible design mistake.</p>
<h3 id="local-static-object"><a href="#local-static-object" class="headerlink" title="local static object"></a>local static object</h3><ul>
<li>see <a href="https://stackoverflow.com/questions/1008019/c-singleton-design-pattern">c-singleton-design-pattern</a></li>
</ul>
<p>Actually, in C++ preferred way is <strong>local static object</strong>.</p>
<h4 id="singleton-pure"><a href="#singleton-pure" class="headerlink" title="singleton pure"></a>singleton pure</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>(Singleton <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">	Singleton&amp; <span class="keyword">operator</span>=(Singleton <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton&amp; <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	  <span class="type">static</span> Singleton INSTANCE;</span><br><span class="line">	  <span class="keyword">return</span> INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="singleton-with-shared-ptr"><a href="#singleton-with-shared-ptr" class="headerlink" title="singleton with shared_ptr"></a>singleton with shared_ptr</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>(Singleton <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">	Singleton&amp; <span class="keyword">operator</span>=(Singleton <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">   </span><br><span class="line">	<span class="function"><span class="type">static</span> std::shared_ptr&lt;Singleton&gt; <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">static</span> std::shared_ptr&lt;Singleton&gt; s&#123;<span class="keyword">new</span> Singleton&#125;;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="singleton-usage"><a href="#singleton-usage" class="headerlink" title="singleton usage"></a>singleton usage</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DISALLOW_COPY(TypeName) \</span></span><br><span class="line"><span class="meta">	TypeName(const TypeName&amp;)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISALLOW_ASSIGN(TypeName) \</span></span><br><span class="line"><span class="meta">	TypeName&amp; operator=(const TypeName&amp;)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISALLOW_COPY_AND_ASSIGN(TypeName) \</span></span><br><span class="line"><span class="meta">	TypeName(const TypeName&amp;);               \</span></span><br><span class="line"><span class="meta">	TypeName&amp; operator=(const TypeName&amp;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> CSingleton &amp;<span class="title">GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">static</span> CSingleton instance;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;void CSingleton::DoSomething() called.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">CSingleton</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">DISALLOW_COPY_AND_ASSIGN</span>(CSingleton);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">CSingleton::<span class="built_in">GetInstance</span>().<span class="built_in">DoSomething</span>();	<span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">CSingleton&amp; singleton = CSingleton::<span class="built_in">GetInstance</span>(); <span class="comment">// OK with reference</span></span><br><span class="line">singleton.<span class="built_in">DoSomething</span>();</span><br><span class="line"></span><br><span class="line">CSingleton singleton = CSingleton::<span class="built_in">GetInstance</span>(); <span class="comment">// ERROR (copy constructor)</span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="config-h"><a href="#config-h" class="headerlink" title="config.h"></a>config.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Config&amp; <span class="title">GetInstance</span><span class="params">(std::string filename=<span class="string">&quot;./config.ini&quot;</span>)</span></span>;</span><br><span class="line">	~<span class="built_in">Config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Config</span>(std::string filename);</span><br><span class="line">	<span class="built_in">Config</span>(<span class="type">const</span> Config&amp; ref) &#123;&#125;</span><br><span class="line">	Config&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Config&amp; ref) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="config-cpp"><a href="#config-cpp" class="headerlink" title="config.cpp"></a>config.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">static config instance will only be created once by calling Config::Config,</span></span><br><span class="line"><span class="comment">when program exit,static variable will be destoryed by calling Config::~Config.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Config&amp; <span class="title">Config::GetInstance</span><span class="params">(std::string filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">static</span> Config <span class="title">instance</span><span class="params">(filename)</span></span>; </span><br><span class="line">	<span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Config::<span class="built_in">Config</span>(std::string filename)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[LOG] Config::Config count= &quot;</span>&lt;&lt;count &lt;&lt; std::endl;</span><br><span class="line">	<span class="comment">// load config from filename </span></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Config::~<span class="built_in">Config</span>()</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[LOG] Config::~Config count= &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mysqldb-cpp"><a href="#mysqldb-cpp" class="headerlink" title="mysqldb.cpp"></a>mysqldb.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MysqlDb::load_config</span><span class="params">(std::string filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mysql_connection = Config::<span class="built_in">GetInstance</span>(filename).MYSQL_CONNECTION; </span><br><span class="line">	<span class="keyword">this</span>-&gt;mysql_username = Config::<span class="built_in">GetInstance</span>(filename).MYSQL_USERNAME;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mysql_password = Config::<span class="built_in">GetInstance</span>(filename).MYSQL_PASSWORD;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mysql_database = Config::<span class="built_in">GetInstance</span>(filename).MYSQL_DATABASE;</span><br><span class="line">	<span class="keyword">this</span>-&gt;max_connection_pool_size = Config::<span class="built_in">GetInstance</span>(filename).MAX_CONNECTION_POOL_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>[c-singleton-vs-global-static-object](- <a href="https://stackoverflow.com/questions/1463707/c-singleton-vs-global-static-object">https://stackoverflow.com/questions/1463707/c-singleton-vs-global-static-object</a>)</li>
<li><a href="https://stackoverflow.com/questions/1008019/c-singleton-design-pattern">c-singleton-design-pattern</a><br>-<a href="http://www.programlife.net/cpp-singleton-memory-retrieve.html">cpp-singleton-memory-retrieve</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180122： created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>how to store image longblob with mysql cpp connector in c++</title>
    <url>//blog/guide-to-store-image-longblob-with-mysql-cpp-connector-in-c/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `camera` (\</span><br><span class="line">        `id`  <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,\</span><br><span class="line">        `camera_id`  tinyint(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,\</span><br><span class="line">        `image`  longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,\</span><br><span class="line">        `create_time`  datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>camera.Image of type in c++.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;<span class="type">char</span>&gt; Image;</span><br></pre></td></tr></table></figure>

<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h4 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> camera(camera_id, image) <span class="keyword">VALUES</span>(? , ? );</span><br></pre></td></tr></table></figure>

<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">membuf</span> : std::streambuf &#123;</span><br><span class="line">    <span class="built_in">membuf</span>(<span class="type">char</span>* base, std::<span class="type">size_t</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setg</span>(base, base, base + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get blob istream</span></span><br><span class="line"><span class="type">char</span> *buffer = camera.Image.<span class="built_in">get</span>();</span><br><span class="line"><span class="type">size_t</span> size = camera.ImageLength;</span><br><span class="line"><span class="function">membuf <span class="title">mbuf</span><span class="params">(buffer, size)</span></span>;</span><br><span class="line"><span class="function">std::istream <span class="title">blob</span><span class="params">(&amp;mbuf)</span></span>; <span class="comment">// must be local variable</span></span><br><span class="line"></span><br><span class="line">pstmt-&gt;<span class="built_in">setBlob</span>(<span class="number">6</span>, &amp;blob);</span><br></pre></td></tr></table></figure>

<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><h4 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, camera_id, image <span class="keyword">FROM</span> camera;</span><br></pre></td></tr></table></figure>

<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::istream *blob = res-&gt;<span class="built_in">getBlob</span>(<span class="string">&quot;image&quot;</span>);</span><br><span class="line"><span class="type">size_t</span> size = res-&gt;<span class="built_in">getUInt</span>(<span class="string">&quot;image_length&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> ptr_buffer = Util::<span class="built_in">get_buffer_from_stream</span>(blob, size);</span><br><span class="line"></span><br><span class="line">camera.Image = ptr_buffer;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/35042328/how-to-feed-binary-hex-literal-into-stdistream">membuf</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180123: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysqlcppconn</tag>
        <tag>mysql</tag>
        <tag>longblob</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql user guide on ubuntu 16.04 and windows 10</title>
    <url>//blog/mysql-user-guide-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Part-1-Ubuntu"><a href="#Part-1-Ubuntu" class="headerlink" title="Part-1: Ubuntu"></a>Part-1: Ubuntu</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mysql-server</span><br><span class="line"><span class="comment"># root,xxx</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -pxxx</span><br></pre></td></tr></table></figure>

<h3 id="allow-remote-access"><a href="#allow-remote-access" class="headerlink" title="allow remote access"></a>allow remote access</h3><h4 id="change-bind-address"><a href="#change-bind-address" class="headerlink" title="change bind-address"></a>change bind-address</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mysql</span><br><span class="line">grep -r <span class="string">&#x27;bind-address&#x27;</span> .</span><br><span class="line">./mysql.conf.d/mysqld.cnf:bind-address          = 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>change <code>bind-address</code> to <code>0.0.0.0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ./mysql.conf.d/mysqld.cnf</span><br><span class="line">bind-address          = 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">sed -i <span class="string">&#x27;s/127.0.0.1/0.0.0.0/g&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># restart</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h4 id="grant-users"><a href="#grant-users" class="headerlink" title="grant users"></a>grant users</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span> with grant option;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>check for users.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; <span class="keyword">select</span> user,host from user;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| root             | %         |</span><br><span class="line">| debian-sys-maint | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">| root             | localhost |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>OK. Now we can access mysql from remote machine.</p>
<h3 id="Test-connection"><a href="#Test-connection" class="headerlink" title="Test connection"></a>Test connection</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 -h 192.168.0.130</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Part-2-Windows"><a href="#Part-2-Windows" class="headerlink" title="Part-2: Windows"></a>Part-2: Windows</h2><h3 id="install-mysql-server-5-7"><a href="#install-mysql-server-5-7" class="headerlink" title="install mysql server 5.7"></a>install mysql server 5.7</h3><p>OK</p>
<h3 id="allow-remote-access-1"><a href="#allow-remote-access-1" class="headerlink" title="allow remote access"></a>allow remote access</h3><h4 id="grant-users-1"><a href="#grant-users-1" class="headerlink" title="grant users"></a>grant users</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span> with grant option;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"><span class="comment">#### close fireware</span></span><br><span class="line"></span><br><span class="line">close fireware and allow 3306 tcp connection.</span><br><span class="line"></span><br><span class="line"><span class="comment">### Test connection </span></span><br><span class="line">```bash</span><br><span class="line">mysql -uroot -p123456 -h 192.168.0.130</span><br></pre></td></tr></table></figure>

<p>or by mysql client.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/justasabc/guides/blob/master/mysql/mysql.ini">mysql guide</a></li>
<li><a href="https://www.cnblogs.com/linjiqin/p/5270938.html">mysql remote access</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180124: created.</li>
<li>20180308: add windows part.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>how to compile and install poco cpp library on windows</title>
    <url>//blog/compile-and-install-poco-cpp-library-on-windows/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/9587bb47/">how to compile and install poco cpp library on windows</a></strong></li>
<li><a href="https://kezunlin.me/post/281dd8cd/">how to compile and install poco cpp library on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pocoproject.org/releases/poco-1.8.1/poco-1.8.1.zip</span><br><span class="line">wget https://pocoproject.org/releases/poco-1.8.1/poco-1.8.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><h4 id="build-options"><a href="#build-options" class="headerlink" title="build options"></a>build options</h4><p>buildwin.cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="comment">rem Usage:</span></span><br><span class="line"><span class="comment">rem ------</span></span><br><span class="line"><span class="comment">rem buildwin VS_VERSION [ACTION] [LINKMODE] [CONFIGURATION] [PLATFORM] [SAMPLES] [TESTS] [TOOL]</span></span><br><span class="line"><span class="comment">rem VS_VERSION:    90|100|110|120|140|150</span></span><br><span class="line"><span class="comment">rem ACTION:        build|rebuild|clean</span></span><br><span class="line"><span class="comment">rem LINKMODE:      static_mt|static_md|shared|all</span></span><br><span class="line"><span class="comment">rem CONFIGURATION: release|debug|both</span></span><br><span class="line"><span class="comment">rem PLATFORM:      Win32|x64|WinCE|WEC2013</span></span><br><span class="line"><span class="comment">rem SAMPLES:       samples|nosamples</span></span><br><span class="line"><span class="comment">rem TESTS:         tests|notests</span></span><br><span class="line"><span class="comment">rem TOOL:          devenv|vcexpress|wdexpress|msbuild</span></span><br></pre></td></tr></table></figure>

<p>we choose to build with <code>visual studio 2015</code></p>
<p>build_vs140.cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">buildwin <span class="number">140</span> build shared release x64 samples</span><br></pre></td></tr></table></figure>

<h4 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build_vs140.cmd</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p><code>cmake-gui</code> and open <code>sln</code> to build with <code>release x64</code>and install to <code>C:/Program Files/Poco</code> so that <code>find_package(Poco REQURIED)</code> take effect.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> Poco</span><br><span class="line"></span><br><span class="line">bin  include  lib</span><br><span class="line"></span><br><span class="line">$ ll Poco/lib</span><br><span class="line"></span><br><span class="line">total 3.5M</span><br><span class="line">drwxr-xr-x 1 zunli zunli     0 Jan 25 07:39 cmake</span><br><span class="line">-rw-r--r-- 1 zunli zunli  1.5M Jan 25 06:59 PocoFoundation.lib</span><br><span class="line">-rw-r--r-- 1 zunli zunli  111K Jan 25 06:59 PocoJSON.lib</span><br><span class="line">-rw-r--r-- 1 zunli zunli 1007K Jan 25 07:00 PocoNet.lib</span><br><span class="line">-rw-r--r-- 1 zunli zunli  320K Jan 25 07:00 PocoUtil.lib</span><br><span class="line">-rw-r--r-- 1 zunli zunli  595K Jan 25 07:00 PocoXML.lib</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Poco-Example"><a href="#Poco-Example" class="headerlink" title="Poco Example"></a>Poco Example</h2><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (event_demo)</span><br><span class="line"><span class="keyword">enable_language</span>(C)</span><br><span class="line"><span class="keyword">enable_language</span>(CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Always include the source and build directories in the include path.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Poco REQUIRED COMPONENTS Foundation Util Net XML JSON)</span><br><span class="line"></span><br><span class="line"><span class="comment"># no Poco_INCLUDE_DIRS, we have to set by hand </span></span><br><span class="line"><span class="keyword">if</span>(MSVC) <span class="comment"># WIN32</span></span><br><span class="line">	<span class="keyword">SET</span>(Poco_INCLUDE_DIRS <span class="string">&quot;C:/Program Files/Poco/include&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="keyword">SET</span>(Poco_INCLUDE_DIRS <span class="string">&quot;/usr/local/include/Poco&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; Poco_INCLUDE_DIRS = $&#123;Poco_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; Poco_LIBRARIES = $&#123;Poco_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following folder will be included</span></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">    <span class="variable">$&#123;MY_SRC_INCLUDE&#125;</span>  </span><br><span class="line">	<span class="variable">$&#123;Poco_INCLUDE_DIRS&#125;</span> </span><br><span class="line">    )   </span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(event_demo event_demo.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(event_demo <span class="variable">$&#123;Poco_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Notice 1: <code>find_package(Poco REQUIRED COMPONENTS Foundation Util Net XML JSON)</code> and use <code>$&#123;Poco_INCLUDE_DIRS&#125;</code>, <code>$&#123;Poco_LIBRARIES&#125;</code>.</p>
</blockquote>
<blockquote>
<p>Notice 2: we have to set <code>SET(Poco_INCLUDE_DIRS &quot;C:/Program Files/Poco/include&quot;)</code> by hand.</p>
</blockquote>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><h4 id="event-demo-cpp"><a href="#event-demo-cpp" class="headerlink" title="event_demo.cpp"></a>event_demo.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/BasicEvent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Delegate.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::BasicEvent;</span><br><span class="line"><span class="keyword">using</span> Poco::Delegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Source</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BasicEvent&lt;<span class="type">int</span>&gt; theEvent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fireEvent</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">theEvent</span>(<span class="keyword">this</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onEvent</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* pSender, <span class="type">int</span>&amp; arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;onEvent: &quot;</span> &lt;&lt; arg &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Source source;</span><br><span class="line">    Target target;</span><br><span class="line"></span><br><span class="line">    source.theEvent += <span class="built_in">Delegate</span>&lt;Target, <span class="type">int</span>&gt;(</span><br><span class="line">        &amp;target, &amp;Target::onEvent);</span><br><span class="line"></span><br><span class="line">    source.<span class="built_in">fireEvent</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    source.theEvent -= <span class="built_in">Delegate</span>&lt;Target, <span class="type">int</span>&gt;(</span><br><span class="line">        &amp;target, &amp;Target::onEvent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="active-method"><a href="#active-method" class="headerlink" title="active method"></a>active method</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/ActiveMethod.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/ActiveResult.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::ActiveMethod;</span><br><span class="line"><span class="keyword">using</span> Poco::ActiveResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActiveAdder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">ActiveAdder</span>() : <span class="built_in">add</span>(<span class="keyword">this</span>, &amp;ActiveAdder::addImpl)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ActiveMethod&lt;<span class="type">int</span>, std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, ActiveAdder&gt; add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">addImpl</span><span class="params">(<span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> args.first + args.second;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ActiveAdder adder;</span><br><span class="line"></span><br><span class="line">	ActiveResult&lt;<span class="type">int</span>&gt; sum = adder.<span class="built_in">add</span>(std::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">	<span class="comment">// do other things</span></span><br><span class="line">	sum.<span class="built_in">wait</span>();</span><br><span class="line">	std::cout &lt;&lt; sum.<span class="built_in">data</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="http-server"><a href="#http-server" class="headerlink" title="http server"></a>http server</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPRequestHandler.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPRequestHandlerFactory.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPServerParams.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPServerRequest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPServerResponse.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/HTTPServerParams.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/ServerSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Timestamp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/DateTimeFormatter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/DateTimeFormat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Exception.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/ThreadPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/ServerApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/Option.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/OptionSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/HelpFormatter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::Net::ServerSocket;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPRequestHandler;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPRequestHandlerFactory;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPServer;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPServerRequest;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPServerResponse;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::HTTPServerParams;</span><br><span class="line"><span class="keyword">using</span> Poco::Timestamp;</span><br><span class="line"><span class="keyword">using</span> Poco::DateTimeFormatter;</span><br><span class="line"><span class="keyword">using</span> Poco::DateTimeFormat;</span><br><span class="line"><span class="keyword">using</span> Poco::ThreadPool;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::ServerApplication;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::Application;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::Option;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::OptionSet;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::OptionCallback;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::HelpFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeRequestHandler</span> : <span class="keyword">public</span> HTTPRequestHandler</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TimeRequestHandler</span>(<span class="type">const</span> std::string&amp; format) : _format(format)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handleRequest</span><span class="params">(HTTPServerRequest&amp; request,</span></span></span><br><span class="line"><span class="params"><span class="function">		HTTPServerResponse&amp; response)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;[LOG] Request from &quot;</span></span><br><span class="line">			+ request.<span class="built_in">clientAddress</span>().<span class="built_in">toString</span>());</span><br><span class="line"></span><br><span class="line">		Timestamp now;</span><br><span class="line">		<span class="function">std::string <span class="title">dt</span><span class="params">(DateTimeFormatter::format(now, _format))</span></span>;</span><br><span class="line"></span><br><span class="line">		response.<span class="built_in">setChunkedTransferEncoding</span>(<span class="literal">true</span>);</span><br><span class="line">		response.<span class="built_in">setContentType</span>(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">		std::ostream&amp; ostr = response.<span class="built_in">send</span>();</span><br><span class="line">		ostr &lt;&lt; <span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTPTimeServer powered by &quot;</span></span><br><span class="line">			<span class="string">&quot;POCO C++ Libraries&lt;/title&gt;&quot;</span>;</span><br><span class="line">		ostr &lt;&lt; <span class="string">&quot;&lt;meta http-equiv=\&quot;refresh\&quot; content=\&quot;1\&quot;&gt;&lt;/head&gt;&quot;</span>;</span><br><span class="line">		ostr &lt;&lt; <span class="string">&quot;&lt;body&gt;&lt;p style=\&quot;text-align: center; &quot;</span></span><br><span class="line">			<span class="string">&quot;font-size: 48px;\&quot;&gt;&quot;</span>;</span><br><span class="line">		ostr &lt;&lt; dt;</span><br><span class="line">		ostr &lt;&lt; <span class="string">&quot;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string _format;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeRequestHandlerFactory</span> : <span class="keyword">public</span> HTTPRequestHandlerFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TimeRequestHandlerFactory</span>(<span class="type">const</span> std::string&amp; format) :</span><br><span class="line">		_format(format)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">HTTPRequestHandler* <span class="title">createRequestHandler</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> HTTPServerRequest&amp; request)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (request.<span class="built_in">getURI</span>() == <span class="string">&quot;/&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TimeRequestHandler</span>(_format);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string _format;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPTimeServer</span> : <span class="keyword">public</span> Poco::Util::ServerApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">HTTPTimeServer</span>() : _helpRequested(<span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">HTTPTimeServer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">(Application&amp; self)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;[HTTPTimeServer] initialize port=9980 &quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">loadConfiguration</span>();</span><br><span class="line">		ServerApplication::<span class="built_in">initialize</span>(self);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">uninitialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;[HTTPTimeServer] uninitialize &quot;</span>);</span><br><span class="line"></span><br><span class="line">		ServerApplication::<span class="built_in">uninitialize</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">defineOptions</span><span class="params">(OptionSet&amp; options)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ServerApplication::<span class="built_in">defineOptions</span>(options);</span><br><span class="line"></span><br><span class="line">		options.<span class="built_in">addOption</span>(</span><br><span class="line">			<span class="built_in">Option</span>(<span class="string">&quot;help&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;display argument help information&quot;</span>)</span><br><span class="line">			.<span class="built_in">required</span>(<span class="literal">false</span>)</span><br><span class="line">			.<span class="built_in">repeatable</span>(<span class="literal">false</span>)</span><br><span class="line">			.<span class="built_in">callback</span>(<span class="built_in">OptionCallback</span>&lt;HTTPTimeServer&gt;(</span><br><span class="line">				<span class="keyword">this</span>, &amp;HTTPTimeServer::handleHelp)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handleHelp</span><span class="params">(<span class="type">const</span> std::string&amp; name,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> std::string&amp; value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="function">HelpFormatter <span class="title">helpFormatter</span><span class="params">(options())</span></span>;</span><br><span class="line">		helpFormatter.<span class="built_in">setCommand</span>(<span class="built_in">commandName</span>());</span><br><span class="line">		helpFormatter.<span class="built_in">setUsage</span>(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">		helpFormatter.<span class="built_in">setHeader</span>(</span><br><span class="line">			<span class="string">&quot;A web server that serves the current date and time.&quot;</span>);</span><br><span class="line">		helpFormatter.format(std::cout);</span><br><span class="line">		<span class="built_in">stopOptionsProcessing</span>();</span><br><span class="line">		_helpRequested = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">const</span> std::vector&lt;std::string&gt;&amp; args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;[HTTPTimeServer] main &quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!_helpRequested)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">unsigned</span> <span class="type">short</span> port = (<span class="type">unsigned</span> <span class="type">short</span>)</span><br><span class="line">				<span class="built_in">config</span>().<span class="built_in">getInt</span>(<span class="string">&quot;HTTPTimeServer.port&quot;</span>, <span class="number">9980</span>);</span><br><span class="line">			<span class="function">std::string <span class="title">format</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">				config().getString(<span class="string">&quot;HTTPTimeServer.format&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">					DateTimeFormat::SORTABLE_FORMAT))</span></span>;</span><br><span class="line"></span><br><span class="line">			<span class="function">ServerSocket <span class="title">svs</span><span class="params">(port)</span></span>;</span><br><span class="line">			<span class="function">HTTPServer <span class="title">srv</span><span class="params">(<span class="keyword">new</span> TimeRequestHandlerFactory(format),</span></span></span><br><span class="line"><span class="params"><span class="function">				svs, <span class="keyword">new</span> HTTPServerParams)</span></span>;</span><br><span class="line">			srv.<span class="built_in">start</span>();</span><br><span class="line">			<span class="built_in">waitForTerminationRequest</span>();</span><br><span class="line">			srv.<span class="built_in">stop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Application::EXIT_OK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">bool</span> _helpRequested;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HTTPTimeServer app;</span><br><span class="line">	<span class="keyword">return</span> app.<span class="built_in">run</span>(argc, argv);</span><br><span class="line">	<span class="comment">//visit http://localhost:9980</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tcp-server-client"><a href="#tcp-server-client" class="headerlink" title="tcp server&#x2F;client"></a>tcp server&#x2F;client</h3><h4 id="tcpserver"><a href="#tcpserver" class="headerlink" title="tcpserver"></a>tcpserver</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// TimeServer.cpp</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This sample demonstrates the TCPServer and ServerSocket classes.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.</span></span><br><span class="line"><span class="comment">// and Contributors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier:	BSL-1.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/TCPServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/TCPServerConnection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/TCPServerConnectionFactory.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/TCPServerParams.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/StreamSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/ServerSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Timestamp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/DateTimeFormatter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/DateTimeFormat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Exception.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/ServerApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/Option.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/OptionSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Util/HelpFormatter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::Net::ServerSocket;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::StreamSocket;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::TCPServerConnection;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::TCPServerConnectionFactory;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::TCPServer;</span><br><span class="line"><span class="keyword">using</span> Poco::Timestamp;</span><br><span class="line"><span class="keyword">using</span> Poco::DateTimeFormatter;</span><br><span class="line"><span class="keyword">using</span> Poco::DateTimeFormat;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::ServerApplication;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::Application;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::Option;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::OptionSet;</span><br><span class="line"><span class="keyword">using</span> Poco::Util::HelpFormatter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeServerConnection</span> : <span class="keyword">public</span> TCPServerConnection</span><br><span class="line">	<span class="comment">/// This class handles all client connections.</span></span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	<span class="comment">/// A string with the current date and time is sent back to the client.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TimeServerConnection</span>(<span class="type">const</span> StreamSocket&amp; s, <span class="type">const</span> std::string&amp; format) :</span><br><span class="line">		<span class="built_in">TCPServerConnection</span>(s),</span><br><span class="line">		_format(format)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;Request from &quot;</span> + <span class="keyword">this</span>-&gt;<span class="built_in">socket</span>().<span class="built_in">peerAddress</span>().<span class="built_in">toString</span>());</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			Timestamp now;</span><br><span class="line">			<span class="comment">//std::string dt(DateTimeFormatter::format(now, _format));</span></span><br><span class="line">			<span class="comment">//dt.append(&quot;\r\n&quot;);</span></span><br><span class="line">			<span class="function">std::string <span class="title">dt</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">			<span class="function">std::string <span class="title">info</span><span class="params">(<span class="string">&quot;sending:  [&quot;</span> + dt + <span class="string">&quot;] with length=&quot;</span>+std::to_string(dt.length()) )</span></span>;</span><br><span class="line">			app.<span class="built_in">logger</span>().<span class="built_in">information</span>(info);</span><br><span class="line">			<span class="built_in">socket</span>().<span class="built_in">sendBytes</span>(dt.<span class="built_in">data</span>(), (<span class="type">int</span>)dt.<span class="built_in">length</span>());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">catch</span> (Poco::Exception&amp; exc)</span><br><span class="line">		&#123;</span><br><span class="line">			app.<span class="built_in">logger</span>().<span class="built_in">log</span>(exc);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string _format;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeServerConnectionFactory</span> : <span class="keyword">public</span> TCPServerConnectionFactory</span><br><span class="line">	<span class="comment">/// A factory for TimeServerConnection.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TimeServerConnectionFactory</span>(<span class="type">const</span> std::string&amp; format) :</span><br><span class="line">		_format(format)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">TCPServerConnection* <span class="title">createConnection</span><span class="params">(<span class="type">const</span> StreamSocket&amp; socket)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TimeServerConnection</span>(socket, _format);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string _format;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeServer</span> : <span class="keyword">public</span> Poco::Util::ServerApplication</span><br><span class="line">	<span class="comment">/// The main application class.</span></span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	<span class="comment">/// This class handles command-line arguments and</span></span><br><span class="line">	<span class="comment">/// configuration files.</span></span><br><span class="line">	<span class="comment">/// Start the TimeServer executable with the help</span></span><br><span class="line">	<span class="comment">/// option (/help on Windows, --help on Unix) for</span></span><br><span class="line">	<span class="comment">/// the available command line options.</span></span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	<span class="comment">/// To use the sample configuration file (TimeServer.properties),</span></span><br><span class="line">	<span class="comment">/// copy the file to the directory where the TimeServer executable</span></span><br><span class="line">	<span class="comment">/// resides. If you start the debug version of the TimeServer</span></span><br><span class="line">	<span class="comment">/// (TimeServerd[.exe]), you must also create a copy of the configuration</span></span><br><span class="line">	<span class="comment">/// file named TimeServerd.properties. In the configuration file, you</span></span><br><span class="line">	<span class="comment">/// can specify the port on which the server is listening (default</span></span><br><span class="line">	<span class="comment">/// 9911) and the format of the date/time string sent back to the client.</span></span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	<span class="comment">/// To test the TimeServer you can use any telnet client (telnet localhost 9911).</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TimeServer</span>() : _helpRequested(<span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">TimeServer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">(Application&amp; self)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">loadConfiguration</span>(); <span class="comment">// load default configuration files, if present</span></span><br><span class="line">		ServerApplication::<span class="built_in">initialize</span>(self);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">uninitialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ServerApplication::<span class="built_in">uninitialize</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">defineOptions</span><span class="params">(OptionSet&amp; options)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ServerApplication::<span class="built_in">defineOptions</span>(options);</span><br><span class="line"></span><br><span class="line">		options.<span class="built_in">addOption</span>(</span><br><span class="line">			<span class="built_in">Option</span>(<span class="string">&quot;help&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;display help information on command line arguments&quot;</span>)</span><br><span class="line">			.<span class="built_in">required</span>(<span class="literal">false</span>)</span><br><span class="line">			.<span class="built_in">repeatable</span>(<span class="literal">false</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handleOption</span><span class="params">(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> std::string&amp; value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ServerApplication::<span class="built_in">handleOption</span>(name, value);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (name == <span class="string">&quot;help&quot;</span>)</span><br><span class="line">			_helpRequested = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">displayHelp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="function">HelpFormatter <span class="title">helpFormatter</span><span class="params">(options())</span></span>;</span><br><span class="line">		helpFormatter.<span class="built_in">setCommand</span>(<span class="built_in">commandName</span>());</span><br><span class="line">		helpFormatter.<span class="built_in">setUsage</span>(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">		helpFormatter.<span class="built_in">setHeader</span>(<span class="string">&quot;A server application that serves the current date and time.&quot;</span>);</span><br><span class="line">		helpFormatter.format(std::cout);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">const</span> std::vector&lt;std::string&gt;&amp; args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (_helpRequested)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">displayHelp</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// get parameters from configuration file</span></span><br><span class="line">			<span class="type">unsigned</span> <span class="type">short</span> port = (<span class="type">unsigned</span> <span class="type">short</span>)<span class="built_in">config</span>().<span class="built_in">getInt</span>(<span class="string">&quot;TimeServer.port&quot;</span>, <span class="number">9911</span>);</span><br><span class="line">			<span class="function">std::string <span class="title">format</span><span class="params">(config().getString(<span class="string">&quot;TimeServer.format&quot;</span>, DateTimeFormat::ISO8601_FORMAT))</span></span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// set-up a server socket</span></span><br><span class="line">			<span class="function">ServerSocket <span class="title">svs</span><span class="params">(port)</span></span>;</span><br><span class="line">			<span class="comment">// set-up a TCPServer instance</span></span><br><span class="line">			<span class="function">TCPServer <span class="title">srv</span><span class="params">(<span class="keyword">new</span> TimeServerConnectionFactory(format), svs)</span></span>;</span><br><span class="line">			<span class="comment">// start the TCPServer</span></span><br><span class="line">			srv.<span class="built_in">start</span>();</span><br><span class="line">			<span class="comment">// wait for CTRL-C or kill</span></span><br><span class="line">			<span class="built_in">waitForTerminationRequest</span>();</span><br><span class="line">			<span class="comment">// Stop the TCPServer</span></span><br><span class="line">			srv.<span class="built_in">stop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Application::EXIT_OK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">bool</span> _helpRequested;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TimeServer app; <span class="comment">// 9911</span></span><br><span class="line">	<span class="keyword">return</span> app.<span class="built_in">run</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>start tcpserver.</p>
<h4 id="tcpclient"><a href="#tcpclient" class="headerlink" title="tcpclient"></a>tcpclient</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// TimeClient.cpp</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/SocketAddress.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Poco/Net/StreamSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::Net::SocketAddress;</span><br><span class="line"><span class="keyword">using</span> Poco::Net::StreamSocket;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">SocketAddress <span class="title">sa</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9911</span>)</span></span>;</span><br><span class="line">	<span class="function">StreamSocket <span class="title">ss</span><span class="params">(sa)</span></span>;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//n = 11 , s[0,1,2,....10] = hello world s[11]=&#x27;\0&#x27;</span></span><br><span class="line">	n = ss.<span class="built_in">receiveBytes</span>(buffer, <span class="built_in">sizeof</span>(buffer)<span class="number">-1</span>);</span><br><span class="line">	buffer[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; buffer &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start tcpclient to receive data from tcpserver.</p>
<h4 id="telnet-as-tcpclient"><a href="#telnet-as-tcpclient" class="headerlink" title="telnet as tcpclient"></a>telnet as tcpclient</h4><p>install <code>telnet</code> on windows by contron panel.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet localhost 9911</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pocoproject.org/docs/99150-WindowsPlatformNotes.html">poco windows</a></li>
<li><a href="https://pocoproject.org/docs/00100-GuidedTour.html">poco guide</a></li>
<li><a href="https://pocoproject.org/slides/200-Network.pdf">poco newwork pdf</a></li>
<li><a href="https://github.com/pocoproject/poco/tree/develop/Net/samples">poco net samples</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180125: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>poco</tag>
      </tags>
  </entry>
  <entry>
    <title>serialize and deserialize a class in cpp with boost</title>
    <url>//blog/serialize-and-deserialize-a-class-in-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="how-to-serialize-string"><a href="#how-to-serialize-string" class="headerlink" title="how to serialize string"></a>how to serialize string</h3><p>size + data</p>
<blockquote>
<p>The easiest serialization method for strings or other blobs with variable size is to serialize first the size as you serialize integers, then just copy the content to the output stream.</p>
</blockquote>
<blockquote>
<p>When reading you first read the size, then allocate the string and then fill it by reading the correct number of bytes from the stream.</p>
</blockquote>
<h3 id="with-ostream-istream"><a href="#with-ostream-istream" class="headerlink" title="with ostream&#x2F;istream"></a>with ostream&#x2F;istream</h3><p>native way with ostream&#x2F;istream for example class <code>MyClass</code> with <code>height,width,name</code> fields.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> height;</span><br><span class="line">   <span class="type">int</span> width;</span><br><span class="line">   std::string name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">MyClass::serialize</span><span class="params">(std::ostream &amp;out)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    out &lt;&lt; height;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27;,&#x27;</span> <span class="comment">//number seperator</span></span><br><span class="line">    out &lt;&lt; width;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27;,&#x27;</span> <span class="comment">//number seperator</span></span><br><span class="line">    out &lt;&lt; name.<span class="built_in">size</span>(); <span class="comment">//serialize size of string</span></span><br><span class="line">    out &lt;&lt; <span class="string">&#x27;,&#x27;</span> <span class="comment">//number seperator</span></span><br><span class="line">    out &lt;&lt; name; <span class="comment">//serialize characters of string</span></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::istream&amp; <span class="title">MyClass::deserialize</span><span class="params">(std::istream &amp;in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in) &#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> comma;</span><br><span class="line">        in &gt;&gt; height;</span><br><span class="line">        in &gt;&gt; comma; <span class="comment">//read in the seperator</span></span><br><span class="line">        in &gt;&gt; width;</span><br><span class="line">        in &gt;&gt; comma; <span class="comment">//read in the seperator</span></span><br><span class="line">        in &gt;&gt; len;  <span class="comment">//deserialize size of string</span></span><br><span class="line">        in &gt;&gt; comma; <span class="comment">//read in the seperator</span></span><br><span class="line">        <span class="keyword">if</span> (in &amp;&amp; len) &#123;</span><br><span class="line">            <span class="function">std::vector&lt;<span class="type">char</span>&gt; <span class="title">tmp</span><span class="params">(len)</span></span>;</span><br><span class="line">            in.<span class="built_in">read</span>(tmp.<span class="built_in">data</span>() , len); <span class="comment">//deserialize characters of string</span></span><br><span class="line">            name.<span class="built_in">assign</span>(tmp.<span class="built_in">data</span>(), len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>overload for <code>operator&lt;&lt;</code> and <code>operator&gt;&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> MyClass &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    obj.<span class="built_in">serialize</span>(out); </span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; in, MyClass &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    obj.<span class="built_in">deserialize</span>(in); </span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="with-boost-serialization"><a href="#with-boost-serialization" class="headerlink" title="with boost serialization"></a>with boost serialization</h3><p>archive file format</p>
<ul>
<li>text: text_iarchive,text_oarchive <code>field</code></li>
<li>xml: xml_iarchive,xml_oarchive, with <code>BOOST_SERIALIZATION_NVP(field)</code></li>
<li>binary: binary_iarchive,binary_oarchive with <code>stringstream</code> or <code>fstream</code>.</li>
</ul>
<h4 id="text-archive"><a href="#text-archive" class="headerlink" title="text archive"></a>text archive</h4><p>change <code>BOOST_SERIALIZATION_NVP(field)</code> to <code>field</code></p>
<h4 id="xml-archive"><a href="#xml-archive" class="headerlink" title="xml archive"></a>xml archive</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/text_iarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/text_oarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/xml_iarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/xml_oarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/binary_iarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/archive/binary_oarchive.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	std::string name;</span><br><span class="line">	<span class="type">double</span> pos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> boost &#123;</span><br><span class="line">	<span class="keyword">namespace</span> serialization &#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;</span></span><br><span class="line"><span class="function">		<span class="type">void</span> <span class="title">serialize</span><span class="params">(Archive&amp; archive, Camera&amp; cam, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> version)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.id)</span></span>;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.name)</span></span>;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.pos)</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="comment">// namespace serialization</span></span><br><span class="line">&#125; <span class="comment">// namespace boost</span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; cout, <span class="type">const</span> Camera&amp; cam)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; cam.id &lt;&lt; std::endl</span><br><span class="line">		&lt;&lt; cam.name &lt;&lt; std::endl</span><br><span class="line">		&lt;&lt; cam.pos &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::ofstream <span class="title">file</span><span class="params">(<span class="string">&quot;archive.xml&quot;</span>)</span></span>;</span><br><span class="line">	boost::<span class="function">archive::xml_oarchive <span class="title">oa</span><span class="params">(file)</span></span>;</span><br><span class="line">	</span><br><span class="line">	Camera cam;</span><br><span class="line">	cam.id = <span class="number">100</span>;</span><br><span class="line">	cam.name = <span class="string">&quot;new camera&quot;</span>;</span><br><span class="line">	cam.pos = <span class="number">99.88</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">oa &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;archive.xml&quot;</span>)</span></span>;</span><br><span class="line">	boost::<span class="function">archive::xml_iarchive <span class="title">ia</span><span class="params">(file)</span></span>;</span><br><span class="line">	Camera cam;</span><br><span class="line">	<span class="function">ia &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; cam &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_camera</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	<span class="built_in">load</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test_camera</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="binary-archive"><a href="#binary-archive" class="headerlink" title="binary archive"></a>binary archive</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">save_load_with_binary_archive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// binary archive with stringstream</span></span><br><span class="line">	std::ostringstream oss;</span><br><span class="line">	boost::<span class="function">archive::binary_oarchive <span class="title">oa</span><span class="params">(oss)</span></span>;</span><br><span class="line"></span><br><span class="line">	Camera cam;</span><br><span class="line">	cam.id = <span class="number">100</span>;</span><br><span class="line">	cam.name = <span class="string">&quot;new camera&quot;</span>;</span><br><span class="line">	cam.pos = <span class="number">99.88</span>;</span><br><span class="line"></span><br><span class="line">	oa &amp; (cam);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get binary content</span></span><br><span class="line">	std::string str_data = oss.<span class="built_in">str</span>();</span><br><span class="line">	<span class="function">std::istringstream <span class="title">iss</span><span class="params">(str_data)</span></span>;</span><br><span class="line">	boost::<span class="function">archive::binary_iarchive <span class="title">ia</span><span class="params">(iss)</span></span>;</span><br><span class="line">	Camera new_cam;</span><br><span class="line">	ia &amp; (new_cam);</span><br><span class="line">	std::cout &lt;&lt; new_cam &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h4 id="binary-archive-with-poco-SocketStream"><a href="#binary-archive-with-poco-SocketStream" class="headerlink" title="binary archive with poco SocketStream"></a>binary archive with poco SocketStream</h4><p>client.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_client</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">SocketAddress <span class="title">address</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9911</span>)</span></span>;</span><br><span class="line">	<span class="function">StreamSocket <span class="title">socket</span><span class="params">(address)</span></span>;</span><br><span class="line">	<span class="function">SocketStream <span class="title">stream</span><span class="params">(socket)</span></span>;</span><br><span class="line">	<span class="comment">//Poco::StreamCopier::copyStream(stream, std::cout);</span></span><br><span class="line"></span><br><span class="line">	boost::<span class="function">archive::binary_oarchive <span class="title">oa</span><span class="params">(stream)</span></span>;</span><br><span class="line">	Camera cam;</span><br><span class="line">	cam.id = <span class="number">100</span>;</span><br><span class="line">	cam.name = <span class="string">&quot;new camera&quot;</span>;</span><br><span class="line">	cam.pos = <span class="number">99.88</span>;</span><br><span class="line"></span><br><span class="line">	oa &amp; (cam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>server.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application&amp; app = Application::<span class="built_in">instance</span>();</span><br><span class="line">		app.<span class="built_in">logger</span>().<span class="built_in">information</span>(<span class="string">&quot;Request from &quot;</span> + <span class="keyword">this</span>-&gt;<span class="built_in">socket</span>().<span class="built_in">peerAddress</span>().<span class="built_in">toString</span>());</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="function">SocketStream <span class="title">stream</span><span class="params">(<span class="keyword">this</span>-&gt;socket())</span></span>;</span><br><span class="line">			<span class="comment">//Poco::StreamCopier::copyStream(stream, std::cout);</span></span><br><span class="line"></span><br><span class="line">			boost::<span class="function">archive::binary_iarchive <span class="title">ia</span><span class="params">(stream)</span></span>;</span><br><span class="line">			Camera new_cam;</span><br><span class="line">			ia &amp; (new_cam);</span><br><span class="line">			std::cout &lt;&lt; new_cam &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">catch</span> (Poco::Exception&amp; exc)</span><br><span class="line">		&#123;</span><br><span class="line">			app.<span class="built_in">logger</span>().<span class="built_in">log</span>(exc);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="notes-on-std-string"><a href="#notes-on-std-string" class="headerlink" title="notes on std::string"></a>notes on std::string</h4><p>Even know you have seen that they do the same, or that <code>.data()</code> calls <code>.c_str()</code>, it is not correct to assume that this will be the case for other compilers. It is also possible that your compiler will change with a future release.</p>
<p>2 reasons to use <code>std::string</code>:</p>
<p><code>std::string</code> can be used for both <code>text</code> and <code>arbitrary binary data</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example 1</span></span><br><span class="line"><span class="comment">//Plain text:</span></span><br><span class="line">std::string s1;</span><br><span class="line">s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s<span class="number">1.</span><span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Example 2</span></span><br><span class="line"><span class="comment">//Arbitrary binary data:</span></span><br><span class="line">std::string s2;</span><br><span class="line">s<span class="number">2.</span><span class="built_in">append</span>(<span class="string">&quot;a\0b\0b\0&quot;</span>, <span class="number">6</span>);</span><br><span class="line">s<span class="number">2.</span><span class="built_in">data</span>();</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="boost-archive-style"><a href="#boost-archive-style" class="headerlink" title="boost archive style"></a>boost archive style</h3><h4 id="intrusive"><a href="#intrusive" class="headerlink" title="intrusive"></a>intrusive</h4><ul>
<li><code>private template&lt;class Archive&gt;   void serialize(Archive&amp; archive, const unsigned int version)</code></li>
<li><code>friend class boost::serialization::access;</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	std::string name;</span><br><span class="line">	<span class="type">double</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">boost</span>::serialization::access;</span><br><span class="line">	<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;</span></span><br><span class="line"><span class="function">	<span class="type">void</span> <span class="title">serialize</span><span class="params">(Archive&amp; archive, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> version)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(id)</span></span>;</span><br><span class="line">		<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(name)</span></span>;</span><br><span class="line">		<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(pos)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="non-intrusive"><a href="#non-intrusive" class="headerlink" title="non-intrusive"></a>non-intrusive</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	std::string name;</span><br><span class="line">	<span class="type">double</span> pos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> boost &#123;</span><br><span class="line">	<span class="keyword">namespace</span> serialization &#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;</span></span><br><span class="line"><span class="function">		<span class="type">void</span> <span class="title">serialize</span><span class="params">(Archive&amp; archive, Camera&amp; cam, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> version)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.id)</span></span>;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.name)</span></span>;</span><br><span class="line">			<span class="function">archive &amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(cam.pos)</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="comment">// namespace serialization</span></span><br><span class="line">&#125; <span class="comment">// namespace boost</span></span><br></pre></td></tr></table></figure>

<h3 id="boost-archive-type"><a href="#boost-archive-type" class="headerlink" title="boost archive type"></a>boost archive type</h3><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p><code>boost::shared_ptr&lt;T&gt;</code> instead of <code>std::shared_prt&lt;T&gt;</code><br>and </p>
<pre><code>#include &lt;boost/serialization/shared_ptr.hpp&gt;
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/7046244/serializing-a-class-which-contains-a-stdstring">serializing-a-class-which-contains-a-stdstring</a></li>
<li><a href="https://stackoverflow.com/questions/234724/is-it-possible-to-serialize-and-deserialize-a-class-in-c">is-it-possible-to-serialize-and-deserialize-a-class-in-c</a></li>
<li><a href="https://stackoverflow.com/questions/234724/is-it-possible-to-serialize-and-deserialize-a-class-in-c">boost serialization</a></li>
<li><a href="http://www.boost.org/doc/libs/1_36_0/libs/serialization/example/demo.cpp">boost serialization demo</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-boostserialization/">ibm boostserialization</a></li>
<li><a href="https://stackoverflow.com/questions/6815039/fast-data-image-transfer-server-client-using-boost-asio">fast-data-image-transfer-server-client-using-boost-asio</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180128: created.</li>
<li>20180129: add intrusive,non-intrusive part.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
        <tag>poco</tag>
        <tag>serialize</tag>
        <tag>deserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>compile boost 1.66.0 from source on ubuntu 16.04</title>
    <url>//blog/compile-and-use-boost-on-ubuntu/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/d5d4a460/">compile boost 1.66.0 from source on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/854071ac/">compile boost 1.66.0 from source on windows 10</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a><del>apt-get</del></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.58 for ubuntu 16.04</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>

<h3 id="compile-from-source"><a href="#compile-from-source" class="headerlink" title="compile from source"></a>compile from source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.gz</span><br><span class="line"></span><br><span class="line">tar xzvf boost_1_66_0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> boost_1_66_0/</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev</span><br><span class="line"></span><br><span class="line">./bootstrap.sh --prefix=/usr/local/</span><br><span class="line"></span><br><span class="line">./b2 --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">./b2 -j8 variant=release <span class="built_in">link</span>=shared threading=multi runtime-link=shared</span><br><span class="line"><span class="built_in">sudo</span> ./b2 -j8 install </span><br></pre></td></tr></table></figure>

<h3 id="thread-example"><a href="#thread-example" class="headerlink" title="thread example"></a>thread example</h3><h4 id="thread-demo-cpp"><a href="#thread-demo-cpp" class="headerlink" title="thread_demo.cpp"></a>thread_demo.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include &lt;boost/thread/thread.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;boost/thread/mutex.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;boost/bind/bind.hpp&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line">boost::mutex io_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">		std::cout &lt;&lt; id &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">boost::thread <span class="title">thrd1</span><span class="params">(boost::bind(&amp;count, <span class="number">1</span>))</span></span>;</span><br><span class="line">	<span class="function">boost::thread <span class="title">thrd2</span><span class="params">(boost::bind(&amp;count, <span class="number">2</span>))</span></span>;</span><br><span class="line">	thrd<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">	thrd<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (thread_main)</span><br><span class="line"><span class="keyword">enable_language</span>(C)</span><br><span class="line"><span class="keyword">enable_language</span>(CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(Boost_USE_RELEASE_LIBS <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment">#set(Boost_USE_STATIC_LIBS OFF) # use .a or .so file</span></span><br><span class="line"><span class="keyword">set</span>(Boost_USE_MULTITHREAD <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find Boost package 1.5.8 or 1.6.6</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.5</span>.<span class="number">8</span> REQUIRED COMPONENTS serialization date_time system filesystem thread timer)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (thread_main</span><br><span class="line">	thread_main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (thread_main </span><br><span class="line">	<span class="variable">$&#123;Boost_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="thread-pool"><a href="#thread-pool" class="headerlink" title="thread pool"></a>thread pool</h3><p>see <a href="https://kezunlin.me/post/f241bd30/">thread pool with boost</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/19500404/how-to-create-a-thread-pool-using-boost-in-c">how-to-create-a-thread-pool-using-boost-in-c</a></li>
<li><a href="https://www.cnblogs.com/wangguchangqing/p/6134635.html">multi thread</a></li>
<li><a href="http://zh.highscore.de/cpp/boost/asio.html">boost asio ref</a></li>
<li><a href="https://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu">how-to-install-boost-on-ubuntu</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180131: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and use libjpeg-turbo on windows 10</title>
    <url>//blog/compile-and-use-libjpeg-turbo-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/83828674/">compile and use libjpeg-turbo on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/9f626e7a/">compile and use libjpeg-turbo on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="build-requirements"><a href="#build-requirements" class="headerlink" title="build requirements"></a>build requirements</h3><p>Build Requirements</p>
<ul>
<li>cmake 2.8</li>
<li>NASM 2.13</li>
<li>Visual Studio 2015</li>
<li>libjpeg-turbo 1.5.4</li>
</ul>
<blockquote>
<p>If using <code>NASM</code>, 2.05 or later is required for an x86-64 build.<br><code>nasm.exe/yasm.exe</code> should be in your PATH.</p>
</blockquote>
<h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/libjpeg-turbo/libjpeg-turbo.git</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">wget https://codeload.github.com/libjpeg-turbo/libjpeg-turbo/zip/master</span><br></pre></td></tr></table></figure>

<h3 id="install-nasm"><a href="#install-nasm" class="headerlink" title="install nasm"></a>install nasm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.03rc1/win64/nasm-2.13.03rc1-installer-x64.exe</span><br></pre></td></tr></table></figure>

<blockquote>
<p>add <code>C:\Program Files\NASM</code> to env path.</p>
</blockquote>
<h3 id="compile-libjpeg"><a href="#compile-libjpeg" class="headerlink" title="compile libjpeg"></a>compile libjpeg</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>
<p>with options</p>
<pre><code>CMAKE_BUILD_TYPE = Release
ENABLE_SHARED = ON
CMAKE_INSTALL_PREFIX = d:/libjpeg-turbo64
NASM = C:/Program Files/NASM/nasm.exe
</code></pre>
<p> configure and generate <code>sln</code>, compile with <code>visual studio 2015</code> and install.</p>
<h3 id="usage-with-cmake"><a href="#usage-with-cmake" class="headerlink" title="usage with cmake"></a>usage with cmake</h3><h4 id="libjpegturbo-config-cmake"><a href="#libjpegturbo-config-cmake" class="headerlink" title="libjpegturbo-config.cmake"></a>libjpegturbo-config.cmake</h4> <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_ROOT_DIR <span class="string">&quot;d:/libjpeg-turbo64&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(LIBJPEGTURBO_INCLUDE_DIR NAMES jpeglib.h turbojpeg.h PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(LIBJPEGTURBO_JPEG_LIBRARY NAMES jpeg.lib PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_JPEG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(LIBJPEGTURBO_TURBOJPEG_LIBRARY NAMES turbojpeg.lib PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_TURBOJPEG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_INCLUDE_DIRS <span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_LIBRARIES <span class="variable">$&#123;LIBJPEGTURBO_JPEG_LIBRARY&#125;</span> <span class="variable">$&#123;LIBJPEGTURBO_TURBOJPEG_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;libjpegturbo-config.cmake &quot;</span> <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4> <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">find_package</span>(LIBJPEGTURBO REQUIRED)</span><br><span class="line"> <span class="keyword">include_directories</span>(<span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIRS&#125;</span>)  </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">add_executable</span> (example_jpeg</span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/example/example_jpeg.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (example_jpeg </span><br><span class="line">	<span class="variable">$&#123;LIBJPEGTURBO_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (example_turbojpeg</span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/example/example_turbojpeg.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (example_turbojpeg </span><br><span class="line">	<span class="variable">$&#123;LIBJPEGTURBO_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
 <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><h3 id="jpeglib-vs-turbojpeg"><a href="#jpeglib-vs-turbojpeg" class="headerlink" title="jpeglib vs turbojpeg"></a>jpeglib vs turbojpeg</h3><p>jpeglib </p>
<ul>
<li>include: <code>#include &quot;jpeglib.h&quot;</code></li>
<li>lib: <code>jpeg.lib</code></li>
<li>dll: <code>jpeg62.dll</code></li>
</ul>
<p>turbojpeg</p>
<ul>
<li>include: <code>#include &quot;turbojpeg.h&quot;</code></li>
<li>lib: <code>turbojpeg.lib</code></li>
<li>dll: <code>turbojpeg.dll</code></li>
</ul>
<p>turbojpeg is (3-5x) faster than jpeglib.</p>
<h3 id="jpeglib"><a href="#jpeglib" class="headerlink" title="jpeglib"></a>jpeglib</h3><p>see <a href="https://kezunlin.me/downloads/code/jpeglib.cpp">jpeglib.cpp</a></p>
<h3 id="turbojpeg"><a href="#turbojpeg" class="headerlink" title="turbojpeg"></a>turbojpeg</h3><p>see <a href="https://kezunlin.me/downloads/code/turbojpeg.cpp">turbojpeg.cpp</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/master/example.c">example.c</a></li>
<li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo/blob/master/BUILDING.md">building</a></li>
<li><a href="https://libjpeg-turbo.org/Documentation/Documentation">turbo offical doc</a></li>
<li><a href="http://www.cnblogs.com/hzhida/archive/2012/05/30/2524989.html">compress and decompress jpeg</a></li>
<li><a href="https://my.oschina.net/u/733649/blog/485323">opencv imdecode to libjpeg-turbo</a> (good)</li>
<li><a href="https://stackoverflow.com/questions/9094691/examples-or-tutorials-of-using-libjpeg-turbos-turbojpeg">tjcompress and tjdecompress</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180201: created.</li>
<li>20180202: add example code.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>libjpeg-turbo</tag>
        <tag>libjpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>std::move example</title>
    <url>//blog/std-move-example/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="copy-constructors-and-copy-assignment-operators"><a href="#copy-constructors-and-copy-assignment-operators" class="headerlink" title="copy constructors and copy assignment operators"></a>copy constructors and copy assignment operators</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MemoryBlock</span>(<span class="type">const</span> MemoryBlock&amp; other)</span><br><span class="line">MemoryBlock&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MemoryBlock&amp; other)</span><br></pre></td></tr></table></figure>

<h3 id="move-constructors-and-move-assignment-operators"><a href="#move-constructors-and-move-assignment-operators" class="headerlink" title="move constructors and move assignment operators"></a>move constructors and move assignment operators</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MemoryBlock</span>(MemoryBlock&amp;&amp; other)  </span><br><span class="line">MemoryBlock&amp; <span class="keyword">operator</span>=(MemoryBlock&amp;&amp; other)  </span><br></pre></td></tr></table></figure>

<h3 id="example-move"><a href="#example-move" class="headerlink" title="example_move"></a>example_move</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryBlock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Simple constructor that initializes the resource.</span></span><br><span class="line">   <span class="function"><span class="keyword">explicit</span> <span class="title">MemoryBlock</span><span class="params">(<span class="type">size_t</span> length)</span></span></span><br><span class="line"><span class="function">      : _length(length)</span></span><br><span class="line"><span class="function">      , _data(new int[length])</span></span><br><span class="line"><span class="function">   &#123;</span></span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;In MemoryBlock(size_t). length = &quot;</span></span><br><span class="line">                &lt;&lt; _length &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Destructor.</span></span><br><span class="line">   ~<span class="built_in">MemoryBlock</span>()</span><br><span class="line">   &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;In ~MemoryBlock(). length = &quot;</span></span><br><span class="line">                &lt;&lt; _length &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_data != <span class="literal">nullptr</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         std::cout &lt;&lt; <span class="string">&quot; Deleting resource.&quot;</span>;</span><br><span class="line">         <span class="comment">// Delete the resource.</span></span><br><span class="line">         <span class="keyword">delete</span>[] _data;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      std::cout &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Copy constructor.</span></span><br><span class="line">   <span class="built_in">MemoryBlock</span>(<span class="type">const</span> MemoryBlock&amp; other)</span><br><span class="line">      : _length(other._length)</span><br><span class="line">      , _data(<span class="keyword">new</span> <span class="type">int</span>[other._length])</span><br><span class="line">   &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;In MemoryBlock(const MemoryBlock&amp;). length = &quot;</span></span><br><span class="line">                &lt;&lt; other._length &lt;&lt; <span class="string">&quot;. Copying resource.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">      std::<span class="built_in">copy</span>(other._data, other._data + _length, _data);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Copy assignment operator.</span></span><br><span class="line">   MemoryBlock&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MemoryBlock&amp; other)</span><br><span class="line">   &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;In operator=(const MemoryBlock&amp;). length = &quot;</span></span><br><span class="line">                &lt;&lt; other._length &lt;&lt; <span class="string">&quot;. Copying resource.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">// Free the existing resource.</span></span><br><span class="line">         <span class="keyword">delete</span>[] _data;</span><br><span class="line"></span><br><span class="line">         _length = other._length;</span><br><span class="line">         _data = <span class="keyword">new</span> <span class="type">int</span>[_length];</span><br><span class="line">         std::<span class="built_in">copy</span>(other._data, other._data + _length, _data);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Retrieves the length of the data resource.</span></span><br><span class="line">   <span class="function"><span class="type">size_t</span> <span class="title">Length</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _length;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Move constructor.</span></span><br><span class="line">    <span class="built_in">MemoryBlock</span>(MemoryBlock&amp;&amp; other)</span><br><span class="line">       : _data(<span class="literal">nullptr</span>)</span><br><span class="line">       , _length(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       std::cout &lt;&lt; <span class="string">&quot;In MemoryBlock(MemoryBlock&amp;&amp;). length = &quot;</span></span><br><span class="line">             &lt;&lt; other._length &lt;&lt; <span class="string">&quot;. Moving resource.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Copy the data pointer and its length from the</span></span><br><span class="line">       <span class="comment">// source object.</span></span><br><span class="line">       _data = other._data;</span><br><span class="line">       _length = other._length;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Release the data pointer from the source object so that</span></span><br><span class="line">       <span class="comment">// the destructor does not free the memory multiple times.</span></span><br><span class="line">       other._data = <span class="literal">nullptr</span>;</span><br><span class="line">       other._length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move assignment operator.</span></span><br><span class="line">    MemoryBlock&amp; <span class="keyword">operator</span>=(MemoryBlock&amp;&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">       std::cout &lt;&lt; <span class="string">&quot;In operator=(MemoryBlock&amp;&amp;). length = &quot;</span></span><br><span class="line">                 &lt;&lt; other._length &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="comment">// Free the existing resource.</span></span><br><span class="line">          <span class="keyword">delete</span>[] _data;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Copy the data pointer and its length from the</span></span><br><span class="line">          <span class="comment">// source object.</span></span><br><span class="line">          _data = other._data;</span><br><span class="line">          _length = other._length;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Release the data pointer from the source object so that</span></span><br><span class="line">          <span class="comment">// the destructor does not free the memory multiple times.</span></span><br><span class="line">          other._data = <span class="literal">nullptr</span>;</span><br><span class="line">          other._length = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="type">size_t</span> _length; <span class="comment">// The length of the resource.</span></span><br><span class="line">   <span class="type">int</span>* _data; <span class="comment">// The resource.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestSTLObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::vector&lt;std::string&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// uses the push_back(const T&amp;) overload, which means</span></span><br><span class="line">    <span class="comment">// we&#x27;ll incur the cost of copying str</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(str);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After copy, str is \&quot;&quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot;\&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// uses the rvalue reference push_back(T&amp;&amp;) overload,</span></span><br><span class="line">    <span class="comment">// which means no strings will be copied; instead, the contents</span></span><br><span class="line">    <span class="comment">// of str will be moved into the vector.  This is less</span></span><br><span class="line">    <span class="comment">// expensive, but also means str might now be empty.</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(str));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After move, str is \&quot;&quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot;\&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The contents of the vector are \&quot;&quot;</span> &lt;&lt; v[<span class="number">0</span>]</span><br><span class="line">                                         &lt;&lt; <span class="string">&quot;\&quot;, \&quot;&quot;</span> &lt;&lt; v[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	After copy, str is &quot;Hello&quot;</span></span><br><span class="line"><span class="comment">	After move, str is &quot;&quot;</span></span><br><span class="line"><span class="comment">	The contents of the vector are &quot;Hello&quot;, &quot;Hello&quot;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestMyObjectWithoutUseMove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   std::vector&lt;MemoryBlock&gt; v;</span><br><span class="line">   <span class="function">MemoryBlock <span class="title">mb1</span><span class="params">(<span class="number">25</span>)</span></span>;</span><br><span class="line">   <span class="comment">//MemoryBlock mb2(75);</span></span><br><span class="line">   <span class="comment">//MemoryBlock mb3(50);</span></span><br><span class="line"></span><br><span class="line">   v.<span class="built_in">push_back</span>(mb1);</span><br><span class="line">   <span class="comment">//v.push_back(mb2);</span></span><br><span class="line">   <span class="comment">//v.push_back(mb3);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">	In MemoryBlock(size_t). length = 25.</span></span><br><span class="line"><span class="comment">	In MemoryBlock(const MemoryBlock&amp;). length = 25. Copying resource.</span></span><br><span class="line"><span class="comment">	In ~MemoryBlock(). length = 25. Deleting resource.</span></span><br><span class="line"><span class="comment">	In ~MemoryBlock(). length = 25. Deleting resource.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestMyObjectWithUseMove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   std::vector&lt;MemoryBlock&gt; v;</span><br><span class="line"></span><br><span class="line">   <span class="function">MemoryBlock <span class="title">mb1</span><span class="params">(<span class="number">25</span>)</span></span>;</span><br><span class="line">   <span class="comment">// MemoryBlock mb2(75);</span></span><br><span class="line">   <span class="comment">// MemoryBlock mb3(50);</span></span><br><span class="line"></span><br><span class="line">   v.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(mb1));</span><br><span class="line">   <span class="comment">//v.push_back(MemoryBlock(75));</span></span><br><span class="line">   <span class="comment">//v.insert(v.begin() + 1, MemoryBlock(50));</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">	In MemoryBlock(size_t). length = 25.</span></span><br><span class="line"><span class="comment">	In MemoryBlock(MemoryBlock&amp;&amp;). length = 25. Moving resource.</span></span><br><span class="line"><span class="comment">	In ~MemoryBlock(). length = 0.</span></span><br><span class="line"><span class="comment">	In ~MemoryBlock(). length = 25. Deleting resource.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//TestSTLObject();</span></span><br><span class="line">    <span class="comment">//TestMyObjectWithoutUseMove();</span></span><br><span class="line">    <span class="built_in">TestMyObjectWithUseMove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rewrite-move-constructor"><a href="#rewrite-move-constructor" class="headerlink" title="rewrite move constructor"></a>rewrite move constructor</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Move constructor.  </span></span><br><span class="line"><span class="built_in">MemoryBlock</span>(MemoryBlock&amp;&amp; other)  </span><br><span class="line">   : _data(<span class="literal">nullptr</span>)  </span><br><span class="line">   , _length(<span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">   *<span class="keyword">this</span> = std::<span class="built_in">move</span>(other);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://zh.cppreference.com/w/cpp/utility/move">move</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/dd293665.aspx">Move Constructors and Move Assignment Operators (C++)</a></li>
<li><a href="http://blog.csdn.net/infoworld/article/details/50736633">move example</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180201: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>std::move</tag>
      </tags>
  </entry>
  <entry>
    <title>compile glog and glags on windows</title>
    <url>//blog/compile-glog-and-glags-on-windows/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/bb64e398/">compile glog and glags on windows</a></strong></li>
<li><a href="https://kezunlin.me/post/977f5125/">compile glog and glags on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul>
<li>glog:  v0.3.5  <a href="https://github.com/google/glog/archive/v0.3.5.zip">https://github.com/google/glog/archive/v0.3.5.zip</a></li>
<li>gflag: v2.2.1  <a href="https://github.com/schuhschuh/gflags/archive/v2.2.1.zip">https://github.com/schuhschuh/gflags/archive/v2.2.1.zip</a></li>
</ul>
<h3 id="gflags"><a href="#gflags" class="headerlink" title="gflags"></a>gflags</h3><blockquote>
<p>do not use offical version,instead use <code>https://github.com/schuhschuh/gflags.git</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/schuhschuh/gflags.git </span><br><span class="line"><span class="built_in">cd</span> gflags</span><br><span class="line"><span class="built_in">mkdir</span> windows-build</span><br><span class="line"><span class="built_in">cd</span> windows-build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>BUILD_SHARED_LIBS ON 
INSTALL_SHARED_LIBS ON
INSTALL_STATIC_LIBS OFF
CMAKE_CONFIGURATION_TYPES Release # Release
REGISTER_INSTALL_PREFIX OFF

CMAKE_INSTALL_PREFIX D:/gflags
#NAMESPACE google;gflags
NAMESPACE google
</code></pre>
<p>or command </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC ..</span><br></pre></td></tr></table></figure>

<blockquote>
<p>we get <code>include</code> and <code>lib/gflags.lib</code>, and <code>bin/gflags.dll</code><br>modify <code>CMAKE/CMAKE_INSTALL_PREFIX</code> to a non-system folder, otherwise you will need administrative privileges to run INSTALL project.</p>
</blockquote>
<h3 id="glog"><a href="#glog" class="headerlink" title="glog"></a>glog</h3><blockquote>
<p>Notice:<br>we have to new entry with <code>BUILD_SHARED_LIB</code> with value <code>ON </code>, because by default, <code>glog</code> is <code>static library</code> with extension <code>.lib</code>.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/google/glog/archive/v0.3.5.zip</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> windows-build</span><br><span class="line"><span class="built_in">cd</span> windows-build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>#WITH_GFLAGS ON 
#gflags_DIR D:/gflags/lib/cmake/gflags

WITH_GFLAGS OFF
CMAKE_INSTALL_DIR d:/glog
CMAKE_CONFIGURATION_TYPES Release # Release

BUILD_SHARED_LIBS ON  # new by hand
</code></pre>
<p>generate <code>sln</code> and open with <code>Visual Studio 2015</code> compile and install.</p>
<p>and we get preprocessors from <code>glog</code></p>
<pre><code>WIN32
_WINDOWS
NDEBUG
GLOG_NO_ABBREVIATED_SEVERITIES
GOOGLE_GLOG_IS_A_DLL=1
GOOGLE_GLOG_DLL_DECL=__declspec(dllexport)
GFLAGS_IS_A_DLL=1
CMAKE_INTDIR=&quot;Release&quot;
LIBGLOG_EXPORTS
</code></pre>
<blockquote>
<p>we get <code>include</code> and <code>lib/glog.lib</code>, and <code>bin/glog.dll</code></p>
</blockquote>
<h3 id="multiple-processor-compile"><a href="#multiple-processor-compile" class="headerlink" title="multiple processor compile"></a>multiple processor compile</h3><ul>
<li>windows: <code>set_target_properties(main PROPERTIES COMPILE_FLAGS &quot;/MP&quot;)</code></li>
<li>linux: <code>make -j8</code></li>
</ul>
<p>with cmake options <code>/MD</code> added to <code>CMAKE_CXX_FLAGS_RELEASE</code></p>
<pre><code>CMAKE_CXX_FLAGS_RELEASE /MD /O2 /Ob2 /DNDEBUG /MP
</code></pre>
<p>or </p>
<p>with <code>CMakeLists.txt</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(MSVC) <span class="comment"># WIN32</span></span><br><span class="line">  <span class="keyword">set_target_properties</span>(target1 PROPERTIES COMPILE_FLAGS <span class="string">&quot;/MP&quot;</span>)</span><br><span class="line">  <span class="keyword">set_target_properties</span>(target2 PROPERTIES COMPILE_FLAGS <span class="string">&quot;/MP&quot;</span>)</span><br><span class="line">  <span class="keyword">set_target_properties</span>(target3 PROPERTIES COMPILE_FLAGS <span class="string">&quot;/MP&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<h3 id="project-dependency"><a href="#project-dependency" class="headerlink" title="project dependency"></a>project dependency</h3><p>select <code>ALL-BUILD</code> and change build order by hand.</p>
<pre><code>ZERO_CHECK
CarConfig
CarUtil
CarModel
CarDatabase
a_main
a_unit_tests
data_client
data_server
example_jpeg
example_thread
ALL_BUILD
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#find_package(glog 0.3.5 REQUIRED)  </span></span><br><span class="line"><span class="comment"># no GLOG_INCLUDE_DIRS  GLOG_LIBRARIES, we only use  `glog::glog` as target</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(glog REQUIRED) </span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (main  glog::glog)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>glog include directory will be imported automatically.</p>
</blockquote>
<h3 id="gflags-config-cmake"><a href="#gflags-config-cmake" class="headerlink" title="gflags-config.cmake"></a>gflags-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(GFLAGS_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(GFLAGS_ROOT_DIR <span class="string">&quot;D:/gflags&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(GFLAGS_INCLUDE_DIR NAMES gflags/gflags.h PATHS <span class="string">&quot;$&#123;GFLAGS_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GFLAGS_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(GFLAGS_LIBRARY NAMES gflags.lib PATHS <span class="string">&quot;$&#123;GFLAGS_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GFLAGS_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(GFLAGS_INCLUDE_DIRS <span class="variable">$&#123;GFLAGS_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(GFLAGS_LIBRARIES <span class="variable">$&#123;GFLAGS_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;gflags-config.cmake &quot;</span> <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="glog-config-cmake"><a href="#glog-config-cmake" class="headerlink" title="glog-config.cmake"></a>glog-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(GLOG_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(GLOG_ROOT_DIR <span class="string">&quot;D:/glog&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(GLOG_INCLUDE_DIR NAMES glog/logging.h PATHS <span class="string">&quot;$&#123;GLOG_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GLOG_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(GLOG_LIBRARY NAMES glog.lib PATHS <span class="string">&quot;$&#123;GLOG_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GLOG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(GLOG_INCLUDE_DIRS <span class="variable">$&#123;GLOG_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(GLOG_LIBRARIES <span class="variable">$&#123;GLOG_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;glog-config.cmake &quot;</span> <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gflags/gflags.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glog/logging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	FLAGS_logtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_alsologtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_colorlogtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_log_prefix = true;  </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	FLAGS_logbufsecs = 0;  //0 means realtime</span></span><br><span class="line"><span class="comment">	FLAGS_max_log_size = 10;  // MB</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	google::<span class="built_in">InitGoogleLogging</span>(argv[<span class="number">0</span>]); <span class="comment">// init google logging</span></span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_FATAL, <span class="string">&quot;../log/log_fatal_&quot;</span>); </span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_ERROR, <span class="string">&quot;../log/log_error_&quot;</span>); </span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_WARNING, <span class="string">&quot;../log/log_warning_&quot;</span>);</span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_INFO, <span class="string">&quot;../log/log_info_&quot;</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Hello GLOG&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>copy <code>gflags.dll</code> and <code>glog.dll</code> to main executable folder.</p>
</blockquote>
<h3 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h3><p>error:</p>
<pre><code>fatal error C1189: #error :  ERROR macro is defined. Define GLOG_NO_ABBREVIATED_SEVERITIES before including logging.h. See the document for detail.  
</code></pre>
<p> solution:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(GFLAGS REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">find_package</span>(GLOG REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GFLAGS_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GLOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add macro GLOG_NO_ABBREVIATED_SEVERITIES</span></span><br><span class="line"><span class="keyword">add_definitions</span>( -DGLOG_NO_ABBREVIATED_SEVERITIES ) </span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/23581621/configure-google-glog-and-gflags-for-c">configure-google-glog-and-gflags-for-c</a></li>
<li><a href="https://stackoverflow.com/questions/30014760/building-google-glog-with-cmake-on-linux">building-google-glog-with-cmake-on-linux</a></li>
<li><a href="https://github.com/google/glog/blob/master/cmake/INSTALL.md">glog install</a></li>
<li><a href="https://github.com/google/glog/wiki/Installing-Glog-on-Ubuntu-14.04">Installing-Glog-on-Ubuntu-14.04</a></li>
<li><a href="https://stackoverflow.com/questions/41766969/installing-glog-on-windows/45453491#45453491">installing-glog-on-windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180206: created.</li>
<li>20180207: add multiple processor and build dependency part for windows.</li>
<li>20180209: add error and solutions</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>gflags</tag>
        <tag>glog</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake find_package for different packages</title>
    <url>//blog/cmake-find-package-for-different-packages/</url>
    <content><![CDATA[<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><h3 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>

<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Boost</span></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">	<span class="comment"># use static boost on windows</span></span><br><span class="line">	<span class="keyword">set</span>(Boost_USE_STATIC_LIBS <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># use release boost on linux</span></span><br><span class="line">	<span class="keyword">set</span>(Boost_USE_RELEASE_LIBS <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(Boost_USE_MULTITHREAD <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Find Boost package 1.66.0</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost REQUIRED COMPONENTS serialization date_time system filesystem thread timer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="GTest"><a href="#GTest" class="headerlink" title="GTest"></a>GTest</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/google/googletest.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>C:\Program Files\gtest</code> on windows.</p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(MSVC) </span><br><span class="line">	<span class="keyword">SET</span>(GTEST_ROOT <span class="string">&quot;C:/Program Files/gtest&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># BOOST_THREAD_LIBRARY  /usr/lib/x86_64-linux-gnu/libpthread.so</span></span><br><span class="line">	<span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; BOOST_THREAD_LIBRARY = $&#123;BOOST_THREAD_LIBRARY&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED) <span class="comment"># GTest 1.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED) <span class="comment"># GTest 1.8.0</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span> <span class="variable">$&#123;BOOST_THREAD_LIBRARY&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="gflags-glog"><a href="#gflags-glog" class="headerlink" title="gflags+glog"></a>gflags+glog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/schuhschuh/gflags/archive/v2.2.1.tar.gz</span><br><span class="line">wget https://github.com/google/glog/archive/v0.3.5.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>for <code>find_package(GFLAGS REQUIRED)</code> we copy user-defined <code>gflags-config.cmake</code> from <code>caffe</code> project to <code>/usr/local/lib/cmake/gflags</code><br>for <code>find_package(GLOG REQUIRED)</code> we copy user-defined <code>glog-config.cmake</code> from <code>caffe</code> project to <code>/usr/local/lib/cmake/glog</code><br>see <a href="http://www.kezunlin.me/post/977f5125/">compile glog and glags on ubuntu 16.04</a></p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(GFLAGS REQUIRED) </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GFLAGS_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GLOG REQUIRED) </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GLOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for windows</span></span><br><span class="line"><span class="comment">#add_definitions( -DGLOG_NO_ABBREVIATED_SEVERITIES ) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo glog_main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (demo  <span class="variable">$&#123;GLOG_LIBRARIES&#125;</span> <span class="variable">$&#123;GFLAGS_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="mysqlconcpp"><a href="#mysqlconcpp" class="headerlink" title="mysqlconcpp"></a>mysqlconcpp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-cache search libmysqlcppconn</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libmysqlcppconn-dev libmysqlcppconn7v5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>for <code>find_package(MYSQLCPPCONN REQUIRED)</code> we copy user-defined <code>mysqlcppconn-config.cmake</code> to <code>/usr/lib/cmake/mysqlcppconn</code></p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(MYSQLCPPCONN REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (demo  <span class="variable">$&#123;MYSQLCPPCONN_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="libjpegturbo"><a href="#libjpegturbo" class="headerlink" title="libjpegturbo"></a>libjpegturbo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/libjpeg-turbo/libjpeg-turbo.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>for <code>find_package(LIBJPEGTURBO REQUIRED)</code> we copy user-defined <code>libjpegturbo-config.cmake</code> to <code>/usr/lib/cmake/libjpegturbo</code></p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(LIBJPEGTURBO REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIRS&#125;</span>)  </span><br><span class="line"><span class="keyword">target_link_libraries</span> (example_jpeg <span class="variable">$&#123;LIBJPEGTURBO_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Poco"><a href="#Poco" class="headerlink" title="Poco"></a>Poco</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pocoproject.org/releases/poco-1.8.1/poco-1.8.1.zip</span><br><span class="line">wget https://pocoproject.org/releases/poco-1.8.1/poco-1.8.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Poco REQUIRED COMPONENTS Foundation Util Net XML JSON)</span><br><span class="line"></span><br><span class="line"><span class="comment"># no Poco_INCLUDE_DIRS, we have to set by hand </span></span><br><span class="line"><span class="keyword">if</span>(MSVC) <span class="comment"># WIN32</span></span><br><span class="line">	<span class="keyword">SET</span>(Poco_INCLUDE_DIRS <span class="string">&quot;C:/Program Files/Poco/include&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="keyword">SET</span>(Poco_INCLUDE_DIRS <span class="string">&quot;/usr/local/include/Poco&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; Poco_INCLUDE_DIRS = $&#123;Poco_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; Poco_LIBRARIES = $&#123;Poco_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Poco_INCLUDE_DIRS&#125;</span> )   </span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;Poco_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d) </span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Find includes in corresponding build directories</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Instruct CMake to run moc automatically when needed.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find the QtWidgets library</span></span><br><span class="line"><span class="keyword">find_package</span>(Qt5Core)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Widgets)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Gui)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5OpenGL)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5Xml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpp files</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_LIST)</span><br><span class="line"><span class="comment"># ui files</span></span><br><span class="line">qt5_wrap_ui(ui_FILES mainwindow.ui)</span><br><span class="line"><span class="comment"># resource files</span></span><br><span class="line">qt5_add_resources(qrc_FILES resource.qrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;SRC_LIST&#125;</span> ) <span class="comment"># ./main.cpp./mainwindow.cpp</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;ui_FILES&#125;</span> ) <span class="comment"># build/ui_mainwindow.h</span></span><br><span class="line"><span class="keyword">message</span>( [Main] <span class="variable">$&#123;qrc_FILES&#125;</span> )<span class="comment"># build/qrc_resource.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell CMake to create the helloworld executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SRC_LIST&#125;</span> <span class="variable">$&#123;ui_FILES&#125;</span> <span class="variable">$&#123;qrc_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">qt5_use_modules</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> Core Widgets OpenGL Xml Gui)</span><br></pre></td></tr></table></figure>

<h3 id="VTK"><a href="#VTK" class="headerlink" title="VTK"></a>VTK</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(VTK <span class="number">8.1</span> REQUIRED)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(CylinderRenderingProperties MACOSX_BUNDLE CylinderRenderingProperties.cxx )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">target_link_libraries</span>(CylinderRenderingProperties <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(PCL <span class="number">1.8</span>.<span class="number">1</span> REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (cloud_viewer cloud_viewer.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (cloud_viewer <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>or with components</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(PCL <span class="number">1.8</span>.<span class="number">1</span> REQUIRED COMPONENTS common io filters visualization)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(cloud_viewer </span><br><span class="line">	<span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_FILTERS_LIBRARIES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;PCL_VISUALIZATION_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h2 id="User-defined-cmake"><a href="#User-defined-cmake" class="headerlink" title="User-defined cmake"></a>User-defined cmake</h2><h3 id="gflags-config-cmake"><a href="#gflags-config-cmake" class="headerlink" title="gflags-config.cmake"></a>gflags-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(GFLAGS_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(GFLAGS_VERSION <span class="number">2.2</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(GFLAGS_ROOT_DIR <span class="string">&quot;C:/car_libs/gflags&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(GFLAGS_INCLUDE_DIR NAMES gflags/gflags.h PATHS <span class="string">&quot;$&#123;GFLAGS_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GFLAGS_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(GFLAGS_LIBRARY NAMES gflags.lib PATHS <span class="string">&quot;$&#123;GFLAGS_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GFLAGS_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(GFLAGS_INCLUDE_DIRS <span class="variable">$&#123;GFLAGS_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(GFLAGS_LIBRARIES <span class="variable">$&#123;GFLAGS_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;gflags-config.cmake &quot;</span> <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="glog-config-cmake"><a href="#glog-config-cmake" class="headerlink" title="glog-config.cmake"></a>glog-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(GLOG_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(GLOG_VERSION <span class="number">0.3</span>.<span class="number">5</span>)</span><br><span class="line"><span class="keyword">set</span>(GLOG_ROOT_DIR <span class="string">&quot;C:/car_libs/glog&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(GLOG_INCLUDE_DIR NAMES glog/logging.h PATHS <span class="string">&quot;$&#123;GLOG_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GLOG_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(GLOG_LIBRARY NAMES glog.lib PATHS <span class="string">&quot;$&#123;GLOG_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(GLOG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(GLOG_INCLUDE_DIRS <span class="variable">$&#123;GLOG_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(GLOG_LIBRARIES <span class="variable">$&#123;GLOG_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;glog-config.cmake &quot;</span> <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="mysqlconcpp-config-cmake"><a href="#mysqlconcpp-config-cmake" class="headerlink" title="mysqlconcpp-config.cmake"></a>mysqlconcpp-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_VERSION <span class="number">1.1</span>)</span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_ROOT_DIR <span class="string">&quot;C:/car_libs/mysqlcppconn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(MYSQLCPPCONN_INCLUDE_DIR NAMES cppconn/driver.h PATHS <span class="string">&quot;$&#123;MYSQLCPPCONN_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(MYSQLCPPCONN_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(MYSQLCPPCONN_LIBRARY NAMES mysqlcppconn.lib PATHS <span class="string">&quot;$&#123;MYSQLCPPCONN_ROOT_DIR&#125;/lib/opt&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(MYSQLCPPCONN_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_INCLUDE_DIRS <span class="variable">$&#123;MYSQLCPPCONN_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(MYSQLCPPCONN_LIBRARIES <span class="variable">$&#123;MYSQLCPPCONN_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmake entry will be saved to build/CMakeCache.txt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;mysqlcppconn-config.cmake &quot;</span> <span class="variable">$&#123;MYSQLCPPCONN_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="libjpegturbo-config-cmake"><a href="#libjpegturbo-config-cmake" class="headerlink" title="libjpegturbo-config.cmake"></a>libjpegturbo-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_VERSION <span class="number">1.5</span>.<span class="number">4</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_ROOT_DIR <span class="string">&quot;C:/car_libs/libjpeg-turbo64&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(LIBJPEGTURBO_INCLUDE_DIR NAMES jpeglib.h turbojpeg.h PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(LIBJPEGTURBO_JPEG_LIBRARY NAMES jpeg.lib PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_JPEG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(LIBJPEGTURBO_TURBOJPEG_LIBRARY NAMES turbojpeg.lib PATHS <span class="string">&quot;$&#123;LIBJPEGTURBO_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_TURBOJPEG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_INCLUDE_DIRS <span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_LIBRARIES <span class="variable">$&#123;LIBJPEGTURBO_JPEG_LIBRARY&#125;</span> <span class="variable">$&#123;LIBJPEGTURBO_TURBOJPEG_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;libjpegturbo-config.cmake &quot;</span> <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="winpcap"><a href="#winpcap" class="headerlink" title="winpcap"></a>winpcap</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(WINPCAP_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(WINPCAP_VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(WINPCAP_ROOT_DIR <span class="string">&quot;C:/car_libs/winpcap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(WINPCAP_INCLUDE_DIR NAMES pcap.h PATHS <span class="string">&quot;$&#123;WINPCAP_ROOT_DIR&#125;/Include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(WINPCAP_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(WINPCAP_LIBRARY NAMES wpcap.lib PATHS <span class="string">&quot;$&#123;WINPCAP_ROOT_DIR&#125;/Lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(WINPCAP_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(WINPCAP_INCLUDE_DIRS <span class="variable">$&#123;WINPCAP_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(WINPCAP_LIBRARIES <span class="variable">$&#123;WINPCAP_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;winpcap-config.cmake &quot;</span> <span class="variable">$&#123;WINPCAP_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="OpenNI2"><a href="#OpenNI2" class="headerlink" title="OpenNI2"></a>OpenNI2</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(OPENNI2_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(OPENNI2_VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(OPENNI2_ROOT_DIR <span class="string">&quot;C:/car_libs/OpenNI2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(OPENNI2_INCLUDE_DIR NAMES OpenNI.h PATHS <span class="string">&quot;$&#123;OPENNI2_ROOT_DIR&#125;/Include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(OPENNI2_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(OPENNI2_LIBRARY NAMES OpenNI2.lib PATHS <span class="string">&quot;$&#123;OPENNI2_ROOT_DIR&#125;/Lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(OPENNI2_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(OPENNI2_INCLUDE_DIRS <span class="variable">$&#123;OPENNI2_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(OPENNI2_LIBRARIES <span class="variable">$&#123;OPENNI2_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;openni2-config.cmake &quot;</span> <span class="variable">$&#123;OPENNI2_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="CMake-Options"><a href="#CMake-Options" class="headerlink" title="CMake Options"></a>CMake Options</h2><h3 id="how-to-find-package"><a href="#how-to-find-package" class="headerlink" title="how to find_package"></a>how to find_package</h3><h4 id="CMAKE-PREFIX-PATH-find-package"><a href="#CMAKE-PREFIX-PATH-find-package" class="headerlink" title="CMAKE_PREFIX_PATH + find_package"></a>CMAKE_PREFIX_PATH + find_package</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(ROOT_CMAKE_DIR /home/user/program/anakin/sdk/cmake)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_PREFIX_PATH <span class="variable">$&#123;CMAKE_PREFIX_PATH&#125;</span> <span class="string">&quot;$&#123;ROOT_CMAKE_DIR&#125;;$&#123;CMAKE_PREFIX_PATH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [cmake] <span class="string">&quot; CMAKE_PREFIX_PATH = $&#123;CMAKE_PREFIX_PATH&#125; for find_package&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find anakin-config.cmake file in CMAKE_PREFIX_PATH </span></span><br><span class="line"><span class="keyword">find_package</span>(ANAKIN REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;ANAKIN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [anakin] <span class="variable">$&#123;ANAKIN_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">message</span>( [anakin] <span class="variable">$&#123;ANAKIN_LIBRARIES&#125;</span> )</span><br></pre></td></tr></table></figure>

<h4 id="include-xxx-config-cmake"><a href="#include-xxx-config-cmake" class="headerlink" title="include xxx-config.cmake"></a>include xxx-config.cmake</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(cmake/anakin-config.cmake)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;ANAKIN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [anakin] <span class="variable">$&#123;ANAKIN_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">message</span>( [anakin] <span class="variable">$&#123;ANAKIN_LIBRARIES&#125;</span> )</span><br></pre></td></tr></table></figure>

<h3 id="c-11"><a href="#c-11" class="headerlink" title="c++11"></a>c++11</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/UnaNancyOwen/VelodyneCapture/blob/master/sample/viewer/FindPCAP.cmake">FindPCAP cmake example</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180208: created.</li>
<li>20180301: add xxx-config.cmake.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>velodyne veloview and velodynecapture guide on windows and ubuntu 16.04</title>
    <url>//blog/velodyne-veloview-and-velodynecapture-guide-on-windows/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-VeloView"><a href="#install-VeloView" class="headerlink" title="install VeloView"></a>install VeloView</h3><p>download <a href="https://www.paraview.org/paraview-downloads/download.php?submit=Download&version=v5.1&type=app&os=win64&downloadFile=VeloView-3.5.0-Windows-64bit.exe">VeloView</a> and install.</p>
<p>For “sensor streaming” (live display of sensor data) it is important to change the network settings of the <code>Ethernet adapter</code> connected to the sensor from <code>automatic IP address</code> to <code>manual IP address</code> selection and choose:</p>
<p>Notes from <a href="https://github.com/Kitware/VeloView">VeloView github</a></p>
<ul>
<li><p>VLP-16 &#x2F;  HDL-32E<br>IP address: 192.168.1.77 (77 as example, any number except 201 works)<br>Gateway: 255.255.255.0</p>
</li>
<li><p>HDL-64E<br>IP address: 192.168.3.77 (77 as example, any number except 43 works)<br>Gateway: 192.168.3.255</p>
</li>
</ul>
<p>In order for sensor streaming to work properly, it is important to disable firewall restrictions for the Ethernet port. Disable the firewall completely for the ethernet device connected to the sensor or explicitly allow data from that Ethernet port of (including both public and private networks).</p>
<h3 id="config-guide"><a href="#config-guide" class="headerlink" title="config guide"></a>config guide</h3><p>Setting up your computer to communicate with the sensor</p>
<ul>
<li>Connect the computer to the interface box with an Ethernet Cable.</li>
<li>Apply power to the sensor.</li>
<li>For now, disable the WiFI connection on your computer.</li>
<li>Configure your computer’s IP address on its Ethernet port to manual mode.</li>
<li>Set your computer’s IP address to <code>192.168.1.77</code> (“77” can be any number except 0, 255, or 201)</li>
<li>Set the subnet mask to 255.255.255.0</li>
<li>Pull up the sensor’s webserver interface by typing the sensor’s network address, <code>192.168.1.201</code>, into the address bar in your web browser</li>
</ul>
<h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><h4 id="windows-ip-config"><a href="#windows-ip-config" class="headerlink" title="windows ip config"></a>windows ip config</h4><ol>
<li><p>set computer IP address on its Ethernet port to to manual mode with ip&#x3D;<code>192.168.1.77</code> (<code>77</code>  can be any number except <code>0,255,201</code>),gateway&#x3D;<code>192.168.1.1</code>,mask&#x3D;<code>255.255.255.0</code></p>
</li>
<li><p>check by ifconfig</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">     </span><br><span class="line"> 以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">    连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">    本地链接 IPv6 地址. . . . . . . . : fe80::9164:9f68:3c08:8493%17</span><br><span class="line">    IPv4 地址 . . . . . . . . . . . . : 192.168.1.77</span><br><span class="line">    子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">    默认网关. . . . . . . . . . . . . : 192.168.1.1</span><br><span class="line"></span><br><span class="line"> 无线局域网适配器 WLAN:</span><br><span class="line"></span><br><span class="line">    连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">    本地链接 IPv6 地址. . . . . . . . : fe80::b13c:895a:8b08:5ec2%6</span><br><span class="line">    IPv4 地址 . . . . . . . . . . . . : 192.168.0.130</span><br><span class="line">    子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">    默认网关. . . . . . . . . . . . . : 192.168.0.1</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="ubuntu-ip-config"><a href="#ubuntu-ip-config" class="headerlink" title="ubuntu ip config"></a>ubuntu ip config</h4><ol>
<li><p>set computer IP address on <code>eth0</code> with ip&#x3D;<code>192.168.1.77</code> (<code>77</code>  can be any number except <code>0,255,201</code>),gateway&#x3D;<code>192.168.1.1</code>,mask&#x3D;<code>255.255.255.0</code></p>
</li>
<li><p>edit network interfaces <code>/etc/network/interfaces</code></p>
   <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.77 </span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1 </span><br></pre></td></tr></table></figure></li>
<li><p>reboot</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> reboot now</span><br></pre></td></tr></table></figure>
</li>
<li><p>check eth0</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ifconfig</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 80:fa:5b:47:92:8a  </span><br><span class="line">          inet addr:192.168.1.77  Bcast:192.168.1.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:4640 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:4640 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:865530 (865.5 KB)  TX bytes:865530 (865.5 KB)</span><br><span class="line"></span><br><span class="line">wlan0     Link encap:Ethernet  HWaddr b0:35:9f:53:68:c6  </span><br><span class="line">          inet addr:192.168.0.130  Bcast:192.168.0.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::a3d7:e190:6fb3:133/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6536 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:380 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:581427 (581.4 KB)  TX bytes:46439 (46.4 KB)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Establish communication with the webserver GUI with <code>Default IP: 192.168.1.201</code> on chrome.</p>
<ul>
<li><p>for windows:<br><img src="https://kezunlin.me/images/posts/635233-20180211140943654-31527519.png" alt="vlp16 web user interface for windows"></p>
</li>
<li><p>for ubuntu<br><img src="https://kezunlin.me/images/posts/635233-20180222154255105-313321611.png" alt="vlp16 web user interface for ubuntu"></p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>we use data port <code>2368</code> in program.</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<ol start="6">
<li>View vlp16 by VeloView</li>
</ol>
<p>  <img src="https://kezunlin.me/images/posts/635233-20180211140949232-1677408378.png" alt="VeloView for vlp16"></p>
<h2 id="VelodyneCapture-Example"><a href="#VelodyneCapture-Example" class="headerlink" title="VelodyneCapture Example"></a>VelodyneCapture Example</h2><p>We can get <code>VelodyneCapture</code> class from <a href="https://github.com/UnaNancyOwen/VelodyneCapture/blob/master/VelodyneCapture.h">VelodyneCapture.h</a></p>
<ul>
<li>HDLGrabber: This Grabber for HDL-64E&#x2F;HDL-32E.</li>
<li>VLPGrabber: This Grabber for VLP-16.</li>
</ul>
<blockquote>
<p>In this article using Velodyne grabber that has implemented in PCL.<br>It returns coordinated Point Cloud data. You don’t need to convert coordinates yourself.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.paraview.org/Wiki/VeloView">VeloView wiki</a></li>
<li><a href="https://github.com/Kitware/VeloView">VeloView github</a></li>
<li><a href="http://blog.csdn.net/zz2862625432/article/details/78112707">vlp16 configure</a></li>
<li><a href="http://unanancyowen.com/en/pcl-with-velodyne/">pcl-with-velodyne</a></li>
<li><a href="http://unanancyowen.com/en/capture-from-velodyne/">VelodyneCapture</a></li>
<li><a href="https://github.com/UnaNancyOwen/VelodyneCapture">VelodyneCapture github</a></li>
<li><a href="http://blog.csdn.net/littlethunder/article/details/51920681">vlp16 usage</a></li>
<li><a href="https://gist.github.com/UnaNancyOwen/9f9459d3c10f7a6325ebebabda9865f7">pcl visualization for Velodyne VLP-16</a></li>
<li><a href="http://unanancyowen.com/en/pcl_kinectv2_without_grabber/">pcl point cloud update&#x2F;add</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180211: created.</li>
<li>20180222: add ubuntu velodyne ip config.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>veloview</tag>
        <tag>velodyne</tag>
        <tag>vlp16</tag>
      </tags>
  </entry>
  <entry>
    <title>how to compile and install poco cpp library on ubuntu 16.04</title>
    <url>//blog/guide-to-compile-and-install-poco-cpp-library-on-ubuntu/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/9587bb47/">how to compile and install poco cpp library on windows</a></li>
<li><strong><a href="https://kezunlin.me/post/281dd8cd/">how to compile and install poco cpp library on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a><del>apt-get</del></h3><blockquote>
<p>install by apt-get, but we can not use <code>find_package(Poco)</code> because no <code>/usr/local/lib/cmake/Poco/PocoConfig.cmake</code> installed.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libpoco-doc libpoco-dev</span><br></pre></td></tr></table></figure>

<h3 id="compile-from-source"><a href="#compile-from-source" class="headerlink" title="compile from source"></a>compile from source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pocoproject.org/releases/poco-1.8.1/poco-1.8.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#Install dependences</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install openssl libssl-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libiodbc2 libiodbc2-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libmysqlclient-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> poco-1.8.1</span><br><span class="line"><span class="comment">#sudo ./configure --omit=Data/ODBC,Data/MySQL --no-tests --no-samples --shared</span></span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake-gui ..</span><br><span class="line"><span class="built_in">sudo</span> make -j8 </span><br><span class="line"><span class="built_in">sudo</span> make install </span><br></pre></td></tr></table></figure>

<p>OK. we install headers to <code>/usr/local/include/Poco</code> and libraries to <code>/usr/local/lib/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /usr/local/libPoco*.so </span><br><span class="line"></span><br><span class="line">/usr/local/lib/libPocoFoundation.so  /usr/local/lib/libPocoNet.so   /usr/local/lib/libPocoXML.so</span><br><span class="line">/usr/local/lib/libPocoJSON.so        /usr/local/lib/libPocoUtil.so</span><br></pre></td></tr></table></figure>

<p>we install cmake files to <code>/usr/local/lib/cmake/Poco</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /usr/local/lib/cmake/Poco</span><br><span class="line"></span><br><span class="line">PocoConfig.cmake                     PocoJSONTargets.cmake          PocoUtilTargets.cmake</span><br><span class="line">PocoConfigVersion.cmake              PocoJSONTargets-release.cmake  PocoUtilTargets-release.cmake</span><br><span class="line">PocoFoundationConfig.cmake           PocoNetConfig.cmake            PocoXMLConfig.cmake</span><br><span class="line">PocoFoundationConfigVersion.cmake    PocoNetConfigVersion.cmake     PocoXMLConfigVersion.cmake</span><br><span class="line">PocoFoundationTargets.cmake          PocoNetTargets.cmake           PocoXMLTargets.cmake</span><br><span class="line">PocoFoundationTargets-release.cmake  PocoNetTargets-release.cmake   PocoXMLTargets-release.cmake</span><br><span class="line">PocoJSONConfig.cmake                 PocoUtilConfig.cmake</span><br><span class="line">PocoJSONConfigVersion.cmake          PocoUtilConfigVersion.cmake</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 2.6)</span><br><span class="line"></span><br><span class="line">project (event_demo)</span><br><span class="line">enable_language(C)</span><br><span class="line">enable_language(CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Always include the source and build directories in the include path.</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find Poco package  1.8.1</span></span><br><span class="line">find_package(Poco REQUIRED COMPONENTS Foundation Util Net XML JSON)</span><br><span class="line"></span><br><span class="line"><span class="comment"># no Poco_INCLUDE_DIRS, we have to set by hand </span></span><br><span class="line"><span class="keyword">if</span>(MSVC) <span class="comment"># WIN32</span></span><br><span class="line">	SET(Poco_INCLUDE_DIRS <span class="string">&quot;C:/Program Files/Poco/include&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	SET(Poco_INCLUDE_DIRS <span class="string">&quot;/usr/local/include/Poco&quot;</span>)</span><br><span class="line">endif(MSVC)</span><br><span class="line"></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Poco_INCLUDE_DIRS = <span class="variable">$&#123;Poco_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Poco_LIBRARIES = <span class="variable">$&#123;Poco_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following folder will be included</span></span><br><span class="line">include_directories(</span><br><span class="line">    <span class="variable">$&#123;MY_SRC_INCLUDE&#125;</span>  </span><br><span class="line">    <span class="variable">$&#123;Poco_INCLUDE_DIRS&#125;</span> </span><br><span class="line">)   </span><br><span class="line"></span><br><span class="line">link_directories(<span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>) </span><br><span class="line"></span><br><span class="line">add_executable(event_demo event_demo.cpp)</span><br><span class="line">target_link_libraries(event_demo <span class="variable">$&#123;Poco_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/lidabo/p/4062071.html">compile poco on ubuntu</a></li>
<li><a href="https://yyangtech.wordpress.com/">install and compile poco on ubuntu</a></li>
<li><a href="https://fedetft.wordpress.com/2010/03/07/cmake-part-3-finding-libraries/">find poco</a></li>
<li><a href="http://svn.mitk.org/trunk/mitk/BlueBerry/CMake/FindPoco.cmake">FindPoco.cmake</a></li>
<li><a href="https://stackoverflow.com/questions/16971349/cmake-cannot-find-custom-module">cmake-cannot-find-custom-module</a></li>
<li><a href="https://github.com/pocoproject/poco/tree/develop/cmake">poco cmake</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180222: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>poco</tag>
      </tags>
  </entry>
  <entry>
    <title>compile glog and glags on ubuntu 16.04</title>
    <url>//blog/compile-glog-and-glags-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/bb64e398/">compile glog and glags on windows</a></li>
<li><strong><a href="https://kezunlin.me/post/977f5125/">compile glog and glags on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="download-source"><a href="#download-source" class="headerlink" title="download source"></a>download source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/schuhschuh/gflags/archive/v2.2.1.tar.gz</span><br><span class="line">wget https://github.com/google/glog/archive/v0.3.5.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="gflags"><a href="#gflags" class="headerlink" title="gflags"></a>gflags</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gflags</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>BUILD_SHARED_LIBS ON 
INSTALL_SHARED_LIBS ON
INSTALL_STATIC_LIBS OFF
CMAKE_CONFIGURATION_TYPES Release
REGISTER_INSTALL_PREFIX OFF

#NAMESPACE google;gflags
NAMESPACE google
</code></pre>
<p>compile and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="gflags-config-cmake"><a href="#gflags-config-cmake" class="headerlink" title="gflags-config.cmake"></a>gflags-config.cmake</h4><p>comes from <code>caffe/cmake/Modules/FindGFlags.cmake</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find GFLAGS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following variables are optionally searched for defaults</span></span><br><span class="line"><span class="comment">#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following are set after configuration is done:</span></span><br><span class="line"><span class="comment">#  GFLAGS_FOUND</span></span><br><span class="line"><span class="comment">#  GFLAGS_INCLUDE_DIRS</span></span><br><span class="line"><span class="comment">#  GFLAGS_LIBRARIES</span></span><br><span class="line"><span class="comment">#  GFLAGS_LIBRARYRARY_DIRS</span></span><br><span class="line"></span><br><span class="line">include(FindPackageHandleStandardArgs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(GFLAGS_ROOT_DIR <span class="string">&quot;&quot;</span> CACHE PATH <span class="string">&quot;Folder contains Gflags&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We are testing only a couple of files in the include directories</span></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    find_path(GFLAGS_INCLUDE_DIR gflags/gflags.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span>/src/windows)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_path(GFLAGS_INCLUDE_DIR gflags/gflags.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">    find_library(GFLAGS_LIBRARY_RELEASE</span><br><span class="line">        NAMES libgflags</span><br><span class="line">        PATHS <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line"></span><br><span class="line">    find_library(GFLAGS_LIBRARY_DEBUG</span><br><span class="line">        NAMES libgflags-debug</span><br><span class="line">        PATHS <span class="variable">$&#123;GFLAGS_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>(GFLAGS_LIBRARY optimized <span class="variable">$&#123;GFLAGS_LIBRARY_RELEASE&#125;</span> debug <span class="variable">$&#123;GFLAGS_LIBRARY_DEBUG&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_library(GFLAGS_LIBRARY gflags)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(GFlags DEFAULT_MSG GFLAGS_INCLUDE_DIR GFLAGS_LIBRARY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(GFLAGS_FOUND)</span><br><span class="line">    <span class="built_in">set</span>(GFLAGS_INCLUDE_DIRS <span class="variable">$&#123;GFLAGS_INCLUDE_DIR&#125;</span>)</span><br><span class="line">    <span class="built_in">set</span>(GFLAGS_LIBRARIES <span class="variable">$&#123;GFLAGS_LIBRARY&#125;</span>)</span><br><span class="line">    message(STATUS <span class="string">&quot;Found gflags  (include: <span class="variable">$&#123;GFLAGS_INCLUDE_DIR&#125;</span>, library: <span class="variable">$&#123;GFLAGS_LIBRARY&#125;</span>)&quot;</span>)</span><br><span class="line">    mark_as_advanced(GFLAGS_LIBRARY_DEBUG GFLAGS_LIBRARY_RELEASE</span><br><span class="line">                     GFLAGS_LIBRARY GFLAGS_INCLUDE_DIR GFLAGS_ROOT_DIR)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<p>copy <code>gflags-config.cmake</code> to <code>/usr/local/lib/cmake/gflags/</code></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="glog"><a href="#glog" class="headerlink" title="glog"></a>glog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> glog</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>WITH_GFLAGS ON 
CMAKE_CONFIGURATION_TYPES Release

BUILD_SHARED_LIBS ON  # new by hand
</code></pre>
<p>compile and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="glog-config-cmake"><a href="#glog-config-cmake" class="headerlink" title="glog-config.cmake"></a>glog-config.cmake</h4><p>comes from <code>caffe/cmake/Modules/FindGFlags.cmake</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find Glog</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following variables are optionally searched for defaults</span></span><br><span class="line"><span class="comment">#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following are set after configuration is done:</span></span><br><span class="line"><span class="comment">#  GLOG_FOUND</span></span><br><span class="line"><span class="comment">#  GLOG_INCLUDE_DIRS</span></span><br><span class="line"><span class="comment">#  GLOG_LIBRARIES</span></span><br><span class="line"><span class="comment">#  GLOG_LIBRARYRARY_DIRS</span></span><br><span class="line"></span><br><span class="line">include(FindPackageHandleStandardArgs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(GLOG_ROOT_DIR <span class="string">&quot;&quot;</span> CACHE PATH <span class="string">&quot;Folder contains Google glog&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    find_path(GLOG_INCLUDE_DIR glog/logging.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span>/src/windows)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_path(GLOG_INCLUDE_DIR glog/logging.h</span><br><span class="line">        PATHS <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">    find_library(GLOG_LIBRARY_RELEASE libglog_static</span><br><span class="line">        PATHS <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line"></span><br><span class="line">    find_library(GLOG_LIBRARY_DEBUG libglog_static</span><br><span class="line">        PATHS <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>(GLOG_LIBRARY optimized <span class="variable">$&#123;GLOG_LIBRARY_RELEASE&#125;</span> debug <span class="variable">$&#123;GLOG_LIBRARY_DEBUG&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    find_library(GLOG_LIBRARY glog</span><br><span class="line">        PATHS <span class="variable">$&#123;GLOG_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES lib lib64)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(Glog DEFAULT_MSG GLOG_INCLUDE_DIR GLOG_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(GLOG_FOUND)</span><br><span class="line">  <span class="built_in">set</span>(GLOG_INCLUDE_DIRS <span class="variable">$&#123;GLOG_INCLUDE_DIR&#125;</span>)</span><br><span class="line">  <span class="built_in">set</span>(GLOG_LIBRARIES <span class="variable">$&#123;GLOG_LIBRARY&#125;</span>)</span><br><span class="line">  message(STATUS <span class="string">&quot;Found glog    (include: <span class="variable">$&#123;GLOG_INCLUDE_DIR&#125;</span>, library: <span class="variable">$&#123;GLOG_LIBRARY&#125;</span>)&quot;</span>)</span><br><span class="line">  mark_as_advanced(GLOG_ROOT_DIR GLOG_LIBRARY_RELEASE GLOG_LIBRARY_DEBUG</span><br><span class="line">                                 GLOG_LIBRARY GLOG_INCLUDE_DIR)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<p>copy <code>glog-config.cmake</code> to <code>/usr/local/lib/cmake/glog/</code></p>
<h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.6)</span><br><span class="line"></span><br><span class="line">project(glog_proj)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Locate GTest</span></span><br><span class="line">find_package(GTest REQUIRED)</span><br><span class="line">include_directories(<span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line">find_package(GFLAGS REQUIRED) </span><br><span class="line">include_directories(<span class="variable">$&#123;GFLAGS_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line">find_package(GLOG REQUIRED) </span><br><span class="line">include_directories(<span class="variable">$&#123;GLOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for windows</span></span><br><span class="line"><span class="comment">#add_definitions( -DGLOG_NO_ABBREVIATED_SEVERITIES ) </span></span><br><span class="line"></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GFLAGS_FOUND = <span class="variable">$&#123;GFLAGS_FOUND&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GFLAGS_INCLUDE_DIRS = <span class="variable">$&#123;GFLAGS_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GFLAGS_LIBRARIES = <span class="variable">$&#123;GFLAGS_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GLOG_FOUND = <span class="variable">$&#123;GLOG_FOUND&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GLOG_INCLUDE_DIRS = <span class="variable">$&#123;GLOG_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; GLOG_LIBRARIES = <span class="variable">$&#123;GLOG_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">add_executable(demo glog_main.cpp)</span><br><span class="line">target_link_libraries (demo  <span class="variable">$&#123;GLOG_LIBRARIES&#125;</span> <span class="variable">$&#123;GFLAGS_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gflags/gflags.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glog/logging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	FLAGS_logtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_alsologtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_colorlogtostderr = true;  </span></span><br><span class="line"><span class="comment">	FLAGS_log_prefix = true;  </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	FLAGS_logbufsecs = 0;  //0 means realtime</span></span><br><span class="line"><span class="comment">	FLAGS_max_log_size = 10;  // MB</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	google::<span class="built_in">InitGoogleLogging</span>(argv[<span class="number">0</span>]); <span class="comment">// init google logging</span></span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_FATAL, <span class="string">&quot;../log/log_fatal_&quot;</span>); </span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_ERROR, <span class="string">&quot;../log/log_error_&quot;</span>); </span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_WARNING, <span class="string">&quot;../log/log_warning_&quot;</span>);</span><br><span class="line">	google::<span class="built_in">SetLogDestination</span>(google::GLOG_INFO, <span class="string">&quot;../log/log_info_&quot;</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Hello GLOG&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/977f5125/">compile glog and glags on windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180223: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>gflags</tag>
        <tag>glog</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and use libjpeg-turbo on ubuntu 16.04</title>
    <url>//blog/compile-and-use-libjpeg-turbo-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/83828674/">compile and use libjpeg-turbo on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/9f626e7a/">compile and use libjpeg-turbo on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="build-requirements"><a href="#build-requirements" class="headerlink" title="build requirements"></a>build requirements</h3><ul>
<li>autoconf 2.56 or later</li>
<li>automake 1.7 or later</li>
<li>libtool 1.4 or later</li>
<li>NASM 2.13 x86-64</li>
<li>libjpeg-turbo latest</li>
</ul>
<p>install tools</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install autoconf automake libtool</span><br></pre></td></tr></table></figure>

<h3 id="compile-nasm"><a href="#compile-nasm" class="headerlink" title="compile nasm"></a>compile nasm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nasm </span><br><span class="line">./configure </span><br><span class="line">make  -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>this will install <code>nasm</code> to <code>/usr/local/bin/nasm</code></p>
</blockquote>
<h3 id="compile-libjpeg"><a href="#compile-libjpeg" class="headerlink" title="compile libjpeg"></a>compile libjpeg</h3><blockquote>
<p>We can not use cmake to build libjpeg on linux.<br>Platform not supported by this build system.  Use autotools instead.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/libjpeg-turbo/libjpeg-turbo.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> libjpeg-turob</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate configure</span></span><br><span class="line">autoreconf -fiv </span><br><span class="line"></span><br><span class="line"><span class="comment"># exec-prefix=/usr/local/ for /bin and /lib </span></span><br><span class="line"><span class="comment"># prefix=/usr/local/include/libjpegturbo for /include</span></span><br><span class="line">./configure --exec-prefix=/usr/local --prefix=/usr/local/include/libjpegturbo --with-jpeg8 --disable-static</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h3 id="libjpegturbo-config-cmake"><a href="#libjpegturbo-config-cmake" class="headerlink" title="libjpegturbo-config.cmake"></a>libjpegturbo-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find LIBJPEGTURBO</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following variables are optionally searched for defaults</span></span><br><span class="line"><span class="comment">#  LIBJPEGTURBO_ROOT_DIR:            Base directory where all LIBJPEGTURBO components are found</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following are set after configuration is done:</span></span><br><span class="line"><span class="comment">#  LIBJPEGTURBO_FOUND</span></span><br><span class="line"><span class="comment">#  LIBJPEGTURBO_INCLUDE_DIRS</span></span><br><span class="line"><span class="comment">#  LIBJPEGTURBO_LIBRARIES</span></span><br><span class="line"><span class="comment">#  LIBJPEGTURBO_LIBRARYRARY_DIRS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(FindPackageHandleStandardArgs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(LIBJPEGTURBO_ROOT_DIR <span class="string">&quot;&quot;</span> CACHE PATH <span class="string">&quot;Folder contains mysqlcppconn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">find_path</span>(LIBJPEGTURBO_INCLUDE_DIR turbojpeg.h</span><br><span class="line">        PATHS <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">find_path</span>(LIBJPEGTURBO_INCLUDE_DIR turbojpeg.h</span><br><span class="line">        PATHS <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">    <span class="keyword">find_library</span>(LIBJPEGTURBO_LIBRARY_RELEASE turbojpeg</span><br><span class="line">        PATHS <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Release)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">find_library</span>(LIBJPEGTURBO_LIBRARY_DEBUG turbojpeg</span><br><span class="line">        PATHS <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES Debug)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(LIBJPEGTURBO_LIBRARY optimized <span class="variable">$&#123;LIBJPEGTURBO_LIBRARY_RELEASE&#125;</span> debug <span class="variable">$&#123;LIBJPEGTURBO_LIBRARY_DEBUG&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">find_library</span>(LIBJPEGTURBO_LIBRARY turbojpeg</span><br><span class="line">        PATHS <span class="variable">$&#123;LIBJPEGTURBO_ROOT_DIR&#125;</span></span><br><span class="line">        PATH_SUFFIXES lib lib64)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(LIBJPEGTURBO DEFAULT_MSG LIBJPEGTURBO_INCLUDE_DIR LIBJPEGTURBO_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LIBJPEGTURBO_FOUND)</span><br><span class="line">  <span class="keyword">set</span>(LIBJPEGTURBO_INCLUDE_DIRS <span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIR&#125;</span>)</span><br><span class="line">  <span class="keyword">set</span>(LIBJPEGTURBO_LIBRARIES <span class="variable">$&#123;LIBJPEGTURBO_LIBRARY&#125;</span>)</span><br><span class="line">  <span class="keyword">message</span>(STATUS <span class="string">&quot;Found mysqlcppconn    (include: $&#123;LIBJPEGTURBO_INCLUDE_DIR&#125;, library: $&#123;LIBJPEGTURBO_LIBRARY&#125;)&quot;</span>)</span><br><span class="line">  <span class="keyword">mark_as_advanced</span>(LIBJPEGTURBO_ROOT_DIR LIBJPEGTURBO_LIBRARY_RELEASE LIBJPEGTURBO_LIBRARY_DEBUG</span><br><span class="line">                                 LIBJPEGTURBO_LIBRARY LIBJPEGTURBO_INCLUDE_DIR)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<p>copy <code>libjpegturbo-config.cmake</code> to <code>/usr/local/lib/cmake/libjpegturbo/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /usr/local/lib/cmake/libjpegturbo/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> libjpegturbo-config.cmake /usr/local/lib/cmake/libjpegturbo/</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(LIBJPEGTURBO REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;LIBJPEGTURBO_INCLUDE_DIRS&#125;</span>)  </span><br><span class="line"><span class="keyword">target_link_libraries</span> (example_jpeg <span class="variable">$&#123;LIBJPEGTURBO_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo/blob/master/BUILDING.md">building libjpeg</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180223: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>libjpeg-turbo</tag>
        <tag>libjpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>compile opengv on windows 10</title>
    <url>//blog/compile-opengv-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/51cd9fa0/">compile opengv on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/1e5d14ee/">compile opengv on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="prerequiests"><a href="#prerequiests" class="headerlink" title="prerequiests"></a>prerequiests</h3><ul>
<li>Visual Studio 2015</li>
<li>LLVM 5.0.1</li>
<li>eigen3</li>
<li>cmake</li>
<li>opengv latest</li>
</ul>
<h3 id="install-llvm-clang"><a href="#install-llvm-clang" class="headerlink" title="install llvm+clang"></a>install llvm+clang</h3><pre><code>wget http://releases.llvm.org/5.0.1/LLVM-5.0.1-win64.exe
</code></pre>
<p>and install llvm to system.</p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><pre><code>git clone https://github.com/laurentkneip/opengv

cd opengv 
mkdir build &amp;&amp; cd build &amp;&amp; cmake-gui ..
</code></pre>
<p><code>Configure</code> and choose generator <code>Visual Studio 14 2015 Win64</code> and set toolset <code>LLVM-vs2014</code> (by default <code>Visual Studio 2015 (v140)</code>)</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180226100744986-1208588608.png" alt="llvm toolset for vs2015"><br>OK.</p>
<p>with options </p>
<pre><code>CMAKE_CONFIGURATION_TYPES Release
EIGEN_INCLUDE_DIR C:/Program Files/PCL 1.8.1/3rdParty/Eigen/eigen3
BUILD_PYTHON OFF
BUILD_TESTS OFF
</code></pre>
<p>generate <code>opengv.sln</code>. </p>
<p>we can see toolset has benn changed from <code>Visual Studio 2015 (v140)</code> to <code>LLVM-vs2014</code>.<br><img src="https://kezunlin.me/images/posts/635233-20180226101146634-357121069.png" alt="toolset"></p>
<p>compile project and <code>opengv.lib</code> and <code>random_generators.lib</code> will be generated.</p>
<p>install to <code>C:/Program Files/opengv</code>.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://laurentkneip.github.io/opengv/page_installation.html">opengv install</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180124: created.</li>
</ul>
<h1 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h1><ul>
<li>Post author: <a href="https://kezunlin.me/">kezunlin</a></li>
<li>Post link: <a href="https://kezunlin.me/post/51cd9fa0/">https://kezunlin.me/post/51cd9fa0/</a></li>
<li>Copyright Notice: All articles in this blog are licensed under CC BY-NC-SA 3.0 unless stating additionally.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>llvm</tag>
        <tag>clang</tag>
        <tag>opengv</tag>
      </tags>
  </entry>
  <entry>
    <title>compile opengv on ubuntu 16.04</title>
    <url>//blog/compile-opengv-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/51cd9fa0/">compile opengv on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/1e5d14ee/">compile opengv on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install cmake libeigen3-dev</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/laurentkneip/opengv</span><br><span class="line"><span class="built_in">cd</span> opengv </span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://laurentkneip.github.io/opengv/page_installation.html">opengv install</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180126: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opengv</tag>
      </tags>
  </entry>
  <entry>
    <title>Interfacing C++ and Python with pybind11 on windows 10</title>
    <url>//blog/Interfacing-C-and-Python-with-pybind11/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/8b9c051d/">Part 1: Interfacing C++ and Python with pybind11 on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/a41adc1/">Part 2: Interfacing C++ and Python with pybind11 on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>pybind11 v2.3.dev0</li>
<li>python 2.7</li>
</ul>
<h3 id="install-pytest"><a href="#install-pytest" class="headerlink" title="install pytest"></a>install pytest</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pytest </span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pybind/pybind11.git</span><br><span class="line"><span class="built_in">cd</span> pybind11</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options</p>
<pre><code>PYBIND11_CPP_STANDARD /std:c++11 # default c++14
PYTHON_EXECUTABLE C:/Python27/python.exe
CMAKE_INSTALL_PREFIX C:/Program Files/pybind11
</code></pre>
<p>compile with <code>VS 2015</code> with <code>x64 Release</code></p>
<p>install to <code>C:\Program Files\pybind11</code> with only <code>include</code> and <code>share</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree .</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── include</span><br><span class="line">│   └── pybind11</span><br><span class="line">│       ├── attr.h</span><br><span class="line">│       ├── buffer_info.h</span><br><span class="line">│       ├── cast.h</span><br><span class="line">│       ├── chrono.h</span><br><span class="line">│       ├── common.h</span><br><span class="line">│       ├── complex.h</span><br><span class="line">│       ├── detail</span><br><span class="line">│       │   ├── class.h</span><br><span class="line">│       │   ├── common.h</span><br><span class="line">│       │   ├── descr.h</span><br><span class="line">│       │   ├── init.h</span><br><span class="line">│       │   ├── internals.h</span><br><span class="line">│       │   └── typeid.h</span><br><span class="line">│       ├── eigen.h</span><br><span class="line">│       ├── embed.h</span><br><span class="line">│       ├── eval.h</span><br><span class="line">│       ├── functional.h</span><br><span class="line">│       ├── iostream.h</span><br><span class="line">│       ├── numpy.h</span><br><span class="line">│       ├── operators.h</span><br><span class="line">│       ├── options.h</span><br><span class="line">│       ├── pybind11.h</span><br><span class="line">│       ├── pytypes.h</span><br><span class="line">│       ├── stl.h</span><br><span class="line">│       └── stl_bind.h</span><br><span class="line">└── share</span><br><span class="line">    └── cmake</span><br><span class="line">        └── pybind11</span><br><span class="line">            ├── FindPythonLibsNew.cmake</span><br><span class="line">            ├── pybind11Config.cmake</span><br><span class="line">            ├── pybind11ConfigVersion.cmake</span><br><span class="line">            ├── pybind11Targets.cmake</span><br><span class="line">            └── pybind11Tools.cmake</span><br><span class="line"></span><br><span class="line">6 directories, 29 files</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="pybind11-cpp—-python"><a href="#pybind11-cpp—-python" class="headerlink" title="pybind11 (cpp—&gt;python)"></a>pybind11 (cpp—&gt;python)</h3><ul>
<li>module: examplelib </li>
<li>target: examplelib</li>
<li>cpp: example.cpp</li>
</ul>
<h4 id="example-cpp"><a href="#example-cpp" class="headerlink" title="example.cpp"></a>example.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pybind11/pybind11.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> py = pybind11;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;pybind11/pybind11.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">namespace py = pybind11;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int add(int i, int j) &#123;</span></span><br><span class="line"><span class="comment">    return i + j;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct Pet &#123;</span></span><br><span class="line"><span class="comment">	Pet(const std::string &amp;name) : name(name) &#123; &#125;</span></span><br><span class="line"><span class="comment">	void setName(const std::string &amp;name_) &#123; name = name_; &#125;</span></span><br><span class="line"><span class="comment">	const std::string &amp;getName() const &#123; return name; &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	std::string name;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">module: examplelib </span></span><br><span class="line"><span class="comment">target: examplelib</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cpp: example.cpp</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">PYBIND11_MODULE</span>(examplelib, m)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// optional module docstring</span></span><br><span class="line">	m.<span class="built_in">doc</span>() = <span class="string">&quot;pybind11 example plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// FUNCTIONS</span></span><br><span class="line">	<span class="comment">// expose add function, and add keyword arguments and default arguments</span></span><br><span class="line">	m.<span class="built_in">def</span>(<span class="string">&quot;add&quot;</span>, &amp;add, <span class="string">&quot;A function which adds two numbers&quot;</span>, py::<span class="built_in">arg</span>(<span class="string">&quot;i&quot;</span>) = <span class="number">1</span>, py::<span class="built_in">arg</span>(<span class="string">&quot;j&quot;</span>) = <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// DATA</span></span><br><span class="line">	<span class="comment">// exporting variables</span></span><br><span class="line">	m.<span class="built_in">attr</span>(<span class="string">&quot;the_answer&quot;</span>) = <span class="number">42</span>;</span><br><span class="line">	py::object world = py::<span class="built_in">cast</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">	m.<span class="built_in">attr</span>(<span class="string">&quot;what&quot;</span>) = world;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// CLASSES</span></span><br><span class="line">	py::<span class="built_in">class_</span>&lt;Pet&gt;(m, <span class="string">&quot;Pet&quot;</span>)</span><br><span class="line">		.<span class="built_in">def</span>(py::<span class="built_in">init</span>&lt;<span class="type">const</span> std::string &amp;&gt;())</span><br><span class="line">		.<span class="built_in">def</span>(<span class="string">&quot;setName&quot;</span>, &amp;Pet::setName)</span><br><span class="line">		.<span class="built_in">def</span>(<span class="string">&quot;getName&quot;</span>, &amp;Pet::getName);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	python3 </span></span><br><span class="line"><span class="comment">	&gt; help(examplelib)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (pybind)</span><br><span class="line"><span class="keyword">enable_language</span>(C)</span><br><span class="line"><span class="keyword">enable_language</span>(CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(pybind11 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;pybind11_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>([MAIN] <span class="string">&quot;Found pybind11 v$&#123;pybind11_VERSION&#125;: $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_INCLUDE_DIRS = $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_LIBRARIES = $&#123;pybind11_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # Create an extension module</span></span><br><span class="line"><span class="comment">#   add_library(mylib MODULE main.cpp)</span></span><br><span class="line"><span class="comment">#   target_link_libraries(mylib pybind11::module)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # Or embed the Python interpreter into an executable</span></span><br><span class="line"><span class="comment">#   add_executable(myexe main.cpp)</span></span><br><span class="line"><span class="comment">#   target_link_libraries(myexe pybind11::embed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method (1): generate `examplelib.pyd`</span></span><br><span class="line">pybind11_add_module(examplelib example.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># method (2): generate `examplelib.dll` rename to `examplelib.pyd`</span></span><br><span class="line"><span class="comment">#add_library(examplelib MODULE example.cpp)</span></span><br><span class="line"><span class="comment">#target_link_libraries(examplelib pybind11::module)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_INCLUDE_DIRS = $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_LIBRARIES = $&#123;pybind11_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_executable(cpp_use_python cpp_use_python.cpp)</span></span><br><span class="line"><span class="comment">#target_link_libraries(cpp_use_python PRIVATE pybind11::embed)</span></span><br></pre></td></tr></table></figure>

<p>cmake and config<br><img src="https://kezunlin.me/images/posts/635233-20181022170334976-1503750882.png" alt="cmake"></p>
<p>build with vs and we get 3 files:</p>
<pre><code>examplelib.lib 
examplelib.exp
examplelib.cp35-win_amd64.pyd
</code></pre>
<h4 id="python-import-examplelib"><a href="#python-import-examplelib" class="headerlink" title="python import examplelib"></a>python import examplelib</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> python3</span><br><span class="line">Python <span class="number">3.5</span><span class="number">.3</span> (v3<span class="number">.5</span><span class="number">.3</span>:1880cb95a742, Jan <span class="number">16</span> <span class="number">2017</span>, <span class="number">16</span>:02:<span class="number">32</span>) [MSC v<span class="number">.1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> examplelib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(examplelib)</span><br><span class="line">Help on module examplelib:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    examplelib - pybind11 example plugin</span><br><span class="line"></span><br><span class="line">CLASSES</span><br><span class="line">    pybind11_builtins.pybind11_object(builtins.<span class="built_in">object</span>)</span><br><span class="line">        Pet</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pet</span>(pybind11_builtins.pybind11_object)</span><br><span class="line">     |  Method resolution order:</span><br><span class="line">     |      Pet</span><br><span class="line">     |      pybind11_builtins.pybind11_object</span><br><span class="line">     |      builtins.<span class="built_in">object</span></span><br><span class="line">     |</span><br><span class="line">     |  Methods defined here:</span><br><span class="line">     |</span><br><span class="line">     |  __init__(...)</span><br><span class="line">     |      __init__(<span class="variable language_">self</span>: examplelib.Pet, arg0: <span class="built_in">str</span>) -&gt; <span class="literal">None</span></span><br><span class="line">     |</span><br><span class="line">     |  getName(...)</span><br><span class="line">     |      getName(<span class="variable language_">self</span>: examplelib.Pet) -&gt; <span class="built_in">str</span></span><br><span class="line">     |</span><br><span class="line">     |  setName(...)</span><br><span class="line">     |      setName(<span class="variable language_">self</span>: examplelib.Pet, arg0: <span class="built_in">str</span>) -&gt; <span class="literal">None</span></span><br><span class="line">     |</span><br><span class="line">     |  ----------------------------------------------------------------------</span><br><span class="line">     |  Methods inherited <span class="keyword">from</span> pybind11_builtins.pybind11_object:</span><br><span class="line">     |</span><br><span class="line">     |  __new__(*args, **kwargs) <span class="keyword">from</span> pybind11_builtins.pybind11_type</span><br><span class="line">     |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new <span class="built_in">object</span>.  See <span class="built_in">help</span>(<span class="built_in">type</span>) <span class="keyword">for</span> accurate signature.</span><br><span class="line"></span><br><span class="line">FUNCTIONS</span><br><span class="line">    add(...) method of builtins.PyCapsule instance</span><br><span class="line">        add(i: <span class="built_in">int</span> = <span class="number">1</span>, j: <span class="built_in">int</span> = <span class="number">2</span>) -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">        A function which adds two numbers</span><br><span class="line"></span><br><span class="line">DATA</span><br><span class="line">    the_answer = <span class="number">42</span></span><br><span class="line">    what = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"></span><br><span class="line">FILE</span><br><span class="line">    e:\git\car\extra\pybind11\build\release\examplelib.cp35-win_amd64.pyd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = examplelib.Pet(<span class="string">&#x27;kzl&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(p)</span><br><span class="line">&lt;examplelib.Pet <span class="built_in">object</span> at <span class="number">0x0000025EED9E3D18</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.getName()</span><br><span class="line"><span class="string">&#x27;kzl&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>examplelib.add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>examplelib.the_answer</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>examplelib.what</span><br><span class="line"><span class="string">&#x27;World&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h3><h4 id="example-py"><a href="#example-py" class="headerlink" title="example.py"></a>example.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">i, j</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello, pybind11&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> i+j</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">		<span class="variable language_">self</span>.name = name</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">my_add</span>(<span class="params">self,i,j</span>):</span><br><span class="line">		<span class="keyword">return</span> i + j</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">my_strcon</span>(<span class="params">self,a,b</span>):</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>

<h4 id="cpp-use-python-cpp"><a href="#cpp-use-python-cpp" class="headerlink" title="cpp_use_python.cpp"></a>cpp_use_python.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pybind11/embed.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> py = pybind11;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	py::scoped_interpreter python;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	import sys</span></span><br><span class="line"><span class="comment">	print sys.path</span></span><br><span class="line"><span class="comment">	print &quot;Hello,World!&quot;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	py::<span class="keyword">module</span> sys = py::<span class="keyword">module</span>::<span class="built_in">import</span>(<span class="string">&quot;sys&quot;</span>);</span><br><span class="line">	py::<span class="built_in">print</span>(sys.<span class="built_in">attr</span>(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">	py::<span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// use the Python API</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	import example</span></span><br><span class="line"><span class="comment">	n = example.add(1,2)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	py::<span class="keyword">module</span> example = py::<span class="keyword">module</span>::<span class="built_in">import</span>(<span class="string">&quot;example&quot;</span>);</span><br><span class="line">	py::object result = example.<span class="built_in">attr</span>(<span class="string">&quot;add&quot;</span>)(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> n = result.<span class="built_in">cast</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">	<span class="built_in">assert</span>(n == <span class="number">3</span>);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;result from example.add(1,2) = &quot;</span> &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	from example import MyMath</span></span><br><span class="line"><span class="comment">	obj = MyMath(&quot;v0&quot;)</span></span><br><span class="line"><span class="comment">	obj.my_add(1,2)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	py::object MyMath = py::<span class="keyword">module</span>::<span class="built_in">import</span>(<span class="string">&quot;example&quot;</span>).<span class="built_in">attr</span>(<span class="string">&quot;MyMath&quot;</span>); <span class="comment">// class</span></span><br><span class="line">	py::object obj = <span class="built_in">MyMath</span>(<span class="string">&quot;v0&quot;</span>); <span class="comment">// class object</span></span><br><span class="line">	py::object my_add = obj.<span class="built_in">attr</span>(<span class="string">&quot;my_add&quot;</span>);<span class="comment">// object method</span></span><br><span class="line">	py::object result2 = <span class="built_in">my_add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// result</span></span><br><span class="line">	<span class="type">int</span> n2 = result<span class="number">2.</span><span class="built_in">cast</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">// cast from python type to c++ type</span></span><br><span class="line">	<span class="built_in">assert</span>(n2 == <span class="number">3</span>);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;result from obj.my_add(1,2) = &quot;</span> &lt;&lt; n2 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	from example import MyMath</span></span><br><span class="line"><span class="comment">	obj = MyMath(&quot;v0&quot;)</span></span><br><span class="line"><span class="comment">	obj.my_strcon(&quot;abc&quot;,&quot;123&quot;);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	py::object my_strcon = obj.<span class="built_in">attr</span>(<span class="string">&quot;my_strcon&quot;</span>); <span class="comment">// object method</span></span><br><span class="line">	py::object result3 = <span class="built_in">my_strcon</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">	std::string str3 = result<span class="number">3.</span><span class="built_in">cast</span>&lt;std::string&gt;();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;result from obj.my_strcon(abc,123) = &quot;</span> &lt;&lt; str3 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (pybind)</span><br><span class="line"><span class="keyword">enable_language</span>(C)</span><br><span class="line"><span class="keyword">enable_language</span>(CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(pybind11 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;pybind11_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_INCLUDE_DIRS = $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_LIBRARIES = $&#123;pybind11_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(cpp_use_python cpp_use_python.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(cpp_use_python PRIVATE pybind11::embed)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://pybind11.readthedocs.io/en/stable/">pybind11</a></li>
<li><a href="http://pybind11.readthedocs.io/en/stable/advanced/embedding.html">pybind11 embedding</a></li>
<li><a href="http://pybind11.readthedocs.io/en/stable/advanced/pycpp/object.html#accessing-python-libraries-from-c">accessing-python-libraries-from-c</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180301: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>pybind11</tag>
      </tags>
  </entry>
  <entry>
    <title>compile boost 1.66.0 from source on windows 10</title>
    <url>//blog/compile-boost-1-66-0-from-source-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/d5d4a460/">compile boost 1.66.0 from source on ubuntu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/854071ac/">compile boost 1.66.0 from source on windows 10</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.zip</span><br><span class="line">unzip boost_1_66_0.zip</span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> boost_1_66_0</span><br><span class="line"></span><br><span class="line">./bootstrap.bat </span><br><span class="line"></span><br><span class="line">./b2 --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">./b2 --clean</span><br><span class="line"></span><br><span class="line">./b2 -j8 toolset=msvc-14.0 address-model=64 architecture=x86 <span class="built_in">link</span>=static threading=multi runtime-link=shared --build-type=minimal stage --stagedir=stage/x64 debug release</span><br><span class="line"></span><br><span class="line"><span class="comment">#./b2 -j8 toolset=msvc-14.0 address-model=32 architecture=x86 link=static threading=multi runtime-link=shared --build-type=minimal stage --stagedir=stage/win32 debug release</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://studiofreya.com/2015/12/19/how-to-build-boost-1-60-with-visual-studio-2015/">how-to-build-boost-1-60-with-visual-studio-2015</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180301: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>compile gtest on windows 10</title>
    <url>//blog/compile-gtest-from-source-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/4a1427cf/">compile gtest on ubuntu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/aca50ff8/">compile gtest on windows 10</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/google/googletest/archive/release-1.8.0.zip </span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">sudo</span> cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>BUILD_SHARED_LIBS ON
CMAKE_CONFIGURATION_TYPES Release
</code></pre>
<p>compile and install gtest to <code>C:\Program Files\gtest</code>.</p>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(MSVC) </span><br><span class="line">	<span class="keyword">SET</span>(GTEST_ROOT <span class="string">&quot;C:/Program Files/gtest&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># BOOST_THREAD_LIBRARY  /usr/lib/x86_64-linux-gnu/libpthread.so</span></span><br><span class="line">	<span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; BOOST_THREAD_LIBRARY = $&#123;BOOST_THREAD_LIBRARY&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED) <span class="comment"># GTest 1.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED) <span class="comment"># GTest 1.8.0</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;GTEST_LIBRARIES&#125;</span> <span class="variable">$&#123;BOOST_THREAD_LIBRARY&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/4a1427cf/">compile gtest on ubuntu 16.04</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180301:  created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>gtest</tag>
      </tags>
  </entry>
  <entry>
    <title>pcl octree search and change detection and compression</title>
    <url>//blog/pcl-octree-search-and-change-detection-and-compression/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="header-files"><a href="#header-files" class="headerlink" title="header files"></a>header files</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/octree/octree_search.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/octree/octree_pointcloud_changedetector.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/compression/octree_pointcloud_compression.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">octree_search</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//srand((unsigned int)time(NULL));</span></span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Generate pointcloud data</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.<span class="built_in">resize</span>(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> resolution = <span class="number">128.0f</span>;</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">octree::OctreePointCloudSearch&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(resolution)</span></span>;</span><br><span class="line"></span><br><span class="line">	octree.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line">	octree.<span class="built_in">addPointsFromInputCloud</span>();</span><br><span class="line"></span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line"></span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Neighbors within voxel search</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// These indices relate to points which fall within the same voxel</span></span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; pointIdxVec;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (octree.<span class="built_in">voxelSearch</span>(searchPoint, pointIdxVec))</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Neighbors within voxel search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z &lt;&lt; <span class="string">&quot;)&quot;</span></span><br><span class="line">			&lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxVec.<span class="built_in">size</span>(); ++i)</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].z &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// K nearest neighbor search</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> K = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; pointIdxNKNSearch;</span><br><span class="line">	std::vector&lt;<span class="type">float</span>&gt; pointNKNSquaredDistance;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;K nearest neighbor search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with K=&quot;</span> &lt;&lt; K &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (octree.<span class="built_in">nearestKSearch</span>(searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxNKNSearch.<span class="built_in">size</span>(); ++i)</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Neighbors within radius search</span></span><br><span class="line"></span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; pointIdxRadiusSearch;</span><br><span class="line">	std::vector&lt;<span class="type">float</span>&gt; pointRadiusSquaredDistance;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> radius = <span class="number">256.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (octree.<span class="built_in">radiusSearch</span>(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.<span class="built_in">size</span>(); ++i)</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="change-detection"><a href="#change-detection" class="headerlink" title="change detection"></a>change detection</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">octree_change_detection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//srand((unsigned int)time(NULL));</span></span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Octree resolution - side length of octree voxels</span></span><br><span class="line">	<span class="type">float</span> resolution = <span class="number">32.0f</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate octree-based point cloud change detection class</span></span><br><span class="line">	pcl::<span class="function">octree::OctreePointCloudChangeDetector&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(resolution)</span></span>;</span><br><span class="line"></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloudA</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Generate pointcloud data for cloudA</span></span><br><span class="line">	cloudA-&gt;width = <span class="number">128</span>;</span><br><span class="line">	cloudA-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloudA-&gt;points.<span class="built_in">resize</span>(cloudA-&gt;width * cloudA-&gt;height);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloudA-&gt;points.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloudA-&gt;points[i].x = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloudA-&gt;points[i].y = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloudA-&gt;points[i].z = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add points from cloudA to octree</span></span><br><span class="line">	octree.<span class="built_in">setInputCloud</span>(cloudA);</span><br><span class="line">	octree.<span class="built_in">addPointsFromInputCloud</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Switch octree buffers: This resets octree but keeps previous tree structure in memory.</span></span><br><span class="line">	octree.switchBuffers();</span><br><span class="line"></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloudB</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Generate pointcloud data for cloudB </span></span><br><span class="line">	cloudB-&gt;width = <span class="number">128</span>;</span><br><span class="line">	cloudB-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloudB-&gt;points.<span class="built_in">resize</span>(cloudB-&gt;width * cloudB-&gt;height);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloudB-&gt;points.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloudB-&gt;points[i].x = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloudB-&gt;points[i].y = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloudB-&gt;points[i].z = <span class="number">64.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add points from cloudB to octree</span></span><br><span class="line">	octree.<span class="built_in">setInputCloud</span>(cloudB);</span><br><span class="line">	octree.<span class="built_in">addPointsFromInputCloud</span>();</span><br><span class="line"></span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; newPointIdxVector;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get vector of point indices from octree voxels which did not exist in previous buffer</span></span><br><span class="line">	octree.<span class="built_in">getPointIndicesFromNewVoxels</span>(newPointIdxVector);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Output points</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Output from getPointIndicesFromNewVoxels:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; newPointIdxVector.<span class="built_in">size</span>(); ++i)</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;# Index:&quot;</span> &lt;&lt; newPointIdxVector[i]</span><br><span class="line">		&lt;&lt; <span class="string">&quot;  Point:&quot;</span> &lt;&lt; cloudB-&gt;points[newPointIdxVector[i]].x &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">		&lt;&lt; cloudB-&gt;points[newPointIdxVector[i]].y &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">		&lt;&lt; cloudB-&gt;points[newPointIdxVector[i]].z &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.pointclouds.org/documentation/tutorials/compression.php#octree-compression">octree-compression</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180328: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>compile dlib on windows 10</title>
    <url>//blog/guide-to-compile-dlib-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/654a6d04/">Part 1: compile dlib on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/c6ead512/">Part 2: compile dlib on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/davisking/dlib.git</span><br><span class="line"><span class="built_in">cd</span> dlib &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>CMAKE_INSTALL_PREFIX  C:/Program Files/dlib
</code></pre>
<p>configure and compile with <code>Visual Studio 2015</code> and install to <code>C:/Program Files/dlib</code>.</p>
<blockquote>
<p>By default, <code>dlib19.10.0_release_64bit_msvc1900.lib</code> will be generated.</p>
</blockquote>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">12</span>)</span><br><span class="line"><span class="comment"># Every project needs a name.  We call this the &quot;examples&quot; project.</span></span><br><span class="line"><span class="keyword">project</span>(examples)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell cmake we will need dlib.  This command will pull in dlib and compile it</span></span><br><span class="line"><span class="comment"># into your project.  Note that you don&#x27;t need to compile or install dlib.  All</span></span><br><span class="line"><span class="comment"># cmake needs is the dlib source code folder and it will take care of everything.</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(../dlib dlib_build)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo demo.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo dlib::dlib)</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(dlib REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">	<span class="keyword">set</span>(dlib_LIBRARIES <span class="string">&quot;C:/Program Files/dlib/lib/dlib.lib&quot;</span>) <span class="comment"># replace dlib::dlib</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"><span class="comment"># $&#123;dlib_INCLUDE_DIRS&#125; and $&#123;dlib_LIBRARIES&#125; are deprecated, simply use target_link_libraries(your_app dlib::dlib)</span></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; dlib_INCLUDE_DIRS = $&#123;dlib_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; dlib_LIBRARIES = $&#123;dlib_LIBRARIES&#125;&quot;</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo demo.cpp)</span><br><span class="line"><span class="comment">#target_link_libraries(demo $&#123;dlib_LIBRARIES&#125;)</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo dlib::dlib)</span><br></pre></td></tr></table></figure>

<h3 id="dlib-for-python-api"><a href="#dlib-for-python-api" class="headerlink" title="dlib for python api"></a>dlib for python api</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tools/python</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>compile <code>dlib_python</code> with <code>Visual Studio 2015</code> and <code>dlib.pyd</code> will be generated.</p>
<p>copy <code>dlib.pyd</code> to <code>C:\Python27\Lib\site-packages</code>.</p>
<h4 id="test-dlib-for-python"><a href="#test-dlib-for-python" class="headerlink" title="test dlib for python"></a>test dlib for python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="built_in">dir</span>(dlib)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/davisking/dlib/blob/master/examples/CMakeLists.txt">dlib github</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180330: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>dlib</tag>
      </tags>
  </entry>
  <entry>
    <title>guide to install and configure mago3d on windows 10</title>
    <url>//blog/guide-to-install-and-configure-mago3d-on-windows-10/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-softwares"><a href="#install-softwares" class="headerlink" title="install softwares"></a>install softwares</h3><ul>
<li><p>mago3d: v1.0.0 from</p>
<p>  wget <a href="https://codeload.github.com/Gaia3D/mago3d/zip/v1.0.0">https://codeload.github.com/Gaia3D/mago3d/zip/v1.0.0</a></p>
<blockquote>
<p>Unzip to <code>C:\git\repository\mago3d</code></p>
</blockquote>
</li>
<li><p>java: java jdk-8u161  </p>
<p>  wget <a href="http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-windows-x64.exe">http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-windows-x64.exe</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">1.8.0_161</span><br></pre></td></tr></table></figure>
</li>
<li><p>eclipse: eclipse Oxygen (NOT USE FOR NOW)</p>
<p>  wget <a href="http://ftp.jaist.ac.jp/pub/eclipse/oomph/epp/oxygen/R/eclipse-inst-win64.exe">http://ftp.jaist.ac.jp/pub/eclipse/oomph/epp/oxygen/R/eclipse-inst-win64.exe</a></p>
<blockquote>
<p>Install <code>lombok</code> plugin and import Gradle Project</p>
</blockquote>
</li>
<li><p>Intellij IDEA: 2018.1 (USE THIS)</p>
<blockquote>
<p>Install <code>lombok</code> plugin by <code>File-&gt;Settings-&gt;Plugins-&gt;Browse repositories...</code> and search for <code>lombok</code> online and install.<br>And then import Gradle Project</p>
</blockquote>
</li>
<li><p>PostgreSQL: PostgreSQL10.3  64bit</p>
<blockquote>
<p>Installation path <code>C:\Program Files\PostgreSQL\10\bin</code></p>
</blockquote>
<p>postgres,postgres<br>port:5432</p>
</li>
<li><p>PostGIS: PostGIS bundle 2.4.3</p>
<p>  wget <a href="http://download.osgeo.org/postgis/windows/pg10/postgis-bundle-pg10x64-setup-2.4.3-1.exe">http://download.osgeo.org/postgis/windows/pg10/postgis-bundle-pg10x64-setup-2.4.3-1.exe</a></p>
</li>
<li><p>gradle: gradle 4.6</p>
<p>  wget <a href="https://downloads.gradle.org/distributions/gradle-4.6-bin.zip">https://downloads.gradle.org/distributions/gradle-4.6-bin.zip</a></p>
<blockquote>
<p>add <code>C:\Gradle\gradle-4.6\bin</code> to System Path.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradle -v </span><br><span class="line">4.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>lombok: jar 1.16.20</p>
<p>  wget <a href="https://projectlombok.org/downloads/lombok.jar">https://projectlombok.org/downloads/lombok.jar</a></p>
</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="DB-creation-initial-data-registration"><a href="#DB-creation-initial-data-registration" class="headerlink" title="DB creation &amp; initial data registration"></a>DB creation &amp; initial data registration</h3><ol>
<li><p>add variable <code>PGPASSWORD</code> with value <code>postgres</code> to <code>System Path</code> to avoid input password with <code>psql</code>.</p>
</li>
<li><p>start <code>pgAdmin</code> and create database <code>mago3d</code> with following options.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name:mago3d, </span><br><span class="line">Encoding:UTF-8, </span><br><span class="line">Template:template0, </span><br><span class="line">Collation:C, </span><br><span class="line">Character <span class="built_in">type</span>:C, </span><br><span class="line">Connection Limit:-1</span><br></pre></td></tr></table></figure>
<p>or with <code>sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mago3d</span><br><span class="line">    <span class="keyword">WITH</span> </span><br><span class="line">    OWNER <span class="operator">=</span> postgres</span><br><span class="line">    TEMPLATE <span class="operator">=</span> template0</span><br><span class="line">    ENCODING <span class="operator">=</span> <span class="string">&#x27;UTF8&#x27;</span></span><br><span class="line">    LC_COLLATE <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    LC_CTYPE <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    TABLESPACE <span class="operator">=</span> pg_default</span><br><span class="line">    CONNECTION LIMIT <span class="operator">=</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips: how to change <code>postgres</code> password?<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql -h 192.168.1.100 -p 5432 -U postgres -d mydb</span><br><span class="line">psql&gt; alter user postgres with password <span class="string">&#x27;new password&#x27;</span>;</span><br><span class="line">psql&gt; \h \q</span><br></pre></td></tr></table></figure></p>
</blockquote>
</li>
<li><p>create extension for <code>mago3d</code>.</p>
</li>
</ol>
<p>  <img src="https://kezunlin.me/images/posts/635233-20180331164134426-766435948.png" alt="mago3d with postgis extension"></p>
<ol start="4">
<li><p>load data into <code>mago3d</code><br>edit <code>mago3d-core/src/doc/en/database/dbinit.bat</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: <span class="built_in">cd</span> C:\PostgreSQL\9.6\bin\</span><br><span class="line"><span class="built_in">cd</span> C:\Program Files\PostgreSQL\10\bin</span><br></pre></td></tr></table></figure>
<p>  and run <code>dbinit.bat</code> from command.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\git\repository\mago3d\mago3d-core\src\doc\en\database&gt; .\dbinit.bat</span><br></pre></td></tr></table></figure>
</li>
<li><p>db symbolic link</p>
</li>
</ol>
<p>  Execute Command Line Prompt (cmd.exe) with <code>administrative privileges</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\git\repository\mago3d\mago3d-user\src\main\webapp &gt; mklink /d <span class="string">&quot;C:\git\repository\mago3d\mago3d-user\src\main\webapp\f4d&quot;</span> <span class="string">&quot;C:\f4d&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="lombok-plugin-with-eclipse"><a href="#lombok-plugin-with-eclipse" class="headerlink" title="lombok plugin with eclipse"></a>lombok plugin with eclipse</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://projectlombok.googlecode.com/files/lombok.jar </span><br><span class="line">java -jar  ./lombok.jar </span><br></pre></td></tr></table></figure>

<p>select path to eclipse and click <code>install/update</code><br><img src="https://kezunlin.me/images/posts/635233-20180410154923743-1478380022.png" alt="install lombok plugin for eclipse"></p>
<p>check the result:<br>(1) <code>-javaagent:C:\Users\zunli\eclipse\jee-oxygen\eclipse\lombok.jar</code> in <code>C:\Users\zunli\eclipse\jee-oxygen\eclipse\eclipse.ini</code><br>(2) <code>lombok.jar</code> has been copied to eclipse plugins folder <code>C:\Users\zunli\eclipse\jee-oxygen\eclipse\plugins</code>.</p>
<p>restart eclipse and import <code>settings.gradle</code>.</p>
<h3 id="install-lombok-plugin-for-IDEA"><a href="#install-lombok-plugin-for-IDEA" class="headerlink" title="install lombok plugin for IDEA"></a>install lombok plugin for IDEA</h3><p>Install <code>lombok</code> plugin by <code>File-&gt;Settings-&gt;Plugins-&gt;Browse repositories...</code> and search for <code>lombok</code> online and install.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180408174045525-1236132468.png" alt="install lombok plugin"></p>
<h4 id="enable-anonation-processing"><a href="#enable-anonation-processing" class="headerlink" title="enable anonation processing"></a>enable anonation processing</h4><pre><code>File-&gt;Settings-&gt;Compiler-&gt;Anonation Processers-&gt;Enable Anonation Processing (Check ON)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180408174800677-697183933.png" alt="enable anonation processing"></p>
<h4 id="import-lombok-libraries"><a href="#import-lombok-libraries" class="headerlink" title="import lombok libraries"></a>import lombok libraries</h4><pre><code>File-&gt;Project Structure-&gt;Libraries-&gt;...
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180408175547731-1774832923.png" alt="import lombok as library"></p>
<h3 id="run-adminApplication"><a href="#run-adminApplication" class="headerlink" title="run adminApplication"></a>run adminApplication</h3><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>By default, program use <code>postgres</code> as username,and <code>postgres</code> as password for <code>magoed</code> database.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.username=nvdm6E6o5Fr3x2a877fl/w==</span><br><span class="line">spring.datasource.password=nvdm6E6o5Fr3x2a877fl/w==</span><br></pre></td></tr></table></figure>

<h4 id="run-admin"><a href="#run-admin" class="headerlink" title="run admin"></a>run admin</h4><p>start <code>/mago3D-admin/src/main/java/com/gaia3d/mago3DAdminApplication.java</code></p>
<p>and access <code>http://localhost:9090/login/login.do</code><br>login with <code>admin</code> as username and <code>admin</code> as password.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/Gaia3D/mago3d#english">mago3d github</a></li>
<li><a href="https://gradle.org/install/">gradle</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180331: created.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mago3d</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Configure Caffe on windows 10</title>
    <url>//blog/guide-to-compile-and-install-caffe-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/1739694c/">Part 1: Install and Configure Caffe on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/b90033a9/">Part 2: Install and Configure Caffe on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>windows: 10</li>
<li>caffe: <code>caffe-windows</code></li>
<li>nvidia driver: gtx 1060  382.05  (gtx 970m)</li>
<li>GPU arch(s): sm_61  (sm_52)</li>
<li>cuda: 8.0 </li>
<li>cudnn: 5.0.5</li>
<li>opencv: 3.1.0 WITH_CUDA (compiled from source)</li>
<li>other libs: <code>libraries_v140_x64_py27_1.1.0.tar.bz2</code></li>
</ul>
<h3 id="cuda-cudnn"><a href="#cuda-cudnn" class="headerlink" title="cuda+cudnn"></a>cuda+cudnn</h3><ol>
<li>download and install driver by standalone for <code>GTX 970</code> or <code>GTX 1060</code> from <a href="https://www.nvidia.com/drivers">here</a>.</li>
<li>download and install <code>cuda_8.0.61_win10.exe</code>, skip install nvidia driver and install toolkit only.</li>
<li>download and install <code>cudnn-8.0-windows10-x64-v5.0-ga.zip</code>.</li>
</ol>
<h4 id="nvidia-driver"><a href="#nvidia-driver" class="headerlink" title="nvidia driver"></a>nvidia driver</h4><blockquote>
<p>driver can be installed by standalone or from <code>cuda_xxx_win10.exe</code>.<br>we choose to install by standalone</p>
</blockquote>
<p>download proper driver for <code>GTX 970</code> or <code>GTX 1060</code> eg: <code>398.36-notebook-win10-64bit-international-whql.exe</code> from <a href="https://www.nvidia.com/Download/index.aspx">here</a></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180713154640730-1596631581.png" alt="download driver"></p>
<h4 id="cuda-toolkit"><a href="#cuda-toolkit" class="headerlink" title="cuda toolkit"></a>cuda toolkit</h4><blockquote>
<p>ref: <a href="https://developer.download.nvidia.com/compute/cuda/9.2/Prod2/docs/sidebar/CUDA_Installation_Guide_Windows.pdf">cuda install guides for windows</a></p>
</blockquote>
<p>download <code>cuda_8.0.61_win10.exe</code> from <a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal">here</a></p>
<blockquote>
<p>The CUDA Toolkit installs the CUDA driver and tools needed to create, build and run a CUDA application as well as libraries, header files, CUDA samples source code, and other resources</p>
<p><code>cuda_8.0.61_win10.exe</code> includes: Nvidia driver +  toolkit.</p>
</blockquote>
<p>install to </p>
<ul>
<li>driver install to <code>C:/Program Files/NVIDIA Corporation</code> and <code>C:/ProgramData/NVIDIA Corporation</code></li>
<li>tookit install to <code>C:/Program Files/NVIDIA GPU Computing Toolkit</code>,which contains headers,libs,tools for compiling CUDA applications. <code>C:/ProgramData/NVIDIA GPU Computing Toolkit</code> contains cuda plugins for Visual Studio.</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20180712160043489-1770218269.png" alt="cuda driver"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180712160049037-759459538.png" alt="cuda toolkit"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180712160105370-829401166.png" alt="cuda driver data"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180712160109898-486036158.png" alt="cuda toolkit data"></p>
<p>verify </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\ProgramData\NVIDIA Corporation\CUDA Samples\v9.2\bin\win64\Release</span><br><span class="line">./deviceQuery.exe</span><br></pre></td></tr></table></figure>

<h4 id="cudnn"><a href="#cudnn" class="headerlink" title="cudnn"></a>cudnn</h4><p>extract <code>cudnn-8.0-windows10-x64-v5.0-ga.zip</code> and copy <code>include</code>,<code>lib</code>and <code>bin</code> to <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0</code></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180713154357801-1661993833.png" alt="cudnn"></p>
<h4 id="check-cuda"><a href="#check-cuda" class="headerlink" title="check cuda"></a>check cuda</h4><p><img src="https://kezunlin.me/images/posts/635233-20180713163802216-1876923474.png" alt="nvidia driver and cuda software installation"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><h4 id="download"><a href="#download" class="headerlink" title="download"></a>download</h4><ul>
<li><a href="https://codeload.github.com/BVLC/caffe/zip/windows">caffe-windows</a></li>
<li><a href="https://github.com/willyd/caffe-builder/releases/download/v1.0.1/libraries_v140_x64_py27_1.1.0.tar.bz2">caffe depencencies</a></li>
</ul>
<ol>
<li>place <code>caffe-windows</code> at <code>C:/compile/caffe-windows</code></li>
<li>extract <code>libraries_v140_x64_py27_1.1.0.tar.bz2</code> to <code>C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries</code></li>
</ol>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>edit <code>C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\caffe-builder-config.cmake</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BOOST config</span></span><br><span class="line"><span class="keyword">set</span>(BOOST_ROOT <span class="string">&quot;C:/Boost/&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(BOOST_INCLUDEDIR <span class="variable">$&#123;BOOST_ROOT&#125;</span>/<span class="keyword">include</span>/boost-<span class="number">1</span>_64 CACHE PATH <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(BOOST_LIBRARYDIR <span class="variable">$&#123;BOOST_ROOT&#125;</span>/lib CACHE PATH <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(Boost_USE_MULTITHREADED <span class="keyword">ON</span> CACHE BOOL <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(Boost_USE_STATIC_LIBS <span class="keyword">ON</span> CACHE BOOL <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(Boost_USE_STATIC_RUNTIME <span class="keyword">OFF</span> CACHE BOOL <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>edit <code>caffe-windows/cmake/Dependencies.cmake</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(Boost_USE_STATIC_LIBS <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.64</span> REQUIRED COMPONENTS system thread filesystem)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips:<br>(1) we use <code>C:\Boost\</code> 1.64 to replace caffe dependencies <code>C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\</code> 1.61, because we have compile <code>PCL 1.8.1</code> with <code>Boost 1.64 static</code>.<br>(2) we use caffe <code>C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\x64\vc14\lib</code> to replace <code>C:/Program Files/opencv</code>. (opencv3.1 &lt;&#x3D;&#x3D;&#x3D;&#x3D;opencv3.4)</p>
</blockquote>
<p>configure caffe with </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>BLAS                 Open # Atlas, Open, MKL
BUILD_SHARED_LIBS        OFF # build static library
CMAKE_CONFIGURATION_TYPES   Release
CMAKE_CXX_RELEASE_FLAGS    /MD /O2 /Ob2 /DNDEBUG /MP

CUDA_ARCH_BIN  3.0 3.5 5.0 5.2 6.0 6.1 # very time-consuming
CUDA_ARCH_NAME Manual
CUDA_ARCH_PTX 3.0
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180413142258286-2028896876.png" alt="Use Boost 1.64"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180719170526770-1424061706.png" alt="caffe cuda arch"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180713144410454-1109091781.png" alt="cudnn"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180717155916505-289733281.png" alt="opencv with cuda"></p>
<p>configure and output </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Selecting Windows SDK version 10.0.14393.0 to target Windows 10.0.15063.</span><br><span class="line">Boost version: 1.64.0</span><br><span class="line">Found the following Boost libraries:</span><br><span class="line">  system</span><br><span class="line">  thread</span><br><span class="line">  filesystem</span><br><span class="line">  chrono</span><br><span class="line">  date_time</span><br><span class="line">  atomic</span><br><span class="line">Found gflags  (include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include, library: gflags_shared)</span><br><span class="line">Found glog    (include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include, library: glog)</span><br><span class="line">Found PROTOBUF Compiler: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/bin/protoc.exe</span><br><span class="line">Found lmdb    (include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include, library: lmdb)</span><br><span class="line">Found LevelDB (include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include, library: leveldb)</span><br><span class="line">Found Snappy  (include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include, library: snappy_static;optimized;C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/lib/caffezlib.lib;debug;C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/lib/caffezlibd.lib)</span><br><span class="line">CUDA detected: 8.0</span><br><span class="line">Found cuDNN: ver. 5.0.5 found (include: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/include, library: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/cudnn.lib)</span><br><span class="line">Added CUDA NVCC flags <span class="keyword">for</span>: sm_61</span><br><span class="line">OpenCV found (C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries)</span><br><span class="line">Found OpenBLAS libraries: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/lib/libopenblas.dll.a</span><br><span class="line">Found OpenBLAS include: C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/include</span><br><span class="line">NumPy ver. 1.11.3 found (include: C:/Python27/lib/site-packages/numpy/core/include)</span><br><span class="line">Boost version: 1.64.0</span><br><span class="line">Found the following Boost libraries:</span><br><span class="line">  python</span><br><span class="line"></span><br><span class="line">******************* Caffe Configuration Summary *******************</span><br><span class="line">General:</span><br><span class="line">  Version           :   1.0.0</span><br><span class="line">  Git               :   unknown</span><br><span class="line">  System            :   Windows</span><br><span class="line">  C++ compiler      :   C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe</span><br><span class="line">  Release CXX flags :   /MD /O2 /Ob2 /DNDEBUG /MP /DWIN32 /D_WINDOWS /W3 /GR /EHsc</span><br><span class="line">  Debug CXX flags   :   /MDd /Zi /Ob0 /Od /RTC1 /DWIN32 /D_WINDOWS /W3 /GR /EHsc</span><br><span class="line">  Build <span class="built_in">type</span>        :   Release</span><br><span class="line"></span><br><span class="line">  BUILD_SHARED_LIBS :   OFF</span><br><span class="line">  BUILD_python      :   ON</span><br><span class="line">  BUILD_matlab      :   OFF</span><br><span class="line">  BUILD_docs        :   </span><br><span class="line">  CPU_ONLY          :   OFF</span><br><span class="line">  USE_OPENCV        :   ON</span><br><span class="line">  USE_LEVELDB       :   ON</span><br><span class="line">  USE_LMDB          :   ON</span><br><span class="line">  USE_NCCL          :   OFF</span><br><span class="line">  ALLOW_LMDB_NOLOCK :   OFF</span><br><span class="line"></span><br><span class="line">Dependencies:</span><br><span class="line">  BLAS              :   Yes (Open)</span><br><span class="line">  Boost             :   Yes (ver. 1.64)</span><br><span class="line">  glog              :   Yes</span><br><span class="line">  gflags            :   Yes</span><br><span class="line">  protobuf          :   Yes (ver. 3.1.0)</span><br><span class="line">  lmdb              :   Yes (ver. 0.9.70)</span><br><span class="line">  LevelDB           :   Yes (ver. 1.18)</span><br><span class="line">  Snappy            :   Yes (ver. 1.1.1)</span><br><span class="line">  OpenCV            :   Yes (ver. 3.1.0)</span><br><span class="line">  CUDA              :   Yes (ver. 8.0)</span><br><span class="line"></span><br><span class="line">NVIDIA CUDA:</span><br><span class="line">  Target GPU(s)     :   Auto</span><br><span class="line">  GPU <span class="built_in">arch</span>(s)       :   sm_61</span><br><span class="line">  cuDNN             :   Yes (ver. 5.0.5)</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">  Interpreter       :   C:/Python27/python.exe (ver. 2.7.13)</span><br><span class="line">  Libraries         :   C:/Python27/libs/python27.lib (ver 2.7.13)</span><br><span class="line">  NumPy             :   C:/Python27/lib/site-packages/numpy/core/include (ver 1.11.3)</span><br><span class="line"></span><br><span class="line">Install:</span><br><span class="line">  Install path      :   C:/car_libs/caffe</span><br><span class="line"></span><br><span class="line">Configuring <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="build-and-install"><a href="#build-and-install" class="headerlink" title="build and install"></a>build and install</h4><blockquote>
<p>tips: Visual Studio 2015 can not generate shared library. So we build static caffe library.</p>
</blockquote>
<pre><code>CMake Error at CMakeLists.txt:66 (message):
  The Visual Studio generator cannot build a shared library.  Use the Ninja
  generator instead.
  
</code></pre>
<p>Build with <code>Release x64</code> with <code>Visual Studio 2015</code> and 38 modules will be generated and We <code>Install</code> to <code>C:/car_libs/caffe/</code>.<br><img src="https://kezunlin.me/images/posts/635233-20180713144923141-1235214101.png" alt="build with vs"></p>
<p>build result.<br><img src="https://kezunlin.me/images/posts/635233-20180717161558656-1884924338.png" alt="build result"></p>
<p>install to <code>C:/car_libs/caffe</code>.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="caffe-usage"><a href="#caffe-usage" class="headerlink" title="caffe usage"></a>caffe usage</h3><h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Boost</span></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">	<span class="comment"># use static boost on windows</span></span><br><span class="line">	<span class="keyword">set</span>(Boost_USE_STATIC_LIBS <span class="keyword">ON</span>) <span class="comment"># </span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># use release boost on linux</span></span><br><span class="line">	<span class="keyword">set</span>(Boost_USE_STATIC_LIBS <span class="keyword">OFF</span>)</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(Boost_USE_MULTITHREAD <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Find Boost package 1.64 (caffe also use Boost 1.64)</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.64</span> REQUIRED COMPONENTS serialization date_time system filesystem thread timer math_tr1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># opencv </span></span><br><span class="line"><span class="keyword">SET</span>(OpenCV_DIR <span class="string">&quot;C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d) <span class="comment"># nofree for 2.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># caffe</span></span><br><span class="line"><span class="keyword">set</span>(Caffe_DIR <span class="string">&quot;C:/car_libs/caffe/share/Caffe/&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Caffe)</span><br></pre></td></tr></table></figure>

<p>when we use <code>caffe</code> lib in our program, errors will occur. And we need to fix <code>CaffeTargets-release.cmake</code> file。</p>
<h4 id="usage-error-fix"><a href="#usage-error-fix" class="headerlink" title="usage error fix"></a>usage error fix</h4><p>(1) error with shared.lib</p>
<pre><code>LNK1181	unable to open“gflags_shared.lib” 
</code></pre>
<p>solution:</p>
<pre><code>vim C:/car_libs/caffe/share/Caffe/CaffeTargets-release.cmake

# remove _shared -shared
:1,$s/_shared//g
:1,$s/-shared//g
</code></pre>
<p> (2) error with <code>hdf5</code></p>
<p> <code>hdf5.lib</code>&#x3D;&#x3D;&#x3D;&gt;<code>libcaffehdf5.lib</code><br> <code>hdf5_hl.lib</code>&#x3D;&#x3D;&#x3D;&gt;<code>libcaffehdf5_hl.lib</code></p>
<pre><code> :1,$s/hdf5/libcaffehdf5/g
</code></pre>
<p>(3) error with libopenblas</p>
<pre><code>LNK1181	unable to open“libopenblas.dll.a.lib”
</code></pre>
<p>solution: </p>
<p>cd <code>C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\lib</code> and </p>
<ul>
<li>copy <code>libopenblas.a</code> &#x3D;&#x3D;&#x3D;&gt; <code>libopenblas.a.lib</code></li>
<li>copy <code>libopenblas.dll.a</code> &#x3D;&#x3D;&#x3D;&gt; <code>libopenblas.dll.a.lib</code></li>
</ul>
<p>(4) error NtClose</p>
<pre><code>error LNK2019: 无法解析的外部符号 NtClose，该符号在函数 mdb_env_map 中被引用
</code></pre>
<p>solution: </p>
<pre><code>copy `C:/Program Files (x86)/Windows Kits/10/Lib/10.0.14393.0/um/x64/ntdll.lib` to `C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\lib`
copy `C:\Windows\SysWOW64\ntdll.dll` to `C:\Users\zunli\.caffe\dependencies\libraries_v140_x64_py27_1.1.0\libraries\bin`
</code></pre>
<h4 id="CaffeTargets-release-cmake"><a href="#CaffeTargets-release-cmake" class="headerlink" title="CaffeTargets-release.cmake"></a>CaffeTargets-release.cmake</h4><p>edit <code>C:\car_libs\caffe\share\Caffe\CaffeTargets-release.cmake</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Generated CMake target import file for configuration &quot;Release&quot;.</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands may need to know the format version.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_IMPORT_FILE_VERSION <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import target &quot;caffe&quot; for configuration &quot;Release&quot;</span></span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> caffe APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)</span><br><span class="line"><span class="keyword">set_target_properties</span>(caffe PROPERTIES</span><br><span class="line">  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE <span class="string">&quot;CXX&quot;</span></span><br><span class="line">  IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE </span><br><span class="line"><span class="string">&quot;caffeproto;C:/Boost/lib/libboost_system-vc140-mt-1_64.lib;C:/Boost/lib/libboost_thread-vc140-mt-1_64.lib;C:/Boost/lib/libboost_filesystem-vc140-mt-1_64.lib;C:/Boost/lib/libboost_chrono-vc140-mt-1_64.lib;C:/Boost/lib/libboost_date_time-vc140-mt-1_64.lib;C:/Boost/lib/libboost_atomic-vc140-mt-1_64.lib;C:/Boost/lib/libboost_python-vc140-mt-1_64.lib;caffehdf5.lib;caffehdf5_cpp.lib;caffehdf5_hl.lib;caffehdf5_hl_cpp.lib;caffezlib.lib;caffezlibstatic.lib;gflags;glog;leveldb.lib;libcaffehdf5.lib;libcaffehdf5_cpp.lib;libcaffehdf5_hl.lib;libcaffehdf5_hl_cpp.lib;libprotobuf.lib;libprotoc.lib;lmdb.lib;snappy.lib;snappy_static.lib;libopenblas.dll.a.lib;ntdll.lib;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/cudart.lib;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/curand.lib;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/cublas.lib;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/cublas_device.lib;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64/cudnn.lib;opencv_core;opencv_highgui;opencv_imgproc;opencv_imgcodecs;C:/Python27/libs/python27.lib;&quot;</span></span><br><span class="line">  IMPORTED_LOCATION_RELEASE <span class="string">&quot;$&#123;_IMPORT_PREFIX&#125;/lib/caffe.lib&quot;</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(APPEND _IMPORT_CHECK_TARGETS caffe )</span><br><span class="line"><span class="keyword">list</span>(APPEND _IMPORT_CHECK_FILES_FOR_caffe <span class="string">&quot;$&#123;_IMPORT_PREFIX&#125;/lib/caffe.lib&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import target &quot;caffeproto&quot; for configuration &quot;Release&quot;</span></span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> caffeproto APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)</span><br><span class="line"><span class="keyword">set_target_properties</span>(caffeproto PROPERTIES</span><br><span class="line">  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE <span class="string">&quot;CXX&quot;</span></span><br><span class="line">  IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE <span class="string">&quot;C:/Users/zunli/.caffe/dependencies/libraries_v140_x64_py27_1.1.0/libraries/lib/libprotobuf.lib&quot;</span></span><br><span class="line">  IMPORTED_LOCATION_RELEASE <span class="string">&quot;$&#123;_IMPORT_PREFIX&#125;/lib/caffeproto.lib&quot;</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(APPEND _IMPORT_CHECK_TARGETS caffeproto )</span><br><span class="line"><span class="keyword">list</span>(APPEND _IMPORT_CHECK_FILES_FOR_caffeproto <span class="string">&quot;$&#123;_IMPORT_PREFIX&#125;/lib/caffeproto.lib&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands beyond this point should not need to know the version.</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_IMPORT_FILE_VERSION)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="comiple-errors-with-caffe-pb-h"><a href="#comiple-errors-with-caffe-pb-h" class="headerlink" title="comiple errors with caffe.pb.h"></a><del>comiple errors with caffe.pb.h</del></h4><blockquote>
<p>tips: sometimes we not need to do this.</p>
</blockquote>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_definitions</span>( -DGLOG_NO_ABBREVIATED_SEVERITIES ) </span><br><span class="line"><span class="keyword">add_definitions</span>( -DNOMINMAX )  <span class="comment"># for pcl min,max</span></span><br><span class="line"><span class="keyword">add_definitions</span>( -DWIN32_LEAN_AND_MEAN ) </span><br><span class="line"><span class="comment">#add_definitions( -DNO_STRICT ) # no use for caffe.pb.h</span></span><br></pre></td></tr></table></figure>

<p>vim <code>C:\car_libs\caffe\include\caffe\proto\caffe.pb.h</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ParamSpec_DimCheckMode DimCheckMode;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> V1LayerParameter_DimCheckMode DimCheckMode;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode STRICT = V1LayerParameter_DimCheckMode_STRICT;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;</span><br></pre></td></tr></table></figure>

<p>replace <code>STRICT</code> and <code>PERMISSIVE</code> to <code>_STRICT</code> and <code>_PERMISSIVE</code>. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ParamSpec_DimCheckMode DimCheckMode;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode _STRICT = ParamSpec_DimCheckMode_STRICT;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode _PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> V1LayerParameter_DimCheckMode DimCheckMode;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode _STRICT = V1LayerParameter_DimCheckMode_STRICT;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> DimCheckMode _PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/BVLC/caffe/issues/5043">caffe.pb.h compile errors</a></p>
<h4 id="run-exe"><a href="#run-exe" class="headerlink" title="run exe"></a>run exe</h4><ul>
<li>copy <code>C:/car_libs/caffe/bin/*.dll</code> dlls to <code>bin/release</code> folder.</li>
<li>copy <code>Opencv</code> dlls to <code>bin/release</code> folder.</li>
</ul>
<h2 id="Errors-and-Solutions"><a href="#Errors-and-Solutions" class="headerlink" title="Errors and Solutions"></a>Errors and Solutions</h2><h3 id="nvidia-driver-not-compatible-with-windows-10"><a href="#nvidia-driver-not-compatible-with-windows-10" class="headerlink" title="nvidia driver not compatible with windows 10"></a>nvidia driver not compatible with windows 10</h3><p>problem: install nvidia driver failed on windows 10<br><img src="https://kezunlin.me/images/posts/635233-20181211162156217-51747698.png" alt="nvidia driver not compatible with windows 10"></p>
<p>solution</p>
<ol>
<li>download <a href="https://go.microsoft.com/fwlink/?linkid=846364">Windows10Upgrade</a></li>
<li>run <code>Windows10Upgrade.exe</code> to upgrade windows 10 to latest.</li>
<li>install nvidia driver again.</li>
<li>OK.</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/BVLC/caffe/tree/windows">caffe windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180413 created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title>boost asio example</title>
    <url>//blog/boost-asio-example/</url>
    <content><![CDATA[<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">https://mmoaay.gitbooks.io/boost-asio-cpp-network-programming-chinese/content/Chapter3.html</span></span><br><span class="line"><span class="comment">https://www.boost.org/doc/libs/1_64_0/doc/html/boost_asio/tutorial/tuttimer2/src.html</span></span><br><span class="line"><span class="comment">sync: blocking ,return until job done</span></span><br><span class="line"><span class="comment">async: non-blocking, return immediately</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer.1. - Using a timer synchronously</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">snyc_timer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::asio::io_service  io;</span><br><span class="line"></span><br><span class="line">	boost::<span class="function">asio::deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">2</span>))</span></span>;</span><br><span class="line">	t.<span class="built_in">wait</span>(); <span class="comment">//  blocking wait on the timer</span></span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer.2 - Using a timer asynchronously</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print2</span><span class="params">(<span class="type">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;thread #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asnyc_timer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::asio::io_service io;</span><br><span class="line"></span><br><span class="line">	boost::<span class="function">asio::deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">2</span>))</span></span>;</span><br><span class="line">	t.<span class="built_in">async_wait</span>(&amp;print2); <span class="comment">// asnyc,non-blocking,return immediately</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The asio library provides a guarantee that callback handlers will only be called from threads that are currently calling io_service::run(). </span></span><br><span class="line"><span class="comment">	asio库会确保handler会在io_service::run()所在的thread中运行。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[main thread] #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;here&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	io.<span class="built_in">run</span>();<span class="comment">// sync: blocking ,return until job done</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer.3 - Binding arguments to a handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">	boost::asio::deadline_timer* t, <span class="type">int</span>* count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*count &lt; <span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; *count &lt;&lt; std::endl;</span><br><span class="line">		++(*count);</span><br><span class="line"></span><br><span class="line">		t-&gt;<span class="built_in">expires_at</span>(t-&gt;<span class="built_in">expires_at</span>() + boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">		t-&gt;<span class="built_in">async_wait</span>(boost::<span class="built_in">bind</span>(print,</span><br><span class="line">			boost::asio::placeholders::error, t, count));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asnyc_timer_with_params</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::asio::io_service io;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	boost::<span class="function">asio::deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">1</span>))</span></span>;</span><br><span class="line">	t.<span class="built_in">async_wait</span>(boost::<span class="built_in">bind</span>(print,</span><br><span class="line">		boost::asio::placeholders::error, &amp;t, &amp;count));</span><br><span class="line"></span><br><span class="line">	io.<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Final count is &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer.4 - Using a member function as a handler</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">printer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">printer</span>(boost::asio::io_service&amp; io)</span><br><span class="line">		: <span class="built_in">timer_</span>(io, boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>)),</span><br><span class="line">		<span class="built_in">count_</span>(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		timer_.<span class="built_in">async_wait</span>(boost::<span class="built_in">bind</span>(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">printer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Final count is &quot;</span> &lt;&lt; count_ &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (count_ &lt; <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; count_ &lt;&lt; std::endl;</span><br><span class="line">			++count_;</span><br><span class="line"></span><br><span class="line">			timer_.<span class="built_in">expires_at</span>(timer_.<span class="built_in">expires_at</span>() + boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">			timer_.<span class="built_in">async_wait</span>(boost::<span class="built_in">bind</span>(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;print do nothing...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	boost::asio::deadline_timer timer_;</span><br><span class="line">	<span class="type">int</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asnyc_timer_with_class_method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::asio::io_service io;</span><br><span class="line">	<span class="function">printer <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">	io.<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer.5 - Synchronising handlers in multithreaded programs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The previous four tutorials avoided the issue of handler synchronisation </span></span><br><span class="line"><span class="comment">by calling the io_service::run() function from one thread only. As you </span></span><br><span class="line"><span class="comment">already know, the asio library provides a guarantee that callback handlers</span></span><br><span class="line"><span class="comment">will only be called from threads that are currently calling io_service::run(). </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Consequently, calling io_service::run() from only one thread ensures that </span></span><br><span class="line"><span class="comment">callback handlers cannot run concurrently.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By wrapping the handlers using the same boost::asio::strand, we are ensuring</span></span><br><span class="line"><span class="comment">that they cannot execute concurrently.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在一个thread中调用io_service::run()，能够确保其对应的回调handlers不会并行执行。</span></span><br><span class="line"><span class="comment">但是在A和B两个thread中调用io_service::run()，A对应的handler和B对应的handler会并行执行。</span></span><br><span class="line"><span class="comment">【handler不是线程安全的】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何解决多线程调用io_service::run() 其对应的handler会并行执行的问题？</span></span><br><span class="line"><span class="comment">使用boost::asio::io_service::strand对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">An boost::asio::strand guarantees that, for those handlers that are dispatched </span></span><br><span class="line"><span class="comment">through it, an executing handler will be allowed to complete before the next one</span></span><br><span class="line"><span class="comment">is started.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By wrapping the handlers using the same boost::asio::strand, we are ensuring that</span></span><br><span class="line"><span class="comment">they cannot execute concurrently.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">同一个srand对象，能够确保其wrap的handler能够顺序执行。</span></span><br><span class="line"><span class="comment">即print1和print2在2个线程中不会并行执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">printer_sync</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">printer_sync</span>(boost::asio::io_service&amp; io)</span><br><span class="line">		: <span class="built_in">strand_</span>(io),</span><br><span class="line">		<span class="built_in">timer1_</span>(io, boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>)),</span><br><span class="line">		<span class="built_in">timer2_</span>(io, boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>)),</span><br><span class="line">		<span class="built_in">count_</span>(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		timer1_.<span class="built_in">async_wait</span>(strand_.<span class="built_in">wrap</span>(boost::<span class="built_in">bind</span>(&amp;printer_sync::print1, <span class="keyword">this</span>)));</span><br><span class="line">		timer2_.<span class="built_in">async_wait</span>(strand_.<span class="built_in">wrap</span>(boost::<span class="built_in">bind</span>(&amp;printer_sync::print2, <span class="keyword">this</span>)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">printer_sync</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Final count is &quot;</span> &lt;&lt; count_ &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;Timer 1: &quot;</span> &lt;&lt; count_ &lt;&lt;<span class="string">&quot;,thread #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">			++count_;</span><br><span class="line"></span><br><span class="line">			timer1_.<span class="built_in">expires_at</span>(timer1_.<span class="built_in">expires_at</span>() + boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">			timer1_.<span class="built_in">async_wait</span>(strand_.<span class="built_in">wrap</span>(boost::<span class="built_in">bind</span>(&amp;printer_sync::print1, <span class="keyword">this</span>)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;Timer 1:  else &quot;</span> &lt;&lt; count_ &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;Timer 2: &quot;</span> &lt;&lt; count_ &lt;&lt; <span class="string">&quot;,thread #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">			++count_;</span><br><span class="line"></span><br><span class="line">			timer2_.<span class="built_in">expires_at</span>(timer2_.<span class="built_in">expires_at</span>() + boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">			timer2_.<span class="built_in">async_wait</span>(strand_.<span class="built_in">wrap</span>(boost::<span class="built_in">bind</span>(&amp;printer_sync::print2, <span class="keyword">this</span>)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;Timer 2:  else &quot;</span> &lt;&lt; count_ &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	boost::asio::io_service::strand strand_; <span class="comment">// wrap handlers</span></span><br><span class="line">	boost::asio::deadline_timer timer1_;</span><br><span class="line">	boost::asio::deadline_timer timer2_;</span><br><span class="line">	<span class="type">int</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sync_handlers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::asio::io_service io;</span><br><span class="line">	<span class="function">printer_sync <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">	<span class="function">boost::thread <span class="title">t</span><span class="params">(boost::bind(&amp;boost::asio::io_service::run, &amp;io))</span></span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[main thread] #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[1] begin to run&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	io.<span class="built_in">run</span>(); <span class="comment">// blocking until job done</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[2] after run&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	t.<span class="built_in">join</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;[3] after join&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//snyc_timer();</span></span><br><span class="line">	<span class="comment">//asnyc_timer();</span></span><br><span class="line">	<span class="comment">//asnyc_timer_with_params();</span></span><br><span class="line">	<span class="comment">//asnyc_timer_with_class_method();</span></span><br><span class="line">	<span class="built_in">sync_handlers</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.boost.org/doc/libs/1_64_0/doc/html/boost_asio/tutorial/tuttimer2/src.html">boost_asio tutorial</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180523: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
        <tag>asio</tag>
      </tags>
  </entry>
  <entry>
    <title>boost enable shared from this</title>
    <url>//blog/boost-enable-shared-from-this/</url>
    <content><![CDATA[<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/shared_ptr.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/enable_shared_from_this.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">enable_shared_from_this has become part of C++ 11 standard.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">https://blog.csdn.net/csfreebird/article/details/8282518</span></span><br><span class="line"><span class="comment">https://stackoverflow.com/questions/712279/what-is-the-usefulness-of-enable-shared-from-this</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> : <span class="keyword">public</span> boost::enable_shared_from_this&lt;Y&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Y</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Y::Y()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Y</span>() </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Y::~Y()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">boost::shared_ptr&lt;Y&gt; <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">boost::shared_ptr&lt;Y&gt; <span class="title">f_dangerous</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;<span class="comment">// lead to multiple release on same resouce</span></span><br><span class="line">		<span class="keyword">return</span> boost::<span class="built_in">shared_ptr</span>&lt;Y&gt;(<span class="keyword">this</span>);  <span class="comment">// don&#x27;t do this!</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_safe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">boost::shared_ptr&lt;Y&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> Y)</span></span>;</span><br><span class="line">	boost::shared_ptr&lt;Y&gt; q = p-&gt;<span class="built_in">f</span>();</span><br><span class="line">	<span class="built_in">assert</span>(p == q);</span><br><span class="line">	<span class="built_in">assert</span>(!(p &lt; q || q &lt; p)); <span class="comment">// p and q must share ownership</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Y::Y()</span></span><br><span class="line"><span class="comment">	Y::~Y()</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_dangerous</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">boost::shared_ptr&lt;Y&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> Y)</span></span>;</span><br><span class="line">	boost::shared_ptr&lt;Y&gt; q = p-&gt;<span class="built_in">f_dangerous</span>();</span><br><span class="line">	<span class="built_in">assert</span>(p == q);</span><br><span class="line">	<span class="built_in">assert</span>(!(p &lt; q || q &lt; p)); <span class="comment">// p and q must share ownership</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Y::Y()</span></span><br><span class="line"><span class="comment">	Y::~Y()</span></span><br><span class="line"><span class="comment">	Y::~Y()</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test_safe();</span></span><br><span class="line">	<span class="built_in">test_dangerous</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://stackoverflow.com/questions/712279/what-is-the-usefulness-of-enable-shared-from-this">what-is-the-usefulness-of-enable-shared-from-this</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180523: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>boost mutex and lock</title>
    <url>//blog/boost-mutex-and-lock/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h3><p>ownership</p>
<ul>
<li>shared ownership</li>
<li>exclusive ownership</li>
<li>upgrade  ownership—&gt;exclusive ownership</li>
</ul>
<p>mutex</p>
<ul>
<li>boost::mutex       enable exclusive access to shared data.</li>
<li>boost::shared_mutex  enable shared access to shared data.</li>
</ul>
<p>lock</p>
<ul>
<li>boost::shared_lock</li>
<li>boost::unique_lock</li>
<li>boost::upgrade_lock</li>
<li>boost::upgrade_to_unique_lock</li>
</ul>
<p>Tips from <a href="https://stackoverflow.com/questions/9247085/difference-between-boostunique-lock-and-boostupgrade-lock">difference-between-boostunique-lock-and-boostupgrade-lock</a></p>
<blockquote>
<p>The difference between <code>upgrade_lock</code> and <code>unique_lock</code> is simple. An instance of <code>unique_lock</code> is acquiring a full exclusive ownership of a <code>shared_mutex</code>. This means that no one else can get any type of ownership while the <code>unique_lock</code> is alive.</p>
</blockquote>
<blockquote>
<p>Unlike the <code>unique_lock</code> an instance of <code>upgrade_lock</code> is acquiring an upgrade ownership that exclusive only amongst threads trying to get the same upgrade ownership. All other threads that try to get a shared ownership could acquire it with no conflict until the <code>upgrade_lock</code> is upgraded to unique (with an instance of <code>upgrade_to_unique_lock</code>).</p>
</blockquote>
<blockquote>
<p>The <code>upgrade_lock</code> is useful when some of threads can be readers only and will not try to promote itself to writers. Otherwise (all readers may try to become writers at some point) <code>upgrade_lock</code> will operate as <code>unique_lock</code>.</p>
</blockquote>
<p>conclusions</p>
<ul>
<li><p>thread-A get <code>shared_lock</code>,other threads cannot get <code>unique_lock,upgrade_lock</code>,but can get <code>shared_lock</code>.(multiple-reader)</p>
</li>
<li><p>thread-A get <code>upgrade_lock</code>,other threads cannot get <code>unique_lock,upgrade_lock</code>,but can get <code>shared_lock</code>.</p>
</li>
<li><p><code>upgrade_lock</code> can upgrade to <code>upgrade_to_unique_lock</code>,it’s same as thread-A get <code>unique_lock</code>.</p>
</li>
<li><p>thread-A get <code>unique_lock</code>,other threads cannot get <code>unique_lock,upgrade_lock,shared_lock</code>. (single-writer)</p>
</li>
</ul>
<h3 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::shared_lock&lt;boost::shared_mutex&gt; <span class="type">read_lock_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> boost::unique_lock&lt;boost::shared_mutex&gt; <span class="type">write_lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::upgrade_lock&lt;boost::shared_mutex&gt; <span class="type">upgrade_lock_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> boost::upgrade_to_unique_lock&lt;boost::shared_mutex&gt; <span class="type">upgrade_to_unique_lock_t</span>;</span><br><span class="line"></span><br><span class="line">boost::shared_mutex _access; <span class="comment">// read-write access</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::unique_lock&lt;boost::mutex&gt; <span class="type">exclusive_lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readOnly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">read_lock_t</span>  <span class="title">rdlock</span><span class="params">(_access)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeOnly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">write_lock_t</span>  <span class="title">wtlock</span><span class="params">(_access)</span></span>;</span><br><span class="line">	data = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=============================================</span></span><br><span class="line"><span class="comment">// reader and writer</span></span><br><span class="line"><span class="comment">//=============================================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reader</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">read_lock_t</span> <span class="title">lock</span><span class="params">(_access)</span></span>;</span><br><span class="line">	<span class="comment">// do work here, without anyone having exclusive access</span></span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">conditional_writer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">upgrade_lock_t</span> <span class="title">lock</span><span class="params">(_access)</span></span>;</span><br><span class="line">	<span class="comment">// do work here, without anyone having exclusive access</span></span><br><span class="line"></span><br><span class="line">	<span class="type">bool</span> conditional = <span class="literal">true</span>; <span class="comment">// true/false</span></span><br><span class="line">	<span class="keyword">if</span> (conditional) &#123;</span><br><span class="line">		<span class="function"><span class="type">upgrade_to_unique_lock_t</span> <span class="title">uniqueLock</span><span class="params">(lock)</span></span>;</span><br><span class="line">		<span class="comment">// do work here, but now you have exclusive access</span></span><br><span class="line">		data = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// do more work here, without anyone having exclusive access</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unconditional_writer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">write_lock_t</span> <span class="title">lock</span><span class="params">(_access)</span></span>;</span><br><span class="line">	<span class="comment">// do work here, with exclusive access</span></span><br><span class="line">	data = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.boost.org/doc/libs/1_64_0/doc/html/thread/synchronization.html">synchronization</a><br>-<a href="https://stackoverflow.com/questions/989795/example-for-boost-shared-mutex-multiple-reads-one-write">example-for-boost-shared-mutex-multiple-reads-one-write</a></li>
<li><a href="https://stackoverflow.com/questions/9247085/difference-between-boostunique-lock-and-boostupgrade-lock">difference-between-boostunique-lock-and-boostupgrade-lock</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180523 created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>how to implement thread pool with boost in c++</title>
    <url>//blog/boost-thread-pool-example/</url>
    <content><![CDATA[<h2 id="Thread-Pool-with-Boost"><a href="#Thread-Pool-with-Boost" class="headerlink" title="Thread Pool with Boost"></a>Thread Pool with Boost</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    <span class="comment">//std::cout std::endl</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>      <span class="comment">//std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span>      <span class="comment">//std::future std::promise</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span>     <span class="comment">//std::ref</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span>      <span class="comment">//std::chrono::seconds</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">ThreadPool</span><span class="params">(<span class="type">size_t</span> size)</span> : work_(io_service_) &#123;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">			workers_.<span class="built_in">create_thread</span>(</span><br><span class="line">				boost::<span class="built_in">bind</span>(&amp;boost::asio::io_service::run, &amp;io_service_));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">ThreadPool</span>() &#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;~ThreadPool&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		io_service_.<span class="built_in">stop</span>(); <span class="comment">// stop before join_all</span></span><br><span class="line">		workers_.<span class="built_in">join_all</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add new work item to the pool.</span></span><br><span class="line">	<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">	<span class="type">void</span> <span class="title">Enqueue</span><span class="params">(F f)</span> </span>&#123;</span><br><span class="line">		io_service_.<span class="built_in">post</span>(f);</span><br><span class="line">		<span class="comment">//sync, return immediately</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	boost::thread_group workers_;</span><br><span class="line">	boost::asio::io_service io_service_;</span><br><span class="line">	boost::asio::io_service::work work_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">boost::mutex io_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">		std::cout &lt;&lt; id &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">boost::thread <span class="title">thrd1</span><span class="params">(boost::bind(&amp;count, <span class="number">1</span>))</span></span>;</span><br><span class="line">	<span class="function">boost::thread <span class="title">thrd2</span><span class="params">(boost::bind(&amp;count, <span class="number">2</span>))</span></span>;</span><br><span class="line">	thrd<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">	thrd<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;print() #&quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;hello &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	boost::this_thread::<span class="built_in">sleep</span>(boost::posix_time::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;world &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_thread_pool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Create a thread pool of 4 worker threads.</span></span><br><span class="line">	<span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Queue a bunch of work items.</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">		pool.<span class="built_in">Enqueue</span>(boost::<span class="built_in">bind</span>(&amp;print, i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_task</span><span class="params">(std::promise&lt;<span class="type">int</span>&gt; &amp;promiseObj)</span> </span>&#123;</span><br><span class="line">	boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Inside thread: &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Inside thread: sleep 2 seconds... &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line">	promiseObj.<span class="built_in">set_value</span>(<span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_future</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::promise&lt;<span class="type">int</span>&gt; promiseObj;</span><br><span class="line">	std::future&lt;<span class="type">int</span>&gt; futureObj = promiseObj.<span class="built_in">get_future</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;create thread...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="function">std::thread <span class="title">th</span><span class="params">(do_task, std::ref(promiseObj))</span></span>;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;futureObj.get() block main thread.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; futureObj.<span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	th.<span class="built_in">join</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;after join&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">std::bind</span></span><br><span class="line"><span class="comment">bind预先绑定的参数需要传具体的变量或值进去，对于预先绑定的参数，是pass-by-value的；[使用std::ref()可以pass by reference]</span></span><br><span class="line"><span class="comment">对于不事先绑定的参数，需要传std::placeholders进去，从_1开始，依次递增。placeholder是pass-by-reference的；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test_thread();</span></span><br><span class="line">	<span class="comment">//test_thread_pool();</span></span><br><span class="line">	<span class="built_in">test_future</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000006691692">boost thread pool example</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180523:  created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>boost</tag>
        <tag>thread pool</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe failed to use gpu in multiple threads, how to fix it ?</title>
    <url>//blog/cpp-caffe-net-run-in-multiple-threads/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="set-mode"><a href="#set-mode" class="headerlink" title="set_mode"></a>set_mode</h3><p>Caffe fails to use GPU in a new thread ？？？<br>see <a href="https://github.com/BVLC/caffe/issues/4178">here</a></p>
<pre><code>the `Caffe::mode_` variable that controls this is thread-local,
so ensure you’re calling `caffe.set_mode_gpu()` in each thread
before running any Caffe functions. That should solve your issue.

Caffe set_mode GPU 在多线程下失效
在main thread中设置GPU模式，在worker thread中调用网络进行检测，
GPU模式不起效，默认仍然使用CPU模式，所以速度很慢，和GPU相比慢了
10倍左右。

解决方案：在子线程中set_mode,然后调用网络进行检测。
(1)创建网络在main thread。static 网络存储在全局静态数据区。
worker thread可以直接使用。
(2) 在worker thread中检测，需要在子线程中set_mode,然后调用网络进行检测。

结论：
(1)caffe的set_mode所在的线程必须和使用nets进行forward的线程相同。否则默认使用CPU模式，速度会很慢。
(2)caffe的nets初始化可以在main thread也可以在worker thread。
</code></pre>
<h3 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glog/logging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// opencv</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm/algorithm.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> kezunlin::algorithm;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region net-demo</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topwire_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (run_in_worker_thread) &#123;</span><br><span class="line">		CaffeApi::<span class="built_in">set_mode</span>(<span class="literal">true</span>, <span class="number">0</span>, <span class="number">1234</span>);<span class="comment">// set in worker thread-1, use GPU-0</span></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// do net detect </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">railway_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (run_in_worker_thread) &#123;</span><br><span class="line">		CaffeApi::<span class="built_in">set_mode</span>(<span class="literal">true</span>, <span class="number">0</span>, <span class="number">1234</span>);<span class="comment">// set in worker thread-1, use GPU-0</span></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// do net detect </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sidewall_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (run_in_worker_thread) &#123;</span><br><span class="line">		CaffeApi::<span class="built_in">set_mode</span>(<span class="literal">true</span>, <span class="number">0</span>, <span class="number">1234</span>);<span class="comment">// set in worker thread-1, use GPU-0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do net detect </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lockcatch_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (run_in_worker_thread) &#123;</span><br><span class="line">		CaffeApi::<span class="built_in">set_mode</span>(<span class="literal">true</span>, <span class="number">0</span>, <span class="number">1234</span>);<span class="comment">// set in worker thread-1, use GPU-0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// do net detect </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region worker-thread-demo</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_thread_topwire_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::thread <span class="title">thr</span><span class="params">(topwire_demo, run_in_worker_thread)</span></span>;</span><br><span class="line">	thr.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_thread_railway_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::thread <span class="title">thr</span><span class="params">(railway_demo, run_in_worker_thread)</span></span>;</span><br><span class="line">	thr.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_thread_sidewall_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::thread <span class="title">thr</span><span class="params">(sidewall_demo, run_in_worker_thread)</span></span>;</span><br><span class="line">	thr.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_thread_lockcatch_demo</span><span class="params">(<span class="type">bool</span> run_in_worker_thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::thread <span class="title">thr</span><span class="params">(lockcatch_demo, run_in_worker_thread)</span></span>;</span><br><span class="line">	thr.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">DETECT_TYPE</span> &#123;</span><br><span class="line">	SET_IN_MAIN_DETECT_IN_MAIN, <span class="comment">// 主线程set_mode，主线程检测，40ms左右，使用GPU</span></span><br><span class="line">	SET_IN_WORKER_DETECT_IN_WORKER, <span class="comment">// 子线程set_mode，子线程检测，40ms左右，使用GPU</span></span><br><span class="line">	SET_IN_MAIN_DETECT_IN_WORKER <span class="comment">// 主线程set_mode，子线程检测，400ms左右，慢了10倍左右，没有使用GPU</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DETECT_TYPE detect_type = SET_IN_MAIN_DETECT_IN_MAIN;</span><br><span class="line">	detect_type = SET_IN_WORKER_DETECT_IN_WORKER;</span><br><span class="line">	detect_type = SET_IN_MAIN_DETECT_IN_WORKER;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init_algorithm_api</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (detect_type)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> SET_IN_MAIN_DETECT_IN_MAIN:</span><br><span class="line">		<span class="built_in">topwire_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">railway_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">sidewall_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">lockcatch_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> SET_IN_WORKER_DETECT_IN_WORKER:</span><br><span class="line">		<span class="built_in">worker_thread_topwire_demo</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="built_in">worker_thread_railway_demo</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="built_in">worker_thread_sidewall_demo</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="built_in">worker_thread_lockcatch_demo</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> SET_IN_MAIN_DETECT_IN_WORKER:</span><br><span class="line">		<span class="built_in">worker_thread_topwire_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">worker_thread_railway_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">worker_thread_sidewall_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">worker_thread_lockcatch_demo</span>(<span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free_algorithm_api</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_algorithm_api</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">thread_demo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST</span>(algorithn_test, test_algorithm_api) &#123;</span><br><span class="line">	<span class="built_in">test_algorithm_api</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="conclusions"><a href="#conclusions" class="headerlink" title="conclusions"></a>conclusions</h3><ul>
<li><strong>SET_IN_MAIN_DETECT_IN_MAIN</strong>, &#x2F;&#x2F; 主线程set_mode，主线程检测，40ms左右，使用GPU</li>
<li><strong>SET_IN_WORKER_DETECT_IN_WORKER</strong>, &#x2F;&#x2F; 子线程set_mode，子线程检测，40ms左右，使用GPU</li>
<li><strong>SET_IN_MAIN_DETECT_IN_WORKER</strong> &#x2F;&#x2F; 主线程set_mode，子线程检测，400ms左右，慢了10倍左右，没有使用GPU</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/BVLC/caffe/issues/4178">Caffe fails to use GPU in a new thread</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180712: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>compile opencv with CUDA support on windows 10</title>
    <url>//blog/Guide-to-compile-and-use-opencv-with-CUDA-support-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/15f5c3e8/">Part 1: compile opencv on ubuntu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/6580691f/">Part 2: compile opencv with CUDA support on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/61d55ab4/">Part 3: opencv mat for loop</a></li>
<li><a href="https://kezunlin.me/post/7a6ba82e/">Part 4: speed up opencv image processing with openmp</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>windows: 10</li>
<li>opencv: 3.1.0</li>
<li>nvidia driver: gtx 1060  382.05  (gtx 970m)</li>
<li>GPU arch(s): sm_61  (sm_52)</li>
<li>cuda: 8.0 </li>
<li>cudnn: 5.0.5</li>
<li>cmake: 3.10.0</li>
<li>vs: vs2015 64</li>
</ul>
<h3 id="nvidia-cuda-CC"><a href="#nvidia-cuda-CC" class="headerlink" title="nvidia cuda CC"></a>nvidia cuda CC</h3><p>see <a href="https://developer.nvidia.com/cuda-gpus">cuda compute capacity</a></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180717092113975-663849717.png" alt="cuda-enabled nvidia GeForce cc"></p>
<h3 id="cpu-vs-gpu"><a href="#cpu-vs-gpu" class="headerlink" title="cpu vs gpu"></a>cpu vs gpu</h3><p>for opencv functions</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180713160537940-1813231033.png" alt="speed for cpu and gpu"></p>
<h3 id="get-source"><a href="#get-source" class="headerlink" title="get source"></a>get source</h3><p>Get opencv 3.1.0 for git and fix some bugs </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line">git checkout -b v3.1.0 3.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix bugs for 3.1.0</span></span><br><span class="line">git cherry-pick 10896</span><br><span class="line">git cherry-pick cdb9c</span><br><span class="line">git cherry-pick 24dbb</span><br><span class="line"></span><br><span class="line">git branch </span><br><span class="line"></span><br><span class="line">master</span><br><span class="line">* v3.1.0</span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>configure with <code>VS 2015 win64</code> with options </p>
<pre><code>BUILD_SHARED_LIBS  ON
CMAKE_CONFIGURATION_TYPES Release # Release
CMAKE_CXX_FLAGS_RELEASE /MD /O2 /Ob2 /DNDEBUG /MP # for multiple processor

WITH_VTK OFF
BUILD_PERF_TESTS OFF # if ON, build errors occur

WITH_CUDA ON
CUDA_TOOLKIT_ROOT_DIR  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0
#CUDA_ARCH_BIN  3.0 3.5 5.0 5.2 6.0 6.1 # very time-consuming 
CUDA_ARCH_PTX 3.0
</code></pre>
<p>for opencv<br><img src="https://kezunlin.me/images/posts/635233-20180719170434104-1649296827.png" alt="opencv cuda arch"></p>
<p><code>CUDA_ARCH_BIN  3.0 3.5 5.0 5.2 6.0 6.1</code> relate with</p>
<pre><code>-gencode;arch=compute_30,code=sm_30;-gencode;arch=compute_35,code=sm_35;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_52,code=sm_52;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;
</code></pre>
<p><code>CUDA_ARCH_PTX 3.0</code> relate with</p>
<pre><code>    -gencode;arch=compute_30,code=compute_30;
</code></pre>
<p>for caffe<br><img src="https://kezunlin.me/images/posts/635233-20180719170526770-1424061706.png" alt="caffe cuda arch"></p>
<blockquote>
<p>the <code>CUDA_ARCH_BIN</code> parameter specifies multiple architectures so as to support a variety of GPU boards. otherwise, cuda programs will not run with other type of GPU boards.<br>为了支持在多个不同计算能力的GPU上运行可执行程序，opencv&#x2F;caffe编译过程中需要支持多个不同架构，<code>eg. CUDA_ARCH_BIN  3.0 3.5 5.0 5.2 6.0 6.1</code>, 因此编译过程非常耗时。在编译的而过程中尽可能选择需要发布release版本的GPU架构进行配置编译。</p>
</blockquote>
<p>configure and output:</p>
<pre><code>Selecting Windows SDK version 10.0.14393.0 to target Windows 10.0.17134.
found IPP (ICV version): 9.0.1 [9.0.1]
at: C:/compile/opencv/3rdparty/ippicv/unpack/ippicv_win
CUDA detected: 8.0
CUDA NVCC target flags: -gencode;arch=compute_30,code=sm_30;-gencode;arch=compute_30,code=compute_30

General configuration for OpenCV 3.1.0 =====================================
  Version control:               3.1.0-3-g5e9beb8

  Platform:
    Host:                        Windows 10.0.17134 AMD64
    CMake:                       3.10.0
    CMake generator:             Visual Studio 14 2015 Win64
    CMake build tool:            C:/Program Files (x86)/MSBuild/14.0/bin/MSBuild.exe
    MSVC:                        1900

  C/C++:
    Built as dynamic libs?:      YES
    C++ Compiler:                C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe  (ver 19.0.24215.1)
    C++ flags (Release):         /DWIN32 /D_WINDOWS /W4 /GR /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /wd4251 /wd4324 /wd4275 /wd4589 /MP8  /MD /O2 /Ob2 /DNDEBUG /MP  /Zi
    C++ flags (Debug):           /DWIN32 /D_WINDOWS /W4 /GR /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /wd4251 /wd4324 /wd4275 /wd4589 /MP8  /MDd /Zi /Ob0 /Od /RTC1 
    C Compiler:                  C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe
    C flags (Release):           /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi    /MP8  /MD /O2 /Ob2 /DNDEBUG  /Zi
    C flags (Debug):             /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi    /MP8  /MDd /Zi /Ob0 /Od /RTC1 
    Linker flags (Release):      /machine:x64  /INCREMENTAL:NO  /debug
    Linker flags (Debug):        /machine:x64  /debug /INCREMENTAL 
    Precompiled headers:         YES
    Extra dependencies:          comctl32 gdi32 ole32 setupapi ws2_32 vfw32 cudart nppc nppi npps cufft -LC:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/lib/x64
    3rdparty dependencies:       zlib libjpeg libwebp libpng libtiff libjasper IlmImf

  OpenCV modules:
    To be built:                 cudev core cudaarithm flann imgproc ml video cudabgsegm cudafilters cudaimgproc cudawarping imgcodecs photo shape videoio cudacodec highgui objdetect ts features2d calib3d cudafeatures2d cudalegacy cudaobjdetect cudaoptflow cudastereo stitching superres videostab python2
    Disabled:                    world
    Disabled by dependency:      -
    Unavailable:                 java python3 viz

  Windows RT support:            NO

  GUI: 
    QT:                          NO
    Win32 UI:                    YES
    OpenGL support:              NO
    VTK support:                 NO

  Media I/O: 
    ZLib:                        build (ver 1.2.8)
    JPEG:                        build (ver 90)
    WEBP:                        build (ver 0.3.1)
    PNG:                         build (ver 1.6.19)
    TIFF:                        build (ver 42 - 4.0.2)
    JPEG 2000:                   build (ver 1.900.1)
    OpenEXR:                     build (ver 1.7.1)
    GDAL:                        NO

  Video I/O:
    Video for Windows:           YES
    DC1394 1.x:                  NO
    DC1394 2.x:                  NO
    FFMPEG:                      YES (prebuilt binaries)
      codec:                     YES (ver 56.41.100)
      format:                    YES (ver 56.36.101)
      util:                      YES (ver 54.27.100)
      swscale:                   YES (ver 3.1.101)
      resample:                  NO
      gentoo-style:              YES
    GStreamer:                   NO
    OpenNI:                      NO
    OpenNI PrimeSensor Modules:  NO
    OpenNI2:                     NO
    PvAPI:                       NO
    GigEVisionSDK:               NO
    DirectShow:                  YES
    Media Foundation:            NO
    XIMEA:                       NO
    Intel PerC:                  NO

  Parallel framework:            Concurrency

  Other third-party libraries:
    Use IPP:                     9.0.1 [9.0.1]
         at:                     C:/compile/opencv/3rdparty/ippicv/unpack/ippicv_win
    Use IPP Async:               NO
    Use Eigen:                   NO
    Use Cuda:                    YES (ver 8.0)
    Use OpenCL:                  YES
    Use custom HAL:              NO

  NVIDIA CUDA
    Use CUFFT:                   YES
    Use CUBLAS:                  NO
    USE NVCUVID:                 NO
    NVIDIA GPU arch:             30 35 50 52 60 61
    NVIDIA PTX archs:            30
    Use fast math:               NO

  OpenCL:
    Version:                     dynamic
    Include path:                C:/compile/opencv/3rdparty/include/opencl/1.2
    Use AMDFFT:                  NO
    Use AMDBLAS:                 NO

  Python 2:
    Interpreter:                 C:/Python27/python.exe (ver 2.7.13)
    Libraries:                   C:/Python27/libs/python27.lib (ver 2.7.13)
    numpy:                       C:/Python27/lib/site-packages/numpy/core/include (ver 1.11.3)
    packages path:               C:/Python27/Lib/site-packages

  Python 3:
    Interpreter:                 NO

  Python (for build):            C:/Python27/python.exe

  Java:
    ant:                         NO
    JNI:                         C:/Program Files/Java/jdk1.8.0_161/include C:/Program Files/Java/jdk1.8.0_161/include/win32 C:/Program Files/Java/jdk1.8.0_161/include
    Java wrappers:               NO
    Java tests:                  NO

  Matlab:                        Matlab not found or implicitly disabled

  Documentation:
    Doxygen:                     NO
    PlantUML:                    NO

  Tests and samples:
    Tests:                       YES
    Performance tests:           NO
    C/C++ Examples:              NO

  Install path:                  C:/compile/opencv/build/install

  cvconfig.h is in:              C:/compile/opencv/build
-----------------------------------------------------------------

Configuring done
Generating done
</code></pre>
<p>Notice for <code>gencode</code></p>
<pre><code>CUDA NVCC target flags: -gencode;arch=compute_30,code=sm_30;-gencode;arch=compute_35,code=sm_35;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_52,code=sm_52;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_30,code=compute_30
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><p>Open <code>OpenCV.sln</code> with <code>VS 2015</code> and build release version.</p>
<blockquote>
<p> this may take hours to finish.</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20180716195321260-638321227.png" alt="build success"></p>
<h4 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h4><p><img src="https://kezunlin.me/images/posts/635233-20180716195324728-1445413102.png" alt="opencv build errors"></p>
<p>possible solutions</p>
<blockquote>
<p>With <code>BUILD_PERF_TESTS</code> and <code>BUILD_TESTS</code> disabled, I managed to build OpenCV 3.1 with CUDA 8.0 on Windows 10 with VS2015 x64 arch target. Without building test&#x2F;performance modules, the build process costs less time as well : )</p>
</blockquote>
<blockquote>
<p>I actually got it to work both on my laptop and my desktop (GTX960M and GTX970 respectively) running with OpenCV 3.2 and the latest version of CUDA 8.0 for Win10 in Visual Studio 15 Community! What I did was to enable <code>WITH_CUBLAS</code> aswell as <code>WITH_CUDA</code>. I also turned off <code>BUILD_PERF_TESTS</code> and <code>BUILD_TESTS</code>. The configuration was built using the Visual Studio 14 2015 C++ compiler.</p>
</blockquote>
<p>my solution:</p>
<pre><code>disable `BUILD_PERF_TESTS`
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180716195328292-1498836513.png" alt="opencv disable build perf tests"></p>
<p>configure and build again. this time cost only about 1 minutes.</p>
<p>after error fixed,build results<br><img src="https://kezunlin.me/images/posts/635233-20180716195739586-1774251249.png" alt="after errors fixed"></p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="cuda-module"><a href="#cuda-module" class="headerlink" title="cuda-module"></a>cuda-module</h4><p><code>OpenCV GPU</code> module is written using <code>CUDA</code>, therefore it benefits from the <code>CUDA</code> ecosystem. </p>
<p>GPU modules includes class <code>cv::cuda::GpuMat</code> which is a primary container for data kept in GPU memory. It’s interface is very similar with <code>cv::Mat</code>, its CPU counterpart. All GPU functions receive GpuMat as input and output arguments. This allows to invoke several GPU algorithms without downloading data. GPU module API interface is also kept similar with CPU interface where possible. So developers who are familiar with Opencv on CPU could start using GPU straightaway.</p>
<p>The GPU module is designed as a host-level API. This means that if you have pre-compiled OpenCV GPU binaries, you are not required to have the CUDA Toolkit installed or write any extra code to make use of the GPU.</p>
<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d </span><br><span class="line">	cudaarithm cudabgsegm cudafilters cudaimgproc cudawarping cudafeatures2d <span class="comment"># for cuda-enabled</span></span><br><span class="line">) <span class="comment">#</span></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; OpenCV_INCLUDE_DIRS = $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; OpenCV_LIBS = $&#123;OpenCV_LIBS&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h4><p>In the sample below an image is loaded from local file, next it is uploaded to GPU, thresholded, downloaded and displayed.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudaarithm.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudabgsegm.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudafilters.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudaimgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudawarping.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/cudafeatures2d.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test_opencv_gpu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		cv::Mat src_host = cv::<span class="built_in">imread</span>(<span class="string">&quot;file.png&quot;</span>, CV_LOAD_IMAGE_GRAYSCALE);</span><br><span class="line">		cv::cuda::GpuMat dst, src;</span><br><span class="line">		src.<span class="built_in">upload</span>(src_host);</span><br><span class="line"></span><br><span class="line">		cv::cuda::<span class="built_in">threshold</span>(src, dst, <span class="number">128.0</span>, <span class="number">255.0</span>, CV_THRESH_BINARY);</span><br><span class="line"></span><br><span class="line">		cv::Mat result_host;</span><br><span class="line">		dst.<span class="built_in">download</span>(result_host);</span><br><span class="line"></span><br><span class="line">		cv::<span class="built_in">imshow</span>(<span class="string">&quot;Result&quot;</span>, result_host);</span><br><span class="line">		cv::<span class="built_in">waitKey</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">catch</span> (<span class="type">const</span> cv::Exception&amp; ex)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Error: &quot;</span> &lt;&lt; ex.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cpu-vs-gpu-time-cost"><a href="#cpu-vs-gpu-time-cost" class="headerlink" title="cpu vs gpu time cost"></a>cpu vs gpu time cost</h3><ul>
<li>(1)对于分辨率不特别大的图片间的ORB特征匹配，CPU运算得比GPU版的快（由于图像上传到GPU消耗了时间）</li>
<li>(2)但对于分辨率较大的图片，或者GPU比CPU好的机器（比如Nvidia Jetson系列），GPU版的ORB算法比CPU版的程序更高效。</li>
</ul>
<h4 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h4><blockquote>
<p>(1) 使用cuda版本的opencv caffe网络的第一次创建非常耗时，后面的网络创建则非常快。<br><del>(2) opencv的gpu代码比cpu代码慢，初次启动多耗费20s左右</del>。(事实是由于编译的caffe和GPU计算力不匹配导致的)</p>
</blockquote>
<h4 id="reasons"><a href="#reasons" class="headerlink" title="reasons"></a>reasons</h4><blockquote>
<p>Your problem is that CUDA needs to initialize! And it will generally takes between serveral seconds</p>
</blockquote>
<blockquote>
<p>Why first function call is slow?<br>That is because of initialization overheads. On first GPU function call <code>Cuda Runtime API</code> is initialized implicitly.</p>
</blockquote>
<blockquote>
<p>The first gpu function call is always takes more time, because CUDA initialize context for device.<br>The following calls will be faster.</p>
</blockquote>
<blockquote>
<p>Not Reasons:<br>(1) CPU clockspeed is 10x faster than GPU clockspeed.<br>(2) memory transfer times between host (CPU) and device (GPU)  (upload,downloa data)</p>
</blockquote>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><h4 id="runtime-errors"><a href="#runtime-errors" class="headerlink" title="runtime errors"></a>runtime errors</h4><p>gtx 1060 编译的opencv caffe在gtx 970m上运行出现错误</p>
<p><code>im2col.cu  Check failed: error == cudaSuccess (8 vs. 0) invalid device function</code></p>
<pre><code>    gtx 1060   sm_61
    gtx 970m   sm_52
</code></pre>
<p>im2col 是caffe的源文件，表明<code>gtx 970m</code>的计算能力不支持可执行文件的运行。</p>
<h4 id="reasons-1"><a href="#reasons-1" class="headerlink" title="reasons"></a>reasons</h4><p>see <a href="https://stackoverflow.com/questions/17599189/what-is-the-purpose-of-using-multiple-arch-flags-in-nvidias-nvcc-compiler/17599585#17599585">what-is-the-purpose-of-using-multiple-arch-flags-in-nvidias-nvcc-compiler</a></p>
<blockquote>
<p>Roughly speaking, the code compilation flow goes like this: <code>CUDA C/C++ device code source --&gt; PTX --&gt; SASS</code><br>The virtual architecture (e.g. <code>compute_20</code>, whatever is specified by <code>-arch compute</code>…) determines what type of PTX code will be generated. The additional switches (e.g. <code>-code sm_21</code>) determine what type of SASS code will be generated. SASS is actually executable object code for a GPU (machine language). An executable can contain multiple versions of SASS and&#x2F;or PTX, and there is a runtime loader mechanism that will pick appropriate versions based on the GPU actually being used.</p>
</blockquote>
<h4 id="win7-win10-deploy"><a href="#win7-win10-deploy" class="headerlink" title="win7&#x2F;win10 deploy"></a>win7&#x2F;win10 deploy</h4><ul>
<li>compile opencv caffe on windows 10 for GTX 1060</li>
<li>deoply on windows 7 for GTX 1080 Ti successfully</li>
</ul>
<p>for win7, if we install <code>398.82-desktop-win8-win7-64bit-international-whql.exe</code>,errors may occur:</p>
<pre><code>&gt; nvidia-smi.exe 
Failed to initialize NVML: Unknown error
</code></pre>
<p>Solutions: use older drivers <code>385.69</code></p>
<h4 id="linux-window-performance"><a href="#linux-window-performance" class="headerlink" title="linux&#x2F;window performance"></a>linux&#x2F;window performance</h4><blockquote>
<p>(1) api在linux平均耗时3ms;同样的代码在windows平均耗时14ms<br>(2) vs编译开启代码优化前后性能相差接近5倍，125ms vs 25ms<br>(3) cmake编译RELEASE选项默认已经开启了代码优化 -O3</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.opencv.org/3.2.0/d6/d15/tutorial_building_tegra_cuda.html">Building OpenCV for Tegra with CUDA</a></li>
<li><a href="https://opencv.org/platforms/cuda.html">opencv with cuda introduction</a></li>
<li><a href="https://docs.opencv.org/2.4/modules/gpu/doc/gpu.html">ref doc for opencv gpu</a></li>
<li><a href="https://docs.opencv.org/3.1.0/">opencv 3.1.0 doc</a></li>
<li><a href="https://github.com/opencv/opencv/issues/6716">std::tuple errors when Building OpenCV (Main Branch) for Microsoft VS 2015 (x64) </a></li>
<li><a href="https://github.com/opencv/opencv/issues/7992">opencv github issues</a></li>
<li><a href="https://stackoverflow.com/questions/42122634/building-opencv-3-cuda-errors">building-opencv-3-cuda-errors</a></li>
<li><a href="https://stackoverflow.com/questions/12074281/why-opencv-gpu-code-is-slower-than-cpu/16038287#16038287">why-opencv-gpu-code-is-slower-than-cpu</a></li>
<li><a href="http://answers.opencv.org/question/1670/huge-time-to-upload-data-to-gpu/#1676">huge-time-to-upload-data-to-gpu</a></li>
<li><a href="https://github.com/floydhub/dl-docker/issues/12">https://github.com/floydhub/dl-docker/issues/12</a></li>
<li><a href="https://github.com/BVLC/caffe/issues/138">Cuda kernel failed. Error: invalid device function </a></li>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#initialization">offical cuda-c-programming-guide</a></li>
<li><a href="https://stackoverflow.com/questions/17599189/what-is-the-purpose-of-using-multiple-arch-flags-in-nvidias-nvcc-compiler/17599585#17599585">what-is-the-purpose-of-using-multiple-arch-flags-in-nvidias-nvcc-compiler</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180713: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>cudnn</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>linear Regression with gradient descent</title>
    <url>//blog/Linear-Regression-with-gradient-descent/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><ul>
<li><p>目标<br>给定N组二位坐标点对(x1,x2),…,(xn,yn)，拟合直线<strong>y &#x3D; mx + b</strong>，找到最佳的m和b，使得总的误差最小。</p>
</li>
<li><p>数据展示<br><img src="https://spin.atomicobject.com/wp-content/uploads/points_for_linear_regression1.png" alt="points"></p>
</li>
<li><p>误差公式<br><img src="https://spin.atomicobject.com/wp-content/uploads/linear_regression_error1.png" alt="errors"></p>
</li>
<li><p>可视化误差<br>误差error是m和b的函数<br><img src="https://spin.atomicobject.com/wp-content/uploads/gradient_descent_error_surface.png" alt="visual errors of m and b"></p>
</li>
<li><p>偏导数计算公式<br><img src="https://spin.atomicobject.com/wp-content/uploads/linear_regression_gradient1.png" alt="partial derivatives"></p>
</li>
<li><p>学习过程<br><img src="https://spin.atomicobject.com/wp-content/uploads/gradient_descent_search1.png" alt="learning"></p>
</li>
<li><p>误差曲线<br><img src="https://spin.atomicobject.com/wp-content/uploads/gradient_descent_error_by_iteration.png" alt="errors curve"></p>
</li>
<li><p>动画演示<br><a href="https://github.com/mattnedrich/GradientDescentExample/blob/master/gradient_descent_example.gif">演示链接</a></p>
</li>
</ul>
<h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><h3 id="随机梯度示例"><a href="#随机梯度示例" class="headerlink" title="随机梯度示例"></a>随机梯度示例</h3><p>横轴X代表参数，纵轴Y代表误差。<br>gradient descent should force us to move in the direction of the minimum<br><img src="http://www.alanzucconi.com/wp-content/uploads/2017/04/GD1.png" alt="hilly landscape"></p>
<h3 id="沿着曲线斜率slope移动"><a href="#沿着曲线斜率slope移动" class="headerlink" title="沿着曲线斜率slope移动"></a>沿着曲线斜率slope移动</h3><p>The best guess the algorithm can do is to move in the direction that of the <strong>slope</strong>, also called the <strong>gradient of the function</strong>.<br><img src="http://www.alanzucconi.com/wp-content/uploads/2017/04/GD2.png" alt="move in the slope"></p>
<h3 id="单变量-single-variable"><a href="#单变量-single-variable" class="headerlink" title="单变量(single variable)"></a>单变量(single variable)</h3><ul>
<li><p>derivative:　导数是一个极限，准确值。<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-480d8d86fa6d9987f7ce324b80a625f4_l3.svg" alt="derivative of single variable"></p>
</li>
<li><p>estimated gradient: 梯度是一个估计值，和采样距离dx有关。<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-5dbf8b5401ec48e32f89a1030a272551_l3.svg" alt="estimated gradient"></p>
</li>
<li><p>how to update parameter<br>Once we have found our estimated derivative, we need to move in its opposite direction to climb down the function. This means that we have to update our parameter p like this:<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-9a48698583db822fec79981416a16556_l3.svg" alt="update parameter"><br>The constant L is often referred as <strong>learning rate</strong>, and it dictates <strong>how fast we move against the gradient</strong>.<br>找到梯度之后，沿着梯度的相反方向移动。</p>
</li>
</ul>
<h3 id="多变量-multiple-variable"><a href="#多变量-multiple-variable" class="headerlink" title="多变量(multiple variable)"></a>多变量(multiple variable)</h3><ul>
<li><p>partial derivatives: 多变量偏导数<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-9d2fc6510d49e9eec7cecc0a0942ada3_l3.svg" alt="partial derivatives"><br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-4485c43c04b41137d050db9173cc9672_l3.svg" alt="partial derivatives"><br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-060d755a46b1ae366e01f67d30f8604e_l3.svg" alt="partial derivatives"></p>
</li>
<li><p>estimated gradient: 梯度和采样距离dx,dy,dz有关。<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-7c7650af48d0b52b5af436e328ce818d_l3.svg" alt="estimated gradient"><br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-0df8ae3c554d5cc7885c75e7cfc201cc_l3.svg" alt="estimated gradient"><br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-e61905804f0874ef5938b05bba167503_l3.svg" alt="estimated gradient"></p>
</li>
<li><p>gradient vector: 梯度向量<br><img src="http://www.alanzucconi.com/wp-content/ql-cache/quicklatex.com-3fc9711c2ae2b6f9df78076a177a3b29_l3.svg" alt="gradient vector"></p>
</li>
</ul>
<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = mx + b</span></span><br><span class="line"><span class="comment"># m is slope, b is y-intercept</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_error_for_line_given_points</span>(<span class="params">b, m, points</span>):</span><br><span class="line">    totalError = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(points)):</span><br><span class="line">        x = points[i, <span class="number">0</span>]</span><br><span class="line">        y = points[i, <span class="number">1</span>]</span><br><span class="line">        totalError += (y - (m * x + b)) ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> totalError / <span class="built_in">float</span>(<span class="built_in">len</span>(points))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_mini_batch</span>(<span class="params">b, m, mini_batch, learningRate</span>):</span><br><span class="line">    <span class="comment">#一次epoch梯度迭代，该函数需要调用epoches次</span></span><br><span class="line">    <span class="comment">#每一次计算m,b的梯度，每一次学习都需要所有的N个样本数据参与运算。一个epoch内，只能学习１次。</span></span><br><span class="line">    <span class="comment">#后续可以采用mini-batch思路，每一次学习只需要m个样本数据参与运算。一个epoch内，可以学习n/m次。</span></span><br><span class="line">    N = <span class="built_in">float</span>(<span class="built_in">len</span>(points))</span><br><span class="line">    b_gradient,m_gradient = compute_cost_gradient_of_all(mini_batch,b,m)</span><br><span class="line">    new_b = b - (learningRate/N) * b_gradient</span><br><span class="line">    new_m = m - (learningRate/N) * m_gradient</span><br><span class="line">    <span class="keyword">return</span> [new_b, new_m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cost_gradient_of_all</span>(<span class="params">points,b,m</span>):</span><br><span class="line">    <span class="comment">#计算N个样本的总梯度</span></span><br><span class="line">    b_gradient = <span class="number">0</span></span><br><span class="line">    m_gradient = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(points)):</span><br><span class="line">        delta_b,delta_m = compute_cost_gradient_of_one(points[i],b,m)</span><br><span class="line">        b_gradient += delta_b</span><br><span class="line">        m_gradient += delta_m</span><br><span class="line">    <span class="keyword">return</span> [b_gradient,m_gradient]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cost_gradient_of_one</span>(<span class="params">point,b,m</span>):</span><br><span class="line">    <span class="comment">#计算一个样本的梯度</span></span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    b_gradient =  -<span class="number">2</span> *     (y - ((m * x) + b))</span><br><span class="line">    m_gradient =  -<span class="number">2</span> * x * (y - ((m * x) + b))</span><br><span class="line">    <span class="keyword">return</span> [b_gradient,m_gradient]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient_descent_runner</span>(<span class="params">points, starting_b, starting_m, learning_rate, epoches</span>):</span><br><span class="line">    b = starting_b</span><br><span class="line">    m = starting_m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoches):</span><br><span class="line">        <span class="comment">#每一次学习都需要所有的N个样本数据参与运算。一个epoch内，只能学习１次。</span></span><br><span class="line">        <span class="comment">#此时,mini_batch包含了所有N个样本。</span></span><br><span class="line">        b, m = update_mini_batch(b, m, array(points), learning_rate)</span><br><span class="line">        <span class="comment">#print &quot;&#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;&quot;.format(i, b, m, compute_error_for_line_given_points(b, m, points))</span></span><br><span class="line">    <span class="keyword">return</span> [b, m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient_descent_runner_with_mini_batch</span>(<span class="params">points, starting_b, starting_m, learning_rate, epoches,mini_batch_size</span>):</span><br><span class="line">    b = starting_b</span><br><span class="line">    m = starting_m</span><br><span class="line">    n = <span class="built_in">len</span>(points)</span><br><span class="line">    num_batches = n/mini_batch_size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoches):</span><br><span class="line">        <span class="comment">#采用mini-batch思路，每一次学习只需要m个样本数据参与运算。一个epoch内，可以学习n/m次。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># shuffle data and get N/mini_batch_size mini batches</span></span><br><span class="line">        np.random.shuffle(points)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># iterate over all mini batches to learn (updating m and b)</span></span><br><span class="line">        <span class="comment"># now in a epoch,we can learn N/mini times instead of just once.</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>,num_batches):</span><br><span class="line">            mini_batch = points[k*mini_batch_size : (k+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">            b, m = update_mini_batch(b, m, mini_batch, learning_rate)</span><br><span class="line">        <span class="comment">#print &quot;&#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;&quot;.format(i, b, m, compute_error_for_line_given_points(b, m, points))</span></span><br><span class="line">    <span class="keyword">return</span> [b, m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    points = genfromtxt(<span class="string">&quot;data.csv&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    learning_rate = <span class="number">0.0001</span></span><br><span class="line">    initial_b = <span class="number">0</span> <span class="comment"># initial y-intercept guess</span></span><br><span class="line">    initial_m = <span class="number">0</span> <span class="comment"># initial slope guess</span></span><br><span class="line">    epoches = <span class="number">1000</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Starting gradient descent at b = &#123;0&#125;, m = &#123;1&#125;, error = &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(initial_b, initial_m, compute_error_for_line_given_points(initial_b, initial_m, points))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Running...&quot;</span></span><br><span class="line">    [b, m] = gradient_descent_runner(points, initial_b, initial_m, learning_rate, epoches)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;After &#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;&quot;</span>.<span class="built_in">format</span>(epoches, b, m, compute_error_for_line_given_points(b, m, points))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run2</span>():</span><br><span class="line">    points = genfromtxt(<span class="string">&quot;data.csv&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    learning_rate = <span class="number">0.0001</span></span><br><span class="line">    initial_b = <span class="number">0</span> <span class="comment"># initial y-intercept guess</span></span><br><span class="line">    initial_m = <span class="number">0</span> <span class="comment"># initial slope guess</span></span><br><span class="line">    epoches = <span class="number">1000</span></span><br><span class="line">    mini_batch_size = <span class="number">10</span> <span class="comment"># mini batch size</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Starting gradient descent at b = &#123;0&#125;, m = &#123;1&#125;, error = &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(initial_b, initial_m, compute_error_for_line_given_points(initial_b, initial_m, points))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Running...&quot;</span></span><br><span class="line">    [b, m] = gradient_descent_runner_with_mini_batch(points, initial_b, initial_m, learning_rate, epoches,mini_batch_size)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;After &#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;&quot;</span>.<span class="built_in">format</span>(epoches, b, m, compute_error_for_line_given_points(b, m, points))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br><span class="line">    <span class="comment">#run2()</span></span><br></pre></td></tr></table></figure>

<pre><code>Starting gradient descent at b = 0, m = 0, error = 5565.10783448
Running...
After 1000 iterations b = 0.0889365199374, m = 1.47774408519, error = 112.614810116
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://spin.atomicobject.com/2014/06/24/gradient-descent-linear-regression/">原理讲解 gradient-descent-linear-regression</a></li>
<li><a href="https://github.com/mattnedrich/GradientDescentExample">代码示例 GradientDescentExample</a></li>
<li><a href="http://www.alanzucconi.com/2017/04/10/gradient-descent/">导数和梯度</a></li>
<li><a href="https://www.pyimagesearch.com/2016/10/10/gradient-descent-with-python/">gradient-descent-with-python</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180806: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
      </tags>
  </entry>
  <entry>
    <title>Classification: Instant Recognition with Caffe</title>
    <url>//blog/Classification-Instant-Recognition-with-Caffe/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this example we’ll classify an image with the bundled CaffeNet model (which is based on the network architecture of Krizhevsky et al. for ImageNet).</p>
<p>We’ll compare CPU and GPU modes and then dig into the model to inspect features and the output.</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ul>
<li>First, set up Python, <code>numpy</code>, and <code>matplotlib</code>.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set up Python environment: numpy for numerical routines, and matplotlib for plotting</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># display plots in this notebook</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># set display defaults</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10</span>, <span class="number">10</span>)        <span class="comment"># large images</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.interpolation&#x27;</span>] = <span class="string">&#x27;nearest&#x27;</span>  <span class="comment"># don&#x27;t interpolate: show square pixels</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.cmap&#x27;</span>] = <span class="string">&#x27;gray&#x27;</span>  <span class="comment"># use grayscale output rather than a (potentially misleading) color heatmap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The caffe module needs to be on the Python path;</span></span><br><span class="line"><span class="comment">#  we&#x27;ll add it here explicitly.</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file should be run from &#123;caffe_root&#125;/examples (otherwise change this line)</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="comment"># If you get &quot;No module named _caffe&quot;, either you have not built pycaffe or you have the wrong path.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(caffe_root + <span class="string">&#x27;models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;CaffeNet found.&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Downloading pre-trained CaffeNet model...&#x27;</span></span><br><span class="line">    !../scripts/download_model_binary.py ../models/bvlc_reference_caffenet</span><br></pre></td></tr></table></figure>

<pre><code>CaffeNet found.
</code></pre>
<h3 id="Load-net-and-set-up-input-preprocessing"><a href="#Load-net-and-set-up-input-preprocessing" class="headerlink" title="Load net and set up input preprocessing"></a>Load net and set up input preprocessing</h3><ul>
<li>Set Caffe to CPU mode and load the net from disk.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">caffe.set_mode_cpu()</span><br><span class="line"></span><br><span class="line">model_def = caffe_root + <span class="string">&#x27;models/bvlc_reference_caffenet/deploy.prototxt&#x27;</span></span><br><span class="line">model_weights = caffe_root + <span class="string">&#x27;models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span></span><br><span class="line"></span><br><span class="line">net = caffe.Net(model_def,      <span class="comment"># defines the structure of the model</span></span><br><span class="line">                model_weights,  <span class="comment"># contains the trained weights</span></span><br><span class="line">                caffe.TEST)     <span class="comment"># use test mode (e.g., don&#x27;t perform dropout)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Set up input preprocessing. (We’ll use Caffe’s <code>caffe.io.Transformer</code> to do this, but this step is independent of other parts of Caffe, so any custom preprocessing code may be used).</p>
<p>  Our default CaffeNet is configured to take images in BGR format. Values are expected to start in the range [0, 255] and then have the mean ImageNet pixel value subtracted from them. In addition, the channel dimension is expected as the first (<em>outermost</em>) dimension.</p>
<p>  As matplotlib will load images with values in the range [0, 1] in RGB format with the channel as the <em>innermost</em> dimension, we are arranging for the needed transformations here.</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load the mean ImageNet image (as distributed with Caffe) for subtraction</span></span><br><span class="line">mu = np.load(caffe_root + <span class="string">&#x27;python/caffe/imagenet/ilsvrc_2012_mean.npy&#x27;</span>)</span><br><span class="line">mu = mu.mean(<span class="number">1</span>).mean(<span class="number">1</span>)  <span class="comment"># average over pixels to obtain the mean (BGR) pixel values</span></span><br><span class="line"><span class="comment">#mu = np.array([ 104.00698793,  116.66876762,  122.67891434]) </span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;mean-subtracted values:&#x27;</span>, <span class="built_in">zip</span>(<span class="string">&#x27;BGR&#x27;</span>, mu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create transformer for the input called &#x27;data&#x27;</span></span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>: net.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape&#125;)</span><br><span class="line"></span><br><span class="line">transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))  <span class="comment"># move image channels to outermost dimension</span></span><br><span class="line">transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, mu)            <span class="comment"># subtract the dataset-mean value in each channel</span></span><br><span class="line">transformer.set_raw_scale(<span class="string">&#x27;data&#x27;</span>, <span class="number">255</span>)      <span class="comment"># rescale from [0, 1] to [0, 255]</span></span><br><span class="line">transformer.set_channel_swap(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment"># swap channels from RGB to BGR</span></span><br></pre></td></tr></table></figure>

<pre><code>mean-subtracted values: [(&#39;B&#39;, 104.0069879317889), (&#39;G&#39;, 116.66876761696767), (&#39;R&#39;, 122.6789143406786)]
</code></pre>
<h3 id="CPU-classification"><a href="#CPU-classification" class="headerlink" title="CPU classification"></a>CPU classification</h3><ul>
<li>Now we’re ready to perform classification. Even though we’ll only classify one image, we’ll set a batch size of 50 to demonstrate batching.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set the size of the input (we can skip this if we&#x27;re happy</span></span><br><span class="line"><span class="comment">#  with the default; we can also change it later, e.g., for different batch sizes)</span></span><br><span class="line">net.blobs[<span class="string">&#x27;data&#x27;</span>].reshape(<span class="number">50</span>,        <span class="comment"># batch size</span></span><br><span class="line">                          <span class="number">3</span>,         <span class="comment"># 3-channel (BGR) images</span></span><br><span class="line">                          <span class="number">227</span>, <span class="number">227</span>)  <span class="comment"># image size is 227x227</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Load an image (that comes with Caffe) and perform the preprocessing we’ve set up.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = caffe.io.load_image(caffe_root + <span class="string">&#x27;examples/images/cat.jpg&#x27;</span>)</span><br><span class="line">transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image)</span><br><span class="line">plt.imshow(image)</span><br></pre></td></tr></table></figure>

<pre><code>/usr/local/lib/python2.7/dist-packages/skimage/transform/_warps.py:84: UserWarning: The default mode, &#39;constant&#39;, will be changed to &#39;reflect&#39; in skimage 0.15.
  warn(&quot;The default mode, &#39;constant&#39;, will be changed to &#39;reflect&#39; in &quot;





&lt;matplotlib.image.AxesImage at 0x7f2088044450&gt;
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180807173641145-432603467.png" alt="png"></p>
<ul>
<li>Adorable! Let’s classify it!</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy the image data into the memory allocated for the net</span></span><br><span class="line">net.blobs[<span class="string">&#x27;data&#x27;</span>].data[...] = transformed_image</span><br><span class="line"></span><br><span class="line"><span class="comment">### perform classification</span></span><br><span class="line">output = net.forward()</span><br><span class="line"></span><br><span class="line">output_prob = output[<span class="string">&#x27;prob&#x27;</span>][<span class="number">0</span>]  <span class="comment"># the output probability vector for the first image in the batch</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> output_prob.shape</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;predicted class is:&#x27;</span>, output_prob.argmax()</span><br></pre></td></tr></table></figure>

<pre><code>(1000,)
predicted class is: 281
</code></pre>
<ul>
<li>The net gives us a vector of probabilities; the most probable class was the 281st one. But is that correct? Let’s check the ImageNet labels…</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load ImageNet labels</span></span><br><span class="line">labels_file = caffe_root + <span class="string">&#x27;data/ilsvrc12/synset_words.txt&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(labels_file):</span><br><span class="line">    !../data/ilsvrc12/get_ilsvrc_aux.sh</span><br><span class="line">    </span><br><span class="line">labels = np.loadtxt(labels_file, <span class="built_in">str</span>, delimiter=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> labels.shape</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;output label:&#x27;</span>, labels[output_prob.argmax()]</span><br></pre></td></tr></table></figure>

<pre><code>(1000,)
output label: n02123045 tabby, tabby cat
</code></pre>
<ul>
<li>“Tabby cat” is correct! But let’s also look at other top (but less confident predictions).</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort top five predictions from softmax output</span></span><br><span class="line">top_inds = output_prob.argsort()[::-<span class="number">1</span>][:<span class="number">5</span>]  <span class="comment"># reverse sort and take five largest items</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;probabilities and labels:&#x27;</span></span><br><span class="line"><span class="built_in">zip</span>(output_prob[top_inds], labels[top_inds])</span><br></pre></td></tr></table></figure>

<pre><code>probabilities and labels:





[(0.31243625, &#39;n02123045 tabby, tabby cat&#39;),
 (0.23797157, &#39;n02123159 tiger cat&#39;),
 (0.12387245, &#39;n02124075 Egyptian cat&#39;),
 (0.10075716, &#39;n02119022 red fox, Vulpes vulpes&#39;),
 (0.070957333, &#39;n02127052 lynx, catamount&#39;)]
</code></pre>
<ul>
<li>We see that less confident predictions are sensible.</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="Switching-to-GPU-mode"><a href="#Switching-to-GPU-mode" class="headerlink" title="Switching to GPU mode"></a>Switching to GPU mode</h3><ul>
<li>Let’s see how long classification took, and compare it to GPU mode.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit net.forward()</span><br></pre></td></tr></table></figure>

<pre><code>1 loop, best of 3: 4.26 s per loop
</code></pre>
<ul>
<li>That’s a while, even for a batch of 50 images. Let’s switch to GPU mode.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">caffe.set_device(<span class="number">0</span>)  <span class="comment"># if we have multiple GPUs, pick the first one</span></span><br><span class="line">caffe.set_mode_gpu()</span><br><span class="line">net.forward()  <span class="comment"># run once before timing to set up memory</span></span><br><span class="line">%timeit net.forward()</span><br></pre></td></tr></table></figure>

<pre><code>10 loops, best of 3: 29.6 ms per loop
</code></pre>
<ul>
<li>That should be much faster!</li>
</ul>
<h3 id="Examining-intermediate-output"><a href="#Examining-intermediate-output" class="headerlink" title="Examining intermediate output"></a>Examining intermediate output</h3><ul>
<li>A net is not just a black box; let’s take a look at some of the parameters and intermediate activations.</li>
</ul>
<p>First we’ll see how to read out the structure of the net in terms of activation and parameter shapes.</p>
<ul>
<li><p>For each layer, let’s look at the activation shapes, which typically have the form <code>(batch_size, channel_dim, height, width)</code>.</p>
<p>  The activations are exposed as an <code>OrderedDict</code>, <code>net.blobs</code>.</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for each layer, show the output shape</span></span><br><span class="line"><span class="keyword">for</span> layer_name, blob <span class="keyword">in</span> net.blobs.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(blob.data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>data	(50, 3, 227, 227)
conv1	(50, 96, 55, 55)
pool1	(50, 96, 27, 27)
norm1	(50, 96, 27, 27)
conv2	(50, 256, 27, 27)
pool2	(50, 256, 13, 13)
norm2	(50, 256, 13, 13)
conv3	(50, 384, 13, 13)
conv4	(50, 384, 13, 13)
conv5	(50, 256, 13, 13)
pool5	(50, 256, 6, 6)
fc6	(50, 4096)
fc7	(50, 4096)
fc8	(50, 1000)
prob	(50, 1000)
</code></pre>
<ul>
<li><p>Now look at the parameter shapes. The parameters are exposed as another <code>OrderedDict</code>, <code>net.params</code>. We need to index the resulting values with either <code>[0]</code> for weights or <code>[1]</code> for biases.</p>
<p>  The param shapes typically have the form <code>(output_channels, input_channels, filter_height, filter_width)</code> (for the weights) and the 1-dimensional shape <code>(output_channels,)</code> (for the biases).</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> layer_name, param <span class="keyword">in</span> net.params.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(param[<span class="number">0</span>].data.shape), <span class="built_in">str</span>(param[<span class="number">1</span>].data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>conv1	(96, 3, 11, 11) (96,)
conv2	(256, 48, 5, 5) (256,)
conv3	(384, 256, 3, 3) (384,)
conv4	(384, 192, 3, 3) (384,)
conv5	(256, 192, 3, 3) (256,)
fc6	(4096, 9216) (4096,)
fc7	(4096, 4096) (4096,)
fc8	(1000, 4096) (1000,)
</code></pre>
<ul>
<li>Since we’re dealing with four-dimensional data here, we’ll define a helper function for visualizing sets of rectangular heatmaps.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vis_square</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Take an array of shape (n, height, width) or (n, height, width, 3)</span></span><br><span class="line"><span class="string">       and visualize each (height, width) thing in a grid of size approx. sqrt(n) by sqrt(n)&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># normalize data for display</span></span><br><span class="line">    data = (data - data.<span class="built_in">min</span>()) / (data.<span class="built_in">max</span>() - data.<span class="built_in">min</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># force the number of filters to be square</span></span><br><span class="line">    n = <span class="built_in">int</span>(np.ceil(np.sqrt(data.shape[<span class="number">0</span>])))</span><br><span class="line">    padding = (((<span class="number">0</span>, n ** <span class="number">2</span> - data.shape[<span class="number">0</span>]),</span><br><span class="line">               (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>))                 <span class="comment"># add some space between filters</span></span><br><span class="line">               + ((<span class="number">0</span>, <span class="number">0</span>),) * (data.ndim - <span class="number">3</span>))  <span class="comment"># don&#x27;t pad the last dimension (if there is one)</span></span><br><span class="line">    data = np.pad(data, padding, mode=<span class="string">&#x27;constant&#x27;</span>, constant_values=<span class="number">1</span>)  <span class="comment"># pad with ones (white)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># tile the filters into an image</span></span><br><span class="line">    data = data.reshape((n, n) + data.shape[<span class="number">1</span>:]).transpose((<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>) + <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">4</span>, data.ndim + <span class="number">1</span>)))</span><br><span class="line">    data = data.reshape((n * data.shape[<span class="number">1</span>], n * data.shape[<span class="number">3</span>]) + data.shape[<span class="number">4</span>:])</span><br><span class="line">    </span><br><span class="line">    plt.imshow(data); plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>First we’ll look at the first layer filters, <code>conv1</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the parameters are a list of [weights, biases]</span></span><br><span class="line">filters = net.params[<span class="string">&#x27;conv1&#x27;</span>][<span class="number">0</span>].data</span><br><span class="line">vis_square(filters.transpose(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180807173745487-782490699.png" alt="png"></p>
<ul>
<li>The first layer output, <code>conv1</code> (rectified responses of the filters above, first 36 only)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feat = net.blobs[<span class="string">&#x27;conv1&#x27;</span>].data[<span class="number">0</span>, :<span class="number">36</span>]</span><br><span class="line">vis_square(feat)</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180807173803768-454494158.png" alt="png"></p>
<ul>
<li>The fifth layer after pooling, <code>pool5</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feat = net.blobs[<span class="string">&#x27;pool5&#x27;</span>].data[<span class="number">0</span>]</span><br><span class="line">vis_square(feat)</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180807173817099-163236065.png" alt="png"></p>
<ul>
<li><p>The first fully connected layer, <code>fc6</code> (rectified)</p>
<p>  We show the output values and the histogram of the positive values</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feat = net.blobs[<span class="string">&#x27;fc6&#x27;</span>].data[<span class="number">0</span>]</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(feat.flat)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">_ = plt.hist(feat.flat[feat.flat &gt; <span class="number">0</span>], bins=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180807173830706-986799321.png" alt="png"></p>
<ul>
<li>The final probability output, <code>prob</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feat = net.blobs[<span class="string">&#x27;prob&#x27;</span>].data[<span class="number">0</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">3</span>))</span><br><span class="line">plt.plot(feat.flat)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x7f2060250650&gt;]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180807173851980-73956897.png" alt="png"></p>
<p>Note the cluster of strong predictions; the labels are sorted semantically. The top peaks correspond to the top predicted labels, as shown above.</p>
<h3 id="Try-your-own-image"><a href="#Try-your-own-image" class="headerlink" title="Try your own image"></a>Try your own image</h3><p>Now we’ll grab an image from the web and classify it using the steps above.</p>
<ul>
<li>Try setting <code>my_image_url</code> to any JPEG image URL.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download an image</span></span><br><span class="line">my_image_url = <span class="string">&quot;...&quot;</span>  <span class="comment"># paste your URL here</span></span><br><span class="line"><span class="comment"># for example:</span></span><br><span class="line"><span class="comment"># my_image_url = &quot;https://upload.wikimedia.org/wikipedia/commons/b/be/Orang_Utan%2C_Semenggok_Forest_Reserve%2C_Sarawak%2C_Borneo%2C_Malaysia.JPG&quot;</span></span><br><span class="line">!wget -O image.jpg $my_image_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># transform it and copy it into the net</span></span><br><span class="line">image = caffe.io.load_image(<span class="string">&#x27;image.jpg&#x27;</span>)</span><br><span class="line">net.blobs[<span class="string">&#x27;data&#x27;</span>].data[...] = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># perform classification</span></span><br><span class="line">net.forward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># obtain the output probabilities</span></span><br><span class="line">output_prob = net.blobs[<span class="string">&#x27;prob&#x27;</span>].data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort top five predictions from softmax output</span></span><br><span class="line">top_inds = output_prob.argsort()[::-<span class="number">1</span>][:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">plt.imshow(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;probabilities and labels:&#x27;</span></span><br><span class="line"><span class="built_in">zip</span>(output_prob[top_inds], labels[top_inds])</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>image classification</tag>
      </tags>
  </entry>
  <entry>
    <title>Example 1-theano linear regression with gradient descent</title>
    <url>//blog/Example-1-theano-linear-regression-with-gradient-descent/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/3bee8fac/#more"><strong>Example 1-theano linear regression with gradient descent</strong></a></li>
<li><a href="https://kezunlin.me/post/8d4707b6/#more">Example 2 - Linear Regression Example with Python and theano from MSDN</a></li>
<li><a href="https://kezunlin.me/post/8ce3f979/#more">Example 3- A Real Example Logistic Regression with theano</a></li>
</ul>
<h2 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blogs.msdn.microsoft.com/lukassteindl/2015/12/13/linear-regression-example-with-python-and-theano/</span></span><br><span class="line"><span class="comment"># http://blog.csdn.net/vins_napoleon/article/details/38057927</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linear_Reg</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="comment">#x,y是scalar,vector(n,),matrix(m,n)</span></span><br><span class="line">        <span class="variable language_">self</span>.w = theano.shared(value = <span class="number">0.0</span>,name = <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.b = theano.shared(value = <span class="number">0.0</span>,name = <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        <span class="comment"># w,b is scalar,so x can be vector</span></span><br><span class="line">        <span class="variable language_">self</span>.y_pred = x * <span class="variable language_">self</span>.w + <span class="variable language_">self</span>.b</span><br><span class="line">        <span class="variable language_">self</span>.params = [<span class="variable language_">self</span>.w,<span class="variable language_">self</span>.b]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msl</span>(<span class="params">self,y</span>):</span><br><span class="line">        <span class="keyword">return</span> T.<span class="built_in">sum</span>((y - <span class="variable language_">self</span>.y_pred)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linear_Reg2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="comment">#x,y是scalar,vector(1,),matrix(m,1)</span></span><br><span class="line">        <span class="variable language_">self</span>.w = theano.shared(value = np.zeros((<span class="number">1</span>,),dtype=theano.config.floatX),name = <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.b = theano.shared(value = np.zeros((<span class="number">1</span>,),dtype=theano.config.floatX),name = <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        <span class="comment"># w,b is vector,so x cab be scalar</span></span><br><span class="line">        <span class="variable language_">self</span>.y_pred = x * <span class="variable language_">self</span>.w + <span class="variable language_">self</span>.b</span><br><span class="line">        <span class="variable language_">self</span>.params = [<span class="variable language_">self</span>.w,<span class="variable language_">self</span>.b]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msl</span>(<span class="params">self,y</span>):</span><br><span class="line">        <span class="keyword">return</span> T.<span class="built_in">sum</span>((y - <span class="variable language_">self</span>.y_pred)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_type</span>():</span><br><span class="line">    <span class="comment"># x,y be scalar</span></span><br><span class="line">    points_x = [<span class="number">1.1</span>,<span class="number">2.2</span>] </span><br><span class="line">    points_y = [<span class="number">3.3</span>,<span class="number">4.4</span>]</span><br><span class="line">    X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">    Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">    x = T.dscalar(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> x</span><br><span class="line">    <span class="built_in">print</span> x.<span class="built_in">type</span></span><br><span class="line">    <span class="built_in">print</span> X[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> X[<span class="number">0</span>].<span class="built_in">type</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#x</span></span><br><span class="line">    <span class="comment">#TensorType(float64, scalar)</span></span><br><span class="line">    <span class="comment">#Subtensor&#123;int64&#125;.0</span></span><br><span class="line">    <span class="comment">#TensorType(float64, scalar)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_type2</span>():</span><br><span class="line">    <span class="comment"># x,y be vector</span></span><br><span class="line">    points_x = [<span class="number">1.1</span>,<span class="number">2.2</span>] </span><br><span class="line">    points_y = [<span class="number">3.3</span>,<span class="number">4.4</span>]</span><br><span class="line">    X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">    Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">    x = T.dvector(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> x</span><br><span class="line">    <span class="built_in">print</span> x.<span class="built_in">type</span></span><br><span class="line">    <span class="built_in">print</span> X[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span> X[<span class="number">0</span>:<span class="number">2</span>].<span class="built_in">type</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#x</span></span><br><span class="line">    <span class="comment">#TensorType(float64, vector)</span></span><br><span class="line">    <span class="comment">#Subtensor&#123;int64:int64:&#125;.0</span></span><br><span class="line">    <span class="comment">#TensorType(float64, vector)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_model1</span>(<span class="params">mode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [w,b be scalar]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mode = scalar(), set mini_batch_size = 1</span></span><br><span class="line"><span class="string">    mode = vector(m,),  reshape X,Y to vector  </span></span><br><span class="line"><span class="string">    mode = matrix(m,n), reshape X,Y to matrix</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    eta = <span class="number">0.000001</span></span><br><span class="line">    epochs = <span class="number">1000</span></span><br><span class="line">    points = genfromtxt(<span class="string">&quot;data.csv&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)<span class="comment"># (100,2)</span></span><br><span class="line">    points_x = points[:,<span class="number">0</span>] <span class="comment"># (100,)   numpy.float64</span></span><br><span class="line">    points_y = points[:,<span class="number">1</span>] <span class="comment"># (100,)   numpy.float64</span></span><br><span class="line">    N = points_x.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&quot;scalar&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">1</span>  <span class="comment"># must be 1 so that all X[i] are used</span></span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># so than we get X[0],X[1],...</span></span><br><span class="line">        x = T.dscalar(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dscalar(<span class="string">&#x27;ty&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&quot;vector&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">5</span></span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">                      </span><br><span class="line">        <span class="comment"># so than we get X[0:5],X[5:10],...</span></span><br><span class="line">        x = T.dvector(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dvector(<span class="string">&#x27;ty&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&quot;matrix&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">5</span></span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX).reshape(N,<span class="number">1</span>),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX).reshape(N,<span class="number">1</span>),borrow = <span class="literal">True</span>)</span><br><span class="line">                      </span><br><span class="line">        <span class="comment"># so than we get X[0:5],X[5:10],...</span></span><br><span class="line">        x = T.dmatrix(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dmatrix(<span class="string">&#x27;ty&#x27;</span>)             </span><br><span class="line">        </span><br><span class="line">    num_batches = N/mini_batch_size</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#index = T.lscalar() # l int64</span></span><br><span class="line">    </span><br><span class="line">    reg = Linear_Reg(x = x)</span><br><span class="line">    cost = reg.msl(y)</span><br><span class="line"></span><br><span class="line">    w_g = T.grad(cost = cost, wrt = reg.w)</span><br><span class="line">    b_g = T.grad(cost = cost, wrt = reg.b)</span><br><span class="line"></span><br><span class="line">    updates=[(reg.w, reg.w - eta * w_g),</span><br><span class="line">             (reg.b, reg.b - eta * b_g)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use x,y as input (调用函数的时候，x,y的参数化必须是python数值，不能是theano variable)</span></span><br><span class="line">    train_model = theano.function(inputs=[x,y],</span><br><span class="line">                                  outputs = cost,</span><br><span class="line">                                  updates = updates,</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">    cost_t = <span class="number">0.0</span></span><br><span class="line">    costs = []</span><br><span class="line">    start_time = time.clock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> xrange(epochs):</span><br><span class="line">        <span class="comment"># 1个epoch,所有N个样本参与训练,mini = m,学习N/m次</span></span><br><span class="line">        cost_l = []</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(num_batches):</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&quot;scalar&quot;</span>:</span><br><span class="line">                x = X.get_value()[index]</span><br><span class="line">                y = Y.get_value()[index]</span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                x = X.get_value()[index*mini_batch_size:(index+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">                y = Y.get_value()[index*mini_batch_size:(index+<span class="number">1</span>)*mini_batch_size] </span><br><span class="line">            cost_l.append( train_model(x,y) )</span><br><span class="line"></span><br><span class="line">        cost_t = np.mean(cost_l)</span><br><span class="line">        costs.append(cost_t)</span><br><span class="line"></span><br><span class="line">    end_time = time.clock()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;\nTotal time is ：&#x27;</span>,end_time -start_time,<span class="string">&#x27; s&#x27;</span> </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;last cost :&#x27;</span>,cost_t</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;w value : &#x27;</span>,reg.w.get_value() </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;b value : &#x27;</span>,reg.b.get_value() </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_model2</span>(<span class="params">mode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [w,b be vector(1,)]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mode = scalar(),   set mini_batch_size = 1</span></span><br><span class="line"><span class="string">    mode = vector(1,), set mini_batch_size = 1, reshape X,Y to vector  </span></span><br><span class="line"><span class="string">    mode = matrix(m,1), reshape X,Y to matrix</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    eta = <span class="number">0.000001</span></span><br><span class="line">    epochs = <span class="number">1000</span></span><br><span class="line">    points = genfromtxt(<span class="string">&quot;data.csv&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)<span class="comment"># (100,2)</span></span><br><span class="line">    points_x = points[:,<span class="number">0</span>] <span class="comment"># (100,)   numpy.float64</span></span><br><span class="line">    points_y = points[:,<span class="number">1</span>] <span class="comment"># (100,)   numpy.float64</span></span><br><span class="line">    N = points_x.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&quot;scalar&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">1</span> </span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># so than we get X[0],X[1],...</span></span><br><span class="line">        x = T.dscalar(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dscalar(<span class="string">&#x27;ty&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&quot;vector&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">1</span> </span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX),borrow = <span class="literal">True</span>)</span><br><span class="line">                      </span><br><span class="line">        <span class="comment"># so than we get X[0:5],X[5:10],...</span></span><br><span class="line">        x = T.dvector(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dvector(<span class="string">&#x27;ty&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&quot;matrix&quot;</span>:</span><br><span class="line">        mini_batch_size = <span class="number">5</span></span><br><span class="line">        X = theano.shared(np.asarray(points_x,dtype=theano.config.floatX).reshape(N,<span class="number">1</span>),borrow = <span class="literal">True</span>)</span><br><span class="line">        Y = theano.shared(np.asarray(points_y,dtype=theano.config.floatX).reshape(N,<span class="number">1</span>),borrow = <span class="literal">True</span>)</span><br><span class="line">                      </span><br><span class="line">        <span class="comment"># so than we get X[0:5],X[5:10],...</span></span><br><span class="line">        x = T.dmatrix(<span class="string">&#x27;tx&#x27;</span>)</span><br><span class="line">        y = T.dmatrix(<span class="string">&#x27;ty&#x27;</span>)             </span><br><span class="line">        </span><br><span class="line">    num_batches = N/mini_batch_size</span><br><span class="line">        </span><br><span class="line">    index = T.lscalar() <span class="comment"># l int64</span></span><br><span class="line">    reg = Linear_Reg2(x = x)</span><br><span class="line">    cost = reg.msl(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#w_g,b_g = T.grad(cost,[reg.w,reg.b])</span></span><br><span class="line">    <span class="comment">#updates=[(reg.w, reg.w - eta * w_g), (reg.b, reg.b - eta * b_g)]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#==========================================================================</span></span><br><span class="line">    <span class="comment"># use params and updates</span></span><br><span class="line">    <span class="comment">#==========================================================================</span></span><br><span class="line">    params = [reg.w,reg.b]       <span class="comment"># list of [w,b]</span></span><br><span class="line">    grads = T.grad(cost,params)  <span class="comment"># list of [w_g,b_g]</span></span><br><span class="line">    updates = [(param,param-eta*grad) </span><br><span class="line">               <span class="keyword">for</span> param,grad <span class="keyword">in</span> <span class="built_in">zip</span>(params,grads)]               </span><br><span class="line">                                <span class="comment"># list of [ (w,w-eta*w_g), (b, b-eta*b_g) ]</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># updates必须是shared变量;</span></span><br><span class="line">    <span class="comment"># use x,y as input (调用函数的时候，x,y的参数化必须是python数值，不能是theano variable)</span></span><br><span class="line">    <span class="comment"># use index as input (调用函数的时候，index的参数化必须是python数值),</span></span><br><span class="line">    <span class="comment"># 通过givens替换掉x,y，X[index],Y[index]和x,y的类型必须一致，都是theano variable</span></span><br><span class="line">    <span class="comment"># 此处x,y，X[index],Y[index]都是  TensorType(float64, scalar)　</span></span><br><span class="line">    <span class="comment"># 或者是float64, vector,matrix类型</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&quot;scalar&quot;</span>:</span><br><span class="line">        train_model = theano.function(inputs=[index],</span><br><span class="line">                                      outputs = cost,</span><br><span class="line">                                      updates = updates,</span><br><span class="line">                                      givens = &#123;x:X[index],</span><br><span class="line">                                                y:Y[index]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        train_model = theano.function(inputs=[index],</span><br><span class="line">                                      outputs = cost,</span><br><span class="line">                                      updates = updates,</span><br><span class="line">                                      givens = &#123;x:X[index*mini_batch_size:(index+<span class="number">1</span>)*mini_batch_size],</span><br><span class="line">                                                y:Y[index*mini_batch_size:(index+<span class="number">1</span>)*mini_batch_size]&#125;)</span><br><span class="line"></span><br><span class="line">    cost_t = <span class="number">0.0</span></span><br><span class="line">    costs = []</span><br><span class="line">    start_time = time.clock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> xrange(epochs):</span><br><span class="line">        <span class="comment"># 1个epoch,所有N个样本参与训练,mini = m,学习N/m次</span></span><br><span class="line">        cost_l = []</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(num_batches):</span><br><span class="line">            cost_l.append( train_model(index) )</span><br><span class="line">            </span><br><span class="line">        cost_t = np.mean(cost_l)</span><br><span class="line">        costs.append(cost_t)</span><br><span class="line"></span><br><span class="line">    end_time = time.clock()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;\nTotal time is ：&#x27;</span>,end_time -start_time,<span class="string">&#x27; s&#x27;</span> </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;last cost :&#x27;</span>,cost_t</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;w value : &#x27;</span>,reg.w.get_value()  </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;b value : &#x27;</span>,reg.b.get_value()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">run:</span></span><br><span class="line"><span class="string">Total time is ： 2.796644  s</span></span><br><span class="line"><span class="string">last cost : 113.178407322</span></span><br><span class="line"><span class="string">w value :  1.48497718432</span></span><br><span class="line"><span class="string">b value :  0.0890071567283</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">run2:</span></span><br><span class="line"><span class="string">Total time is ： 2.127487  s</span></span><br><span class="line"><span class="string">last cost : 113.178407322</span></span><br><span class="line"><span class="string">w value :  [ 1.48497718]</span></span><br><span class="line"><span class="string">b value :  [ 0.08900716]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">run3:</span></span><br><span class="line"><span class="string">Total time is ： 0.480144  s</span></span><br><span class="line"><span class="string">avg cost : 565.419900755</span></span><br><span class="line"><span class="string">w value :  [ 1.48492605]</span></span><br><span class="line"><span class="string">b value :  [ 0.08896923]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    test_type()</span><br><span class="line">    test_type2()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#test()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#run_model1(&quot;scalar&quot;)</span></span><br><span class="line">    <span class="comment">#run_model1(&quot;vector&quot;)   </span></span><br><span class="line">    <span class="comment">#run_model1(&quot;matrix&quot;)   </span></span><br><span class="line">    </span><br><span class="line">    run_model2(<span class="string">&quot;scalar&quot;</span>)</span><br><span class="line">    run_model2(<span class="string">&quot;vector&quot;</span>)   </span><br><span class="line">    run_model2(<span class="string">&quot;matrix&quot;</span>) </span><br></pre></td></tr></table></figure>

<pre><code>Total time is ： 1.929041  s
last cost : 113.178407322
w value :  [ 1.48497718]
b value :  [ 0.08900716]

Total time is ： 2.040197  s
last cost : 113.178407322
w value :  [ 1.48497718]
b value :  [ 0.08900716]

Total time is ： 0.553913  s
last cost : 565.419900755
w value :  [ 1.48492605]
b value :  [ 0.08896923]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/lukassteindl/2015/12/13/linear-regression-example-with-python-and-theano/">linear-regression-example-with-python-and-theano</a></li>
<li><a href="http://blog.csdn.net/vins_napoleon/article/details/38057927">theano regression exercise</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>theano</tag>
      </tags>
  </entry>
  <entry>
    <title>Example 2 - Linear Regression Example with Python and theano from MSDN</title>
    <url>//blog/Example-2-Linear-Regression-Example-with-Python-and-theano-from-MSDN/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/3bee8fac/#more">Example 1-theano linear regression with gradient descent</a></li>
<li><a href="https://kezunlin.me/post/8d4707b6/#more"><strong>Example 2 - Linear Regression Example with Python and theano from MSDN</strong></a></li>
<li><a href="https://kezunlin.me/post/8ce3f979/#more">Example 3- A Real Example Logistic Regression with theano</a></li>
</ul>
<h2 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blogs.msdn.microsoft.com/lukassteindl/2015/12/13/linear-regression-example-with-python-and-theano/</span></span><br><span class="line"><span class="comment"># http://jakevdp.github.io/blog/2013/05/12/embedding-matplotlib-animations/</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在Python Notebook中无法展现动画，只能展示静态的图像。</span></span><br><span class="line"><span class="string">The problem is that so far the integration of IPython with matplotlib is entirely static, </span></span><br><span class="line"><span class="string">while animations are by their nature dynamic.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> style </span><br><span class="line"><span class="keyword">import</span> theano </span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor <span class="keyword">as</span> T </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">style.use(<span class="string">&#x27;fivethirtyeight&#x27;</span>) </span><br><span class="line">fig = plt.figure() </span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">trX = np.linspace(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">101</span>)  <span class="comment"># (101,)</span></span><br><span class="line">trY = <span class="number">2</span> * trX + np.random.randn(*trX.shape) * <span class="number">0.33</span>   <span class="comment"># (101,)</span></span><br><span class="line"></span><br><span class="line">X = T.scalar() </span><br><span class="line">Y = T.scalar()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model</span> (X,w): </span><br><span class="line">    <span class="keyword">return</span> X * w</span><br><span class="line"></span><br><span class="line">w = theano.shared(np.asarray(<span class="number">0.</span>, dtype=theano.config.floatX)) <span class="comment">#scalar</span></span><br><span class="line">y = model(X,w)</span><br><span class="line"></span><br><span class="line">cost = T.mean(T.sqr(y-Y)) </span><br><span class="line">gradient = T.grad(cost=cost, wrt = w) </span><br><span class="line">updates = [[w,w-gradient * <span class="number">0.001</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#train = theano.function(inputs=[X,Y], outputs=cost, updates = updates, allow_input_downcast= True)</span></span><br><span class="line">train = theano.function(inputs=[X,Y], outputs=cost, updates = updates)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): </span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span> (trX,trY): </span><br><span class="line">            train(x,y) </span><br><span class="line">            <span class="built_in">print</span> (w.<span class="built_in">eval</span>()) </span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animate</span>(<span class="params">i</span>): </span><br><span class="line">    <span class="comment"># i: iteration of animate</span></span><br><span class="line">    <span class="comment">#print i</span></span><br><span class="line">    ax1.clear() </span><br><span class="line">    plt.scatter(trX, trY,  label=<span class="string">&#x27;Gradient Descent on GPU&#x27;</span>, </span><br><span class="line">                    alpha=<span class="number">0.3</span>, edgecolors=<span class="string">&#x27;none&#x27;</span>) </span><br><span class="line">    plt.legend() </span><br><span class="line">    plt.grid(<span class="literal">True</span>) </span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span> (trX,trY): </span><br><span class="line">        train(x,y) </span><br><span class="line">        <span class="comment">#print (w.eval()) </span></span><br><span class="line">       </span><br><span class="line">    xs = [-<span class="number">1</span>,<span class="number">1</span>] </span><br><span class="line">    ys = [-<span class="number">1</span>*w.<span class="built_in">eval</span>(),w.<span class="built_in">eval</span>()] </span><br><span class="line">    ax1.plot(xs,ys) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_animate</span>():</span><br><span class="line">    ani = animation.FuncAnimation(fig, animate, interval = <span class="number">250</span>)</span><br><span class="line">    plt.show() </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#run()</span></span><br><span class="line">    show_animate()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/lukassteindl/2015/12/13/linear-regression-example-with-python-and-theano/">linear-regression-example-with-python-and-theano</a></li>
<li><a href="http://jakevdp.github.io/blog/2013/05/12/embedding-matplotlib-animations/">embedding-matplotlib-animations</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>theano</tag>
      </tags>
  </entry>
  <entry>
    <title>Example 3- A Real Example Logistic Regression with theano</title>
    <url>//blog/Example-3-A-Real-Example-Logistic-Regression-with-theano/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/3bee8fac/#more">Example 1-theano linear regression with gradient descent</a></li>
<li><a href="https://kezunlin.me/post/8d4707b6/#more">Example 2 - Linear Regression Example with Python and theano from MSDN</a></li>
<li><a href="https://kezunlin.me/post/8ce3f979/#more"><strong>Example 3- A Real Example Logistic Regression with theano</strong></a></li>
</ul>
<h2 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line">rng = numpy.random</span><br><span class="line"></span><br><span class="line">N = <span class="number">400</span>                                   <span class="comment"># training sample size</span></span><br><span class="line">feats = <span class="number">784</span>                               <span class="comment"># number of input variables</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a dataset: D = (input_values, target_class)</span></span><br><span class="line">D = (rng.randn(N, feats), rng.randint(size=N, low=<span class="number">0</span>, high=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># (400, 784) (400,)</span></span><br><span class="line">training_steps = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare Theano symbolic variables</span></span><br><span class="line">x = T.dmatrix(<span class="string">&quot;x&quot;</span>) <span class="comment"># (400,784)</span></span><br><span class="line">y = T.dvector(<span class="string">&quot;y&quot;</span>) <span class="comment"># (400,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the weight vector w randomly</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># this and the following bias variable b</span></span><br><span class="line"><span class="comment"># are shared so they keep their values</span></span><br><span class="line"><span class="comment"># between training iterations (updates)</span></span><br><span class="line">w = theano.shared(rng.randn(feats), name=<span class="string">&quot;w&quot;</span>) <span class="comment">#vector (784,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the bias term</span></span><br><span class="line">b = theano.shared(<span class="number">0.</span>, name=<span class="string">&quot;b&quot;</span>) <span class="comment">#scalar ()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Initial model:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w.get_value().shape)</span><br><span class="line"><span class="built_in">print</span>(b.get_value().shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct Theano expression graph</span></span><br><span class="line">p_1 = <span class="number">1</span> / (<span class="number">1</span> + T.exp(-T.dot(x, w) - b))   <span class="comment"># Probability that target = 1        = vector(400,)</span></span><br><span class="line">prediction = p_1 &gt; <span class="number">0.5</span>                    <span class="comment"># The prediction thresholded         = vector(400,) of bool</span></span><br><span class="line">xent = -y * T.log(p_1) - (<span class="number">1</span>-y) * T.log(<span class="number">1</span>-p_1) <span class="comment"># Cross-entropy loss function    = vector(400,) of Cx for given x</span></span><br><span class="line">cost = xent.mean() + <span class="number">0.01</span> * (w ** <span class="number">2</span>).<span class="built_in">sum</span>()<span class="comment"># The cost to minimize               = scalar   f(x,y,w,b)</span></span><br><span class="line">gw, gb = T.grad(cost, [w, b])             <span class="comment"># Compute the gradient of the cost</span></span><br><span class="line">                                          <span class="comment"># w.r.t weight vector w and</span></span><br><span class="line">                                          <span class="comment"># bias term b</span></span><br><span class="line">                                          <span class="comment"># (we shall return to this in a</span></span><br><span class="line">                                          <span class="comment"># following section of this tutorial)</span></span><br><span class="line"></span><br><span class="line">updates = [(w, w - <span class="number">0.1</span> * gw),(b, b - <span class="number">0.1</span> * gb)]                </span><br><span class="line"><span class="comment"># Compile</span></span><br><span class="line">train = theano.function(</span><br><span class="line">          inputs=[x,y],</span><br><span class="line">          outputs=[prediction, xent,cost],</span><br><span class="line">          updates= updates</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">predict = theano.function(inputs=[x], outputs=prediction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(training_steps):</span><br><span class="line">    pred, xcent,cost_t = train(D[<span class="number">0</span>], D[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">prediction = predict(D[<span class="number">0</span>])  <span class="comment"># vector(400,) of bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#a = np.array([1,2,3,4])</span></span><br><span class="line"><span class="comment">#b = np.array([2,2,4,3])</span></span><br><span class="line"><span class="comment">#np.mean( np.equal(a,b) ) #[0,1,0,0] 0.25</span></span><br><span class="line"></span><br><span class="line">accuracy = <span class="number">100</span>* np.mean( np.equal(prediction,D[<span class="number">1</span>]) )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Final model:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w.get_value().shape)</span><br><span class="line"><span class="built_in">print</span>(b.get_value().shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;\nCost = &quot;</span>,cost_t</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Accuracy = &quot;</span>, accuracy,<span class="string">&quot;%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\ntarget values for D:&quot;</span>)</span><br><span class="line"><span class="comment">#print(D[1])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;prediction on D:&quot;</span>)</span><br><span class="line"><span class="comment">#print(prediction)</span></span><br></pre></td></tr></table></figure>

<pre><code>Initial model:
(784,)
()
Final model:
(784,)
()

Cost =  0.121553645129
Accuracy =  100.0 %

target values for D:
prediction on D:
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>theano</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Configure Caffe on ubuntu 16.04</title>
    <url>//blog/Install-and-Configure-Caffe-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/1739694c/">Part 1: Install and Configure Caffe on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/b90033a9/">Part 2: Install and Configure Caffe on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>NVIDIA driver 396.54</li>
<li><del>CUDA 8.0 + cudnn 6.0.21</del></li>
<li>CUDA 9.2 +cudnn 7.1.4</li>
<li>opencv 3.1.0 —&gt;3.3.0</li>
<li>python 2.7 + numpy 1.15.1</li>
<li><del>python 3.5.2 + numpy 1.16.2</del></li>
<li>protobuf 3.6.1 （static）</li>
<li>caffe latest</li>
</ul>
<blockquote>
<p>默认的protobuf,2.6.1测试通过。<br>此处，使用最新的3.6.1 也可以，编译caffe需要加上<code>-std=c++11</code></p>
</blockquote>
<h3 id="install-CUDA-cudnn"><a href="#install-CUDA-cudnn" class="headerlink" title="install CUDA + cudnn"></a>install CUDA + cudnn</h3><blockquote>
<p>see <a href="https://kezunlin.me/post/3f33896b/">install and configure cuda 9.2 with cudnn 7.1 on ubuntu 16.04</a><br>tips: we need to recompile caffe with cudnn 7.1</p>
</blockquote>
<p>before we compile caffe, move <code>caffe/python/caffe/selective_search_ijcv_with_python</code> folder outside caffe source folder, otherwise error occurs.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180912154818552-851608997.png" alt="recompile caffe with cudnn"></p>
<h3 id="install-protobuf"><a href="#install-protobuf" class="headerlink" title="install protobuf"></a>install protobuf</h3><blockquote>
<p>see <a href="https://kezunlin.me/post/d60ff6fe/">Part 1: compile protobuf-cpp on ubuntu 16.04</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> protoc </span><br><span class="line">/usr/local/bin/protoc</span><br><span class="line"></span><br><span class="line">protoc --version</span><br><span class="line">libprotoc 3.6.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>caffe使用static的libprotoc 3.6.1</p>
</blockquote>
<h3 id="install-opencv"><a href="#install-opencv" class="headerlink" title="install opencv"></a>install opencv</h3><blockquote>
<p>see <a href="https://kezunlin.me/post/15f5c3e8/">compile opencv on ubuntu 16.04</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> opencv_version</span><br><span class="line">/usr/local/bin/opencv_version</span><br><span class="line"></span><br><span class="line">opencv_version </span><br><span class="line">3.3.0</span><br></pre></td></tr></table></figure>

<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">Python 2.7.12</span><br></pre></td></tr></table></figure>

<p>check <code>numpy</code> version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy</span><br><span class="line">numpy.__version__</span><br><span class="line"><span class="string">&#x27;1.15.1&#x27;</span></span><br><span class="line"></span><br><span class="line">import numpy</span><br><span class="line">import inspect</span><br><span class="line">inspect.getfile(numpy)</span><br><span class="line"><span class="string">&#x27;/usr/local/lib/python2.7/dist-packages/numpy/__init__.pyc&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="compile-caffe"><a href="#compile-caffe" class="headerlink" title="compile caffe"></a>compile caffe</h3><h4 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git </span><br><span class="line"><span class="built_in">cd</span> caffe</span><br></pre></td></tr></table></figure>

<h4 id="update-repo"><a href="#update-repo" class="headerlink" title="update repo"></a>update repo</h4><p>update at 20180822.</p>
<p>if you change your local Makefile and <code>git pull origin master</code> merge conflict, solution</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD Makefile</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<h4 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>cmake-gui options</p>
<pre><code>USE_CUDNN ON
USE_OPENCV ON
Build_python ON
Build_python_layer ON

BLAS atlas
CMAKE_CXX_FLGAS -std=c++11

CMAKE_INSTALL_PREFIX /home/kezunlin/program/caffe/build/install
</code></pre>
<blockquote>
<p>使用<code>-std=c++11</code></p>
</blockquote>
<p>configure output </p>
<pre><code>Dependencies:
  BLAS              :   Yes (Atlas)
  Boost             :   Yes (ver. 1.66)
  glog              :   Yes
  gflags            :   Yes
  protobuf          :   Yes (ver. 3.6.1)
  lmdb              :   Yes (ver. 0.9.17)
  LevelDB           :   Yes (ver. 1.18)
  Snappy            :   Yes (ver. 1.1.3)
  OpenCV            :   Yes (ver. 3.1.0)
  CUDA              :   Yes (ver. 9.2)

NVIDIA CUDA:
  Target GPU(s)     :   Auto
  GPU arch(s)       :   sm_61
  cuDNN             :   Yes (ver. 7.1.4)

Python:
  Interpreter       :   /usr/bin/python2.7 (ver. 2.7.12)
  Libraries         :   /usr/lib/x86_64-linux-gnu/libpython2.7.so (ver 2.7.12)
  NumPy             :   /usr/lib/python2.7/dist-packages/numpy/core/include (ver 1.51.1)

Documentaion:
  Doxygen           :   /usr/bin/doxygen (1.8.11)
  config_file       :   /home/kezunlin/program/caffe/.Doxyfile

Install:
  Install path      :   /home/kezunlin/program/caffe/build/install

Configuring done
</code></pre>
<blockquote>
<p>we can also use <code>python3.5</code>  and <code>numpy 1.16.2</code></p>
</blockquote>
<pre><code>Python:
  Interpreter       :   /usr/bin/python3 (ver. 3.5.2)
  Libraries         :   /usr/lib/x86_64-linux-gnu/libpython3.5m.so (ver 3.5.2)
  NumPy             :   /home/kezunlin/.local/lib/python3.5/site-packages/numpy/core/include (ver 1.16.2)
</code></pre>
<p>use <code>-std=c++11</code>, otherwise errors occur</p>
<pre><code>make -j8
[  1%] Running C++/Python protocol buffer compiler on /home/kezunlin/program/caffe/src/caffe/proto/caffe.proto
Scanning dependencies of target caffeproto
[  1%] Building CXX object src/caffe/CMakeFiles/caffeproto.dir/__/__/include/caffe/proto/caffe.pb.cc.o
In file included from /usr/include/c++/5/mutex:35:0,
                 from /usr/local/include/google/protobuf/stubs/mutex.h:33,
                 from /usr/local/include/google/protobuf/stubs/common.h:52,
                 from /home/kezunlin/program/caffe/build/include/caffe/proto/caffe.pb.h:9,
                 from /home/kezunlin/program/caffe/build/include/caffe/proto/caffe.pb.cc:4:
/usr/include/c++/5/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support must be enabled with the -std=c++11 or -std=gnu++11 compiler options.
 #error This file requires compiler and library support \
</code></pre>
<h4 id="fix-gcc-error"><a href="#fix-gcc-error" class="headerlink" title="fix gcc error"></a>fix gcc error</h4><p>edit <code>/usr/local/cuda/include/host_config.h</code></p>
<p>将其中的第115行注释掉：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">error</span>-- unsupported GNU version! gcc versions later than 4.9 are not supported!</span></span><br><span class="line">======&gt;</span><br><span class="line"><span class="comment">//#error-- unsupported GNU version! gcc versions later than 4.9 are not supported!</span></span><br></pre></td></tr></table></figure>

<h4 id="fix-gflags-error"><a href="#fix-gflags-error" class="headerlink" title="fix gflags error"></a>fix gflags error</h4><ul>
<li>caffe&#x2F;include&#x2F;caffe&#x2F;common.hpp</li>
<li>caffe&#x2F;examples&#x2F;mnist&#x2F;convert_mnist_data.cpp</li>
</ul>
<p>Comment out the ifndef</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifndef GFLAGS_GFLAGS_H_</span></span><br><span class="line"><span class="keyword">namespace</span> gflags = google;</span><br><span class="line"><span class="comment">// #endif  // GFLAGS_GFLAGS_H_</span></span><br></pre></td></tr></table></figure>

<h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make -j8 </span><br><span class="line">make pycaffe</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>[  1%] Running C++/Python protocol buffer compiler on /home/kezunlin/program/caffe/src/caffe/proto/caffe.proto
Scanning dependencies of target caffeproto
[  1%] Building CXX object src/caffe/CMakeFiles/caffeproto.dir/__/__/include/caffe/proto/caffe.pb.cc.o
[  1%] Linking CXX static library ../../lib/libcaffeproto.a
[  1%] Built target caffeproto
</code></pre>
<blockquote>
<p><code>libcaffeproto.a</code>　static library</p>
</blockquote>
<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> build/install</span><br><span class="line">bin  include  lib  python  share</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>build/install</code> folder</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> build/install/lib</span><br><span class="line">libcaffeproto.a  libcaffe.so  libcaffe.so.1.0.0</span><br></pre></td></tr></table></figure>

<h4 id="advanced"><a href="#advanced" class="headerlink" title="advanced"></a>advanced</h4><ul>
<li>INTERFACE_INCLUDE_DIRECTORIES</li>
<li>INTERFACE_LINK_LIBRARIES</li>
</ul>
<blockquote>
<p>Target “caffe” has an INTERFACE_LINK_LIBRARIES property which differs from   its LINK_INTERFACE_LIBRARIES properties.</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Play-with-Caffe"><a href="#Play-with-Caffe" class="headerlink" title="Play with Caffe"></a>Play with Caffe</h2><h3 id="python-caffe"><a href="#python-caffe" class="headerlink" title="python caffe"></a>python caffe</h3><h4 id="fix-python-caffe"><a href="#fix-python-caffe" class="headerlink" title="fix python caffe"></a>fix python caffe</h4><p>fix ipython 6.1 version conflict</p>
<p>vim <code>caffe/python/requirements.txt</code></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ipython&gt;=3.0.0</span><br><span class="line">====&gt;</span><br><span class="line">ipython==5.4.1</span><br></pre></td></tr></table></figure>

<p>reinstall ipython</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> caffe/python</span><br><span class="line">python</span><br><span class="line">&gt;&gt;&gt;import caffe </span><br></pre></td></tr></table></figure>

<h4 id="python-draw-net"><a href="#python-draw-net" class="headerlink" title="python draw net"></a>python draw net</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install graphviz</span><br><span class="line"><span class="built_in">sudo</span> pip install theano=0.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># for theano d3viz</span></span><br><span class="line"><span class="built_in">sudo</span> pip install pydot==1.1.0</span><br><span class="line"><span class="built_in">sudo</span> pip install pydot-ng</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># other usefull tools</span></span><br><span class="line"><span class="built_in">sudo</span> pip install jupyter</span><br><span class="line"><span class="built_in">sudo</span> pip install seaborn</span><br></pre></td></tr></table></figure>

<blockquote>
<p>we need to install graphviz, otherwise we get ERROR:”dot” not found in path </p>
</blockquote>
<p>draw net </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$CAFFE_HOME</span></span><br><span class="line">./python/draw_net.py ./examples/mnist/lenet.prototxt ./examples/mnist/lenet.png</span><br><span class="line"></span><br><span class="line">eog ./examples/mnist/lenet.png</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20180807151218024-1073147705.png" alt="lenet"></p>
<h3 id="cpp-caffe"><a href="#cpp-caffe" class="headerlink" title="cpp caffe"></a>cpp caffe</h3><h4 id="train-net"><a href="#train-net" class="headerlink" title="train net"></a>train net</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe</span><br><span class="line">./examples/mnist/create_mnist.sh</span><br><span class="line">./examples/mnist/train_lenet.sh </span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> ./examples/mnist/train_lenet.sh </span><br><span class="line">./build/tools/caffe train --solver=examples/mnist/lenet_solver.prototxt <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<p>output results</p>
<pre><code>I0912 15:57:28.812655 14094 solver.cpp:327] Iteration 10000, loss = 0.00272129
I0912 15:57:28.812675 14094 solver.cpp:347] Iteration 10000, Testing net (#0)
I0912 15:57:28.891481 14100 data_layer.cpp:73] Restarting data prefetching from start.
I0912 15:57:28.893678 14094 solver.cpp:414]     Test net output #0: accuracy = 0.9904
I0912 15:57:28.893707 14094 solver.cpp:414]     Test net output #1: loss = 0.0276084 (* 1 = 0.0276084 loss)
I0912 15:57:28.893714 14094 solver.cpp:332] Optimization Done.
I0912 15:57:28.893719 14094 caffe.cpp:250] Optimization Done.
</code></pre>
<blockquote>
<p>tips, for <code>caffe</code>, errors because no imdb data.</p>
</blockquote>
<pre><code>I0417 13:28:17.764714 35030 layer_factory.hpp:77] Creating layer mnist
F0417 13:28:17.765067 35030 db_lmdb.hpp:15] Check failed: mdb_status == 0 (2 vs. 0) No such file or directory
--------------------- 
</code></pre>
<h4 id="upgrade-net"><a href="#upgrade-net" class="headerlink" title="upgrade net"></a>upgrade net</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tools/upgrade_net_proto_text  old.prototxt new.prototxt</span><br><span class="line">./tools/upgrade_net_proto_binary  old.caffemodel new.caffemodel</span><br></pre></td></tr></table></figure>

<h4 id="caffe-time"><a href="#caffe-time" class="headerlink" title="caffe time"></a>caffe time</h4><p>yolov3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build/tools/caffe time --model=<span class="string">&#x27;det/yolov3/yolov3.prototxt&#x27;</span> --iterations=100 --gpu=0</span><br><span class="line"></span><br><span class="line">I0313 10:15:41.888208 12527 caffe.cpp:408] Average Forward pass: 49.7012 ms.</span><br><span class="line">I0313 10:15:41.888213 12527 caffe.cpp:410] Average Backward pass: 84.946 ms.</span><br><span class="line">I0313 10:15:41.888248 12527 caffe.cpp:412] Average Forward-Backward: 134.85 ms.</span><br></pre></td></tr></table></figure>

<p>yolov3 5 class</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build/tools/caffe time --model=<span class="string">&#x27;det/autotrain/yolo3-5c.prototxt&#x27;</span> --iterations=100 --gpu=0</span><br><span class="line"></span><br><span class="line">I0313 10:19:27.283625 12894 caffe.cpp:408] Average Forward pass: 38.4823 ms.</span><br><span class="line">I0313 10:19:27.283630 12894 caffe.cpp:410] Average Backward pass: 74.1656 ms.</span><br><span class="line">I0313 10:19:27.283638 12894 caffe.cpp:412] Average Forward-Backward: 112.732 ms.</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Caffe-Classifier"><a href="#Caffe-Classifier" class="headerlink" title="Caffe Classifier"></a>Caffe Classifier</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;caffe/caffe.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_OPENCV</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// USE_OPENCV</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_OPENCV</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> caffe;  <span class="comment">// NOLINT(build/namespaces)</span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pair (label, confidence) representing a prediction. */</span></span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;string, <span class="type">float</span>&gt; Prediction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classifier</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Classifier</span>(<span class="type">const</span> string&amp; model_file,</span><br><span class="line">             <span class="type">const</span> string&amp; trained_file,</span><br><span class="line">             <span class="type">const</span> string&amp; mean_file,</span><br><span class="line">             <span class="type">const</span> string&amp; label_file);</span><br><span class="line"></span><br><span class="line">  <span class="function">std::vector&lt;Prediction&gt; <span class="title">Classify</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img, <span class="type">int</span> N = <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SetMean</span><span class="params">(<span class="type">const</span> string&amp; mean_file)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">float</span>&gt; <span class="title">Predict</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">WrapInputLayer</span><span class="params">(std::vector&lt;cv::Mat&gt;* input_channels)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Preprocess</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img,</span></span></span><br><span class="line"><span class="params"><span class="function">                  std::vector&lt;cv::Mat&gt;* input_channels)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  shared_ptr&lt;Net&lt;<span class="type">float</span>&gt; &gt; net_;</span><br><span class="line">  cv::Size input_geometry_;</span><br><span class="line">  <span class="type">int</span> num_channels_;</span><br><span class="line">  cv::Mat mean_;</span><br><span class="line">  std::vector&lt;string&gt; labels_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Classifier::<span class="built_in">Classifier</span>(<span class="type">const</span> string&amp; model_file,</span><br><span class="line">                       <span class="type">const</span> string&amp; trained_file,</span><br><span class="line">                       <span class="type">const</span> string&amp; mean_file,</span><br><span class="line">                       <span class="type">const</span> string&amp; label_file) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CPU_ONLY</span></span><br><span class="line">  Caffe::<span class="built_in">set_mode</span>(Caffe::CPU);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  Caffe::<span class="built_in">set_mode</span>(Caffe::GPU);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Load the network. */</span></span><br><span class="line">  net_.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Net</span>&lt;<span class="type">float</span>&gt;(model_file, TEST));</span><br><span class="line">  net_-&gt;<span class="built_in">CopyTrainedLayersFrom</span>(trained_file);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CHECK_EQ</span>(net_-&gt;<span class="built_in">num_inputs</span>(), <span class="number">1</span>) &lt;&lt; <span class="string">&quot;Network should have exactly one input.&quot;</span>;</span><br><span class="line">  <span class="built_in">CHECK_EQ</span>(net_-&gt;<span class="built_in">num_outputs</span>(), <span class="number">1</span>) &lt;&lt; <span class="string">&quot;Network should have exactly one output.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt;* input_layer = net_-&gt;<span class="built_in">input_blobs</span>()[<span class="number">0</span>];</span><br><span class="line">  num_channels_ = input_layer-&gt;<span class="built_in">channels</span>();</span><br><span class="line">  <span class="built_in">CHECK</span>(num_channels_ == <span class="number">3</span> || num_channels_ == <span class="number">1</span>)</span><br><span class="line">    &lt;&lt; <span class="string">&quot;Input layer should have 1 or 3 channels.&quot;</span>;</span><br><span class="line">  input_geometry_ = cv::<span class="built_in">Size</span>(input_layer-&gt;<span class="built_in">width</span>(), input_layer-&gt;<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Load the binaryproto mean file. */</span></span><br><span class="line">  <span class="built_in">SetMean</span>(mean_file);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Load labels. */</span></span><br><span class="line">  <span class="function">std::ifstream <span class="title">labels</span><span class="params">(label_file.c_str())</span></span>;</span><br><span class="line">  <span class="built_in">CHECK</span>(labels) &lt;&lt; <span class="string">&quot;Unable to open labels file &quot;</span> &lt;&lt; label_file;</span><br><span class="line">  string line;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">getline</span>(labels, line))</span><br><span class="line">    labels_.<span class="built_in">push_back</span>(<span class="built_in">string</span>(line));</span><br><span class="line"></span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt;* output_layer = net_-&gt;<span class="built_in">output_blobs</span>()[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">CHECK_EQ</span>(labels_.<span class="built_in">size</span>(), output_layer-&gt;<span class="built_in">channels</span>())</span><br><span class="line">    &lt;&lt; <span class="string">&quot;Number of labels is different from the output layer dimension.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">PairCompare</span><span class="params">(<span class="type">const</span> std::pair&lt;<span class="type">float</span>, <span class="type">int</span>&gt;&amp; lhs,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> std::pair&lt;<span class="type">float</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lhs.first &gt; rhs.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return the indices of the top N values of vector v. */</span></span><br><span class="line"><span class="function"><span class="type">static</span> std::vector&lt;<span class="type">int</span>&gt; <span class="title">Argmax</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">float</span>&gt;&amp; v, <span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">  std::vector&lt;std::pair&lt;<span class="type">float</span>, <span class="type">int</span>&gt; &gt; pairs;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    pairs.<span class="built_in">push_back</span>(std::<span class="built_in">make_pair</span>(v[i], i));</span><br><span class="line">  std::<span class="built_in">partial_sort</span>(pairs.<span class="built_in">begin</span>(), pairs.<span class="built_in">begin</span>() + N, pairs.<span class="built_in">end</span>(), PairCompare);</span><br><span class="line"></span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    result.<span class="built_in">push_back</span>(pairs[i].second);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return the top N predictions. */</span></span><br><span class="line"><span class="function">std::vector&lt;Prediction&gt; <span class="title">Classifier::Classify</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img, <span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">  std::vector&lt;<span class="type">float</span>&gt; output = <span class="built_in">Predict</span>(img);</span><br><span class="line"></span><br><span class="line">  N = std::<span class="built_in">min</span>&lt;<span class="type">int</span>&gt;(labels_.<span class="built_in">size</span>(), N);</span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt; maxN = <span class="built_in">Argmax</span>(output, N);</span><br><span class="line">  std::vector&lt;Prediction&gt; predictions;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> idx = maxN[i];</span><br><span class="line">    predictions.<span class="built_in">push_back</span>(std::<span class="built_in">make_pair</span>(labels_[idx], output[idx]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> predictions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Load the mean file in binaryproto format. */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Classifier::SetMean</span><span class="params">(<span class="type">const</span> string&amp; mean_file)</span> </span>&#123;</span><br><span class="line">  BlobProto blob_proto;</span><br><span class="line">  <span class="built_in">ReadProtoFromBinaryFileOrDie</span>(mean_file.<span class="built_in">c_str</span>(), &amp;blob_proto);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert from BlobProto to Blob&lt;float&gt; */</span></span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt; mean_blob;</span><br><span class="line">  mean_blob.<span class="built_in">FromProto</span>(blob_proto);</span><br><span class="line">  <span class="built_in">CHECK_EQ</span>(mean_blob.<span class="built_in">channels</span>(), num_channels_)</span><br><span class="line">    &lt;&lt; <span class="string">&quot;Number of channels of mean file doesn&#x27;t match input layer.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The format of the mean file is planar 32-bit float BGR or grayscale. */</span></span><br><span class="line">  std::vector&lt;cv::Mat&gt; channels;</span><br><span class="line">  <span class="type">float</span>* data = mean_blob.<span class="built_in">mutable_cpu_data</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_channels_; ++i) &#123;</span><br><span class="line">    <span class="comment">/* Extract an individual channel. */</span></span><br><span class="line">    <span class="function">cv::Mat <span class="title">channel</span><span class="params">(mean_blob.height(), mean_blob.width(), CV_32FC1, data)</span></span>;</span><br><span class="line">    channels.<span class="built_in">push_back</span>(channel);</span><br><span class="line">    data += mean_blob.<span class="built_in">height</span>() * mean_blob.<span class="built_in">width</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Merge the separate channels into a single image. */</span></span><br><span class="line">  cv::Mat mean;</span><br><span class="line">  cv::<span class="built_in">merge</span>(channels, mean);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Compute the global mean pixel value and create a mean image</span></span><br><span class="line"><span class="comment">   * filled with this value. */</span></span><br><span class="line">  cv::Scalar channel_mean = cv::<span class="built_in">mean</span>(mean);</span><br><span class="line">  mean_ = cv::<span class="built_in">Mat</span>(input_geometry_, mean.<span class="built_in">type</span>(), channel_mean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">float</span>&gt; <span class="title">Classifier::Predict</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img)</span> </span>&#123;</span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt;* input_layer = net_-&gt;<span class="built_in">input_blobs</span>()[<span class="number">0</span>];</span><br><span class="line">  input_layer-&gt;<span class="built_in">Reshape</span>(<span class="number">1</span>, num_channels_,</span><br><span class="line">                       input_geometry_.height, input_geometry_.width);</span><br><span class="line">  <span class="comment">/* Forward dimension change to all layers. */</span></span><br><span class="line">  net_-&gt;<span class="built_in">Reshape</span>();</span><br><span class="line"></span><br><span class="line">  std::vector&lt;cv::Mat&gt; input_channels;</span><br><span class="line">  <span class="built_in">WrapInputLayer</span>(&amp;input_channels);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Preprocess</span>(img, &amp;input_channels);</span><br><span class="line"></span><br><span class="line">  net_-&gt;<span class="built_in">Forward</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Copy the output layer to a std::vector */</span></span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt;* output_layer = net_-&gt;<span class="built_in">output_blobs</span>()[<span class="number">0</span>];</span><br><span class="line">  <span class="type">const</span> <span class="type">float</span>* begin = output_layer-&gt;<span class="built_in">cpu_data</span>();</span><br><span class="line">  <span class="type">const</span> <span class="type">float</span>* end = begin + output_layer-&gt;<span class="built_in">channels</span>();</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;<span class="type">float</span>&gt;(begin, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrap the input layer of the network in separate cv::Mat objects</span></span><br><span class="line"><span class="comment"> * (one per channel). This way we save one memcpy operation and we</span></span><br><span class="line"><span class="comment"> * don&#x27;t need to rely on cudaMemcpy2D. The last preprocessing</span></span><br><span class="line"><span class="comment"> * operation will write the separate channels directly to the input</span></span><br><span class="line"><span class="comment"> * layer. */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Classifier::WrapInputLayer</span><span class="params">(std::vector&lt;cv::Mat&gt;* input_channels)</span> </span>&#123;</span><br><span class="line">  Blob&lt;<span class="type">float</span>&gt;* input_layer = net_-&gt;<span class="built_in">input_blobs</span>()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> width = input_layer-&gt;<span class="built_in">width</span>();</span><br><span class="line">  <span class="type">int</span> height = input_layer-&gt;<span class="built_in">height</span>();</span><br><span class="line">  <span class="type">float</span>* input_data = input_layer-&gt;<span class="built_in">mutable_cpu_data</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; input_layer-&gt;<span class="built_in">channels</span>(); ++i) &#123;</span><br><span class="line">    <span class="function">cv::Mat <span class="title">channel</span><span class="params">(height, width, CV_32FC1, input_data)</span></span>;</span><br><span class="line">    input_channels-&gt;<span class="built_in">push_back</span>(channel);</span><br><span class="line">    input_data += width * height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Classifier::Preprocess</span><span class="params">(<span class="type">const</span> cv::Mat&amp; img,</span></span></span><br><span class="line"><span class="params"><span class="function">                            std::vector&lt;cv::Mat&gt;* input_channels)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Convert the input image to the input image format of the network. */</span></span><br><span class="line">  cv::Mat sample;</span><br><span class="line">  <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">3</span> &amp;&amp; num_channels_ == <span class="number">1</span>)</span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(img, sample, cv::COLOR_BGR2GRAY);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">4</span> &amp;&amp; num_channels_ == <span class="number">1</span>)</span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(img, sample, cv::COLOR_BGRA2GRAY);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">4</span> &amp;&amp; num_channels_ == <span class="number">3</span>)</span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(img, sample, cv::COLOR_BGRA2BGR);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">1</span> &amp;&amp; num_channels_ == <span class="number">3</span>)</span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(img, sample, cv::COLOR_GRAY2BGR);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sample = img;</span><br><span class="line"></span><br><span class="line">  cv::Mat sample_resized;</span><br><span class="line">  <span class="keyword">if</span> (sample.<span class="built_in">size</span>() != input_geometry_)</span><br><span class="line">    cv::<span class="built_in">resize</span>(sample, sample_resized, input_geometry_);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sample_resized = sample;</span><br><span class="line"></span><br><span class="line">  cv::Mat sample_float;</span><br><span class="line">  <span class="keyword">if</span> (num_channels_ == <span class="number">3</span>)</span><br><span class="line">    sample_resized.<span class="built_in">convertTo</span>(sample_float, CV_32FC3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sample_resized.<span class="built_in">convertTo</span>(sample_float, CV_32FC1);</span><br><span class="line"></span><br><span class="line">  cv::Mat sample_normalized;</span><br><span class="line">  cv::<span class="built_in">subtract</span>(sample_float, mean_, sample_normalized);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This operation will write the separate BGR planes directly to the</span></span><br><span class="line"><span class="comment">   * input layer of the network because it is wrapped by the cv::Mat</span></span><br><span class="line"><span class="comment">   * objects in input_channels. */</span></span><br><span class="line">  cv::<span class="built_in">split</span>(sample_normalized, *input_channels);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CHECK</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">float</span>*&gt;(input_channels-&gt;<span class="built_in">at</span>(<span class="number">0</span>).data)</span><br><span class="line">        == net_-&gt;<span class="built_in">input_blobs</span>()[<span class="number">0</span>]-&gt;<span class="built_in">cpu_data</span>())</span><br><span class="line">    &lt;&lt; <span class="string">&quot;Input channels are not wrapping the input layer of the network.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">6</span>) &#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>]</span><br><span class="line">              &lt;&lt; <span class="string">&quot; deploy.prototxt network.caffemodel&quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot; mean.binaryproto labels.txt img.jpg&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::google::<span class="built_in">InitGoogleLogging</span>(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  string model_file   = argv[<span class="number">1</span>];</span><br><span class="line">  string trained_file = argv[<span class="number">2</span>];</span><br><span class="line">  string mean_file    = argv[<span class="number">3</span>];</span><br><span class="line">  string label_file   = argv[<span class="number">4</span>];</span><br><span class="line">  <span class="function">Classifier <span class="title">classifier</span><span class="params">(model_file, trained_file, mean_file, label_file)</span></span>;</span><br><span class="line"></span><br><span class="line">  string file = argv[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;---------- Prediction for &quot;</span></span><br><span class="line">            &lt;&lt; file &lt;&lt; <span class="string">&quot; ----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  cv::Mat img = cv::<span class="built_in">imread</span>(file, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">CHECK</span>(!img.<span class="built_in">empty</span>()) &lt;&lt; <span class="string">&quot;Unable to decode image &quot;</span> &lt;&lt; file;</span><br><span class="line">  std::vector&lt;Prediction&gt; predictions = classifier.<span class="built_in">Classify</span>(img);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print the top N predictions. */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; predictions.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    Prediction p = predictions[i];</span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; p.second &lt;&lt; <span class="string">&quot; - \&quot;&quot;</span></span><br><span class="line">              &lt;&lt; p.first &lt;&lt; <span class="string">&quot;\&quot;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;This example requires OpenCV; compile with USE_OPENCV.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// USE_OPENCV</span></span></span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(Caffe_DIR <span class="string">&quot;/home/kezunlin/program/caffe/build/install/share/Caffe&quot;</span>)  <span class="comment"># caffe caffe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for CaffeConfig.cmake/ caffe-config.cmake</span></span><br><span class="line">find_package(Caffe)</span><br><span class="line"><span class="comment"># offical caffe  : There is no Caffe_INCLUDE_DIRS and Caffe_DEFINITIONS</span></span><br><span class="line"><span class="comment"># refinedet caffe: OK.</span></span><br><span class="line"></span><br><span class="line">add_definitions(<span class="variable">$&#123;Caffe_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_INCLUDE_DIRS = <span class="variable">$&#123;Caffe_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_DEFINITIONS = <span class="variable">$&#123;Caffe_DEFINITIONS&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_LIBRARIES = <span class="variable">$&#123;Caffe_LIBRARIES&#125;</span>&quot;</span>) <span class="comment"># caffe</span></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_CPU_ONLY = <span class="variable">$&#123;Caffe_CPU_ONLY&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_HAVE_CUDA = <span class="variable">$&#123;Caffe_HAVE_CUDA&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; Caffe_HAVE_CUDNN = <span class="variable">$&#123;Caffe_HAVE_CUDNN&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;Caffe_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line">target_link_libraries(demo </span><br><span class="line">    <span class="variable">$&#123;OpenCV_LIBS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;Caffe_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./demo</span><br></pre></td></tr></table></figure>

<p>if error occurs:</p>
<pre><code>libcaffe.so.1.0.0 =&gt; not found
</code></pre>
<p>edit <code>.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for caffe</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/home/kezunlin/program/caffe/build/install/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://caffe.berkeleyvision.org/install_apt.html">caffe offical</a> </li>
<li><a href="https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/">setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python</a></li>
<li><a href="https://stackoverflow.com/questions/30426734/caffe-recompile-libgflags-a-with-fpic-error">gflags error</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
<li>20180822: update cmake-gui for caffe</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title>Tutorial for Training LeNet on MNIST with Caffe</title>
    <url>//blog/Tutorial-for-Training-LeNet-on-MNIST-with-Caffe/</url>
    <content><![CDATA[<h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><p>The design of LeNet contains the essence of CNNs that are still used in larger models such as the ones in ImageNet. In general, it consists of a convolutional layer followed by a pooling layer, another convolution layer followed by a pooling layer, and then two fully connected layers similar to the conventional multilayer perceptrons. </p>
<p>经典LeNet结构:</p>
<pre><code>input-&gt;conv1(20,)-pool1-conv2(50,)-pool2-f1(500,ReLU)-f2(10,softmax)-&gt;output
</code></pre>
<h3 id="lenet-train-test-prototxt"><a href="#lenet-train-test-prototxt" class="headerlink" title="lenet_train_test.prototxt"></a>lenet_train_test.prototxt</h3><ul>
<li>batch size设置在net.prototxt中而不是solver.prototxt中,用以明确blob的dims</li>
<li>bottom: layer的input blob; top: layer的output blob</li>
<li>对于0-255区间的pixel，需要归一化到0-1区间，scale &#x3D; 1&#x2F;256. &#x3D; 0.00390625</li>
<li>lr_mult: 1表示learning时，weight的learning rate需要x1;</li>
<li>lr_mult: 2表示learning时，bias的learning rate需要x2 (this usually leads to better convergence rates)</li>
<li>InnerProduct默认输出的是z,而不是a&#x3D;sigmoid(z)</li>
<li>ReLU是Inplace操作，输入输出blob都是ip1,对于其他Layer,input和output的blob不能是相同的</li>
</ul>
<h3 id="Input-Layer-types"><a href="#Input-Layer-types" class="headerlink" title="Input Layer types"></a>Input Layer types</h3><h4 id="Input-Layer-types-for-train-val-prototxt"><a href="#Input-Layer-types-for-train-val-prototxt" class="headerlink" title="Input Layer types for train_val.prototxt"></a>Input Layer types for <strong>train_val.prototxt</strong></h4><p>&#96;&#96;python<br>solver.net.forward() # load mini-batch images from training data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Data** </span><br><span class="line">```prototxt</span><br><span class="line">name: &quot;mnist&quot;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;mnist&quot;</span><br><span class="line">  type: &quot;Data&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  top: &quot;label&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    scale: 0.00390625</span><br><span class="line">  &#125;</span><br><span class="line">  data_param &#123;</span><br><span class="line">    source: &quot;examples/mnist/mnist_train_lmdb&quot;</span><br><span class="line">    batch_size: 64</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name: &quot;CaffeNet&quot;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;data&quot;</span><br><span class="line">  type: &quot;Data&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  top: &quot;label&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: true</span><br><span class="line">    crop_size: 227</span><br><span class="line">    mean_file: &quot;data/ilsvrc12/imagenet_mean.binaryproto&quot;</span><br><span class="line">  &#125;</span><br><span class="line"># mean pixel / channel-wise mean instead of mean image</span><br><span class="line">#  transform_param &#123;</span><br><span class="line">#    crop_size: 227</span><br><span class="line">#    mean_value: 104</span><br><span class="line">#    mean_value: 117</span><br><span class="line">#    mean_value: 123</span><br><span class="line">#    mirror: true</span><br><span class="line">#  &#125;</span><br><span class="line">  data_param &#123;</span><br><span class="line">    source: &quot;examples/imagenet/ilsvrc12_train_lmdb&quot;</span><br><span class="line">    batch_size: 256</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** ImageData**: read raw images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: &quot;data&quot;</span><br><span class="line">  type: &quot;ImageData&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  top: &quot;label&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: true</span><br><span class="line">    crop_size: 227</span><br><span class="line">    mean_file: &quot;data/ilsvrc12/imagenet_mean.binaryproto&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  image_data_param &#123;</span><br><span class="line">    source: &quot;data/flickr_style/train.txt&quot;</span><br><span class="line">    batch_size: 50</span><br><span class="line">    new_height: 256</span><br><span class="line">    new_width: 256</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Input-Layer-types-for-deploy-prototxt"><a href="#Input-Layer-types-for-deploy-prototxt" class="headerlink" title="Input Layer types for deploy.prototxt"></a>Input Layer types for <strong>deploy.prototxt</strong></h4><p>** DummyData **: no labels, only for forward and get probs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: &quot;data&quot;</span><br><span class="line">  type: &quot;DummyData&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  dummy_data_param &#123;</span><br><span class="line">    shape &#123;</span><br><span class="line">      dim: 1</span><br><span class="line">      dim: 3</span><br><span class="line">      dim: 227</span><br><span class="line">      dim: 227</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** Input** :  typically used for networks that are being deployed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: &quot;data&quot;</span><br><span class="line">  type: &quot;Input&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  input_param &#123; </span><br><span class="line">  shape &#123;</span><br><span class="line">      dim: 10</span><br><span class="line">      dim: 3</span><br><span class="line">      dim: 227</span><br><span class="line">      dim: 227</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LeNet-train-val-prototxt"><a href="#LeNet-train-val-prototxt" class="headerlink" title="LeNet train_val.prototxt"></a>LeNet train_val.prototxt</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: &quot;LeNet&quot;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;mnist&quot;</span><br><span class="line">  type: &quot;Data&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  top: &quot;label&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    scale: 0.00390625</span><br><span class="line">  &#125;</span><br><span class="line">  data_param &#123;</span><br><span class="line">    source: &quot;examples/mnist/mnist_train_lmdb&quot;</span><br><span class="line">    batch_size: 64</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;mnist&quot;</span><br><span class="line">  type: &quot;Data&quot;</span><br><span class="line">  top: &quot;data&quot;</span><br><span class="line">  top: &quot;label&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TEST</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    scale: 0.00390625</span><br><span class="line">  &#125;</span><br><span class="line">  data_param &#123;</span><br><span class="line">    source: &quot;examples/mnist/mnist_test_lmdb&quot;</span><br><span class="line">    batch_size: 100</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;conv1&quot;</span><br><span class="line">  type: &quot;Convolution&quot;</span><br><span class="line">  bottom: &quot;data&quot;</span><br><span class="line">  top: &quot;conv1&quot;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 1</span><br><span class="line">  &#125;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 2</span><br><span class="line">  &#125;</span><br><span class="line">  convolution_param &#123;</span><br><span class="line">    num_output: 20</span><br><span class="line">    kernel_size: 5</span><br><span class="line">    stride: 1</span><br><span class="line">    weight_filler &#123;</span><br><span class="line">      type: &quot;xavier&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    bias_filler &#123;</span><br><span class="line">      type: &quot;constant&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;pool1&quot;</span><br><span class="line">  type: &quot;Pooling&quot;</span><br><span class="line">  bottom: &quot;conv1&quot;</span><br><span class="line">  top: &quot;pool1&quot;</span><br><span class="line">  pooling_param &#123;</span><br><span class="line">    pool: MAX</span><br><span class="line">    kernel_size: 2</span><br><span class="line">    stride: 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;conv2&quot;</span><br><span class="line">  type: &quot;Convolution&quot;</span><br><span class="line">  bottom: &quot;pool1&quot;</span><br><span class="line">  top: &quot;conv2&quot;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 1</span><br><span class="line">  &#125;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 2</span><br><span class="line">  &#125;</span><br><span class="line">  convolution_param &#123;</span><br><span class="line">    num_output: 50</span><br><span class="line">    kernel_size: 5</span><br><span class="line">    stride: 1</span><br><span class="line">    weight_filler &#123;</span><br><span class="line">      type: &quot;xavier&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    bias_filler &#123;</span><br><span class="line">      type: &quot;constant&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;pool2&quot;</span><br><span class="line">  type: &quot;Pooling&quot;</span><br><span class="line">  bottom: &quot;conv2&quot;</span><br><span class="line">  top: &quot;pool2&quot;</span><br><span class="line">  pooling_param &#123;</span><br><span class="line">    pool: MAX</span><br><span class="line">    kernel_size: 2</span><br><span class="line">    stride: 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;ip1&quot;</span><br><span class="line">  type: &quot;InnerProduct&quot;</span><br><span class="line">  bottom: &quot;pool2&quot;</span><br><span class="line">  top: &quot;ip1&quot;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 1</span><br><span class="line">  &#125;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 2</span><br><span class="line">  &#125;</span><br><span class="line">  inner_product_param &#123;</span><br><span class="line">    num_output: 500</span><br><span class="line">    weight_filler &#123;</span><br><span class="line">      type: &quot;xavier&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    bias_filler &#123;</span><br><span class="line">      type: &quot;constant&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;relu1&quot;</span><br><span class="line">  type: &quot;ReLU&quot;</span><br><span class="line">  bottom: &quot;ip1&quot;</span><br><span class="line">  top: &quot;ip1&quot;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;ip2&quot;</span><br><span class="line">  type: &quot;InnerProduct&quot;</span><br><span class="line">  bottom: &quot;ip1&quot;</span><br><span class="line">  top: &quot;ip2&quot;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 1</span><br><span class="line">  &#125;</span><br><span class="line">  param &#123;</span><br><span class="line">    lr_mult: 2</span><br><span class="line">  &#125;</span><br><span class="line">  inner_product_param &#123;</span><br><span class="line">    num_output: 10</span><br><span class="line">    weight_filler &#123;</span><br><span class="line">      type: &quot;xavier&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    bias_filler &#123;</span><br><span class="line">      type: &quot;constant&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;accuracy&quot;</span><br><span class="line">  type: &quot;Accuracy&quot;</span><br><span class="line">  bottom: &quot;ip2&quot;</span><br><span class="line">  bottom: &quot;label&quot;</span><br><span class="line">  top: &quot;accuracy&quot;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TEST</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">  name: &quot;loss&quot;</span><br><span class="line">  type: &quot;SoftmaxWithLoss&quot;</span><br><span class="line">  bottom: &quot;ip2&quot;</span><br><span class="line">  bottom: &quot;label&quot;</span><br><span class="line">  top: &quot;loss&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="LeNet-solver-prototxt"><a href="#LeNet-solver-prototxt" class="headerlink" title="LeNet solver.prototxt"></a>LeNet solver.prototxt</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The train/test net protocol buffer definition</span><br><span class="line">net: &quot;examples/mnist/lenet_train_test.prototxt&quot;</span><br><span class="line">    </span><br><span class="line"># batch_size定义在net.prototxt中,train_mini_batch_size = 64,test_mini_batch_size = 100</span><br><span class="line"></span><br><span class="line"># test_iter specifies how many forward passes the test should carry out.</span><br><span class="line"># In the case of MNIST, we have test batch size 100 and 100 test iterations,</span><br><span class="line"># covering the full 10,000 testing images.</span><br><span class="line">test_iter: 100 # test_iter = num_test_images/test_mini_batch_size = 10000/100</span><br><span class="line"># Carry out testing every 500 training iterations.</span><br><span class="line">test_interval: 500</span><br><span class="line"># The base learning rate, momentum and the weight decay of the network.</span><br><span class="line">base_lr: 0.01</span><br><span class="line">momentum: 0.9</span><br><span class="line">weight_decay: 0.0005</span><br><span class="line"># The learning rate policy</span><br><span class="line">lr_policy: &quot;inv&quot;</span><br><span class="line">gamma: 0.0001</span><br><span class="line">power: 0.75</span><br><span class="line"># Display every 100 iterations</span><br><span class="line">display: 100</span><br><span class="line"># The maximum number of iterations</span><br><span class="line">max_iter: 10000  # epoch = </span><br><span class="line"># snapshot intermediate results</span><br><span class="line">snapshot: 5000</span><br><span class="line">snapshot_prefix: &quot;examples/mnist/lenet&quot;</span><br><span class="line"># solver mode: CPU or GPU</span><br><span class="line">solver_mode: GPU</span><br></pre></td></tr></table></figure>

<h4 id="learning-rate-policy-todo…"><a href="#learning-rate-policy-todo…" class="headerlink" title="learning rate policy (todo…)"></a>learning rate policy (todo…)</h4><p>This is the same policy as our default LeNet.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.lr_policy = &#x27;inv&#x27;</span><br><span class="line">s.gamma = 0.0001</span><br><span class="line">s.power = 0.75</span><br></pre></td></tr></table></figure>

<p> EDIT HERE to try the fixed rate (and compare with adaptive solvers)<br><code>fixed</code> is the simplest policy that keeps the learning rate constant.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.lr_policy = &#x27;fixed&#x27;</span><br></pre></td></tr></table></figure>

<p>Set <code>lr_policy</code> to define how the learning rate changes during training.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Here, we &#x27;step&#x27; the learning rate by multiplying it by a factor `gamma`</span><br><span class="line"># every `stepsize` iterations.</span><br><span class="line">s.lr_policy = &#x27;step&#x27;</span><br><span class="line">s.gamma = 0.1</span><br><span class="line">s.stepsize = 20000</span><br></pre></td></tr></table></figure>

<h4 id="solver-types-todo…"><a href="#solver-types-todo…" class="headerlink" title="solver types (todo…)"></a>solver types (todo…)</h4><p>solver types include “SGD”, “Adam”, and “Nesterov” among others.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.type = &quot;SGD&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Train-LeNet"><a href="#Train-LeNet" class="headerlink" title="Train LeNet"></a>Train LeNet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$CAFFE_ROOT</span></span><br><span class="line">./examples/mnist/train_lenet.sh</span><br></pre></td></tr></table></figure>

<pre><code>#!/usr/bin/env sh
set -e

./build/tools/caffe train --solver=examples/mnist/lenet_solver.prototxt $@
</code></pre>
<p>train output </p>
<pre><code>I0807 16:15:29.555564  4273 solver.cpp:310] Iteration 10000, loss = 0.00251452
I0807 16:15:29.555619  4273 solver.cpp:330] Iteration 10000, Testing net (#0)
I0807 16:15:29.634243  4281 data_layer.cpp:73] Restarting data prefetching from start.
I0807 16:15:29.635372  4273 solver.cpp:397]     Test net output #0: accuracy = 0.9909
I0807 16:15:29.635409  4273 solver.cpp:397]     Test net output #1: loss = 0.0302912 (* 1 = 0.0302912 loss)
I0807 16:15:29.635416  4273 solver.cpp:315] Optimization Done.
I0807 16:15:29.635439  4273 caffe.cpp:259] Optimization Done.
</code></pre>
<h3 id="Deploy-model"><a href="#Deploy-model" class="headerlink" title="Deploy model"></a>Deploy model</h3><ul>
<li>for train, <code>train_test.prototxt</code> + <code>solver.prototxt</code></li>
<li>for deploy, <code>deploy.prototxt</code>+ <code>model.caffemodel</code></li>
</ul>
<blockquote>
<p>depoly: no weight_filler,bias_filler, loaded from weights.caffemodel. if not set weights file, w,b default to 0s</p>
</blockquote>
<h3 id="PyCaffe"><a href="#PyCaffe" class="headerlink" title="PyCaffe"></a>PyCaffe</h3><p><a href="http://caffe.berkeleyvision.org/tutorial/interfaces.html">pycaffe interfaces</a></p>
<p>The Python interface – <code>pycaffe</code> – is the caffe module and its scripts in caffe&#x2F;python. import caffe to load models, do forward and backward, handle IO, visualize networks, and even instrument model solving. All model data, derivatives, and parameters are exposed for reading and writing.</p>
<ul>
<li><code>caffe.Net</code> is the central interface for loading, configuring, and running models. </li>
<li><code>caffe.Classifier</code> and caffe.Detector provide convenience interfaces for common tasks.</li>
<li><code>caffe.SGDSolver</code> exposes the solving interface.</li>
<li><code>caffe.io</code> handles input &#x2F; output with preprocessing and protocol buffers.</li>
<li><code>caffe.draw</code> visualizes network architectures.</li>
<li>Caffe blobs are exposed as numpy ndarrays for ease-of-use and efficiency.</li>
</ul>
<p>Tutorial IPython notebooks are found in caffe&#x2F;examples: do <code>ipython notebook caffe/examples</code> to try them. For developer reference docstrings can be found throughout the code.</p>
<p>Compile pycaffe by make pycaffe. Add the module directory to your <code>$PYTHONPATH</code> by <code>export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH</code> or the like for <code>import caffe</code>.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html">minist</a></li>
<li><a href="http://caffe.berkeleyvision.org/tutorial/layers.html">caffe layers</a></li>
<li><a href="http://caffe.berkeleyvision.org/tutorial/layers/python.html">caffe python layer</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>LeNet</tag>
        <tag>mnist</tag>
      </tags>
  </entry>
  <entry>
    <title>network1.py</title>
    <url>//blog/network1-py/</url>
    <content><![CDATA[<h2 id="network1-py"><a href="#network1-py" class="headerlink" title="network1.py"></a>network1.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">network.py</span></span><br><span class="line"><span class="string">~~~~~~~~~~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A module to implement the stochastic gradient descent learning</span></span><br><span class="line"><span class="string">algorithm for a feedforward neural network.  Gradients are calculated</span></span><br><span class="line"><span class="string">using backpropagation.  Note that I have focused on making the code</span></span><br><span class="line"><span class="string">simple, easily readable, and easily modifiable.  It is not optimized,</span></span><br><span class="line"><span class="string">and omits many desirable features.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Libraries</span></span><br><span class="line"><span class="comment"># Standard library</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third-party libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sizes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;The list ``sizes`` contains the number of neurons in the</span></span><br><span class="line"><span class="string">        respective layers of the network.  For example, if the list</span></span><br><span class="line"><span class="string">        was [2, 3, 1] then it would be a three-layer network, with the</span></span><br><span class="line"><span class="string">        first layer containing 2 neurons, the second layer 3 neurons,</span></span><br><span class="line"><span class="string">        and the third layer 1 neuron.  The biases and weights for the</span></span><br><span class="line"><span class="string">        network are initialized randomly, using a Gaussian</span></span><br><span class="line"><span class="string">        distribution with mean 0, and variance 1.  Note that the first</span></span><br><span class="line"><span class="string">        layer is assumed to be an input layer, and by convention we</span></span><br><span class="line"><span class="string">        won&#x27;t set any biases for those neurons, since biases are only</span></span><br><span class="line"><span class="string">        ever used in computing the outputs from later layers.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.num_layers = <span class="built_in">len</span>(sizes)</span><br><span class="line">        <span class="variable language_">self</span>.sizes = sizes</span><br><span class="line">        <span class="variable language_">self</span>.biases = [np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> sizes[<span class="number">1</span>:]]</span><br><span class="line">        <span class="variable language_">self</span>.weights = [np.random.randn(y, x)</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(sizes[:-<span class="number">1</span>], sizes[<span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feedforward</span>(<span class="params">self, a</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the output of the network if ``a`` is input.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases, <span class="variable language_">self</span>.weights):</span><br><span class="line">            a = sigmoid(np.dot(w, a)+b)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SGD</span>(<span class="params">self, training_data, epochs, mini_batch_size, eta,</span></span><br><span class="line"><span class="params">            test_data=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Train the neural network using mini-batch stochastic</span></span><br><span class="line"><span class="string">        gradient descent.  The ``training_data`` is a list of tuples</span></span><br><span class="line"><span class="string">        ``(x, y)`` representing the training inputs and the desired</span></span><br><span class="line"><span class="string">        outputs.  The other non-optional parameters are</span></span><br><span class="line"><span class="string">        self-explanatory.  If ``test_data`` is provided then the</span></span><br><span class="line"><span class="string">        network will be evaluated against the test data after each</span></span><br><span class="line"><span class="string">        epoch, and partial progress printed out.  This is useful for</span></span><br><span class="line"><span class="string">        tracking progress, but slows things down substantially.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> test_data: n_test = <span class="built_in">len</span>(test_data)</span><br><span class="line">        n = <span class="built_in">len</span>(training_data)</span><br><span class="line">        num_batches = n/mini_batch_size</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(epochs):</span><br><span class="line">            random.shuffle(training_data)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>,num_batches):</span><br><span class="line">                mini_batch = training_data[k*mini_batch_size : (k+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">                <span class="variable language_">self</span>.update_mini_batch(mini_batch, eta)</span><br><span class="line">            <span class="keyword">if</span> test_data:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Epoch &#123;0&#125;: &#123;1&#125; / &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(j, <span class="variable language_">self</span>.evaluate(test_data), n_test)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Epoch &#123;0&#125; complete&quot;</span>.<span class="built_in">format</span>(j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_sum_derivatives_of_mini_batch</span>(<span class="params">self,mini_batch</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算m个样本的总梯度和。</span></span><br><span class="line"><span class="string">        利用反向传播计算每一个样本(x,y)对应的梯度。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.biases]</span><br><span class="line">        nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights]</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> mini_batch:</span><br><span class="line">            <span class="comment"># 给定一个样本X,利用反向传播算法计算对应w,b的梯度</span></span><br><span class="line">            delta_nabla_b, delta_nabla_w = <span class="variable language_">self</span>.backprop(x, y)</span><br><span class="line">            <span class="comment"># 对m个样本的梯度进行累计求和</span></span><br><span class="line">            nabla_b = [nb+dnb <span class="keyword">for</span> nb, dnb <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_b, delta_nabla_b)]</span><br><span class="line">            nabla_w = [nw+dnw <span class="keyword">for</span> nw, dnw <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_w, delta_nabla_w)]</span><br><span class="line">        <span class="keyword">return</span> nabla_b,nabla_w</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_mini_batch</span>(<span class="params">self, mini_batch, eta</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Update the network&#x27;s weights and biases by applying</span></span><br><span class="line"><span class="string">        gradient descent using backpropagation to a single mini batch.</span></span><br><span class="line"><span class="string">        The &quot;mini_batch&quot; is a list of tuples &quot;(x, y)&quot;, and &quot;eta&quot;</span></span><br><span class="line"><span class="string">        is the learning rate.&quot;&quot;&quot;</span></span><br><span class="line">        m = <span class="built_in">len</span>(mini_batch)</span><br><span class="line">        nabla_b,nabla_w = <span class="variable language_">self</span>.calculate_sum_derivatives_of_mini_batch(mini_batch)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.weights = [w-(eta/m)*nw <span class="keyword">for</span> w, nw <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.weights, nabla_w)]</span><br><span class="line">        <span class="variable language_">self</span>.biases =  [b-(eta/m)*nb <span class="keyword">for</span> b, nb <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases,  nabla_b)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backprop</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return a tuple &quot;(nabla_b, nabla_w)&quot; representing the</span></span><br><span class="line"><span class="string">        gradient for the cost function C_x.  &quot;nabla_b&quot; and</span></span><br><span class="line"><span class="string">        &quot;nabla_w&quot; are layer-by-layer lists of numpy arrays, similar</span></span><br><span class="line"><span class="string">        to &quot;self.biases&quot; and &quot;self.weights&quot;.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 初始化nb,nw,结构和b,w一样</span></span><br><span class="line">        nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.biases]</span><br><span class="line">        nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># feedforward</span></span><br><span class="line">        <span class="comment"># 执行算法的feedforward阶段</span></span><br><span class="line">        <span class="comment">#　(1)初始化x作为a_1</span></span><br><span class="line">        activation = x</span><br><span class="line">        activations = [x] <span class="comment"># list to store all the activations, layer by layer</span></span><br><span class="line">        zs = [] <span class="comment"># list to store all the z vectors, layer by layer</span></span><br><span class="line">        <span class="comment"># (2)l=2,....L层，分别计算z_l,a_l并且保存下来。</span></span><br><span class="line">        <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases, <span class="variable language_">self</span>.weights):</span><br><span class="line">            z = np.dot(w, activation)+b</span><br><span class="line">            zs.append(z)</span><br><span class="line">            activation = sigmoid(z)</span><br><span class="line">            activations.append(activation)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#========================================================================</span></span><br><span class="line">        <span class="comment"># 先计算所有的误差delta，最后计算所有层的梯度nb,nw，代码可读性更高一些</span></span><br><span class="line">        <span class="comment">#========================================================================</span></span><br><span class="line">        <span class="comment"># method2</span></span><br><span class="line">        <span class="comment"># backward pass</span></span><br><span class="line">        <span class="comment"># 执行算法的backward阶段</span></span><br><span class="line">        <span class="comment"># (3)初始化第L层的误差,delta_L　= cost(a_L,y) * sigmoid_prime(z_L)</span></span><br><span class="line">        l = -<span class="number">1</span></span><br><span class="line">        delta = <span class="variable language_">self</span>.cost_derivative_of_a_L(activations[l], y) * sigmoid_prime(zs[l])</span><br><span class="line">        deltas = [delta] <span class="comment"># list to store all the errors,layer by layer</span></span><br><span class="line">        <span class="comment"># (4)初始化l=L-1,....2层的误差,delta_l = np.dot(w_l+1^T,delta_l+1)* sigmoid_prime(z_l)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, <span class="variable language_">self</span>.num_layers):</span><br><span class="line">            l = -i <span class="comment">#(-２代表L-1,-3代表L-2,-(L-1)代表2)</span></span><br><span class="line">            delta = np.dot(<span class="variable language_">self</span>.weights[l+<span class="number">1</span>].transpose(), deltas[l+<span class="number">1</span>]) * sigmoid_prime(zs[l])</span><br><span class="line">            deltas.insert(<span class="number">0</span>,delta) <span class="comment"># 确保误差的顺序，从后往前计算，所以需要insert在数组的最前面</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#(5)l=L,L-1,....2层，计算所有的梯度向量nb,nw</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="variable language_">self</span>.num_layers):</span><br><span class="line">            l = -i <span class="comment">#(-1,-2,....-(L-1))</span></span><br><span class="line">            nabla_b[l] = deltas[l]</span><br><span class="line">            nabla_w[l] = np.dot(deltas[l], activations[l-<span class="number">1</span>].transpose())</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> (nabla_b, nabla_w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">self, test_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the number of test inputs for which the neural</span></span><br><span class="line"><span class="string">        network outputs the correct result. Note that the neural</span></span><br><span class="line"><span class="string">        network&#x27;s output is assumed to be the index of whichever</span></span><br><span class="line"><span class="string">        neuron in the final layer has the highest activation.&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        l = [0,1,0,0,0,0,0,0,0,0]</span></span><br><span class="line"><span class="string">        a = np.array(l).reshape(10,1)</span></span><br><span class="line"><span class="string">        np.argmax(a) #输出向量对应的数字１</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        test_results = [(1,1),(2,2),(3,3),(1,9)]</span></span><br><span class="line"><span class="string">        [int(x == y) for (x, y) in test_results] </span></span><br><span class="line"><span class="string">        #[1, 1, 1, 0]</span></span><br><span class="line"><span class="string">        sum([int(x == y) for (x, y) in test_results])</span></span><br><span class="line"><span class="string">        #3</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        test_results = [(np.argmax(<span class="variable language_">self</span>.feedforward(x)), y)</span><br><span class="line">                        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">int</span>(x == y) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_results)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost_derivative_of_a_L</span>(<span class="params">self, output_activations, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the vector of partial derivatives \partial C_x /</span></span><br><span class="line"><span class="string">        \partial a for the output activations.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (output_activations-y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Miscellaneous functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The sigmoid function.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span>+np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid_prime</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Derivative of the sigmoid function.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(z)*(<span class="number">1</span>-sigmoid(z))</span><br></pre></td></tr></table></figure>

<h1 id="mnist-loader"><a href="#mnist-loader" class="headerlink" title="mnist_loader"></a>mnist_loader</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mnist_loader</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A library to load the MNIST image data.  For details of the data</span></span><br><span class="line"><span class="string">structures that are returned, see the doc strings for ``load_data``</span></span><br><span class="line"><span class="string">and ``load_data_wrapper``.  In practice, ``load_data_wrapper`` is the</span></span><br><span class="line"><span class="string">function usually called by our neural network code.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Libraries</span></span><br><span class="line"><span class="comment"># Standard library</span></span><br><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third-party libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the MNIST data as a tuple containing the training data,</span></span><br><span class="line"><span class="string">    the validation data, and the test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The ``training_data`` is returned as a tuple with two entries.</span></span><br><span class="line"><span class="string">    The first entry contains the actual training images.  This is a</span></span><br><span class="line"><span class="string">    numpy ndarray with 50,000 entries.  Each entry is, in turn, a</span></span><br><span class="line"><span class="string">    numpy ndarray with 784 values, representing the 28 * 28 = 784</span></span><br><span class="line"><span class="string">    pixels in a single MNIST image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The second entry in the ``training_data`` tuple is a numpy ndarray</span></span><br><span class="line"><span class="string">    containing 50,000 entries.  Those entries are just the digit</span></span><br><span class="line"><span class="string">    values (0...9) for the corresponding images contained in the first</span></span><br><span class="line"><span class="string">    entry of the tuple.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The ``validation_data`` and ``test_data`` are similar, except</span></span><br><span class="line"><span class="string">    each contains only 10,000 images.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is a nice data format, but for use in neural networks it&#x27;s</span></span><br><span class="line"><span class="string">    helpful to modify the format of the ``training_data`` a little.</span></span><br><span class="line"><span class="string">    That&#x27;s done in the wrapper function ``load_data_wrapper()``, see</span></span><br><span class="line"><span class="string">    below.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    f = gzip.<span class="built_in">open</span>(<span class="string">&#x27;../data/mnist.pkl.gz&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    training_data, validation_data, test_data = cPickle.load(f)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> (training_data, validation_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tuple containing ``(training_data, validation_data,</span></span><br><span class="line"><span class="string">    test_data)``. Based on ``load_data``, but the format is more</span></span><br><span class="line"><span class="string">    convenient for use in our implementation of neural networks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    In particular, ``training_data`` is a list containing 50,000</span></span><br><span class="line"><span class="string">    2-tuples ``(x, y)``.  ``x`` is a 784-dimensional numpy.ndarray</span></span><br><span class="line"><span class="string">    containing the input image.  ``y`` is a 10-dimensional</span></span><br><span class="line"><span class="string">    numpy.ndarray representing the unit vector corresponding to the</span></span><br><span class="line"><span class="string">    correct digit for ``x``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``validation_data`` and ``test_data`` are lists containing 10,000</span></span><br><span class="line"><span class="string">    2-tuples ``(x, y)``.  In each case, ``x`` is a 784-dimensional</span></span><br><span class="line"><span class="string">    numpy.ndarry containing the input image, and ``y`` is the</span></span><br><span class="line"><span class="string">    corresponding classification, i.e., the digit values (integers)</span></span><br><span class="line"><span class="string">    corresponding to ``x``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Obviously, this means we&#x27;re using slightly different formats for</span></span><br><span class="line"><span class="string">    the training data and the validation / test data.  These formats</span></span><br><span class="line"><span class="string">    turn out to be the most convenient for use in our neural network</span></span><br><span class="line"><span class="string">    code.&quot;&quot;&quot;</span></span><br><span class="line">    tr_d, va_d, te_d = load_data()</span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    training_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> tr_d[<span class="number">0</span>]]</span><br><span class="line">    <span class="comment"># vector train_y, while val and test y are integers.</span></span><br><span class="line">    training_results = [vectorized_result(y) <span class="keyword">for</span> y <span class="keyword">in</span> tr_d[<span class="number">1</span>]] </span><br><span class="line">    training_data = <span class="built_in">zip</span>(training_inputs, training_results)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># val</span></span><br><span class="line">    validation_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> va_d[<span class="number">0</span>]]</span><br><span class="line">    validation_data = <span class="built_in">zip</span>(validation_inputs, va_d[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    test_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> te_d[<span class="number">0</span>]]</span><br><span class="line">    test_data = <span class="built_in">zip</span>(test_inputs, te_d[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (training_data, validation_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vectorized_result</span>(<span class="params">j</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a 10-dimensional unit vector with a 1.0 in the jth</span></span><br><span class="line"><span class="string">    position and zeroes elsewhere.  This is used to convert a digit</span></span><br><span class="line"><span class="string">    (0...9) into a corresponding desired output from the neural</span></span><br><span class="line"><span class="string">    network.&quot;&quot;&quot;</span></span><br><span class="line">    e = np.zeros((<span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">    e[j] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> e</span><br></pre></td></tr></table></figure>

<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mnist_loader</span><br><span class="line"><span class="keyword">from</span> ke_network <span class="keyword">import</span> Network</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    train,val,test = mnist_loader.load_data_wrapper()</span><br><span class="line">    epoch = <span class="number">30</span></span><br><span class="line">    mini_batch_size  = <span class="number">10</span></span><br><span class="line">    eta = <span class="number">3.0</span></span><br><span class="line">    net = Network([<span class="number">784</span>,<span class="number">30</span>,<span class="number">10</span>])</span><br><span class="line">    net.SGD(train,epoch,mini_batch_size,eta,test_data=test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<pre><code>Epoch 0: 9135 / 10000
Epoch 1: 9238 / 10000
Epoch 2: 9337 / 10000
Epoch 3: 9345 / 10000
Epoch 4: 9393 / 10000
Epoch 5: 9389 / 10000
Epoch 6: 9419 / 10000
Epoch 7: 9410 / 10000
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>neural networks and deep learning</tag>
        <tag>mlp</tag>
      </tags>
  </entry>
  <entry>
    <title>network2.py</title>
    <url>//blog/network2-py/</url>
    <content><![CDATA[<h2 id="network2-py"><a href="#network2-py" class="headerlink" title="network2.py"></a>network2.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;network2.py</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">An improved version of network.py, implementing the stochastic</span></span><br><span class="line"><span class="string">gradient descent learning algorithm for a feedforward neural network.</span></span><br><span class="line"><span class="string">Improvements include the addition of the cross-entropy cost function,</span></span><br><span class="line"><span class="string">regularization, and better initialization of network weights.  Note</span></span><br><span class="line"><span class="string">that I have focused on making the code simple, easily readable, and</span></span><br><span class="line"><span class="string">easily modifiable.  It is not optimized, and omits many desirable</span></span><br><span class="line"><span class="string">features.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Libraries</span></span><br><span class="line"><span class="comment"># Standard library</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third-party libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Define the quadratic and cross-entropy cost functions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuadraticCost</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the cost associated with an output ``a`` and desired output ``y``.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>*np.linalg.norm(a-y)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delta</span>(<span class="params">z, a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the error delta from the output layer.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (a-y) * sigmoid_prime(z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossEntropyCost</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the cost associated with an output ``a`` and desired output</span></span><br><span class="line"><span class="string">        ``y``.  Note that np.nan_to_num is used to ensure numerical</span></span><br><span class="line"><span class="string">        stability.  In particular, if both ``a`` and ``y`` have a 1.0</span></span><br><span class="line"><span class="string">        in the same slot, then the expression (1-y)*np.log(1-a)</span></span><br><span class="line"><span class="string">        returns nan.  The np.nan_to_num ensures that that is converted</span></span><br><span class="line"><span class="string">        to the correct value (0.0).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.nan_to_num(-y*np.log(a)-(<span class="number">1</span>-y)*np.log(<span class="number">1</span>-a)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delta</span>(<span class="params">z, a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the error delta from the output layer.  Note that the</span></span><br><span class="line"><span class="string">        parameter ``z`` is not used by the method.  It is included in</span></span><br><span class="line"><span class="string">        the method&#x27;s parameters in order to make the interface</span></span><br><span class="line"><span class="string">        consistent with the delta method for other cost classes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (a-y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#********************************************************    </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogLikelihoodCost</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        C = -log(a[i])</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        a(10,1) y(10,1)</span></span><br><span class="line"><span class="string">        y = [0,0,1,0,0,0,0,0,0,0,0] </span></span><br><span class="line"><span class="string">        i = 2</span></span><br><span class="line"><span class="string">        C = -log a[2,0]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = np.argmax(y)  </span><br><span class="line">        <span class="keyword">return</span> -np.log(a[i,<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delta</span>(<span class="params">z, a, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        delta_j = aj-yj</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (a-y)</span><br><span class="line"><span class="comment">#********************************************************  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#### Main Network class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sizes, cost=CrossEntropyCost</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;The list ``sizes`` contains the number of neurons in the respective</span></span><br><span class="line"><span class="string">        layers of the network.  For example, if the list was [2, 3, 1]</span></span><br><span class="line"><span class="string">        then it would be a three-layer network, with the first layer</span></span><br><span class="line"><span class="string">        containing 2 neurons, the second layer 3 neurons, and the</span></span><br><span class="line"><span class="string">        third layer 1 neuron.  The biases and weights for the network</span></span><br><span class="line"><span class="string">        are initialized randomly, using</span></span><br><span class="line"><span class="string">        ``self.default_weight_initializer`` (see docstring for that</span></span><br><span class="line"><span class="string">        method).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.num_layers = <span class="built_in">len</span>(sizes)</span><br><span class="line">        <span class="variable language_">self</span>.sizes = sizes</span><br><span class="line">        <span class="variable language_">self</span>.cost=cost</span><br><span class="line">        <span class="comment"># init use_softmax with cost type</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cost == LogLikelihoodCost:</span><br><span class="line">            <span class="variable language_">self</span>.use_softmax = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.use_softmax = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># init weight initializer and feedforward method</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.use_softmax:</span><br><span class="line">            <span class="variable language_">self</span>.default_weight_initializer = <span class="variable language_">self</span>.default_weight_initializer_with_softmax</span><br><span class="line">            <span class="variable language_">self</span>.feedforward = <span class="variable language_">self</span>.feedforward_with_softmax</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.default_weight_initializer = <span class="variable language_">self</span>.default_weight_initializer_1</span><br><span class="line">            <span class="variable language_">self</span>.feedforward = <span class="variable language_">self</span>.feedforward_1</span><br><span class="line">        <span class="comment"># init weights and biases</span></span><br><span class="line">        <span class="variable language_">self</span>.default_weight_initializer()</span><br><span class="line">        <span class="comment"># at least an input and output layers</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="variable language_">self</span>.num_layers&gt;=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default_weight_initializer_with_softmax</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># sigmoid neurons: w(0,1/sqrt(n_in)) b(0,1)</span></span><br><span class="line">        <span class="comment"># softmax neurons: w = b = 0</span></span><br><span class="line">        <span class="comment"># len(sizes)&gt;=2</span></span><br><span class="line">        <span class="comment"># (1) for sigmoid neuros</span></span><br><span class="line">        <span class="variable language_">self</span>.biases = [np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="variable language_">self</span>.sizes[<span class="number">1</span>:-<span class="number">1</span>]]</span><br><span class="line">        <span class="variable language_">self</span>.weights = [np.random.randn(y, x)/np.sqrt(x)</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.sizes[:-<span class="number">1</span>], <span class="variable language_">self</span>.sizes[<span class="number">1</span>:-<span class="number">1</span>])]</span><br><span class="line">        <span class="comment">#(2) for last somtmax neurons</span></span><br><span class="line">        x = <span class="variable language_">self</span>.sizes[-<span class="number">2</span>]</span><br><span class="line">        y = <span class="variable language_">self</span>.sizes[-<span class="number">1</span>]</span><br><span class="line">        last_b = np.zeros((y, <span class="number">1</span>))</span><br><span class="line">        last_w = np.zeros((y, x))</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.biases.append(last_b)</span><br><span class="line">        <span class="variable language_">self</span>.weights.append(last_w)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default_weight_initializer_1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize each weight using a Gaussian distribution with mean 0</span></span><br><span class="line"><span class="string">        and standard deviation 1 over the square root of the number of</span></span><br><span class="line"><span class="string">        weights connecting to the same neuron.  Initialize the biases</span></span><br><span class="line"><span class="string">        using a Gaussian distribution with mean 0 and standard</span></span><br><span class="line"><span class="string">        deviation 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that the first layer is assumed to be an input layer, and</span></span><br><span class="line"><span class="string">        by convention we won&#x27;t set any biases for those neurons, since</span></span><br><span class="line"><span class="string">        biases are only ever used in computing the outputs from later</span></span><br><span class="line"><span class="string">        layers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.biases = [np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="variable language_">self</span>.sizes[<span class="number">1</span>:]]</span><br><span class="line">        <span class="variable language_">self</span>.weights = [np.random.randn(y, x)/np.sqrt(x)</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.sizes[:-<span class="number">1</span>], <span class="variable language_">self</span>.sizes[<span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">large_weight_initializer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize the weights using a Gaussian distribution with mean 0</span></span><br><span class="line"><span class="string">        and standard deviation 1.  Initialize the biases using a</span></span><br><span class="line"><span class="string">        Gaussian distribution with mean 0 and standard deviation 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that the first layer is assumed to be an input layer, and</span></span><br><span class="line"><span class="string">        by convention we won&#x27;t set any biases for those neurons, since</span></span><br><span class="line"><span class="string">        biases are only ever used in computing the outputs from later</span></span><br><span class="line"><span class="string">        layers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This weight and bias initializer uses the same approach as in</span></span><br><span class="line"><span class="string">        Chapter 1, and is included for purposes of comparison.  It</span></span><br><span class="line"><span class="string">        will usually be better to use the default weight initializer</span></span><br><span class="line"><span class="string">        instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.biases = [np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="variable language_">self</span>.sizes[<span class="number">1</span>:]]</span><br><span class="line">        <span class="variable language_">self</span>.weights = [np.random.randn(y, x)</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.sizes[:-<span class="number">1</span>], <span class="variable language_">self</span>.sizes[<span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feedforward_with_softmax</span>(<span class="params">self, a</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the output of the network if ``a`` is input.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases[:-<span class="number">1</span>], <span class="variable language_">self</span>.weights[:-<span class="number">1</span>]):</span><br><span class="line">            a = sigmoid(np.dot(w, a)+b)</span><br><span class="line">        <span class="comment"># last layer</span></span><br><span class="line">        b,w = <span class="variable language_">self</span>.biases[-<span class="number">1</span>],<span class="variable language_">self</span>.weights[-<span class="number">1</span>]</span><br><span class="line">        last_z = np.dot(w, a)+b</span><br><span class="line">        last_a = softmax(last_z)</span><br><span class="line">        <span class="keyword">return</span> last_a</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feedforward_1</span>(<span class="params">self, a</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the output of the network if ``a`` is input.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases, <span class="variable language_">self</span>.weights):</span><br><span class="line">            a = sigmoid(np.dot(w, a)+b)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SGD</span>(<span class="params">self, training_data, epochs, mini_batch_size, eta,</span></span><br><span class="line"><span class="params">            lmbda = <span class="number">0.0</span>,</span></span><br><span class="line"><span class="params">            evaluation_data=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">            monitor_evaluation_cost=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">            monitor_evaluation_accuracy=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">            monitor_training_cost=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">            monitor_training_accuracy=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Train the neural network using mini-batch stochastic gradient</span></span><br><span class="line"><span class="string">        descent.  The ``training_data`` is a list of tuples ``(x, y)``</span></span><br><span class="line"><span class="string">        representing the training inputs and the desired outputs.  The</span></span><br><span class="line"><span class="string">        other non-optional parameters are self-explanatory, as is the</span></span><br><span class="line"><span class="string">        regularization parameter ``lmbda``.  The method also accepts</span></span><br><span class="line"><span class="string">        ``evaluation_data``, usually either the validation or test</span></span><br><span class="line"><span class="string">        data.  We can monitor the cost and accuracy on either the</span></span><br><span class="line"><span class="string">        evaluation data or the training data, by setting the</span></span><br><span class="line"><span class="string">        appropriate flags.  The method returns a tuple containing four</span></span><br><span class="line"><span class="string">        lists: the (per-epoch) costs on the evaluation data, the</span></span><br><span class="line"><span class="string">        accuracies on the evaluation data, the costs on the training</span></span><br><span class="line"><span class="string">        data, and the accuracies on the training data.  All values are</span></span><br><span class="line"><span class="string">        evaluated at the end of each training epoch.  So, for example,</span></span><br><span class="line"><span class="string">        if we train for 30 epochs, then the first element of the tuple</span></span><br><span class="line"><span class="string">        will be a 30-element list containing the cost on the</span></span><br><span class="line"><span class="string">        evaluation data at the end of each epoch. Note that the lists</span></span><br><span class="line"><span class="string">        are empty if the corresponding flag is not set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> evaluation_data: n_data = <span class="built_in">len</span>(evaluation_data)</span><br><span class="line">        n = <span class="built_in">len</span>(training_data)</span><br><span class="line">        num_batches = n/mini_batch_size</span><br><span class="line">        evaluation_cost, evaluation_accuracy = [], []</span><br><span class="line">        training_cost, training_accuracy = [], []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(epochs):</span><br><span class="line">            random.shuffle(training_data)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>,num_batches):</span><br><span class="line">                mini_batch = training_data[k*mini_batch_size : (k+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">                <span class="variable language_">self</span>.update_mini_batch(mini_batch, eta, lmbda, <span class="built_in">len</span>(training_data))</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Epoch %s training complete&quot;</span> % j</span><br><span class="line">            <span class="keyword">if</span> monitor_training_cost:</span><br><span class="line">                cost = <span class="variable language_">self</span>.total_cost(training_data, lmbda)</span><br><span class="line">                training_cost.append(cost)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Cost on training data: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cost)</span><br><span class="line">            <span class="keyword">if</span> monitor_training_accuracy:</span><br><span class="line">                accuracy = <span class="variable language_">self</span>.accuracy(training_data, convert=<span class="literal">True</span>)</span><br><span class="line">                training_accuracy.append(accuracy)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Accuracy on training data: &#123;&#125; / &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    accuracy, n)</span><br><span class="line">            <span class="keyword">if</span> monitor_evaluation_cost:</span><br><span class="line">                cost = <span class="variable language_">self</span>.total_cost(evaluation_data, lmbda, convert=<span class="literal">True</span>)</span><br><span class="line">                evaluation_cost.append(cost)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Cost on evaluation data: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cost)</span><br><span class="line">            <span class="keyword">if</span> monitor_evaluation_accuracy:</span><br><span class="line">                accuracy = <span class="variable language_">self</span>.accuracy(evaluation_data)</span><br><span class="line">                evaluation_accuracy.append(accuracy)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Accuracy on evaluation data: &#123;&#125; / &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    <span class="variable language_">self</span>.accuracy(evaluation_data), n_data)</span><br><span class="line">            <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">return</span> evaluation_cost, evaluation_accuracy, training_cost, training_accuracy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_sum_derivatives_of_mini_batch</span>(<span class="params">self,mini_batch</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算m个样本的总梯度和。</span></span><br><span class="line"><span class="string">        利用反向传播计算每一个样本(x,y)对应的梯度。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.biases]</span><br><span class="line">        nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights]</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> mini_batch:</span><br><span class="line">            <span class="comment"># 给定一个样本X,利用反向传播算法计算对应w,b的梯度</span></span><br><span class="line">            delta_nabla_b, delta_nabla_w = <span class="variable language_">self</span>.backprop(x, y)</span><br><span class="line">            <span class="comment"># 对m个样本的梯度进行累计求和</span></span><br><span class="line">            nabla_b = [nb+dnb <span class="keyword">for</span> nb, dnb <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_b, delta_nabla_b)]</span><br><span class="line">            nabla_w = [nw+dnw <span class="keyword">for</span> nw, dnw <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_w, delta_nabla_w)]</span><br><span class="line">        <span class="keyword">return</span> nabla_b,nabla_w</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_mini_batch</span>(<span class="params">self, mini_batch, eta, lmbda, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Update the network&#x27;s weights and biases by applying gradient</span></span><br><span class="line"><span class="string">        descent using backpropagation to a single mini batch.  The</span></span><br><span class="line"><span class="string">        ``mini_batch`` is a list of tuples ``(x, y)``, ``eta`` is the</span></span><br><span class="line"><span class="string">        learning rate, ``lmbda`` is the regularization parameter, and</span></span><br><span class="line"><span class="string">        ``n`` is the total size of the training data set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m = <span class="built_in">len</span>(mini_batch)</span><br><span class="line">        nabla_b,nabla_w = <span class="variable language_">self</span>.calculate_sum_derivatives_of_mini_batch(mini_batch)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#self.weights = [w-(eta/m)*nw for w, nw in zip(self.weights, nabla_w)]</span></span><br><span class="line">        <span class="comment">#self.biases =  [b-(eta/m)*nb for b, nb in zip(self.biases,  nabla_b)]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># L2 regularization</span></span><br><span class="line">        weight_decay = <span class="number">1</span>-eta*(lmbda/n)</span><br><span class="line">        <span class="variable language_">self</span>.weights = [weight_decay*w-(eta/m)*nw</span><br><span class="line">                        <span class="keyword">for</span> w, nw <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.weights, nabla_w)]</span><br><span class="line">        <span class="variable language_">self</span>.biases = [b-(eta/m)*nb</span><br><span class="line">                       <span class="keyword">for</span> b, nb <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases, nabla_b)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backprop</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return a tuple &quot;(nabla_b, nabla_w)&quot; representing the</span></span><br><span class="line"><span class="string">        gradient for the cost function C_x.  &quot;nabla_b&quot; and</span></span><br><span class="line"><span class="string">        &quot;nabla_w&quot; are layer-by-layer lists of numpy arrays, similar</span></span><br><span class="line"><span class="string">        to &quot;self.biases&quot; and &quot;self.weights&quot;.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 初始化nb,nw,结构和b,w一样</span></span><br><span class="line">        nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.biases]</span><br><span class="line">        nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># feedforward</span></span><br><span class="line">        <span class="comment"># 执行算法的feedforward阶段</span></span><br><span class="line">        <span class="comment">#　(1)初始化x作为a_1</span></span><br><span class="line">        activation = x</span><br><span class="line">        activations = [x] <span class="comment"># list to store all the activations, layer by layer</span></span><br><span class="line">        zs = [] <span class="comment"># list to store all the z vectors, layer by layer</span></span><br><span class="line">        <span class="comment"># (2)l=2,....L层，分别计算z_l,a_l并且保存下来。</span></span><br><span class="line">        <span class="comment">#*************************************************************</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.use_softmax:</span><br><span class="line">            <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases[:-<span class="number">1</span>], <span class="variable language_">self</span>.weights[:-<span class="number">1</span>]):</span><br><span class="line">                z = np.dot(w, activation)+b</span><br><span class="line">                zs.append(z)</span><br><span class="line">                activation = sigmoid(z)</span><br><span class="line">                activations.append(activation)</span><br><span class="line">            <span class="comment">#last layer</span></span><br><span class="line">            b,w = <span class="variable language_">self</span>.biases[-<span class="number">1</span>],<span class="variable language_">self</span>.weights[-<span class="number">1</span>]</span><br><span class="line">            last_z = np.dot(w, activation)+b</span><br><span class="line">            last_a = softmax(last_z)</span><br><span class="line">            zs.append(last_z)</span><br><span class="line">            activations.append(last_a)</span><br><span class="line">        <span class="comment">#*************************************************************</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.biases, <span class="variable language_">self</span>.weights):</span><br><span class="line">                z = np.dot(w, activation)+b</span><br><span class="line">                zs.append(z)</span><br><span class="line">                activation = sigmoid(z)</span><br><span class="line">                activations.append(activation)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#========================================================================</span></span><br><span class="line">        <span class="comment"># 先计算所有的误差delta，最后计算所有层的梯度nb,nw，代码可读性更高一些</span></span><br><span class="line">        <span class="comment">#========================================================================</span></span><br><span class="line">        <span class="comment"># method2</span></span><br><span class="line">        <span class="comment"># backward pass</span></span><br><span class="line">        <span class="comment"># 执行算法的backward阶段</span></span><br><span class="line">        <span class="comment"># (3)初始化第L层的误差,delta_L　= cost(z,a,y)</span></span><br><span class="line">        l = -<span class="number">1</span></span><br><span class="line">        <span class="comment">#***************************************************</span></span><br><span class="line">        delta = <span class="variable language_">self</span>.cost.delta(zs[l],activations[l], y)</span><br><span class="line">        <span class="comment">#***************************************************</span></span><br><span class="line">        deltas = [delta] <span class="comment"># list to store all the errors,layer by layer</span></span><br><span class="line">        <span class="comment"># (4)初始化l=L-1,....2层的误差,delta_l = np.dot(w_l+1^T,delta_l+1)* sigmoid_prime(z_l)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, <span class="variable language_">self</span>.num_layers):</span><br><span class="line">            l = -i <span class="comment">#(-２代表L-1,-3代表L-2,-(L-1)代表2)</span></span><br><span class="line">            delta = np.dot(<span class="variable language_">self</span>.weights[l+<span class="number">1</span>].transpose(), deltas[l+<span class="number">1</span>]) * sigmoid_prime(zs[l])</span><br><span class="line">            deltas.insert(<span class="number">0</span>,delta) <span class="comment"># 确保误差的顺序，从后往前计算，所以需要insert在数组的最前面</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#(5)l=L,L-1,....2层，计算所有的梯度向量nb,nw</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="variable language_">self</span>.num_layers):</span><br><span class="line">            l = -i <span class="comment">#(-1,-2,....-(L-1))</span></span><br><span class="line">            nabla_b[l] = deltas[l]</span><br><span class="line">            nabla_w[l] = np.dot(deltas[l], activations[l-<span class="number">1</span>].transpose())</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> (nabla_b, nabla_w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">self, data, convert=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the number of inputs in ``data`` for which the neural</span></span><br><span class="line"><span class="string">        network outputs the correct result. The neural network&#x27;s</span></span><br><span class="line"><span class="string">        output is assumed to be the index of whichever neuron in the</span></span><br><span class="line"><span class="string">        final layer has the highest activation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The flag ``convert`` should be set to False if the data set is</span></span><br><span class="line"><span class="string">        validation or test data (the usual case), and to True if the</span></span><br><span class="line"><span class="string">        data set is the training data. The need for this flag arises</span></span><br><span class="line"><span class="string">        due to differences in the way the results ``y`` are</span></span><br><span class="line"><span class="string">        represented in the different data sets.  In particular, it</span></span><br><span class="line"><span class="string">        flags whether we need to convert between the different</span></span><br><span class="line"><span class="string">        representations.  It may seem strange to use different</span></span><br><span class="line"><span class="string">        representations for the different data sets.  Why not use the</span></span><br><span class="line"><span class="string">        same representation for all three data sets?  It&#x27;s done for</span></span><br><span class="line"><span class="string">        efficiency reasons -- the program usually evaluates the cost</span></span><br><span class="line"><span class="string">        on the training data and the accuracy on other data sets.</span></span><br><span class="line"><span class="string">        These are different types of computations, and using different</span></span><br><span class="line"><span class="string">        representations speeds things up.  More details on the</span></span><br><span class="line"><span class="string">        representations can be found in</span></span><br><span class="line"><span class="string">        mnist_loader.load_data_wrapper.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> convert: <span class="comment"># train data</span></span><br><span class="line">            results = [(np.argmax(<span class="variable language_">self</span>.feedforward(x)), np.argmax(y))</span><br><span class="line">                       <span class="keyword">for</span> (x, y) <span class="keyword">in</span> data]</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># val/test data</span></span><br><span class="line">            results = [(np.argmax(<span class="variable language_">self</span>.feedforward(x)), y)</span><br><span class="line">                        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> data]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">int</span>(x == y) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> results)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">total_cost</span>(<span class="params">self, data, lmbda, convert=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the total cost for the data set ``data``.  The flag</span></span><br><span class="line"><span class="string">        ``convert`` should be set to False if the data set is the</span></span><br><span class="line"><span class="string">        training data (the usual case), and to True if the data set is</span></span><br><span class="line"><span class="string">        the validation or test data.  See comments on the similar (but</span></span><br><span class="line"><span class="string">        reversed) convention for the ``accuracy`` method, above.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cost = <span class="number">0.0</span></span><br><span class="line">        n = <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> data:</span><br><span class="line">            a = <span class="variable language_">self</span>.feedforward(x)</span><br><span class="line">            <span class="keyword">if</span> convert: <span class="comment"># val/test data</span></span><br><span class="line">                y = vectorized_result(y)</span><br><span class="line">            cost += <span class="variable language_">self</span>.cost.fn(a, y)/n</span><br><span class="line">        <span class="comment"># L2 term = lmbda/(2n)*sum(w**2)</span></span><br><span class="line">        l2_term = <span class="number">0.5</span>*(lmbda/n)*<span class="built_in">sum</span>(np.linalg.norm(w)**<span class="number">2</span> <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights)</span><br><span class="line">        cost += l2_term</span><br><span class="line">        <span class="keyword">return</span> cost</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Save the neural network to the file ``filename``.&quot;&quot;&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;sizes&quot;</span>: <span class="variable language_">self</span>.sizes,</span><br><span class="line">                <span class="string">&quot;weights&quot;</span>: [w.tolist() <span class="keyword">for</span> w <span class="keyword">in</span> <span class="variable language_">self</span>.weights],</span><br><span class="line">                <span class="string">&quot;biases&quot;</span>: [b.tolist() <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.biases],</span><br><span class="line">                <span class="string">&quot;cost&quot;</span>: <span class="built_in">str</span>(<span class="variable language_">self</span>.cost.__name__)&#125;</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">        json.dump(data, f)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Loading a Network</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Load a neural network from the file ``filename``.  Returns an</span></span><br><span class="line"><span class="string">    instance of Network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    f.close()</span><br><span class="line">    name = sys.modules[__name__]</span><br><span class="line">    cost = <span class="built_in">getattr</span>(name, data[<span class="string">&quot;cost&quot;</span>])</span><br><span class="line">    net = Network(data[<span class="string">&quot;sizes&quot;</span>], cost=cost)</span><br><span class="line">    net.weights = [np.array(w) <span class="keyword">for</span> w <span class="keyword">in</span> data[<span class="string">&quot;weights&quot;</span>]]</span><br><span class="line">    net.biases = [np.array(b) <span class="keyword">for</span> b <span class="keyword">in</span> data[<span class="string">&quot;biases&quot;</span>]]</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Miscellaneous functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vectorized_result</span>(<span class="params">j</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a 10-dimensional unit vector with a 1.0 in the j&#x27;th position</span></span><br><span class="line"><span class="string">    and zeroes elsewhere.  This is used to convert a digit (0...9)</span></span><br><span class="line"><span class="string">    into a corresponding desired output from the neural network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    e = np.zeros((<span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">    e[j] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The sigmoid function.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span>+np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid_prime</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Derivative of the sigmoid function.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(z)*(<span class="number">1</span>-sigmoid(z))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="comment">#e^z/ sum(e^z)</span></span><br><span class="line">    ez = np.exp(z)</span><br><span class="line">    sum_ez = <span class="built_in">sum</span>(ez)</span><br><span class="line">    <span class="keyword">return</span> ez/sum_ez</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mnist_loader</span><br><span class="line">training_data, validation_data, test_data = mnist_loader.load_data_wrapper()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = load(<span class="string">&quot;./1.json&quot;</span>)</span><br><span class="line">net.accuracy(validation_data)</span><br></pre></td></tr></table></figure>




<pre><code>9385
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = load(<span class="string">&quot;./0.json&quot;</span>)</span><br><span class="line">net.accuracy(validation_data)</span><br></pre></td></tr></table></figure>




<pre><code>8904
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>neural networks and deep learning</tag>
        <tag>mlp</tag>
      </tags>
  </entry>
  <entry>
    <title>python numpy random shuffle and theano shuffle</title>
    <url>//blog/numpy-random-shuffle-and-theano-shuffle/</url>
    <content><![CDATA[<h2 id="Examples-of-shuffle"><a href="#Examples-of-shuffle" class="headerlink" title="Examples of shuffle"></a>Examples of shuffle</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">numpy.random.shuffle(x)</span></span><br><span class="line"><span class="string">Modify a sequence in-place by shuffling its contents.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">random.shuffle(list)只能对list进行随机打乱。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">x : array_like</span></span><br><span class="line"><span class="string">    The array or list to be shuffled.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Returns: None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This function only shuffles the array along the first index of a multi-dimensional array</span></span><br><span class="line"><span class="string">（多维矩阵中，只对第一维（行）做打乱顺序操作）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">10</span>)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.shuffle(arr)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 4, 7, 3, 0, 9, 5, 8, 2, 6])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于矩阵，按照row进行打乱。</span></span><br><span class="line">np.random.shuffle(arr)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>




<pre><code>array([[3, 4, 5],
       [0, 1, 2],
       [6, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于矩阵，按照row进行打乱。</span></span><br><span class="line">np.random.shuffle(arr)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>




<pre><code>array([[3, 4, 5],
       [6, 7, 8],
       [0, 1, 2]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># random.shuffle(list)</span></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.shuffle(l)</span><br><span class="line">l</span><br></pre></td></tr></table></figure>




<pre><code>[2, 9, 5, 8, 6, 3, 7, 1, 4, 0]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.shuffle(l)</span><br><span class="line">l</span><br></pre></td></tr></table></figure>




<pre><code>[3, 9, 2, 1, 5, 7, 8, 4, 0, 6]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Shuffe-two-sequences-at-the-same-time"><a href="#Shuffe-two-sequences-at-the-same-time" class="headerlink" title="Shuffe two sequences at the same time"></a>Shuffe two sequences at the same time</h2><p>shuffle的状态依赖于random.seed,np.random.seed，可以使用time作为seed</p>
<p>random.seed(time.time())</p>
<h3 id="2次shuffle的seed不一样，结果不一致"><a href="#2次shuffle的seed不一样，结果不一致" class="headerlink" title="2次shuffle的seed不一样，结果不一致"></a>2次shuffle的seed不一样，结果不一致</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">train_data = (np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">                       [<span class="number">4</span>,<span class="number">4</span>]]), np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]))</span><br><span class="line">x = train_data[<span class="number">0</span>]</span><br><span class="line">y = train_data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle x,y的时候，只要保证seed相同，那么shuffle之后的x,y对应元素的顺序保持一样</span></span><br><span class="line"><span class="comment">#np.random.seed(1)</span></span><br><span class="line">np.random.shuffle(x)</span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment">#np.random.seed(1)</span></span><br><span class="line">np.random.shuffle(y)</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span></span><br><span class="line"><span class="built_in">print</span> train_data</span><br></pre></td></tr></table></figure>

<pre><code>[[3 3]
 [1 1]
 [2 2]
 [4 4]]
[22 11 33 44]

(array([[3, 3],
       [1, 1],
       [2, 2],
       [4, 4]]), array([22, 11, 33, 44]))
</code></pre>
<h3 id="2次shuffle的seed一样，结果保持一致"><a href="#2次shuffle的seed一样，结果保持一致" class="headerlink" title="2次shuffle的seed一样，结果保持一致"></a>2次shuffle的seed一样，结果保持一致</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">train_data = (np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">                       [<span class="number">4</span>,<span class="number">4</span>]]), np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]))</span><br><span class="line">x = train_data[<span class="number">0</span>]</span><br><span class="line">y = train_data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle x,y的时候，只要保证seed相同，那么shuffle之后的x,y对应元素的顺序保持一样</span></span><br><span class="line">seed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">np.random.seed(seed)</span><br><span class="line">np.random.shuffle(x)</span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"></span><br><span class="line">np.random.seed(seed)</span><br><span class="line">np.random.shuffle(y)</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span></span><br><span class="line"><span class="built_in">print</span> train_data</span><br></pre></td></tr></table></figure>

<pre><code>[[4 4]
 [3 3]
 [1 1]
 [2 2]]
[44 33 11 22]

(array([[4, 4],
       [3, 3],
       [1, 1],
       [2, 2]]), array([44, 33, 11, 22]))
</code></pre>
<h3 id="shuffle-data-x-y"><a href="#shuffle-data-x-y" class="headerlink" title="shuffle_data(x,y)"></a>shuffle_data(x,y)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">train_data = (np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">                       [<span class="number">4</span>,<span class="number">4</span>]]), np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]))</span><br><span class="line">x = train_data[<span class="number">0</span>]</span><br><span class="line">y = train_data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle_data</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment">#seed = int(time.time()) </span></span><br><span class="line">    </span><br><span class="line">    seed = <span class="number">1</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    np.random.shuffle(x)</span><br><span class="line"></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    np.random.shuffle(y)</span><br><span class="line"></span><br><span class="line">shuffle_data(x,y)</span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> train_data</span><br></pre></td></tr></table></figure>

<pre><code>[[4 4]
 [3 3]
 [1 1]
 [2 2]]
[44 33 11 22]

(array([[4, 4],
       [3, 3],
       [1, 1],
       [2, 2]]), array([44, 33, 11, 22]))
</code></pre>
<h2 id="Shuffle-in-theano-with-TensorVariable"><a href="#Shuffle-in-theano-with-TensorVariable" class="headerlink" title="Shuffle in theano with TensorVariable"></a>Shuffle in theano with TensorVariable</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line">train_data = (np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">                       [<span class="number">4</span>,<span class="number">4</span>]],dtype=<span class="string">&#x27;float64&#x27;</span>), np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>],dtype=<span class="string">&#x27;int32&#x27;</span>))</span><br><span class="line">x = train_data[<span class="number">0</span>]</span><br><span class="line">y = train_data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle_data</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment">#seed = int(time.time()) </span></span><br><span class="line">    </span><br><span class="line">    seed = <span class="number">1</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    np.random.shuffle(x)</span><br><span class="line"></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    np.random.shuffle(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OK because of shared&lt;----&gt;train data</span></span><br><span class="line">shared_x = theano.shared(train_data[<span class="number">0</span>],  borrow=<span class="literal">True</span>) </span><br><span class="line">shared_y = theano.shared(train_data[<span class="number">1</span>],  borrow=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#shared_x = theano.shared(np.asarray(train_data[0], dtype=theano.config.floatX), borrow=True)  # no copy</span></span><br><span class="line"><span class="comment">#shared_y = theano.shared(np.asarray(train_data[1], dtype=theano.config.floatX), borrow=True)  # no copy</span></span><br><span class="line"></span><br><span class="line">y_cast = T.cast(shared_y,<span class="string">&quot;int32&quot;</span>) </span><br><span class="line"><span class="comment"># shared_y dtype int32, no copy, y_cast is  TensorSharedVariable(int32,vector)</span></span><br><span class="line"><span class="comment"># shared_y dtype float64, copy,  y_cast is  TensorVariable(int32,vector)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> shared_x.<span class="built_in">type</span>,shared_y.<span class="built_in">type</span>,y_cast.<span class="built_in">type</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(shared_x),<span class="built_in">type</span>(shared_y),<span class="built_in">type</span>(y_cast)</span><br><span class="line"><span class="built_in">print</span> shared_y <span class="keyword">is</span> y_cast</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;old train&#x27;</span></span><br><span class="line"><span class="built_in">print</span> train_data</span><br><span class="line"></span><br><span class="line"><span class="comment">#print &#x27;\nupdate train&#x27;</span></span><br><span class="line"><span class="comment">#x[0] = 100</span></span><br><span class="line"><span class="comment">#y[0] = 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;\nshuffle train&#x27;</span></span><br><span class="line"><span class="comment">#shuffle_data(train_data[0],train_data[1])</span></span><br><span class="line"></span><br><span class="line">originX = shared_x.get_value(borrow=<span class="literal">True</span>)</span><br><span class="line">originY = shared_y.get_value(borrow=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> originX <span class="keyword">is</span> x <span class="comment"># true </span></span><br><span class="line"><span class="built_in">print</span> originY <span class="keyword">is</span> y <span class="comment"># true</span></span><br><span class="line">shuffle_data(originX,originY)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> train_data</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;\nshared x and y&#x27;</span></span><br><span class="line"><span class="built_in">print</span> shared_x.get_value() </span><br><span class="line"><span class="built_in">print</span> shared_y.get_value()</span><br></pre></td></tr></table></figure>

<pre><code>WARNING (theano.sandbox.cuda): The cuda backend is deprecated and will be removed in the next release (v0.10).  Please switch to the gpuarray backend. You can get more information about how to switch at this URL:
 https://github.com/Theano/Theano/wiki/Converting-to-the-new-gpu-back-end%28gpuarray%29

WARNING (theano.sandbox.cuda): CUDA is installed, but device gpu is not available  (error: Unable to get the number of gpus available: no CUDA-capable device is detected)


TensorType(float64, matrix) TensorType(int32, vector) TensorType(int32, vector)
&lt;class &#39;theano.tensor.sharedvar.TensorSharedVariable&#39;&gt; &lt;class &#39;theano.tensor.sharedvar.TensorSharedVariable&#39;&gt; &lt;class &#39;theano.tensor.sharedvar.TensorSharedVariable&#39;&gt;
True
old train
(array([[ 1.,  1.],
       [ 2.,  2.],
       [ 3.,  3.],
       [ 4.,  4.]]), array([11, 22, 33, 44], dtype=int32))

shuffle train
True
True
(array([[ 4.,  4.],
       [ 3.,  3.],
       [ 1.,  1.],
       [ 2.,  2.]]), array([44, 33, 11, 22], dtype=int32))

shared x and y
[[ 4.  4.]
 [ 3.  3.]
 [ 1.  1.]
 [ 2.  2.]]
[44 33 11 22]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>theano</tag>
        <tag>numpy</tag>
        <tag>shuffle</tag>
      </tags>
  </entry>
  <entry>
    <title>python random and seed tutorial</title>
    <url>//blog/random-and-seed/</url>
    <content><![CDATA[<h2 id="Random-and-seed"><a href="#Random-and-seed" class="headerlink" title="Random and seed"></a>Random and seed</h2><p>所有标准库提供的Random函数其实都是假Random，真正的Random函数式不需要Seed的。</p>
<p>所谓假Random，是指所返回的随机数字其实是一个稳定算法所得出的稳定结果序列，而不是真正意义上的随机序列。 Seed就是这个算法开始计算的第一个值。所以就会出现<strong>只要seed是一样的，那么后续所有“随机”结果和顺序也都是完全一致的。</strong> </p>
<p>通常情况下，你可以用 DateTime.Now.Millisecend() 也就是当前时钟的毫秒来做Seed，因为毫秒对你来说是一个1000以内的随机数字。 这样可以大大改善标准库的Random结果的随机性。 不过这仍然算不上是完全随机，因为重复的概率还是千分之一。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># random.seed(1)</span></span><br><span class="line"><span class="comment"># np.random.seed(1)</span></span><br><span class="line"><span class="comment">#只要seed一样，不管运行多少次，每次产生的随机数都一样。</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> np.random.rand(<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[[  4.17022005e-01   7.20324493e-01   1.14374817e-04]
 [  3.02332573e-01   1.46755891e-01   9.23385948e-02]]
[[ 0.18626021]
 [ 0.34556073]
 [ 0.39676747]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只要seed一样，不管运行多少次，每次产生的随机数都一样。</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> np.random.rand(<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[[  4.17022005e-01   7.20324493e-01   1.14374817e-04]
 [  3.02332573e-01   1.46755891e-01   9.23385948e-02]]
[[ 0.18626021]
 [ 0.34556073]
 [ 0.39676747]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">random.random()</span><br></pre></td></tr></table></figure>




<pre><code>0.13436424411240122
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">random.random()</span><br></pre></td></tr></table></figure>




<pre><code>0.13436424411240122
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">6</span>, size=(<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[5, 3, 4, 0, 1],
       [3, 5, 0, 0, 1],
       [4, 5, 4, 1, 2],
       [4, 5, 2, 4, 3]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">6</span>, size=(<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[5, 3, 4, 0, 1],
       [3, 5, 0, 0, 1],
       [4, 5, 4, 1, 2],
       [4, 5, 2, 4, 3]])
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180806: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>numpy</tag>
        <tag>random</tag>
        <tag>seed</tag>
      </tags>
  </entry>
  <entry>
    <title>network3.py</title>
    <url>//blog/network3-py/</url>
    <content><![CDATA[<h2 id="network3-py"><a href="#network3-py" class="headerlink" title="network3.py"></a>network3.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;network3.py</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A Theano-based program for training and running simple neural</span></span><br><span class="line"><span class="string">networks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Supports several layer types (fully connected, convolutional, max</span></span><br><span class="line"><span class="string">pooling, softmax), and activation functions (sigmoid, tanh, and</span></span><br><span class="line"><span class="string">rectified linear units, with more easily added).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">When run on a CPU, this program is much faster than network.py and</span></span><br><span class="line"><span class="string">network2.py.  However, unlike network.py and network2.py it can also</span></span><br><span class="line"><span class="string">be run on a GPU, which makes it faster still.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Because the code is based on Theano, the code is different in many</span></span><br><span class="line"><span class="string">ways from network.py and network2.py.  However, where possible I have</span></span><br><span class="line"><span class="string">tried to maintain consistency with the earlier programs.  In</span></span><br><span class="line"><span class="string">particular, the API is similar to network2.py.  Note that I have</span></span><br><span class="line"><span class="string">focused on making the code simple, easily readable, and easily</span></span><br><span class="line"><span class="string">modifiable.  It is not optimized, and omits many desirable features.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This program incorporates ideas from the Theano documentation on</span></span><br><span class="line"><span class="string">convolutional neural nets (notably,</span></span><br><span class="line"><span class="string">http://deeplearning.net/tutorial/lenet.html ), from Misha Denil&#x27;s</span></span><br><span class="line"><span class="string">implementation of dropout (https://github.com/mdenil/dropout ), and</span></span><br><span class="line"><span class="string">from Chris Olah (http://colah.github.io ).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Written for Theano 0.6 and 0.7, needs some changes for more recent</span></span><br><span class="line"><span class="string">versions of Theano.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对于N=50000数据全部参与训练，time(python) = 7分钟; time(theano) = 1分钟。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">But the big win is the ability to do fast symbolic differentiation, </span></span><br><span class="line"><span class="string">using a very general form of the backpropagation algorithm. </span></span><br><span class="line"><span class="string">This is extremely useful for applying stochastic gradient</span></span><br><span class="line"><span class="string">descent to a wide variety of network architectures.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Libraries</span></span><br><span class="line"><span class="comment"># Standard library</span></span><br><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third-party libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> conv</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> softmax</span><br><span class="line"><span class="keyword">from</span> theano.tensor <span class="keyword">import</span> shared_randomstreams</span><br><span class="line"><span class="comment">#from theano.tensor.signal.downsample import max_pool_2d  # for version theano-0.7</span></span><br><span class="line"><span class="keyword">from</span> theano.tensor.signal.pool <span class="keyword">import</span> pool_2d <span class="comment"># for version theano-0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Activation functions for neurons</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear</span>(<span class="params">z</span>): <span class="keyword">return</span> z</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReLU</span>(<span class="params">z</span>): <span class="keyword">return</span> T.maximum(<span class="number">0.0</span>, z)</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> sigmoid</span><br><span class="line"><span class="keyword">from</span> theano.tensor <span class="keyword">import</span> tanh</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Load the MNIST data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_shared</span>(<span class="params">filename=<span class="string">&quot;../data/mnist.pkl.gz&quot;</span>,training_set_size=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;loading data from &#123;0&#125; of #&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(filename,training_set_size)</span><br><span class="line">    f = gzip.<span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    training_data, validation_data, test_data = cPickle.load(f) <span class="comment"># float32(N,784); int64(N,)</span></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shared</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Place the data into shared variables.  This allows Theano to copy</span></span><br><span class="line"><span class="string">        the data to the GPU, if one is available.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        shared_x.get_value().shape   float32(50000, 784)</span></span><br><span class="line"><span class="string">        shared_y.get_value().shape   float32(50000,)   </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        y_cast = T.cast(shared_y, &quot;int8&quot;) # float32---&gt;int8</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        shared_x.type  TensorType(float32, matrix)  theano.tensor.sharedvar.TensorSharedVariable</span></span><br><span class="line"><span class="string">        shared_y.type  TensorType(float32, vector)  theano.tensor.sharedvar.TensorSharedVariable</span></span><br><span class="line"><span class="string">        y_cast.type    TensorType(int32, vector)    theano.tensor.var.TensorVariable  (y_cast不是shared变量)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 默认floatX = float64,在运行的时候需要设置floatX = float32</span></span><br><span class="line">        <span class="comment"># 取x[N,784],y[N]的前training_set_size个样本参与训练</span></span><br><span class="line">        shared_x = theano.shared(np.asarray(data[<span class="number">0</span>][:training_set_size,],dtype=theano.config.floatX), borrow=<span class="literal">True</span>)  </span><br><span class="line">        shared_y = theano.shared(np.asarray(data[<span class="number">1</span>][:training_set_size], dtype=theano.config.floatX), borrow=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># shared变量中的数据在GPU上必须是float32类型，但是计算阶段可能需要int类型(y)，所以需要将float32---&gt;int.</span></span><br><span class="line">        <span class="comment"># 并且int8类型需要和　self.y = T.bvector(&quot;y&quot;)的b类型一样。</span></span><br><span class="line">        <span class="comment"># When storing data on the GPU it has to be stored as floats</span></span><br><span class="line">        <span class="comment"># therefore we will store the labels as ``floatX`` as well</span></span><br><span class="line">        <span class="comment"># (``shared_y`` does exactly that). But during our computations</span></span><br><span class="line">        <span class="comment"># we need them as ints (we use labels as index, and if they are</span></span><br><span class="line">        <span class="comment"># floats it doesn&#x27;t make sense) therefore instead of returning</span></span><br><span class="line">        <span class="comment"># ``shared_y`` we will have to cast it to int. This little hack</span></span><br><span class="line">        <span class="comment"># lets us get around this issue</span></span><br><span class="line">        <span class="keyword">return</span> shared_x, T.cast(shared_y, <span class="string">&#x27;int8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> [shared(training_data), shared(validation_data), shared(test_data)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_expanded</span>(<span class="params">filename=<span class="string">&quot;../data/mnist_expanded.pkl.gz&quot;</span>,training_set_size=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="keyword">return</span> load_data_shared(filename=filename,training_set_size=training_set_size)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Main class used to construct and train networks</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, layers, mini_batch_size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Takes a list of `layers`, describing the network architecture, and</span></span><br><span class="line"><span class="string">        a value for the `mini_batch_size` to be used during training</span></span><br><span class="line"><span class="string">        by stochastic gradient descent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.layers = layers</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.layers)&gt;=<span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.mini_batch_size = mini_batch_size</span><br><span class="line">        <span class="variable language_">self</span>.params = [param <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable language_">self</span>.layers <span class="keyword">for</span> param <span class="keyword">in</span> layer.params]</span><br><span class="line">        <span class="variable language_">self</span>.x = T.matrix(<span class="string">&quot;x&quot;</span>)  <span class="comment"># batch x  float32,(m,784) 不需要指定fmatrix</span></span><br><span class="line">        <span class="variable language_">self</span>.y = T.bvector(<span class="string">&quot;y&quot;</span>)  <span class="comment"># batch y   int8,(m,)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># first layer init with inpt=x,inpt_dropout=x</span></span><br><span class="line">        init_layer = <span class="variable language_">self</span>.layers[<span class="number">0</span>]</span><br><span class="line">        init_layer.set_inpt(<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.x, <span class="variable language_">self</span>.mini_batch_size)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.layers)):</span><br><span class="line">            prev_layer, layer  = <span class="variable language_">self</span>.layers[j-<span class="number">1</span>], <span class="variable language_">self</span>.layers[j]</span><br><span class="line">            layer.set_inpt(prev_layer.output, prev_layer.output_dropout, <span class="variable language_">self</span>.mini_batch_size)</span><br><span class="line">            </span><br><span class="line">        <span class="variable language_">self</span>.output = <span class="variable language_">self</span>.layers[-<span class="number">1</span>].output</span><br><span class="line">        <span class="variable language_">self</span>.output_dropout = <span class="variable language_">self</span>.layers[-<span class="number">1</span>].output_dropout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SGD</span>(<span class="params">self, training_data, epochs, mini_batch_size, eta,</span></span><br><span class="line"><span class="params">            validation_data, test_data, lmbda=<span class="number">0.0</span>,</span></span><br><span class="line"><span class="params">            no_improvement_in_n=<span class="number">20</span>,use_constant_eta=<span class="literal">True</span>, <span class="comment"># default not vary eta because accuracy not imporved too much</span></span></span><br><span class="line"><span class="params">            eta_shrink_times=<span class="number">10</span>,eta_descrease_factor = <span class="number">0.0001</span></span>):</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;Train the network using mini-batch stochastic gradient descent.&quot;&quot;&quot;</span></span><br><span class="line">        training_x, training_y = training_data       <span class="comment"># (N,784) (N,)</span></span><br><span class="line">        validation_x, validation_y = validation_data</span><br><span class="line">        test_x, test_y = test_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">        num_training_batches = size(training_data)/mini_batch_size</span><br><span class="line">        num_validation_batches = size(validation_data)/mini_batch_size</span><br><span class="line">        num_test_batches = size(test_data)/mini_batch_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># define the (regularized) cost function, symbolic gradients, and updates</span></span><br><span class="line">        l2_norm_squared = <span class="built_in">sum</span>([(layer.w**<span class="number">2</span>).<span class="built_in">sum</span>() <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable language_">self</span>.layers])</span><br><span class="line">        cost0 = <span class="variable language_">self</span>.layers[-<span class="number">1</span>].cost(<span class="variable language_">self</span>) <span class="comment"># 计算最后一层的输出代价，传递Network作为net参数</span></span><br><span class="line">        </span><br><span class="line">        cost = cost0 + <span class="number">0.5</span>*lmbda*l2_norm_squared/size(training_data)  <span class="comment"># ??? N instead of num_training_batches</span></span><br><span class="line">        grads = T.grad(cost, <span class="variable language_">self</span>.params)</span><br><span class="line">        </span><br><span class="line">        shared_eta = theano.shared(eta,borrow=<span class="literal">True</span>) <span class="comment">#(same as shared_b) use SharedVariable instead of value</span></span><br><span class="line">        </span><br><span class="line">        updates = [(param, param-T.cast(shared_eta*grad,dtype=theano.config.floatX)) <span class="keyword">for</span> param, grad <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.params, grads)] </span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        grad(float32),没有指定floatX=float32,则eta*grad(float64),指定之后eta*grad(float32)，无需cast</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        #for param, grad in zip(self.params, grads):</span></span><br><span class="line"><span class="string">        #    print param.type,grad.type,(eta*grad).type</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        # updates = [(param, T.cast(param-eta*grad,&#x27;float32&#x27;) ) for param, grad in zip(self.params, grads)]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># define functions to train a mini-batch, and to compute the</span></span><br><span class="line">        <span class="comment"># accuracy in validation and test mini-batches.</span></span><br><span class="line">        i = T.lscalar() <span class="comment"># mini-batch index</span></span><br><span class="line">        train_mb = theano.function(</span><br><span class="line">            [i], cost, updates=updates, <span class="comment"># 给定i,===&gt;x,y===&gt;cost中的x,y被替换掉，从而计算mini-batch的代价，最后updates</span></span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                training_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                training_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># cost and accuracy for train,val,test</span></span><br><span class="line">        <span class="comment"># (1) train</span></span><br><span class="line">        train_mb_cost = theano.function(</span><br><span class="line">            [i], cost,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                training_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                training_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;) </span><br><span class="line">        train_mb_accuracy = theano.function(</span><br><span class="line">            [i], <span class="variable language_">self</span>.layers[-<span class="number">1</span>].accuracy(<span class="variable language_">self</span>.y), <span class="comment"># y(m,)</span></span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                training_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                training_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;) </span><br><span class="line">        <span class="comment"># (2) val</span></span><br><span class="line">        validate_mb_cost = theano.function(</span><br><span class="line">            [i], cost,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                validation_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                validation_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        validate_mb_accuracy = theano.function(</span><br><span class="line">            [i], <span class="variable language_">self</span>.layers[-<span class="number">1</span>].accuracy(<span class="variable language_">self</span>.y), <span class="comment"># y(m,)</span></span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                validation_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                validation_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="comment"># (3) test</span></span><br><span class="line">        test_mb_cost = theano.function(</span><br><span class="line">            [i], cost,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                test_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                test_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        test_mb_accuracy = theano.function(</span><br><span class="line">            [i], <span class="variable language_">self</span>.layers[-<span class="number">1</span>].accuracy(<span class="variable language_">self</span>.y), <span class="comment"># y(m,)</span></span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                test_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size],</span><br><span class="line">                <span class="variable language_">self</span>.y:</span><br><span class="line">                test_y[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="variable language_">self</span>.test_mb_predictions = theano.function(</span><br><span class="line">            [i], <span class="variable language_">self</span>.layers[-<span class="number">1</span>].y_out,   <span class="comment"># y(m,)　m个样本的预测结果</span></span><br><span class="line">            givens=&#123;</span><br><span class="line">                <span class="variable language_">self</span>.x:</span><br><span class="line">                test_x[i*<span class="variable language_">self</span>.mini_batch_size: (i+<span class="number">1</span>)*<span class="variable language_">self</span>.mini_batch_size]</span><br><span class="line">            &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         def shuffle_data(x,y):</span></span><br><span class="line"><span class="string">            seed = int(time.time()) </span></span><br><span class="line"><span class="string">            np.random.seed(seed)</span></span><br><span class="line"><span class="string">            np.random.shuffle(x)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            np.random.seed(seed)</span></span><br><span class="line"><span class="string">            np.random.shuffle(y)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        def shuffle_training_data(training_x,training_y):</span></span><br><span class="line"><span class="string">            # CPU, OK; GPU, FAILED (在GPU中borrow失效)</span></span><br><span class="line"><span class="string">            originX = training_x.get_value(borrow=True) # shared---&gt; nparray</span></span><br><span class="line"><span class="string">            originY = training_y.get_value(borrow=True) # shared---&gt; nparray</span></span><br><span class="line"><span class="string">            shuffle_data(originX,originY)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        evaluation_costs, evaluation_accuracys = [], []</span><br><span class="line">        training_costs, training_accuracys = [], []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># use no-improvement-in-n early stopping</span></span><br><span class="line">        <span class="comment"># 记录best_validation_accuracy,best_epoch，如果epoch-best_epoch&gt;=no_improvement_in_n,stop</span></span><br><span class="line">        best_epoch = <span class="number">0</span></span><br><span class="line">        cur_eta_shrink_times = <span class="number">0</span> <span class="comment"># if cur_eta_shrink_times&gt;=eta_shrink_times,stop</span></span><br><span class="line">        best_validation_accuracy = <span class="number">0.0</span> <span class="comment"># with gpu, numpy.float64</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> xrange(epochs):</span><br><span class="line">            <span class="comment">#random.shuffle(training_data) # for list[(x1,y1),(x2,y2),...] 此处training_data是(X,Y)</span></span><br><span class="line">            <span class="comment"># shuffle_training_data(training_x,training_y) # FAILED on GPU</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> xrange(num_training_batches):</span><br><span class="line">                <span class="comment"># iteration记录训练次数，每训练1000次输出一次</span></span><br><span class="line">                iteration = num_training_batches*epoch+minibatch_index</span><br><span class="line">                <span class="keyword">if</span> iteration % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Training mini-batch number &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(iteration))</span><br><span class="line">                cost_ij = train_mb(minibatch_index)</span><br><span class="line">           </span><br><span class="line">            <span class="comment"># 一个epoch训练结束，训练了num_training_batches次，iterration=4999。利用w,b计算一次验证accuracy</span></span><br><span class="line">            <span class="comment">#if (iteration+1) % num_training_batches == 0:</span></span><br><span class="line">            validation_cost = np.mean( [validate_mb_cost(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_validation_batches)] )</span><br><span class="line">            validation_accuracy = np.mean( [validate_mb_accuracy(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_validation_batches)] )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\nEpoch &#123;0&#125;: validation accuracy &#123;1:.2%&#125;&quot;</span>.<span class="built_in">format</span>(epoch, validation_accuracy))</span><br><span class="line"></span><br><span class="line">            train_cost = np.mean( [train_mb_cost(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_training_batches)] )</span><br><span class="line">            train_accuracy = np.mean( [train_mb_accuracy(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_training_batches)] )</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># save 4 return lists</span></span><br><span class="line">            evaluation_costs.append(validation_cost)</span><br><span class="line">            evaluation_accuracys.append(validation_accuracy)</span><br><span class="line">            training_costs.append(train_cost)</span><br><span class="line">            training_accuracys.append(train_accuracy)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#记录best_validation_accuracy</span></span><br><span class="line">            <span class="comment"># 关键在于&lt;,满足足够多的NIIN,才能满足eta_shrink_times&gt;=10</span></span><br><span class="line">            <span class="keyword">if</span> best_validation_accuracy - validation_accuracy &lt; <span class="number">0.0</span>:  <span class="comment"># &lt;=</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;This is the best validation accuracy to date.&quot;</span>)</span><br><span class="line">                best_validation_accuracy = validation_accuracy</span><br><span class="line">                best_epoch = epoch</span><br><span class="line">                best_iteration = iteration</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># save best network</span></span><br><span class="line">                best_net = copy.deepcopy(<span class="variable language_">self</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">#计算在val取得最佳accuracy情况下，test数据集的accuracy</span></span><br><span class="line">                <span class="keyword">if</span> test_data:</span><br><span class="line">                    test_accuracy = np.mean( [test_mb_accuracy(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_test_batches)] )</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;The corresponding test accuracy is &#123;0:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(test_accuracy))</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">#============================================================================================</span></span><br><span class="line">            <span class="comment"># early stopping with variable learning rate</span></span><br><span class="line">            <span class="comment"># (1) (epoch - best_epoch) &gt;= no_improvement_in_n: stop   NIIN = 20</span></span><br><span class="line">            <span class="comment"># (2) new_eta = 1/2*eta until new_eta&lt;=1/1024*eta         ETA_SHRINK_TIME = 10 </span></span><br><span class="line">            <span class="comment">#============================================================================================</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># check in last epoch of NIIN stage</span></span><br><span class="line">            <span class="keyword">if</span> (epoch+<span class="number">1</span>) % no_improvement_in_n == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># (1) check NIIN</span></span><br><span class="line">                <span class="keyword">if</span> (epoch - best_epoch) &gt;= no_improvement_in_n:</span><br><span class="line">                    <span class="comment"># stop learning</span></span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&#x27;!&#x27;</span>*<span class="number">100</span></span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&#x27;[HIT] Early stopping at epoch #&#123;0&#125;,best_epoch #&#123;1&#125;,iteration #&#123;2&#125;,validation accuracy &#123;3:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(epoch,best_epoch,best_iteration,best_validation_accuracy)</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&#x27;!&#x27;</span>*<span class="number">100</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">#******************************************************************************</span></span><br><span class="line">                    <span class="keyword">if</span> use_constant_eta:</span><br><span class="line">                        <span class="keyword">break</span> <span class="comment"># goto (2) instead of break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># (2) shrink eta to 1/2*eta　　(accuracy not improved too much)</span></span><br><span class="line">                        <span class="built_in">print</span> <span class="string">&#x27;cur_eta_shrink_times = &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(cur_eta_shrink_times)</span><br><span class="line">                        <span class="keyword">if</span> cur_eta_shrink_times &gt;= eta_shrink_times:</span><br><span class="line">                            <span class="built_in">print</span> <span class="string">&#x27;+&#x27;</span>*<span class="number">100</span></span><br><span class="line">                            <span class="built_in">print</span> <span class="string">&#x27;[HIT] Eta shrink OK. at epoch #&#123;0&#125;,best_epoch #&#123;1&#125;,iteration #&#123;2&#125;,validation accuracy &#123;3:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(epoch,best_epoch,best_iteration,best_validation_accuracy)</span><br><span class="line">                            <span class="built_in">print</span> <span class="string">&#x27;+&#x27;</span>*<span class="number">100</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                        cur_eta_shrink_times +=<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment"># update eta every epoch</span></span><br><span class="line">                        eta_descrease_factor = <span class="number">0.0001</span></span><br><span class="line">                        new_eta = eta/(<span class="number">1.0</span>+eta_descrease_factor*(epoch+<span class="number">1</span>))</span><br><span class="line">                        shared_eta.set_value(np.asarray(new_eta,dtype=theano.config.floatX),borrow=<span class="literal">True</span>) <span class="comment"># update eta</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">#eta = eta/2.0 </span></span><br><span class="line">                        <span class="comment">#shared_eta.set_value(np.asarray(eta,dtype=theano.config.floatX),borrow=True) # update eta</span></span><br><span class="line">                    <span class="comment">#******************************************************************************</span></span><br><span class="line">            <span class="comment">#============================================================================================</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        <span class="comment"># once early stopping, we save the best model to file</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;best_model.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;Saving best mode to best_model.pkl...&#x27;</span></span><br><span class="line">            cPickle.dump(best_net, fp)</span><br><span class="line">                    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nFinished training network.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Best validation accuracy of &#123;0:.2%&#125; obtained at best_epoch &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(best_validation_accuracy, best_epoch))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Corresponding test accuracy of &#123;0:.2%&#125;&quot;</span>.<span class="built_in">format</span>(test_accuracy))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> evaluation_costs, evaluation_accuracys, training_costs, training_accuracys,best_epoch <span class="comment"># for plot</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#********************************************************</span></span><br><span class="line"><span class="comment"># load model and predict on test data</span></span><br><span class="line"><span class="comment">#********************************************************</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_network_and_predict</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    An example of how to load a trained model and use it</span></span><br><span class="line"><span class="string">    to predict labels.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># load the saved model</span></span><br><span class="line">    net = cPickle.load(<span class="built_in">open</span>(<span class="string">&#x27;best_model.pkl&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># predict</span></span><br><span class="line">    training_set_size = <span class="number">50000</span></span><br><span class="line">    train_data,val_data,test_data = load_data_shared(training_set_size=training_set_size)</span><br><span class="line">    test_x,test_y = test_data</span><br><span class="line">    </span><br><span class="line">    mini_batch_size = <span class="number">10</span></span><br><span class="line">    num_test_batches = size(test_data)/mini_batch_size </span><br><span class="line">    </span><br><span class="line">    i = T.lscalar()</span><br><span class="line">    <span class="comment"># test predict</span></span><br><span class="line">    test_mb_predictions = theano.function(</span><br><span class="line">        [i], net.layers[-<span class="number">1</span>].y_out,   <span class="comment"># y(m,)　m个样本的预测结果</span></span><br><span class="line">        givens=&#123;</span><br><span class="line">            net.x:</span><br><span class="line">            test_x[i*mini_batch_size: (i+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># test accuracy</span></span><br><span class="line">    test_mb_accuracy = theano.function(</span><br><span class="line">        [i], net.layers[-<span class="number">1</span>].accuracy(net.y), <span class="comment"># y(m,)</span></span><br><span class="line">        givens=&#123;</span><br><span class="line">            net.x:</span><br><span class="line">            test_x[i*mini_batch_size: (i+<span class="number">1</span>)*mini_batch_size],</span><br><span class="line">            net.y:</span><br><span class="line">            test_y[i*mini_batch_size: (i+<span class="number">1</span>)*mini_batch_size]</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    test_predictions = test_mb_predictions(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;real values of first 10: &#x27;</span>,test_y[:<span class="number">10</span>].<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;predictions of first 10: &#x27;</span>,test_predictions</span><br><span class="line">    </span><br><span class="line">    test_accuracy = np.mean( [test_mb_accuracy(j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_test_batches)] )</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;test_accuracy &#x27;</span>,test_accuracy</span><br><span class="line">    </span><br><span class="line"><span class="comment">#********************************************************</span></span><br><span class="line"><span class="comment"># end of predict</span></span><br><span class="line"><span class="comment">#********************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Define layer types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvPoolLayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Used to create a combination of a convolutional and a max-pooling</span></span><br><span class="line"><span class="string">    layer.  A more sophisticated implementation would separate the</span></span><br><span class="line"><span class="string">    two, but for our purposes we&#x27;ll always use them together, and it</span></span><br><span class="line"><span class="string">    simplifies the code, so it makes sense to combine them.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filter_shape, image_shape, poolsize=(<span class="params"><span class="number">2</span>, <span class="number">2</span></span>),</span></span><br><span class="line"><span class="params">                 activation_fn=sigmoid</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;`filter_shape` is a tuple of length 4, whose entries are the number</span></span><br><span class="line"><span class="string">        of filters, the number of input feature maps, the filter height, and the</span></span><br><span class="line"><span class="string">        filter width.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        `image_shape` is a tuple of length 4, whose entries are the</span></span><br><span class="line"><span class="string">        mini-batch size, the number of input feature maps, the image</span></span><br><span class="line"><span class="string">        height, and the image width.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        `poolsize` is a tuple of length 2, whose entries are the y and</span></span><br><span class="line"><span class="string">        x pooling sizes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        np.prod((2,2)) = 4 # int64</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer1</span></span><br><span class="line"><span class="string">        image_shape=(m,1,28,28)  1*28*28   (1 input feature map)</span></span><br><span class="line"><span class="string">        filter_shape=(20,1,5,5)  20*24*24 </span></span><br><span class="line"><span class="string">        poolsize=(2,2)           20*12*12 </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer2</span></span><br><span class="line"><span class="string">        image_shape=(m,20,12,12) 20*12*12  (20 input feature map)</span></span><br><span class="line"><span class="string">        filter_shape=(40,20,5,5) 40*8*8</span></span><br><span class="line"><span class="string">        poolsize=(2,2)           40*4*4</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer1</span></span><br><span class="line"><span class="string">        (20,1,5,5) </span></span><br><span class="line"><span class="string">        20指定当前ConvLayer1的features的数量: c1_f1,c1_f2,....c1_f19,c1_f20。</span></span><br><span class="line"><span class="string">        (1,5,5)指定feature的一个pixel所对应的local receptive field(LRF),此处对应1个input feature的5*5区域。</span></span><br><span class="line"><span class="string">        对应的w: w1,w2,...w19,w20 of size(1,5,5)===&gt;w(20,1,5,5) filter_shape</span></span><br><span class="line"><span class="string">        对应的b: b1,b2,...b19,b20 of size()     ===&gt;b(20,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ConvPoolLayer2</span></span><br><span class="line"><span class="string">        (40,20,5,5) </span></span><br><span class="line"><span class="string">        40指定当前ConvLayer2的features的数量: c2_f1,c2_f2,....c2_f39,c2_f40。</span></span><br><span class="line"><span class="string">        (20,5,5)指定feature的一个pixel所对应的local receptive field(LRF),此处对应20个input feature的5*5区域。</span></span><br><span class="line"><span class="string">        对应的w: w1,w2,...w39,w40 of size(20,5,5)===&gt;w(40,20,5,5) filter_shape</span></span><br><span class="line"><span class="string">        对应的b: b1,b2,...b39,b40 of size()     ===&gt;b(40,)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> image_shape[<span class="number">1</span>] == filter_shape[<span class="number">1</span>] <span class="comment"># input feature maps</span></span><br><span class="line">        <span class="variable language_">self</span>.filter_shape = filter_shape</span><br><span class="line">        <span class="variable language_">self</span>.image_shape = image_shape</span><br><span class="line">        <span class="variable language_">self</span>.poolsize = poolsize</span><br><span class="line">        <span class="variable language_">self</span>.activation_fn=activation_fn</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># initialize weights and biases</span></span><br><span class="line">        <span class="comment"># 20*(5*5)/(2*2) = 500/4 = 125</span></span><br><span class="line">        <span class="comment"># 40*(5*5)/(2*2) = 1000/4 = 250</span></span><br><span class="line">        <span class="comment">#n_out = (filter_shape[0]*np.prod(filter_shape[2:])/np.prod(poolsize)) # 125  250 (why???)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for tanh: w_bound = numpy.sqrt(6./(n_in+n_out))</span></span><br><span class="line">        <span class="comment"># for sigmoid: w_bound = 4*w_bound(tanh)</span></span><br><span class="line">        <span class="comment"># for ReLU: w = 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># there are &quot;num input feature maps * filter height * filter width&quot; inputs to each hidden unit</span></span><br><span class="line">        n_in = np.prod(filter_shape[<span class="number">1</span>:]) <span class="comment"># LRF</span></span><br><span class="line">        <span class="comment"># each unit in the lower layer receives a gradient from:</span></span><br><span class="line">        <span class="comment"># &quot;num output feature maps * filter height * filter width&quot; / pooling size</span></span><br><span class="line">        n_out = (filter_shape[<span class="number">0</span>] * np.prod(filter_shape[<span class="number">2</span>:]) // np.prod(poolsize))</span><br><span class="line">        </span><br><span class="line">        w_bound = np.sqrt(<span class="number">6.</span>/(n_in+n_out))</span><br><span class="line">        <span class="keyword">if</span> activation_fn == sigmoid:</span><br><span class="line">            w_bound = <span class="number">4</span>*w_bound</span><br><span class="line">            </span><br><span class="line">        <span class="variable language_">self</span>.w = theano.shared(</span><br><span class="line">            np.asarray(</span><br><span class="line">                <span class="comment">#np.random.normal(loc=0, scale=np.sqrt(1.0/n_out), </span></span><br><span class="line">                np.random.uniform(low=-w_bound,high=w_bound, </span><br><span class="line">                                 size=filter_shape), </span><br><span class="line">                <span class="comment"># w(20,1,5,5) w(40,20,5,5)</span></span><br><span class="line">                dtype=theano.config.floatX),</span><br><span class="line">            borrow=<span class="literal">True</span>) </span><br><span class="line">        <span class="variable language_">self</span>.b = theano.shared(</span><br><span class="line">            np.asarray(</span><br><span class="line">                np.random.normal(loc=<span class="number">0</span>, scale=<span class="number">1.0</span>, size=(filter_shape[<span class="number">0</span>],)), </span><br><span class="line">                <span class="comment"># b(20,) b(40,)</span></span><br><span class="line">                dtype=theano.config.floatX),</span><br><span class="line">            borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.params = [<span class="variable language_">self</span>.w, <span class="variable language_">self</span>.b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_inpt</span>(<span class="params">self, inpt, inpt_dropout, mini_batch_size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        inpt = x:  fmatrix(m,784)</span></span><br><span class="line"><span class="string">        ConvPoolLayer1</span></span><br><span class="line"><span class="string">        image_shape=(m,1,28,28)  m,1*28*28   (1 input feature map)</span></span><br><span class="line"><span class="string">        filter_shape=(20,1,5,5)  m,20*24*24   w(20,1,5,5) b(20,)</span></span><br><span class="line"><span class="string">        poolsize=(2,2)           m,20*12*12 </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer2</span></span><br><span class="line"><span class="string">        image_shape=(m,20,12,12) m,20*12*12  (20 input feature map)</span></span><br><span class="line"><span class="string">        filter_shape=(40,20,5,5) m,40*8*8     w(40,20,5,5) b(40,)</span></span><br><span class="line"><span class="string">        poolsize=(2,2)           m,40*4*4</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer1</span></span><br><span class="line"><span class="string">        inpt(m,784)---&gt;inpt(m,1,28,28)</span></span><br><span class="line"><span class="string">        conv_out(m,20,24,24)</span></span><br><span class="line"><span class="string">        pooled_out(m,20,12,12)</span></span><br><span class="line"><span class="string">        output(m,20,12,12)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer2</span></span><br><span class="line"><span class="string">        inpt(m,20,12,12)</span></span><br><span class="line"><span class="string">        conv_out(m,40,8,8)</span></span><br><span class="line"><span class="string">        pooled_out(m,40,4,4)</span></span><br><span class="line"><span class="string">        output(m,40,4,4)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.inpt = inpt.reshape(<span class="variable language_">self</span>.image_shape)</span><br><span class="line">        conv_out = conv.conv2d( <span class="built_in">input</span>=<span class="variable language_">self</span>.inpt, image_shape=<span class="variable language_">self</span>.image_shape, </span><br><span class="line">                               filters=<span class="variable language_">self</span>.w, filter_shape=<span class="variable language_">self</span>.filter_shape) </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#conv_out = conv.conv2d(input=self.inpt,filters=self.w) </span></span><br><span class="line">        <span class="comment">#theano.tensor.var.TensorVariable float32 TensorType(float32, 4D)</span></span><br><span class="line">        </span><br><span class="line">        pooled_out = pool_2d( <span class="built_in">input</span>=conv_out, ws=<span class="variable language_">self</span>.poolsize, ignore_border=<span class="literal">True</span>) </span><br><span class="line">        <span class="comment">#theano.tensor.var.TensorVariable float32 TensorType(float32, 4D)</span></span><br><span class="line">        </span><br><span class="line">        b_shuffle = <span class="variable language_">self</span>.b.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">        <span class="comment"># TensorVariable TensorType(float32, (True, False, True, True))</span></span><br><span class="line">        <span class="comment"># ConvPoolLayer1: b(20,) 20个feature map分别增加b0,b1,...b19,b20</span></span><br><span class="line">        <span class="comment"># 对于pooled_out=(m,20,12,12)而言，(&#x27;x&#x27;, 0, &#x27;x&#x27;, &#x27;x&#x27;)的dim2=0，其他为x</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># ConvPoolLayer2: b(40,) 40个feature map分别增加b0,b1,...b39,b40</span></span><br><span class="line">        <span class="comment"># 对于pooled_out=(m,40,4,4)而言，(&#x27;x&#x27;, 0, &#x27;x&#x27;, &#x27;x&#x27;)的dim2=0，其他为x</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.output = <span class="variable language_">self</span>.activation_fn( pooled_out + b_shuffle )</span><br><span class="line">        <span class="comment">#theano.tensor.var.TensorVariable float32 TensorType(float32, 4D)</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.output_dropout = <span class="variable language_">self</span>.output <span class="comment"># no dropout in the convolutional layers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FullyConnectedLayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_in, n_out, activation_fn=sigmoid, p_dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n_in = n_in</span><br><span class="line">        <span class="variable language_">self</span>.n_out = n_out</span><br><span class="line">        <span class="variable language_">self</span>.activation_fn = activation_fn</span><br><span class="line">        <span class="variable language_">self</span>.p_dropout = p_dropout</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#rng = numpy.random.RandomState(1234) # for w initialization</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for tanh: w_bound = numpy.sqrt(6./(n_in+n_out))</span></span><br><span class="line">        <span class="comment"># for sigmoid: w_bound = 4*w_bound(tanh)</span></span><br><span class="line">        <span class="comment"># for ReLU: w = 0</span></span><br><span class="line">        </span><br><span class="line">        w_bound = np.sqrt(<span class="number">6.</span>/(n_in+n_out))</span><br><span class="line">        <span class="keyword">if</span> activation_fn == sigmoid:</span><br><span class="line">            w_bound = <span class="number">4</span>*w_bound</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Initialize weights and biases</span></span><br><span class="line">        <span class="variable language_">self</span>.w = theano.shared(</span><br><span class="line">            np.asarray(</span><br><span class="line">                <span class="comment">#np.random.normal(loc=0.0, scale=np.sqrt(1.0/n_in),</span></span><br><span class="line">                np.random.uniform(low=-w_bound,high=w_bound,          </span><br><span class="line">                size=(n_in, n_out)),</span><br><span class="line">                dtype=theano.config.floatX),</span><br><span class="line">            name=<span class="string">&#x27;w&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.b = theano.shared(</span><br><span class="line">            np.asarray(np.random.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=(n_out,)),</span><br><span class="line">                       dtype=theano.config.floatX),</span><br><span class="line">            name=<span class="string">&#x27;b&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.params = [<span class="variable language_">self</span>.w, <span class="variable language_">self</span>.b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_inpt</span>(<span class="params">self, inpt, inpt_dropout, mini_batch_size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        (1) inpt,output for validating and testing</span></span><br><span class="line"><span class="string">        (2) inpt_dropout,output_dropout for training (output_dropout---&gt;[cost]---&gt;grad---&gt;params)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        以 ConvPoolLayer1(m,20,12,12),ConvPoolLayer2(m,40,4,4),[640,30,10]网络结构为例说明：</span></span><br><span class="line"><span class="string">        ************************************************************************************************</span></span><br><span class="line"><span class="string">        X(m,784),Y(m,)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer1:</span></span><br><span class="line"><span class="string">        当前层的inpt是前一层的output，因为是第一层，所以初始化为inpt = X(m,784)</span></span><br><span class="line"><span class="string">        inpt(m,784)---&gt;inpt(m,1,28,28)</span></span><br><span class="line"><span class="string">        conv_out(m,20,24,24)</span></span><br><span class="line"><span class="string">        pooled_out(m,20,12,12)</span></span><br><span class="line"><span class="string">        output(m,20,12,12)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        ConvPoolLayer2:</span></span><br><span class="line"><span class="string">        inpt(m,20,12,12)</span></span><br><span class="line"><span class="string">        conv_out(m,40,8,8)</span></span><br><span class="line"><span class="string">        pooled_out(m,40,4,4)</span></span><br><span class="line"><span class="string">        output(m,40,4,4)</span></span><br><span class="line"><span class="string">        ************************************************************************************************</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        对于FullyConnectedLayer而言，inpt是ConvPoolLayer2的output=(m,40,4,4) </span></span><br><span class="line"><span class="string">        ================================================================================================</span></span><br><span class="line"><span class="string">        Layer1:</span></span><br><span class="line"><span class="string">        inpt=(m,40,4,4)---&gt;inpt(m,640)    a1(m,640)即：m个样本，每个样本640个neurons</span></span><br><span class="line"><span class="string">        output = sigmoid(input*w+b) ===&gt; a2 = sigmoid(a1*w+b)</span></span><br><span class="line"><span class="string">        a2(m,30) = sigmoid(  a1(m,640)* w(640,30)+ b(30,) ) </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Layer2:</span></span><br><span class="line"><span class="string">        当前层的inpt是前一层的output，即是FullyConnectedLayer1的output，包含30个hidden neurons输出 a2(m,30)</span></span><br><span class="line"><span class="string">        output = SOFTMAX(input*w+b) ===&gt; a3 = SOFTMAX(a2*w+b)</span></span><br><span class="line"><span class="string">        a3(m,10) = SOFTMAX(  a2(m,30)* w(30,10)+ b(10,) ) </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        output是m个样本对应的10个概率,y_out是m个样本对应的真实数值。</span></span><br><span class="line"><span class="string">        ================================================================================================</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.inpt = inpt.reshape((mini_batch_size, <span class="variable language_">self</span>.n_in))</span><br><span class="line">        <span class="comment">#self.output = self.activation_fn((1-self.p_dropout)*T.dot(self.inpt, self.w) + self.b)  </span></span><br><span class="line">        <span class="variable language_">self</span>.output = <span class="variable language_">self</span>.activation_fn(T.dot(<span class="variable language_">self</span>.inpt, <span class="variable language_">self</span>.w) + <span class="variable language_">self</span>.b)</span><br><span class="line">       </span><br><span class="line">        <span class="comment">#self.y_out = T.argmax(self.output, axis=1) # 暂时不用，只是用最后一层的y_out作为输出结果</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.inpt_dropout = dropout_layer( inpt_dropout.reshape((mini_batch_size, <span class="variable language_">self</span>.n_in)), <span class="variable language_">self</span>.p_dropout)</span><br><span class="line">        <span class="variable language_">self</span>.output_dropout = <span class="variable language_">self</span>.activation_fn(T.dot(<span class="variable language_">self</span>.inpt_dropout, <span class="variable language_">self</span>.w) + <span class="variable language_">self</span>.b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#def accuracy(self, y):</span></span><br><span class="line">    <span class="comment">#    &quot;Return the accuracy for the mini-batch.&quot;</span></span><br><span class="line">    <span class="comment">#    # 暂时不用，只是用最后一层</span></span><br><span class="line">    <span class="comment">#    return T.mean(T.eq(y, self.y_out))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoftmaxLayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_in, n_out, p_dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n_in = n_in</span><br><span class="line">        <span class="variable language_">self</span>.n_out = n_out</span><br><span class="line">        <span class="variable language_">self</span>.activation_fn = softmax <span class="comment"># default to softmax</span></span><br><span class="line">        <span class="variable language_">self</span>.p_dropout = p_dropout</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Initialize weights and biases</span></span><br><span class="line">        <span class="comment"># for sigmoid neurons,w---&gt;(0, 1/sqrt(n_in)) b---&gt;(0,1)</span></span><br><span class="line">        <span class="comment"># for softmax neurons,w = 0,b = 0, no need using suitably parameteried normal random variables</span></span><br><span class="line">        <span class="variable language_">self</span>.w = theano.shared(</span><br><span class="line">            np.zeros((n_in, n_out), dtype=theano.config.floatX),</span><br><span class="line">            name=<span class="string">&#x27;w&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.b = theano.shared(</span><br><span class="line">            np.zeros((n_out,), dtype=theano.config.floatX),</span><br><span class="line">            name=<span class="string">&#x27;b&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.params = [<span class="variable language_">self</span>.w, <span class="variable language_">self</span>.b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_inpt</span>(<span class="params">self, inpt, inpt_dropout, mini_batch_size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        (1) inpt,output for validating and testing</span></span><br><span class="line"><span class="string">        (2) inpt_dropout,output_dropout for training (output_dropout---&gt;[cost]---&gt;grad---&gt;params)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        在Python中，a = sigmoid(w*a+b), w=(30,784),a=(784,1)一次使用一个样本参与计算。</span></span><br><span class="line"><span class="string">        在Theano中修改为,a = sigmoid(a*w+b) a=(m,784),w=(784,30)一次使用m个样本参与计算。</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        以[784,30,10]网络结构为例说明：</span></span><br><span class="line"><span class="string">        Layer1:</span></span><br><span class="line"><span class="string">        当前层的inpt是前一层的output，因为是第一层，所以初始化为a1 = X(m,784) Matrix，每一个样本包含784个输入neurons</span></span><br><span class="line"><span class="string">        output = sigmoid(input*w+b) ===&gt; a2 = sigmoid(a1*w+b)</span></span><br><span class="line"><span class="string">        a2(m,30) = sigmoid(  a1(m,784)* w(784,30)+ b(30,) ) </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Layer2:</span></span><br><span class="line"><span class="string">        当前层的inpt是前一层的output，即是FullyConnectedLayer的output，包含30个hidden neurons输出 a2(m,30)</span></span><br><span class="line"><span class="string">        output = SOFTMAX(input*w+b) ===&gt; a3 = SOFTMAX(a2*w+b)</span></span><br><span class="line"><span class="string">        a3(m,10) = SOFTMAX(  a2(m,30)* w(30,10)+ b(10,) ) </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        output是m个样本对应的10个概率,y_out是m个样本对应的真实数值。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.inpt = inpt.reshape((mini_batch_size, <span class="variable language_">self</span>.n_in))  <span class="comment"># tesorvariable Matrix(m,n_in)</span></span><br><span class="line">        <span class="comment">#self.output = self.activation_fn((1-self.p_dropout)*T.dot(self.inpt, self.w) + self.b)</span></span><br><span class="line">        <span class="variable language_">self</span>.output = <span class="variable language_">self</span>.activation_fn(T.dot(<span class="variable language_">self</span>.inpt, <span class="variable language_">self</span>.w) + <span class="variable language_">self</span>.b)</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        input--&gt;    output   ---&gt; y_out</span></span><br><span class="line"><span class="string">        X1---&gt; [y0,y1,...y9] ---&gt;  1</span></span><br><span class="line"><span class="string">        X2---&gt; [y0,y1,...y9] ---&gt;  0</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        Xm---&gt; [y0,y1,...y9] ---&gt;  2</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        axis沿着row作为一个整体进行，y_out作为最终的输出=vector(m,)。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.y_out = T.argmax(<span class="variable language_">self</span>.output, axis=<span class="number">1</span>) <span class="comment"># 对应的数值 [2,1,...7]</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.inpt_dropout = dropout_layer( inpt_dropout.reshape((mini_batch_size, <span class="variable language_">self</span>.n_in)), <span class="variable language_">self</span>.p_dropout)</span><br><span class="line">        <span class="variable language_">self</span>.output_dropout = <span class="variable language_">self</span>.activation_fn(T.dot(<span class="variable language_">self</span>.inpt_dropout, <span class="variable language_">self</span>.w) + <span class="variable language_">self</span>.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, net</span>):</span><br><span class="line">        <span class="string">&quot;Return the log-likelihood cost.&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用output_dropout用于train</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        (1) 一个样本对应的代价Cx</span></span><br><span class="line"><span class="string">        C = -log(a[i])</span></span><br><span class="line"><span class="string">        i = np.argmax(y)  # a(10,1) y(10,1)</span></span><br><span class="line"><span class="string">        return -np.log(a[i,0])</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        (2) m个样本的平均代价</span></span><br><span class="line"><span class="string">        计算代价的时候，传递Network作为参数，方便获取net.y</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">                output(m,10)     net.y   cost</span></span><br><span class="line"><span class="string">        X1---&gt; [y0,y1,...y9] ---&gt;  1     -log a[1,1]</span></span><br><span class="line"><span class="string">        X2---&gt; [y0,y1,...y9] ---&gt;  0     -log a[2,0]</span></span><br><span class="line"><span class="string">        Xm---&gt; [y0,y1,...y9] ---&gt;  2     -log a[m,2]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        a = np.array([[0,   0.8, 0,   0,...],</span></span><br><span class="line"><span class="string">                      [0.9, 0,   0,   0,...],</span></span><br><span class="line"><span class="string">                      [0,   0,   0.7, 0...]])</span></span><br><span class="line"><span class="string">        y = [1,0,2]</span></span><br><span class="line"><span class="string">        a[[0,1,2],y]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        &gt; array([ 0.8,  0.9,  0.7])</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        m = net.y.shape[<span class="number">0</span>]</span><br><span class="line">        rows = T.arange(m)</span><br><span class="line">        <span class="keyword">return</span> -T.mean(T.log( <span class="variable language_">self</span>.output_dropout[rows, net.y] ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">self, y</span>):</span><br><span class="line">        <span class="string">&quot;Return the accuracy for the mini-batch.&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用output,y_out用于test</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        y(m,) 对应m个样本的真实结果</span></span><br><span class="line"><span class="string">        y_out(m,)　对应m个样本的预测结果</span></span><br><span class="line"><span class="string">        如果mini_batch_size = 5</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        y = np.array([2,1,7,8,9])</span></span><br><span class="line"><span class="string">        y_out = np.array([2,1,7,6,9])</span></span><br><span class="line"><span class="string">        np.mean(np.equal(y,y_out))  # [1,1,1,0,1] 0.80</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> T.mean(T.eq(y, <span class="variable language_">self</span>.y_out))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Miscellanea</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;Return the size of the dataset `data`.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> data[<span class="number">0</span>].get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]  <span class="comment"># N = 50000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dropout_layer</span>(<span class="params">layer, p_dropout</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对于[784,30,10]</span></span><br><span class="line"><span class="string">    Layer1:</span></span><br><span class="line"><span class="string">    layer= float32 (m,784), p_dropout = 0.2,对每个节点以一定的概率进行drop</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参考：http://www.jianshu.com/p/ba9ca3b07922</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Inverted Dropout </span></span><br><span class="line"><span class="string">    我们稍微将 Dropout 方法改进一下，使得我们只需要在训练阶段缩放激活函数的输出值，而不用在测试阶段改变什么。</span></span><br><span class="line"><span class="string">    这个改进的 Dropout 方法就被称之为 Inverted Dropout 。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    在各种深度学习框架的实现中，我们都是用 Inverted Dropout 来代替 Dropout，因为这种方式有助于模型的完整性，</span></span><br><span class="line"><span class="string">    我们只需要修改一个参数（保留/丢弃概率），而整个模型都不用修改。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    srng = shared_randomstreams.RandomStreams( np.random.RandomState(<span class="number">0</span>).randint(<span class="number">999999</span>) )</span><br><span class="line">    retain_prob = <span class="number">1.</span> - p_dropout <span class="comment"># retain probility  theano.config.floatX</span></span><br><span class="line">    <span class="comment">#mask = srng.binomial(n=1, p=retain_prob, size=layer.shape,dtype=&#x27;int8&#x27;) # int8</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#mask: &lt;class &#x27;theano.tensor.var.TensorVariable&#x27;&gt; TensorType(float32, vector)</span></span><br><span class="line">    mask = srng.binomial(n=<span class="number">1</span>, p=retain_prob, size=layer.shape,dtype=theano.config.floatX)</span><br><span class="line">    mask_layer = layer*mask</span><br><span class="line">    <span class="keyword">return</span> mask_layer/retain_prob <span class="comment">#在train阶段除以retain_prob，以便test阶段每一个Layer的output形式保持不变。</span></span><br></pre></td></tr></table></figure>

<h2 id="Test-Network3"><a href="#Test-Network3" class="headerlink" title="Test Network3"></a>Test Network3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">random.seed(<span class="number">12345678</span>)</span><br><span class="line">np.random.seed(<span class="number">12345678</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#from ke_network3 import *</span></span><br><span class="line">epochs = <span class="number">3</span></span><br><span class="line">training_set_size = <span class="number">100</span></span><br><span class="line">mini_batch_size = <span class="number">10</span></span><br><span class="line">train_data,val_data,test_data = load_data_shared(training_set_size=training_set_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for conv pool layer</span></span><br><span class="line">image_shape=(mini_batch_size,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">filter_shape=(<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">poolsize=(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">convpool_layer1 = ConvPoolLayer(image_shape=image_shape,filter_shape=filter_shape, poolsize=poolsize)</span><br><span class="line">n_in = <span class="number">20</span>*<span class="number">12</span>*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_shape=(mini_batch_size,<span class="number">20</span>,<span class="number">12</span>,<span class="number">12</span>)</span><br><span class="line">filter_shape=(<span class="number">40</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">poolsize=(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">n_in = <span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span></span><br><span class="line">convpool_layer2 = ConvPoolLayer(image_shape=image_shape,filter_shape=filter_shape, poolsize=poolsize)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">full_layer = FullyConnectedLayer(n_in=n_in,n_out=<span class="number">30</span>)</span><br><span class="line">softmax_layer = SoftmaxLayer(n_in=<span class="number">30</span>,n_out=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#net = Network([convpool_layer1,full_layer,softmax_layer],10)</span></span><br><span class="line">net = Network([convpool_layer1,convpool_layer2,full_layer,softmax_layer],<span class="number">10</span>)</span><br><span class="line">net.SGD(train_data,epochs,mini_batch_size,<span class="number">0.3</span>,val_data,test_data,lmbda=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>updates TensorType(float32, 4D) TensorType(float32, 4D)
updates TensorType(float32, vector) TensorType(float32, vector)
updates TensorType(float32, 4D) TensorType(float32, 4D)
updates TensorType(float32, vector) TensorType(float32, vector)
updates TensorType(float32, matrix) TensorType(float32, matrix)
updates TensorType(float32, vector) TensorType(float32, vector)
updates TensorType(float32, matrix) TensorType(float32, matrix)
updates TensorType(float32, vector) TensorType(float32, vector)
Training mini-batch number 0
Epoch 0: validation accuracy 10.00%

This is the best validation accuracy to date.
The corresponding test accuracy is 8.00%
Epoch 1: validation accuracy 10.00%

This is the best validation accuracy to date.
The corresponding test accuracy is 8.00%
Epoch 2: validation accuracy 10.00%

This is the best validation accuracy to date.
The corresponding test accuracy is 8.00%

Finished training network.
Best validation accuracy of 10.00% obtained at iteration 29
Corresponding test accuracy of 8.00%





([2.2949765, 2.2951121, 2.2958748],
 [0.10000000000000001, 0.10000000000000001, 0.10000000000000001],
 [2.2682509, 2.2655275, 2.2644706],
 [0.13, 0.13, 0.13])
</code></pre>
<h2 id="Basic-Test-of-Network3-py"><a href="#Basic-Test-of-Network3-py" class="headerlink" title="Basic Test of Network3.py"></a>Basic Test of Network3.py</h2><h3 id="1-load-data"><a href="#1-load-data" class="headerlink" title="(1) load data"></a>(1) load data</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ke_network3 <span class="keyword">import</span> *</span><br><span class="line">filename=<span class="string">&quot;../data/mnist.pkl.gz&quot;</span></span><br><span class="line">filename=<span class="string">&quot;../data/mnist_expanded.pkl.gz&quot;</span></span><br><span class="line">f = gzip.<span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">training_data, validation_data, test_data = cPickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">x = training_data[<span class="number">0</span>] <span class="comment"># (m,784)</span></span><br><span class="line">y = training_data[<span class="number">1</span>] <span class="comment"># (m,)</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(x),<span class="built_in">type</span>(y)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(x[<span class="number">0</span>]),<span class="built_in">type</span>(y[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span> x.shape,y.shape</span><br><span class="line"><span class="built_in">print</span> x[<span class="number">0</span>].shape,y[<span class="number">0</span>].shape</span><br><span class="line">x2 = x[:<span class="number">10</span>,]</span><br><span class="line"></span><br><span class="line">set_size = <span class="number">10</span></span><br><span class="line">x = training_data[<span class="number">0</span>] <span class="comment"># float32  (50000, 784)</span></span><br><span class="line">y = training_data[<span class="number">1</span>] <span class="comment"># int64  (50000,)</span></span><br><span class="line"></span><br><span class="line">training_x = theano.shared( training_data[<span class="number">0</span>][:set_size,],  borrow=<span class="literal">True</span>) <span class="comment">#float32</span></span><br><span class="line">training_y = theano.shared( np.asarray(training_data[<span class="number">0</span>][:set_size,],dtype=<span class="string">&#x27;int8&#x27;</span>),  borrow=<span class="literal">True</span>) <span class="comment"># int8</span></span><br><span class="line"><span class="comment">#training_x2 = theano.shared(np.asarray(training_data[0], dtype=theano.config.floatX), borrow=True) # float64</span></span><br><span class="line"><span class="built_in">print</span> training_x.<span class="built_in">type</span></span><br><span class="line"><span class="built_in">print</span> training_y.<span class="built_in">type</span></span><br><span class="line"><span class="comment">#print training_x2.type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法可能会改变TensorVariable的类型</span></span><br><span class="line">new_x = training_x*<span class="number">0.1</span> <span class="comment"># float32---&gt;float64</span></span><br><span class="line"><span class="built_in">print</span> training_x.<span class="built_in">type</span>,new_x.<span class="built_in">type</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;type &#39;numpy.ndarray&#39;&gt; &lt;type &#39;numpy.ndarray&#39;&gt;
&lt;type &#39;numpy.ndarray&#39;&gt; &lt;type &#39;numpy.int64&#39;&gt;
(50, 784) (50,)
(784,) ()
TensorType(float32, matrix)
TensorType(int8, matrix)
TensorType(float32, matrix) TensorType(float64, matrix)
</code></pre>
<h3 id="2-dimshuffle-b-to-match-pooled-out"><a href="#2-dimshuffle-b-to-match-pooled-out" class="headerlink" title="(2) dimshuffle b to match pooled_out"></a>(2) dimshuffle b to match pooled_out</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pooled_out = np.arange(<span class="number">18</span>).reshape(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> pooled_out</span><br><span class="line">b = np.array([<span class="number">0.0</span>,<span class="number">1.0</span>],dtype=<span class="string">&#x27;float32&#x27;</span>) <span class="comment"># [0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle b to match pooled_out</span></span><br><span class="line">sb = theano.shared(np.asarray(b,dtype=<span class="string">&#x27;float32&#x27;</span>)) </span><br><span class="line">y = sb.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># TensorVariable TensorType(float32, (True, False, True, True))</span></span><br><span class="line"><span class="comment"># 2个feature map分别增加b0,b1</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(y),y.<span class="built_in">type</span>,y.shape.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">b_value = y.<span class="built_in">eval</span>()</span><br><span class="line"><span class="built_in">print</span> b_value</span><br><span class="line">pooled_out + b_value</span><br></pre></td></tr></table></figure>

<pre><code>[[[[ 0  1  2]
   [ 3  4  5]
   [ 6  7  8]]

  [[ 9 10 11]
   [12 13 14]
   [15 16 17]]]]
&lt;class &#39;theano.tensor.var.TensorVariable&#39;&gt; TensorType(float32, (True, False, True, True)) [1 2 1 1]
[[[[ 0.]]

  [[ 1.]]]]





array([[[[  0.,   1.,   2.],
         [  3.,   4.,   5.],
         [  6.,   7.,   8.]],

        [[ 10.,  11.,  12.],
         [ 13.,  14.,  15.],
         [ 16.,  17.,  18.]]]])
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>sgd</tag>
        <tag>neural networks and deep learning</tag>
        <tag>mlp</tag>
      </tags>
  </entry>
  <entry>
    <title>theano conv pool example</title>
    <url>//blog/theano-conv-pool-example/</url>
    <content><![CDATA[<h2 id="Theano-conv-pool-example"><a href="#Theano-conv-pool-example" class="headerlink" title="Theano conv pool example"></a>Theano conv pool example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> conv2d,sigmoid</span><br><span class="line"><span class="keyword">from</span> theano.tensor.signal.pool <span class="keyword">import</span> pool_2d</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">rng = numpy.random.RandomState(<span class="number">23455</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># instantiate 4D tensor for input</span></span><br><span class="line"><span class="built_in">input</span> = T.tensor4(name=<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize shared variable for weights.</span></span><br><span class="line">w_shp = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>)</span><br><span class="line">w_bound = numpy.sqrt(<span class="number">3</span> * <span class="number">9</span> * <span class="number">9</span>)</span><br><span class="line">W = theano.shared( numpy.asarray(</span><br><span class="line">            rng.uniform(</span><br><span class="line">                low=-<span class="number">1.0</span> / w_bound,</span><br><span class="line">                high=<span class="number">1.0</span> / w_bound,</span><br><span class="line">                size=w_shp),</span><br><span class="line">            dtype=<span class="built_in">input</span>.dtype), name =<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize shared variable for bias (1D tensor) with random values</span></span><br><span class="line"><span class="comment"># IMPORTANT: biases are usually initialized to zero. However in this</span></span><br><span class="line"><span class="comment"># particular application, we simply apply the convolutional layer to</span></span><br><span class="line"><span class="comment"># an image without learning the parameters. We therefore initialize</span></span><br><span class="line"><span class="comment"># them to random values to &quot;simulate&quot; learning.</span></span><br><span class="line">b_shp = (<span class="number">2</span>,)</span><br><span class="line">b = theano.shared(numpy.asarray(</span><br><span class="line">            rng.uniform(low=-<span class="number">.5</span>, high=<span class="number">.5</span>, size=b_shp),</span><br><span class="line">            dtype=<span class="built_in">input</span>.dtype), name =<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build symbolic expression that computes the convolution of input with filters in w</span></span><br><span class="line">conv_out = conv2d(<span class="built_in">input</span>, W)</span><br><span class="line"></span><br><span class="line">poolsize=(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">pooled_out = pool_2d( <span class="built_in">input</span>=conv_out, ws=poolsize, ignore_border=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">conv_activations = sigmoid(conv_out + b.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line"><span class="comment"># create theano function to compute filtered images</span></span><br><span class="line">f = theano.function([<span class="built_in">input</span>], conv_activations)</span><br><span class="line"></span><br><span class="line">pooled_activations = sigmoid(pooled_out + b.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line">f2 = theano.function([<span class="built_in">input</span>], pooled_activations)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># processing image file</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># open random image of dimensions 639x516</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="built_in">open</span>(<span class="string">&#x27;./3wolfmoon.jpg&#x27;</span>))</span><br><span class="line"><span class="comment"># dimensions are (height, width, channel)</span></span><br><span class="line">img = numpy.asarray(img, dtype=theano.config.floatX) / <span class="number">256.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put image in 4D tensor of shape (1, 3, height, width)</span></span><br><span class="line">input_img_ = img.transpose(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).reshape(<span class="number">1</span>, <span class="number">3</span>, <span class="number">639</span>, <span class="number">516</span>)</span><br><span class="line">filtered_img = f(input_img_)</span><br><span class="line">pooled_img = f2(input_img_)</span><br><span class="line"><span class="built_in">print</span> filtered_img.shape <span class="comment"># (1, 2, 631, 508) 2 feature maps</span></span><br><span class="line"><span class="built_in">print</span> pooled_img.shape   <span class="comment"># (1, 2, 315, 254) 2 feature maps</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line"><span class="comment"># (1)</span></span><br><span class="line"><span class="comment"># plot original image and first and second components of output</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(img)</span><br><span class="line">plt.gray();</span><br><span class="line"><span class="comment"># recall that the convOp output (filtered image) is actually a &quot;minibatch&quot;,</span></span><br><span class="line"><span class="comment"># of size 1 here, so we take index 0 in the first dimension:</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(filtered_img[<span class="number">0</span>, <span class="number">0</span>, :, :])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(filtered_img[<span class="number">0</span>, <span class="number">1</span>, :, :])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (2)</span></span><br><span class="line"><span class="comment"># plot original image and first and second components of output</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(img)</span><br><span class="line">plt.gray();</span><br><span class="line"><span class="comment"># recall that the convOp output (filtered image) is actually a &quot;minibatch&quot;,</span></span><br><span class="line"><span class="comment"># of size 1 here, so we take index 0 in the first dimension:</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(pooled_img[<span class="number">0</span>, <span class="number">0</span>, :, :])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(pooled_img[<span class="number">0</span>, <span class="number">1</span>, :, :])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notice that a randomly initialized filter acts very much like an edge detector!</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, 2, 631, 508)
(1, 2, 315, 254)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180807105128016-1414614810.png" alt="png"></p>
<h2 id="Pool-example"><a href="#Pool-example" class="headerlink" title="Pool example"></a>Pool example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> theano.tensor.signal <span class="keyword">import</span> pool</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = T.dtensor4(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">maxpool_shape = (<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">pool_out = pool.pool_2d(<span class="built_in">input</span>, maxpool_shape, ignore_border=<span class="literal">True</span>)</span><br><span class="line">f = theano.function([<span class="built_in">input</span>],pool_out)</span><br><span class="line"></span><br><span class="line"><span class="comment">#invals = numpy.random.RandomState(1).rand(3, 2, 5, 5)</span></span><br><span class="line">invals = np.arange(<span class="number">50</span>).reshape(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;With ignore_border set to True:&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;invals[0, 0, :, :] =\n&#x27;</span>, invals[<span class="number">0</span>, <span class="number">0</span>, :, :]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;output[0, 0, :, :] =\n&#x27;</span>, f(invals)[<span class="number">0</span>, <span class="number">0</span>, :, :]</span><br><span class="line"></span><br><span class="line">pool_out = pool.pool_2d(<span class="built_in">input</span>, maxpool_shape, ignore_border=<span class="literal">False</span>)</span><br><span class="line">f = theano.function([<span class="built_in">input</span>],pool_out)</span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;With ignore_border set to False:&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;invals[1, 0, :, :] =\n &#x27;</span>, invals[<span class="number">0</span>, <span class="number">0</span>, :, :]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;output[1, 0, :, :] =\n &#x27;</span>, f(invals)[<span class="number">0</span>, <span class="number">0</span>, :, :]</span><br></pre></td></tr></table></figure>

<pre><code>With ignore_border set to True:
invals[0, 0, :, :] =
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
output[0, 0, :, :] =
[[  6.   8.]
 [ 16.  18.]]

With ignore_border set to False:
invals[1, 0, :, :] =
  [[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
output[1, 0, :, :] =
  [[  6.   8.   9.]
 [ 16.  18.  19.]
 [ 21.  23.  24.]]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://deeplearning.net/software/theano/library/tensor/nnet/conv.html">theano conv</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>neural networks and deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorials on deep learning for image classification</title>
    <url>//blog/tutorials-on-deep-learning-for-image-classification/</url>
    <content><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Shared-variables-tips"><a href="#Shared-variables-tips" class="headerlink" title="Shared variables tips"></a>Shared variables tips</h3><p>We encourage you to store the dataset into shared variables and access it based on the minibatch index, given a fixed and known batch size. The reason behind shared variables is related to using the GPU. There is a large overhead when copying data into the GPU memory. </p>
<blockquote>
<p>将数据存储在shared variable便于加速GPU计算，避免数据从CPU拷贝到GPU。</p>
</blockquote>
<p>If you have your data in Theano shared variables though, you give Theano the possibility to copy the entire data on the GPU in a single call when the shared variables are constructed.</p>
<blockquote>
<p>shared构建的时候，theano一次性讲所有数据拷贝至GPU.</p>
</blockquote>
<p>Because the datapoints and their labels are usually of different nature (labels are usually integers while datapoints are real numbers) we suggest to use different variables for label and data. Also we recommend using different variables for the training set, validation set and testing set to make the code more readable (resulting in 6 different shared variables).</p>
<blockquote>
<p>data,label使用２个shared variables，train,valid,test使用不同的shared variables，总计6个</p>
</blockquote>
<h3 id="Mini-batch-data"><a href="#Mini-batch-data" class="headerlink" title="Mini-batch data"></a>Mini-batch data</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shared_dataset</span>(<span class="params">data_xy</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Function that loads the dataset into shared variables</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The reason we store our dataset in shared variables is to allow</span></span><br><span class="line"><span class="string">    Theano to copy it into the GPU memory (when code is run on GPU).</span></span><br><span class="line"><span class="string">    Since copying data into the GPU is slow, copying a minibatch everytime</span></span><br><span class="line"><span class="string">    is needed (the default behaviour if the data is not in a shared</span></span><br><span class="line"><span class="string">    variable) would lead to a large decrease in performance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data_x, data_y = data_xy</span><br><span class="line">    shared_x = theano.shared(numpy.asarray(data_x, dtype=theano.config.floatX))</span><br><span class="line">    shared_y = theano.shared(numpy.asarray(data_y, dtype=theano.config.floatX))</span><br><span class="line">    <span class="comment"># shared变量中的数据在GPU上必须是float32类型，但是计算阶段可能需要int类型(y)，所以需要</span></span><br><span class="line">    <span class="comment"># 将float32---&gt;int.</span></span><br><span class="line">    <span class="comment"># When storing data on the GPU it has to be stored as floats</span></span><br><span class="line">    <span class="comment"># therefore we will store the labels as ``floatX`` as well</span></span><br><span class="line">    <span class="comment"># (``shared_y`` does exactly that). But during our computations</span></span><br><span class="line">    <span class="comment"># we need them as ints (we use labels as index, and if they are</span></span><br><span class="line">    <span class="comment"># floats it doesn&#x27;t make sense) therefore instead of returning</span></span><br><span class="line">    <span class="comment"># ``shared_y`` we will have to cast it to int. This little hack</span></span><br><span class="line">    <span class="comment"># lets us get around this issue</span></span><br><span class="line">    <span class="keyword">return</span> shared_x, T.cast(shared_y, <span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test_set_x, test_set_y = shared_dataset(test_set)</span><br><span class="line">valid_set_x, valid_set_y = shared_dataset(valid_set)</span><br><span class="line">train_set_x, train_set_y = shared_dataset(train_set)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">500</span>    <span class="comment"># size of the minibatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># accessing the third minibatch of the training set</span></span><br><span class="line"></span><br><span class="line">data  = train_set_x[<span class="number">2</span> * batch_size: <span class="number">3</span> * batch_size]</span><br><span class="line">label = train_set_y[<span class="number">2</span> * batch_size: <span class="number">3</span> * batch_size]</span><br></pre></td></tr></table></figure>

<h3 id="SGD-pseudo-code-in-theano"><a href="#SGD-pseudo-code-in-theano" class="headerlink" title="SGD pseudo code in theano"></a>SGD pseudo code in theano</h3><h4 id="Traditional-GD-m-N"><a href="#Traditional-GD-m-N" class="headerlink" title="Traditional GD (m&#x3D;N)"></a>Traditional GD (m&#x3D;N)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADIENT DESCENT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    loss = f(params)</span><br><span class="line">    d_loss_wrt_params = ... <span class="comment"># compute gradient</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>

<p>Stochastic gradient descent (SGD) works according to the same principles as ordinary gradient descent, but proceeds more quickly by estimating the gradient from just a few examples at a time instead of the entire training set. In its purest form, we estimate the gradient from just a single example at a time.</p>
<h4 id="Online-Learning-SGD-m-1"><a href="#Online-Learning-SGD-m-1" class="headerlink" title="Online Learning SGD (m&#x3D;1)"></a>Online Learning SGD (m&#x3D;1)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># STOCHASTIC GRADIENT DESCENT</span></span><br><span class="line"><span class="keyword">for</span> (x_i,y_i) <span class="keyword">in</span> training_set:</span><br><span class="line">                            <span class="comment"># imagine an infinite generator</span></span><br><span class="line">                            <span class="comment"># that may repeat examples (if there is only a finite training set)</span></span><br><span class="line">    loss = f(params, x_i, y_i)</span><br><span class="line">    d_loss_wrt_params = ... <span class="comment"># compute gradient</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>

<p>The variant that we recommend for deep learning is a further twist on stochastic gradient descent using so-called “minibatches”. Minibatch SGD (MSGD) works identically to SGD, except that we use more than one training example to make each estimate of the gradient. This technique reduces variance in the estimate of the gradient, and often makes better use of the hierarchical memory organization in modern computers.</p>
<h4 id="Minibatch-SGD-m"><a href="#Minibatch-SGD-m" class="headerlink" title="Minibatch SGD (m)"></a>Minibatch SGD (m)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x_batch,y_batch) <span class="keyword">in</span> train_batches:</span><br><span class="line">                            <span class="comment"># imagine an infinite generator</span></span><br><span class="line">                            <span class="comment"># that may repeat examples</span></span><br><span class="line">    loss = f(params, x_batch, y_batch)</span><br><span class="line">    d_loss_wrt_params = ... <span class="comment"># compute gradient using theano</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>

<h4 id="Theano-pseudo-code-of-Minibatch-SGD"><a href="#Theano-pseudo-code-of-Minibatch-SGD" class="headerlink" title="Theano pseudo code of Minibatch SGD"></a>Theano pseudo code of Minibatch SGD</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Minibatch Stochastic Gradient Descent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assume loss is a symbolic description of the loss function given</span></span><br><span class="line"><span class="comment"># the symbolic variables params (shared variable), x_batch, y_batch;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># compute gradient of loss with respect to params</span></span><br><span class="line">d_loss_wrt_params = T.grad(loss, params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile the MSGD step into a theano function</span></span><br><span class="line">updates = [(params, params - learning_rate * d_loss_wrt_params)]</span><br><span class="line">MSGD = theano.function([x_batch,y_batch], loss, updates=updates)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x_batch, y_batch) <span class="keyword">in</span> train_batches:</span><br><span class="line">    <span class="comment"># here x_batch and y_batch are elements of train_batches and</span></span><br><span class="line">    <span class="comment"># therefore numpy arrays; function MSGD also updates the params</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Current loss is &#x27;</span>, MSGD(x_batch, y_batch))</span><br><span class="line">    <span class="keyword">if</span> stopping_condition_is_met:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h3><h4 id="L1-L2-regularization"><a href="#L1-L2-regularization" class="headerlink" title="L1&#x2F;L2 regularization"></a>L1&#x2F;L2 regularization</h4><p>L1&#x2F;L2 regularization and early-stopping.</p>
<p>Commonly used values for p are 1 and 2, hence the L1&#x2F;L2 nomenclature. If p&#x3D;2, then the regularizer is also called “weight decay”.</p>
<p> To follow Occam’s razor principle, this minimization should find us the simplest solution (as measured by our simplicity criterion) that fits the training data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># symbolic Theano variable that represents the L1 regularization term</span></span><br><span class="line">L1  = T.<span class="built_in">sum</span>(<span class="built_in">abs</span>(param))</span><br><span class="line"></span><br><span class="line"><span class="comment"># symbolic Theano variable that represents the squared L2 term</span></span><br><span class="line">L2 = T.<span class="built_in">sum</span>(param ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the loss</span></span><br><span class="line">loss = NLL + lambda_1 * L1 + lambda_2 * L2</span><br></pre></td></tr></table></figure>

<h4 id="Early-Stopping"><a href="#Early-Stopping" class="headerlink" title="Early-Stopping"></a>Early-Stopping</h4><p>Early-stopping combats overfitting by monitoring the model’s performance on a validation set. A validation set is a set of examples that we never use for gradient descent, but which is also not a part of the test set. </p>
<p>所谓early stopping，即在每一个epoch结束时（一个epoch即对所有训练数据的一轮遍历）计算 validation data的accuracy，当accuracy不再提高时，就停止训练。这是很自然的做法，因为accuracy不再提高了，训练下去也没用。另外，这样做还能防止overfitting。</p>
<p>那么，怎么样才算是validation accuracy不再提高呢？并不是说validation accuracy一降下来，它就是“不再提高”，因为可能经过这个epoch后，accuracy降低了，但是随后的epoch又让accuracy升上去了，所以不能根据一两次的连续降低就判断“不再提高”。正确的做法是，在训练的过程中，记录最佳的validation accuracy，当连续10次epoch（或者更多次）没达到最佳accuracy时，你可以认为“不再提高”，此时使用early stopping。这个策略就叫“ no-improvement-in-n”，n即epoch的次数，可以根据实际情况取10、20、30….</p>
<h4 id="Variable-learning-rate"><a href="#Variable-learning-rate" class="headerlink" title="Variable learning rate"></a>Variable learning rate</h4><ul>
<li><p>Decreasing the learning rate over time is sometimes a good idea. eta &#x3D; eta0&#x2F;(1+d*epoch)  (d: eta decrease constant, d&#x3D;0.001)</p>
</li>
<li><p>Early stopping + decrease learning rate. eta &#x3D; eta0&#x2F;2 until eta&#x3D; eta0&#x2F;1024</p>
</li>
</ul>
<p>一个简单有效的做法就是，当validation accuracy满足 no-improvement-in-n规则时，本来我们是要early stopping的，但是我们可以不stop，而是让learning rate减半，之后让程序继续跑。下一次validation accuracy又满足no-improvement-in-n规则时，我们同样再将learning rate减半（此时变为原始learni rate的四分之一）…继续这个过程，直到learning rate变为原来的1&#x2F;1024再终止程序。（1&#x2F;1024还是1&#x2F;512还是其他可以根据实际确定）。【PS：也可以选择每一次将learning rate除以10，而不是除以2.】</p>
<p>实践中，eta&#x2F;2变化太快，eta0&#x2F;(1+d*epoch),d&#x3D;0.001比较合适。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># early-stopping parameters</span></span><br><span class="line">patience = <span class="number">5000</span>  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">patience_increase = <span class="number">2</span>     <span class="comment"># wait this much longer when a new best is</span></span><br><span class="line">                              <span class="comment"># found</span></span><br><span class="line">improvement_threshold = <span class="number">0.995</span>  <span class="comment"># a relative improvement of this much is</span></span><br><span class="line">                               <span class="comment"># considered significant</span></span><br><span class="line">validation_frequency = <span class="built_in">min</span>(n_train_batches, patience/<span class="number">2</span>) = <span class="number">2500</span> <span class="comment"># for iters</span></span><br><span class="line">                              <span class="comment"># go through this many</span></span><br><span class="line">                              <span class="comment"># minibatches before checking the network</span></span><br><span class="line">                              <span class="comment"># on the validation set; in this case we</span></span><br><span class="line">                              <span class="comment"># check every epoch</span></span><br><span class="line"></span><br><span class="line">best_params = <span class="literal">None</span></span><br><span class="line">best_validation_loss = numpy.inf</span><br><span class="line">test_score = <span class="number">0.</span></span><br><span class="line">start_time = time.clock()</span><br><span class="line"></span><br><span class="line">done_looping = <span class="literal">False</span></span><br><span class="line">epoch = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (epoch &lt; n_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">    <span class="comment"># Report &quot;1&quot; for first epoch, &quot;n_epochs&quot; for last epoch</span></span><br><span class="line">    epoch = epoch + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> <span class="built_in">range</span>(n_train_batches):</span><br><span class="line"></span><br><span class="line">        d_loss_wrt_params = ... <span class="comment"># compute gradient</span></span><br><span class="line">        params -= learning_rate * d_loss_wrt_params <span class="comment"># gradient descent</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># iteration number. We want it to start at 0.</span></span><br><span class="line">        <span class="built_in">iter</span> = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line">        <span class="comment"># note that if we do `iter % validation_frequency` it will be</span></span><br><span class="line">        <span class="comment"># true for iter = 0 which we do not want. We want it true for</span></span><br><span class="line">        <span class="comment"># iter = validation_frequency - 1.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">iter</span> + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            this_validation_loss = ... <span class="comment"># compute zero-one loss on validation set</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># improve patience if loss improvement is good enough</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss * improvement_threshold:</span><br><span class="line">                    patience = <span class="built_in">max</span>(patience, <span class="built_in">iter</span> * patience_increase)</span><br><span class="line">                    </span><br><span class="line">                best_params = copy.deepcopy(params)</span><br><span class="line">                best_validation_loss = this_validation_loss</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> patience &lt;= <span class="built_in">iter</span>:</span><br><span class="line">            done_looping = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POSTCONDITION:</span></span><br><span class="line"><span class="comment"># best_params refers to the best out-of-sample parameters observed during the optimization</span></span><br></pre></td></tr></table></figure>

<h3 id="Theano-Python-Tips"><a href="#Theano-Python-Tips" class="headerlink" title="Theano&#x2F;Python Tips"></a>Theano&#x2F;Python Tips</h3><h4 id="Loading-and-Saving-Models"><a href="#Loading-and-Saving-Models" class="headerlink" title="Loading and Saving Models"></a>Loading and Saving Models</h4><ul>
<li><p>DO: <strong>Pickle the numpy ndarrays from your shared variables</strong></p>
</li>
<li><p>DON’T: <strong>Do not pickle your training or test functions for long-term storage</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line">save_file = <span class="built_in">open</span>(<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)  <span class="comment"># this will overwrite current contents</span></span><br><span class="line">cPickle.dump(w.get_value(borrow=<span class="literal">True</span>), save_file, -<span class="number">1</span>)  <span class="comment"># the -1 is for HIGHEST_PROTOCOL</span></span><br><span class="line">cPickle.dump(v.get_value(borrow=<span class="literal">True</span>), save_file, -<span class="number">1</span>)  <span class="comment"># .. and it triggers much more efficient</span></span><br><span class="line">cPickle.dump(u.get_value(borrow=<span class="literal">True</span>), save_file, -<span class="number">1</span>)  <span class="comment"># .. storage than numpy&#x27;s default</span></span><br><span class="line">save_file.close()</span><br></pre></td></tr></table></figure>

<p>Then later, you can load your data back like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">save_file = <span class="built_in">open</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">w.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br><span class="line">v.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br><span class="line">u.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Plotting-Intermediate-Results"><a href="#Plotting-Intermediate-Results" class="headerlink" title="Plotting Intermediate Results"></a>Plotting Intermediate Results</h4><p>If you have enough disk space, your training script should save intermediate models and a visualization script should process those saved models.</p>
<h2 id="MLP"><a href="#MLP" class="headerlink" title="MLP"></a>MLP</h2><blockquote>
<p>see <a href="http://deeplearning.net/tutorial/mlp.html">here</a></p>
</blockquote>
<p>An MLP can be viewed as a logistic regression classifier where the input is first transformed using a learnt non-linear transformation sigmoid. This transformation projects the input data into a space where it becomes linearly separable. This intermediate layer is referred to as a hidden layer. A single hidden layer is sufficient to make MLPs a universal approximator. </p>
<h3 id="weight-initializations"><a href="#weight-initializations" class="headerlink" title="weight initializations"></a>weight initializations</h3><ul>
<li>old version: 1&#x2F;sqrt(n_in)</li>
</ul>
<p>The initial values for the weights of a hidden layer i should be uniformly sampled from a symmetric interval that depends on the activation function. weight的初始化依赖于activation</p>
<ul>
<li>tanh: uniformely sampled from -sqrt(6.&#x2F;(n_in+n_hidden)) and sqrt(6.&#x2F;(n_in+n_hidden)) </li>
<li>sigmoid : use 4 times larger initial weights for sigmoid compared to tanh</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `W` is initialized with `W_values` which is uniformely sampled</span></span><br><span class="line">        <span class="comment"># from sqrt(-6./(n_in+n_hidden)) and sqrt(6./(n_in+n_hidden))</span></span><br><span class="line">        <span class="comment"># for tanh activation function</span></span><br><span class="line">        <span class="comment"># the output of uniform if converted using asarray to dtype</span></span><br><span class="line">        <span class="comment"># theano.config.floatX so that the code is runable on GPU</span></span><br><span class="line">        <span class="comment"># Note : optimal initialization of weights is dependent on the</span></span><br><span class="line">        <span class="comment">#        activation function used (among other things).</span></span><br><span class="line">        <span class="comment">#        For example, results presented in [Xavier10] suggest that you</span></span><br><span class="line">        <span class="comment">#        should use 4 times larger initial weights for sigmoid</span></span><br><span class="line">        <span class="comment">#        compared to tanh</span></span><br><span class="line">        <span class="comment">#        We have no info for other function, so we use the same as</span></span><br><span class="line">        <span class="comment">#        tanh.</span></span><br><span class="line">        <span class="keyword">if</span> W <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            W_values = numpy.asarray(</span><br><span class="line">                rng.uniform(</span><br><span class="line">                    low=-numpy.sqrt(<span class="number">6.</span> / (n_in + n_out)),</span><br><span class="line">                    high=numpy.sqrt(<span class="number">6.</span> / (n_in + n_out)),</span><br><span class="line">                    size=(n_in, n_out)</span><br><span class="line">                ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> activation == theano.tensor.nnet.sigmoid:</span><br><span class="line">                W_values *= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">            W = theano.shared(value=W_values, name=<span class="string">&#x27;W&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            b_values = numpy.zeros((n_out,), dtype=theano.config.floatX)</span><br><span class="line">            b = theano.shared(value=b_values, name=<span class="string">&#x27;b&#x27;</span>, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.W = W</span><br><span class="line">        <span class="variable language_">self</span>.b = b</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="Tips-and-Tricks-for-training-MLPs"><a href="#Tips-and-Tricks-for-training-MLPs" class="headerlink" title="Tips and Tricks for training MLPs"></a>Tips and Tricks for training MLPs</h3><h4 id="Nonlinearity"><a href="#Nonlinearity" class="headerlink" title="Nonlinearity"></a>Nonlinearity</h4><p>Two of the most common ones are the <strong>sigmoid</strong> and the <strong>tanh</strong> function. nonlinearities that are symmetric around the origin are preferred because they tend to produce zero-mean inputs to the next layer (which is a desirable property). Empirically, we have observed that the tanh has better convergence properties.</p>
<h4 id="Weight-initialization"><a href="#Weight-initialization" class="headerlink" title="Weight initialization"></a>Weight initialization</h4><p>At initialization we want the weights to be small enough around the origin so that the activation function operates in its linear regime, where gradients are the largest. <strong>weight的初始化依赖于activation</strong></p>
<h4 id="Learning-rate"><a href="#Learning-rate" class="headerlink" title="Learning rate"></a>Learning rate</h4><ul>
<li><p>The simplest solution is to simply have a <strong>constant rate</strong>. Rule of thumb: try several log-spaced values (10^{-1},10^{-2},\ldots) and narrow the (logarithmic) grid search to the region where you obtain the lowest validation error.</p>
</li>
<li><p>Decreasing the learning rate over time is sometimes a good idea. eta &#x3D; eta0&#x2F;(1+d*epoch)  (d: decrease constant, 0.001)</p>
</li>
<li><p>Early stopping + decrease learning rate. eta &#x3D; eta0&#x2F;2 until eta&#x3D; eta0&#x2F;1024</p>
</li>
</ul>
<h4 id="Regularization-parameter"><a href="#Regularization-parameter" class="headerlink" title="Regularization parameter"></a>Regularization parameter</h4><p>Typical values to try for the L1&#x2F;L2 regularization parameter \lambda are 10^{-2},10^{-3},\ldots. In the framework that we described so far, optimizing this parameter will not lead to significantly better solutions, but is worth exploring nonetheless.</p>
<h4 id="Number-of-hidden-units"><a href="#Number-of-hidden-units" class="headerlink" title="Number of hidden units"></a>Number of hidden units</h4><p>This hyper-parameter is very much dataset-dependent. <strong>hidden neurons的数量依赖于具体的数据集</strong>。Unless we employ some regularization scheme (early stopping or L1&#x2F;L2 penalties), a typical number of hidden units vs. generalization performance graph will be U-shaped.</p>
<h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><ul>
<li><a href="http://deeplearning.net/tutorial/lenet.html">LeNet</a></li>
</ul>
<h3 id="The-Convolution-and-Pool-Operator"><a href="#The-Convolution-and-Pool-Operator" class="headerlink" title="The Convolution and Pool Operator"></a>The Convolution and Pool Operator</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> conv2d,sigmoid</span><br><span class="line"><span class="keyword">from</span> theano.tensor.signal.pool <span class="keyword">import</span> pool_2d</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">rng = numpy.random.RandomState(<span class="number">23455</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># instantiate 4D tensor for input</span></span><br><span class="line"><span class="built_in">input</span> = T.tensor4(name=<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize shared variable for weights.</span></span><br><span class="line">w_shp = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>)</span><br><span class="line">w_bound = numpy.sqrt(<span class="number">3</span> * <span class="number">9</span> * <span class="number">9</span>)</span><br><span class="line">W = theano.shared( numpy.asarray(</span><br><span class="line">            rng.uniform(</span><br><span class="line">                low=-<span class="number">1.0</span> / w_bound,</span><br><span class="line">                high=<span class="number">1.0</span> / w_bound,</span><br><span class="line">                size=w_shp),</span><br><span class="line">            dtype=<span class="built_in">input</span>.dtype), name =<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize shared variable for bias (1D tensor) with random values</span></span><br><span class="line"><span class="comment"># IMPORTANT: biases are usually initialized to zero. However in this</span></span><br><span class="line"><span class="comment"># particular application, we simply apply the convolutional layer to</span></span><br><span class="line"><span class="comment"># an image without learning the parameters. We therefore initialize</span></span><br><span class="line"><span class="comment"># them to random values to &quot;simulate&quot; learning.</span></span><br><span class="line">b_shp = (<span class="number">2</span>,)</span><br><span class="line">b = theano.shared(numpy.asarray(</span><br><span class="line">            rng.uniform(low=-<span class="number">.5</span>, high=<span class="number">.5</span>, size=b_shp),</span><br><span class="line">            dtype=<span class="built_in">input</span>.dtype), name =<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build symbolic expression that computes the convolution of input with filters in w</span></span><br><span class="line">conv_out = conv2d(<span class="built_in">input</span>, W)</span><br><span class="line"></span><br><span class="line">poolsize=(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">pooled_out = pool_2d( <span class="built_in">input</span>=conv_out, ws=poolsize, ignore_border=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">conv_activations = sigmoid(conv_out + b.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line"><span class="comment"># create theano function to compute filtered images</span></span><br><span class="line">f = theano.function([<span class="built_in">input</span>], conv_activations)</span><br><span class="line"></span><br><span class="line">pooled_activations = sigmoid(pooled_out + b.dimshuffle(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line">f2 = theano.function([<span class="built_in">input</span>], pooled_activations)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># processing image file</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># open random image of dimensions 639x516</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="built_in">open</span>(<span class="string">&#x27;./3wolfmoon.jpg&#x27;</span>))</span><br><span class="line"><span class="comment"># dimensions are (height, width, channel)</span></span><br><span class="line">img = numpy.asarray(img, dtype=theano.config.floatX) / <span class="number">256.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put image in 4D tensor of shape (1, 3, height, width)</span></span><br><span class="line">input_img_ = img.transpose(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).reshape(<span class="number">1</span>, <span class="number">3</span>, <span class="number">639</span>, <span class="number">516</span>)</span><br><span class="line">filtered_img = f(input_img_)</span><br><span class="line">pooled_img = f2(input_img_)</span><br><span class="line"><span class="built_in">print</span> filtered_img.shape <span class="comment"># (1, 2, 631, 508) 2 feature maps</span></span><br><span class="line"><span class="built_in">print</span> pooled_img.shape   <span class="comment"># (1, 2, 315, 254) 2 feature maps</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line"><span class="comment"># (1)</span></span><br><span class="line"><span class="comment"># plot original image and first and second components of output</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(img)</span><br><span class="line">plt.gray();</span><br><span class="line"><span class="comment"># recall that the convOp output (filtered image) is actually a &quot;minibatch&quot;,</span></span><br><span class="line"><span class="comment"># of size 1 here, so we take index 0 in the first dimension:</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(filtered_img[<span class="number">0</span>, <span class="number">0</span>, :, :])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(filtered_img[<span class="number">0</span>, <span class="number">1</span>, :, :])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (2)</span></span><br><span class="line"><span class="comment"># plot original image and first and second components of output</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(img)</span><br><span class="line">plt.gray();</span><br><span class="line"><span class="comment"># recall that the convOp output (filtered image) is actually a &quot;minibatch&quot;,</span></span><br><span class="line"><span class="comment"># of size 1 here, so we take index 0 in the first dimension:</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(pooled_img[<span class="number">0</span>, <span class="number">0</span>, :, :])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>); plt.axis(<span class="string">&#x27;off&#x27;</span>); plt.imshow(pooled_img[<span class="number">0</span>, <span class="number">1</span>, :, :])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notice that a randomly initialized filter acts very much like an edge detector!</span></span><br></pre></td></tr></table></figure>

<pre><code>WARNING (theano.sandbox.cuda): The cuda backend is deprecated and will be removed in the next release (v0.10).  Please switch to the gpuarray backend. You can get more information about how to switch at this URL:
 https://github.com/Theano/Theano/wiki/Converting-to-the-new-gpu-back-end%28gpuarray%29

Using gpu device 0: GeForce GTX 1060 (CNMeM is enabled with initial size: 80.0% of memory, cuDNN 5105)


(1, 2, 631, 508)
(1, 2, 315, 254)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180807105128016-1414614810.png" alt="png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://deeplearning.net/tutorial/gettingstarted.html#gettingstarted">deeplearning getting started</a></li>
<li><a href="http://deeplearning.net/tutorial/mlp.html">mlp</a></li>
<li><a href="http://deeplearning.net/tutorial/lenet.html">lenet</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180807: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>image classification</tag>
      </tags>
  </entry>
  <entry>
    <title>Fine-tuning a Pretrained Network for Style Recognition</title>
    <url>//blog/Fine-tuning-a-Pretrained-Network-for-Style-Recognition/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this example, we’ll explore a common approach that is particularly useful in real-world applications: take a pre-trained Caffe network and fine-tune the parameters on your custom data.</p>
<p>The advantage of this approach is that, since pre-trained networks are learned on a large set of images, the intermediate layers capture the “semantics” of the general visual appearance. Think of it as a very powerful generic visual feature that you can treat as a black box. On top of that, only a relatively small amount of data is needed for good performance on the target task.</p>
<p>First, we will need to prepare the data. This involves the following parts:<br>(1) Get the ImageNet ilsvrc pretrained model with the provided shell scripts.<br>(2) Download a subset of the overall Flickr style dataset for this demo.<br>(3) Compile the downloaded Flickr dataset into a database that Caffe can then consume.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file should be run from &#123;caffe_root&#125;/examples (otherwise change this line)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line">caffe.set_device(<span class="number">0</span>)</span><br><span class="line">caffe.set_mode_gpu()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function for deprocessing preprocessed images, e.g., for display.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deprocess_net_image</span>(<span class="params">image</span>):</span><br><span class="line">    image = image.copy()              <span class="comment"># don&#x27;t modify destructively</span></span><br><span class="line">    image = image[::-<span class="number">1</span>]               <span class="comment"># BGR -&gt; RGB</span></span><br><span class="line">    image = image.transpose(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)  <span class="comment"># CHW -&gt; HWC</span></span><br><span class="line">    image += [<span class="number">123</span>, <span class="number">117</span>, <span class="number">104</span>]          <span class="comment"># (approximately) undo mean subtraction</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># clamp values in [0, 255]</span></span><br><span class="line">    image[image &lt; <span class="number">0</span>], image[image &gt; <span class="number">255</span>] = <span class="number">0</span>, <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># round and cast from float32 to uint8</span></span><br><span class="line">    image = np.<span class="built_in">round</span>(image)</span><br><span class="line">    image = np.require(image, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure>

<h3 id="Setup-and-dataset-download"><a href="#Setup-and-dataset-download" class="headerlink" title="Setup and dataset download"></a>Setup and dataset download</h3><p>Download data required for this exercise.</p>
<ul>
<li><code>get_ilsvrc_aux.sh</code> to download the ImageNet data mean, labels, etc.</li>
<li><code>download_model_binary.py</code> to download the pretrained reference model</li>
<li><code>finetune_flickr_style/assemble_data.py</code> downloads the style training and testing data</li>
</ul>
<p>We’ll download just a small subset of the full dataset for this exercise: just 2000 of the 80K images, from 5 of the 20 style categories.  (To download the full dataset, set <code>full_dataset = True</code> in the cell below.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Download just a small subset of the data for this exercise.</span></span><br><span class="line"><span class="comment"># (2000 of 80K images, 5 of 20 labels.)</span></span><br><span class="line"><span class="comment"># To download the entire dataset, set `full_dataset = True`.</span></span><br><span class="line">full_dataset = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> full_dataset:</span><br><span class="line">    NUM_STYLE_IMAGES = NUM_STYLE_LABELS = -<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    NUM_STYLE_IMAGES = <span class="number">2000</span></span><br><span class="line">    NUM_STYLE_LABELS = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This downloads the ilsvrc auxiliary data (mean file, etc),</span></span><br><span class="line"><span class="comment"># and a subset of 2000 images for the style recognition task.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(caffe_root)  <span class="comment"># run scripts from caffe root</span></span><br><span class="line">!data/ilsvrc12/get_ilsvrc_aux.sh</span><br><span class="line">!scripts/download_model_binary.py models/bvlc_reference_caffenet</span><br><span class="line">!python examples/finetune_flickr_style/assemble_data.py \</span><br><span class="line">    --workers=-<span class="number">1</span>  --seed=<span class="number">1701</span> \</span><br><span class="line">    --images=$NUM_STYLE_IMAGES  --label=$NUM_STYLE_LABELS</span><br><span class="line"><span class="comment"># back to examples</span></span><br><span class="line">os.chdir(<span class="string">&#x27;examples&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Downloading...
--2016-02-24 00:28:36--  http://dl.caffe.berkeleyvision.org/caffe_ilsvrc12.tar.gz
Resolving dl.caffe.berkeleyvision.org (dl.caffe.berkeleyvision.org)... 169.229.222.251
Connecting to dl.caffe.berkeleyvision.org (dl.caffe.berkeleyvision.org)|169.229.222.251|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 17858008 (17M) [application/octet-stream]
Saving to: ‘caffe_ilsvrc12.tar.gz’

100%[======================================&gt;] 17,858,008   112MB/s   in 0.2s   

2016-02-24 00:28:36 (112 MB/s) - ‘caffe_ilsvrc12.tar.gz’ saved [17858008/17858008]

Unzipping...
Done.
Model already exists.
Downloading 2000 images with 7 workers...
Writing train/val for 1996 successfully downloaded images.
</code></pre>
<p>Define <code>weights</code>, the path to the ImageNet pretrained weights we just downloaded, and make sure it exists.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">weights = os.path.join(caffe_root, <span class="string">&#x27;models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> os.path.exists(weights)</span><br></pre></td></tr></table></figure>

<p>Load the 1000 ImageNet labels from <code>ilsvrc12/synset_words.txt</code>, and the 5 style labels from <code>finetune_flickr_style/style_names.txt</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load ImageNet labels to imagenet_labels</span></span><br><span class="line">imagenet_label_file = caffe_root + <span class="string">&#x27;data/ilsvrc12/synset_words.txt&#x27;</span></span><br><span class="line">imagenet_labels = <span class="built_in">list</span>(np.loadtxt(imagenet_label_file, <span class="built_in">str</span>, delimiter=<span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(imagenet_labels) == <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Loaded ImageNet labels:\n&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>.join(imagenet_labels[:<span class="number">10</span>] + [<span class="string">&#x27;...&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load style labels to style_labels</span></span><br><span class="line">style_label_file = caffe_root + <span class="string">&#x27;examples/finetune_flickr_style/style_names.txt&#x27;</span></span><br><span class="line">style_labels = <span class="built_in">list</span>(np.loadtxt(style_label_file, <span class="built_in">str</span>, delimiter=<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> NUM_STYLE_LABELS &gt; <span class="number">0</span>:</span><br><span class="line">    style_labels = style_labels[:NUM_STYLE_LABELS]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;\nLoaded style labels:\n&#x27;</span>, <span class="string">&#x27;, &#x27;</span>.join(style_labels)</span><br></pre></td></tr></table></figure>

<pre><code>Loaded ImageNet labels:
n01440764 tench, Tinca tinca
n01443537 goldfish, Carassius auratus
n01484850 great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias
n01491361 tiger shark, Galeocerdo cuvieri
n01494475 hammerhead, hammerhead shark
n01496331 electric ray, crampfish, numbfish, torpedo
n01498041 stingray
n01514668 cock
n01514859 hen
n01518878 ostrich, Struthio camelus
...

Loaded style labels:
Detailed, Pastel, Melancholy, Noir, HDR
</code></pre>
<h3 id="Defining-and-running-the-nets"><a href="#Defining-and-running-the-nets" class="headerlink" title="Defining and running the nets"></a>Defining and running the nets</h3><p>We’ll start by defining <code>caffenet</code>, a function which initializes the <em>CaffeNet</em> architecture (a minor variant on <em>AlexNet</em>), taking arguments specifying the data and number of output classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> layers <span class="keyword">as</span> L</span><br><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> params <span class="keyword">as</span> P</span><br><span class="line"></span><br><span class="line">weight_param = <span class="built_in">dict</span>(lr_mult=<span class="number">1</span>, decay_mult=<span class="number">1</span>)</span><br><span class="line">bias_param   = <span class="built_in">dict</span>(lr_mult=<span class="number">2</span>, decay_mult=<span class="number">0</span>)</span><br><span class="line">learned_param = [weight_param, bias_param]</span><br><span class="line"></span><br><span class="line">frozen_param = [<span class="built_in">dict</span>(lr_mult=<span class="number">0</span>)] * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv_relu</span>(<span class="params">bottom, ks, nout, stride=<span class="number">1</span>, pad=<span class="number">0</span>, group=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">              param=learned_param,</span></span><br><span class="line"><span class="params">              weight_filler=<span class="built_in">dict</span>(<span class="params"><span class="built_in">type</span>=<span class="string">&#x27;gaussian&#x27;</span>, std=<span class="number">0.01</span></span>),</span></span><br><span class="line"><span class="params">              bias_filler=<span class="built_in">dict</span>(<span class="params"><span class="built_in">type</span>=<span class="string">&#x27;constant&#x27;</span>, value=<span class="number">0.1</span></span>)</span>):</span><br><span class="line">    conv = L.Convolution(bottom, kernel_size=ks, stride=stride,</span><br><span class="line">                         num_output=nout, pad=pad, group=group,</span><br><span class="line">                         param=param, weight_filler=weight_filler,</span><br><span class="line">                         bias_filler=bias_filler)</span><br><span class="line">    <span class="keyword">return</span> conv, L.ReLU(conv, in_place=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fc_relu</span>(<span class="params">bottom, nout, param=learned_param,</span></span><br><span class="line"><span class="params">            weight_filler=<span class="built_in">dict</span>(<span class="params"><span class="built_in">type</span>=<span class="string">&#x27;gaussian&#x27;</span>, std=<span class="number">0.005</span></span>),</span></span><br><span class="line"><span class="params">            bias_filler=<span class="built_in">dict</span>(<span class="params"><span class="built_in">type</span>=<span class="string">&#x27;constant&#x27;</span>, value=<span class="number">0.1</span></span>)</span>):</span><br><span class="line">    fc = L.InnerProduct(bottom, num_output=nout, param=param,</span><br><span class="line">                        weight_filler=weight_filler,</span><br><span class="line">                        bias_filler=bias_filler)</span><br><span class="line">    <span class="keyword">return</span> fc, L.ReLU(fc, in_place=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_pool</span>(<span class="params">bottom, ks, stride=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> L.Pooling(bottom, pool=P.Pooling.MAX, kernel_size=ks, stride=stride)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caffenet</span>(<span class="params">data, label=<span class="literal">None</span>, train=<span class="literal">True</span>, num_classes=<span class="number">1000</span>,</span></span><br><span class="line"><span class="params">             classifier_name=<span class="string">&#x27;fc8&#x27;</span>, learn_all=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a NetSpec specifying CaffeNet, following the original proto text</span></span><br><span class="line"><span class="string">       specification (./models/bvlc_reference_caffenet/train_val.prototxt).&quot;&quot;&quot;</span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    n.data = data</span><br><span class="line">    param = learned_param <span class="keyword">if</span> learn_all <span class="keyword">else</span> frozen_param</span><br><span class="line">    n.conv1, n.relu1 = conv_relu(n.data, <span class="number">11</span>, <span class="number">96</span>, stride=<span class="number">4</span>, param=param)</span><br><span class="line">    n.pool1 = max_pool(n.relu1, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.norm1 = L.LRN(n.pool1, local_size=<span class="number">5</span>, alpha=<span class="number">1e-4</span>, beta=<span class="number">0.75</span>)</span><br><span class="line">    n.conv2, n.relu2 = conv_relu(n.norm1, <span class="number">5</span>, <span class="number">256</span>, pad=<span class="number">2</span>, group=<span class="number">2</span>, param=param)</span><br><span class="line">    n.pool2 = max_pool(n.relu2, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.norm2 = L.LRN(n.pool2, local_size=<span class="number">5</span>, alpha=<span class="number">1e-4</span>, beta=<span class="number">0.75</span>)</span><br><span class="line">    n.conv3, n.relu3 = conv_relu(n.norm2, <span class="number">3</span>, <span class="number">384</span>, pad=<span class="number">1</span>, param=param)</span><br><span class="line">    n.conv4, n.relu4 = conv_relu(n.relu3, <span class="number">3</span>, <span class="number">384</span>, pad=<span class="number">1</span>, group=<span class="number">2</span>, param=param)</span><br><span class="line">    n.conv5, n.relu5 = conv_relu(n.relu4, <span class="number">3</span>, <span class="number">256</span>, pad=<span class="number">1</span>, group=<span class="number">2</span>, param=param)</span><br><span class="line">    n.pool5 = max_pool(n.relu5, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.fc6, n.relu6 = fc_relu(n.pool5, <span class="number">4096</span>, param=param)</span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        n.drop6 = fc7input = L.Dropout(n.relu6, in_place=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fc7input = n.relu6</span><br><span class="line">    n.fc7, n.relu7 = fc_relu(fc7input, <span class="number">4096</span>, param=param)</span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        n.drop7 = fc8input = L.Dropout(n.relu7, in_place=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fc8input = n.relu7</span><br><span class="line">    <span class="comment"># always learn fc8 (param=learned_param)</span></span><br><span class="line">    fc8 = L.InnerProduct(fc8input, num_output=num_classes, param=learned_param)</span><br><span class="line">    <span class="comment"># give fc8 the name specified by argument `classifier_name`</span></span><br><span class="line">    n.__setattr__(classifier_name, fc8)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> train:</span><br><span class="line">        n.probs = L.Softmax(fc8)</span><br><span class="line">    <span class="keyword">if</span> label <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        n.label = label</span><br><span class="line">        n.loss = L.SoftmaxWithLoss(fc8, n.label)</span><br><span class="line">        n.acc = L.Accuracy(fc8, n.label)</span><br><span class="line">    <span class="comment"># write the net to a temporary file and return its filename</span></span><br><span class="line">    <span class="keyword">with</span> tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(n.to_proto()))</span><br><span class="line">        <span class="keyword">return</span> f.name</span><br></pre></td></tr></table></figure>

<p>Now, let’s create a <em>CaffeNet</em> that takes unlabeled “dummy data” as input, allowing us to set its input images externally and see what ImageNet classes it predicts.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dummy_data = L.DummyData(shape=<span class="built_in">dict</span>(dim=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">227</span>, <span class="number">227</span>]))</span><br><span class="line">imagenet_net_filename = caffenet(data=dummy_data, train=<span class="literal">False</span>)</span><br><span class="line">imagenet_net = caffe.Net(imagenet_net_filename, weights, caffe.TEST)</span><br></pre></td></tr></table></figure>

<p>Define a function <code>style_net</code> which calls <code>caffenet</code> on data from the Flickr style dataset.</p>
<p>The new network will also have the <em>CaffeNet</em> architecture, with differences in the input and output:</p>
<ul>
<li>the input is the Flickr style data we downloaded, provided by an <code>ImageData</code> layer</li>
<li>the output is a distribution over 20 classes rather than the original 1000 ImageNet classes</li>
<li>the classification layer is renamed from <code>fc8</code> to <code>fc8_flickr</code> to tell Caffe not to load the original classifier (<code>fc8</code>) weights from the ImageNet-pretrained model</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">style_net</span>(<span class="params">train=<span class="literal">True</span>, learn_all=<span class="literal">False</span>, subset=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> subset <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        subset = <span class="string">&#x27;train&#x27;</span> <span class="keyword">if</span> train <span class="keyword">else</span> <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    source = caffe_root + <span class="string">&#x27;data/flickr_style/%s.txt&#x27;</span> % subset</span><br><span class="line">    transform_param = <span class="built_in">dict</span>(mirror=train, crop_size=<span class="number">227</span>,</span><br><span class="line">        mean_file=caffe_root + <span class="string">&#x27;data/ilsvrc12/imagenet_mean.binaryproto&#x27;</span>)</span><br><span class="line">    style_data, style_label = L.ImageData(</span><br><span class="line">        transform_param=transform_param, source=source,</span><br><span class="line">        batch_size=<span class="number">50</span>, new_height=<span class="number">256</span>, new_width=<span class="number">256</span>, ntop=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> caffenet(data=style_data, label=style_label, train=train,</span><br><span class="line">                    num_classes=NUM_STYLE_LABELS,</span><br><span class="line">                    classifier_name=<span class="string">&#x27;fc8_flickr&#x27;</span>,</span><br><span class="line">                    learn_all=learn_all)</span><br></pre></td></tr></table></figure>

<p>Use the <code>style_net</code> function defined above to initialize <code>untrained_style_net</code>, a <em>CaffeNet</em> with input images from the style dataset and weights from the pretrained ImageNet model.</p>
<p>Call <code>forward</code> on <code>untrained_style_net</code> to get a batch of style training data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">untrained_style_net = caffe.Net(style_net(train=<span class="literal">False</span>, subset=<span class="string">&#x27;train&#x27;</span>),</span><br><span class="line">                                weights, caffe.TEST)</span><br><span class="line">untrained_style_net.forward()</span><br><span class="line">style_data_batch = untrained_style_net.blobs[<span class="string">&#x27;data&#x27;</span>].data.copy()</span><br><span class="line">style_label_batch = np.array(untrained_style_net.blobs[<span class="string">&#x27;label&#x27;</span>].data, dtype=np.int32)</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>Pick one of the style net training images from the batch of 50 (we’ll arbitrarily choose #8 here).  Display it, then run it through <code>imagenet_net</code>, the ImageNet-pretrained network to view its top 5 predicted classes from the 1000 ImageNet classes.</p>
<p>Below we chose an image where the network’s predictions happen to be reasonable, as the image is of a beach, and “sandbar” and “seashore” both happen to be ImageNet-1000 categories.  For other images, the predictions won’t be this good, sometimes due to the network actually failing to recognize the object(s) present in the image, but perhaps even more often due to the fact that not all images contain an object from the (somewhat arbitrarily chosen) 1000 ImageNet categories. Modify the <code>batch_index</code> variable by changing its default setting of 8 to another value from 0-49 (since the batch size is 50) to see predictions for other images in the batch.  (To go beyond this batch of 50 images, first rerun the <em>above</em> cell to load a fresh batch of data into <code>style_net</code>.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disp_preds</span>(<span class="params">net, image, labels, k=<span class="number">5</span>, name=<span class="string">&#x27;ImageNet&#x27;</span></span>):</span><br><span class="line">    input_blob = net.blobs[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    net.blobs[<span class="string">&#x27;data&#x27;</span>].data[<span class="number">0</span>, ...] = image</span><br><span class="line">    probs = net.forward(start=<span class="string">&#x27;conv1&#x27;</span>)[<span class="string">&#x27;probs&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    top_k = (-probs).argsort()[:k]</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;top %d predicted %s labels =&#x27;</span> % (k, name)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;\n&#x27;</span>.join(<span class="string">&#x27;\t(%d) %5.2f%% %s&#x27;</span> % (i+<span class="number">1</span>, <span class="number">100</span>*probs[p], labels[p])</span><br><span class="line">                    <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(top_k))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disp_imagenet_preds</span>(<span class="params">net, image</span>):</span><br><span class="line">    disp_preds(net, image, imagenet_labels, name=<span class="string">&#x27;ImageNet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disp_style_preds</span>(<span class="params">net, image</span>):</span><br><span class="line">    disp_preds(net, image, style_labels, name=<span class="string">&#x27;style&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_index = <span class="number">8</span></span><br><span class="line">image = style_data_batch[batch_index]</span><br><span class="line">plt.imshow(deprocess_net_image(image))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;actual label =&#x27;</span>, style_labels[style_label_batch[batch_index]]</span><br></pre></td></tr></table></figure>

<pre><code>actual label = Melancholy
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808102003231-729149953.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">disp_imagenet_preds(imagenet_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted ImageNet labels =
    (1) 69.89% n09421951 sandbar, sand bar
    (2) 21.76% n09428293 seashore, coast, seacoast, sea-coast
    (3)  3.22% n02894605 breakwater, groin, groyne, mole, bulwark, seawall, jetty
    (4)  1.89% n04592741 wing
    (5)  1.23% n09332890 lakeside, lakeshore
</code></pre>
<p>We can also look at <code>untrained_style_net</code>‘s predictions, but we won’t see anything interesting as its classifier hasn’t been trained yet.</p>
<p>In fact, since we zero-initialized the classifier (see <code>caffenet</code> definition – no <code>weight_filler</code> is passed to the final <code>InnerProduct</code> layer), the softmax inputs should be all zero and we should therefore see a predicted probability of 1&#x2F;N for each label (for N labels).  Since we set N &#x3D; 5, we get a predicted probability of 20% for each class.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">disp_style_preds(untrained_style_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted style labels =
    (1) 20.00% Detailed
    (2) 20.00% Pastel
    (3) 20.00% Melancholy
    (4) 20.00% Noir
    (5) 20.00% HDR
</code></pre>
<p>We can also verify that the activations in layer <code>fc7</code> immediately before the classification layer are the same as (or very close to) those in the ImageNet-pretrained model, since both models are using the same pretrained weights in the <code>conv1</code> through <code>fc7</code> layers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diff = untrained_style_net.blobs[<span class="string">&#x27;fc7&#x27;</span>].data[<span class="number">0</span>] - imagenet_net.blobs[<span class="string">&#x27;fc7&#x27;</span>].data[<span class="number">0</span>]</span><br><span class="line">error = (diff ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line"><span class="keyword">assert</span> error &lt; <span class="number">1e-8</span></span><br></pre></td></tr></table></figure>

<p>Delete <code>untrained_style_net</code> to save memory.  (Hang on to <code>imagenet_net</code> as we’ll use it again later.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> untrained_style_net</span><br></pre></td></tr></table></figure>

<h3 id="Training-the-style-classifier"><a href="#Training-the-style-classifier" class="headerlink" title="Training the style classifier"></a>Training the style classifier</h3><p>Now, we’ll define a function <code>solver</code> to create our Caffe solvers, which are used to train the network (learn its weights).  In this function we’ll set values for various parameters used for learning, display, and “snapshotting” – see the inline comments for explanations of what they mean.  You may want to play with some of the learning parameters to see if you can improve on the results here!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe.proto <span class="keyword">import</span> caffe_pb2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>(<span class="params">train_net_path, test_net_path=<span class="literal">None</span>, base_lr=<span class="number">0.001</span></span>):</span><br><span class="line">    s = caffe_pb2.SolverParameter()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify locations of the train and (maybe) test networks.</span></span><br><span class="line">    s.train_net = train_net_path</span><br><span class="line">    <span class="keyword">if</span> test_net_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        s.test_net.append(test_net_path)</span><br><span class="line">        s.test_interval = <span class="number">1000</span>  <span class="comment"># Test after every 1000 training iterations.</span></span><br><span class="line">        s.test_iter.append(<span class="number">100</span>) <span class="comment"># Test on 100 batches each time we test.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The number of iterations over which to average the gradient.</span></span><br><span class="line">    <span class="comment"># Effectively boosts the training batch size by the given factor, without</span></span><br><span class="line">    <span class="comment"># affecting memory utilization.</span></span><br><span class="line">    s.iter_size = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    s.max_iter = <span class="number">100000</span>     <span class="comment"># # of times to update the net (training iterations)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Solve using the stochastic gradient descent (SGD) algorithm.</span></span><br><span class="line">    <span class="comment"># Other choices include &#x27;Adam&#x27; and &#x27;RMSProp&#x27;.</span></span><br><span class="line">    s.<span class="built_in">type</span> = <span class="string">&#x27;SGD&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the initial learning rate for SGD.</span></span><br><span class="line">    s.base_lr = base_lr</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set `lr_policy` to define how the learning rate changes during training.</span></span><br><span class="line">    <span class="comment"># Here, we &#x27;step&#x27; the learning rate by multiplying it by a factor `gamma`</span></span><br><span class="line">    <span class="comment"># every `stepsize` iterations.</span></span><br><span class="line">    s.lr_policy = <span class="string">&#x27;step&#x27;</span></span><br><span class="line">    s.gamma = <span class="number">0.1</span></span><br><span class="line">    s.stepsize = <span class="number">20000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set other SGD hyperparameters. Setting a non-zero `momentum` takes a</span></span><br><span class="line">    <span class="comment"># weighted average of the current gradient and previous gradients to make</span></span><br><span class="line">    <span class="comment"># learning more stable. L2 weight decay regularizes learning, to help prevent</span></span><br><span class="line">    <span class="comment"># the model from overfitting.</span></span><br><span class="line">    s.momentum = <span class="number">0.9</span></span><br><span class="line">    s.weight_decay = <span class="number">5e-4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Display the current training loss and accuracy every 1000 iterations.</span></span><br><span class="line">    s.display = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Snapshots are files used to store networks we&#x27;ve trained.  Here, we&#x27;ll</span></span><br><span class="line">    <span class="comment"># snapshot every 10K iterations -- ten times during training.</span></span><br><span class="line">    s.snapshot = <span class="number">10000</span></span><br><span class="line">    s.snapshot_prefix = caffe_root + <span class="string">&#x27;models/finetune_flickr_style/finetune_flickr_style&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Train on the GPU.  Using the CPU to train large networks is very slow.</span></span><br><span class="line">    s.solver_mode = caffe_pb2.SolverParameter.GPU</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Write the solver to a temporary file and return its filename.</span></span><br><span class="line">    <span class="keyword">with</span> tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(s))</span><br><span class="line">        <span class="keyword">return</span> f.name</span><br></pre></td></tr></table></figure>

<p>Now we’ll invoke the solver to train the style net’s classification layer.</p>
<p>For the record, if you want to train the network using only the command line tool, this is the command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">build/tools/caffe train \</span><br><span class="line">-solver models/finetune_flickr_style/solver.prototxt \</span><br><span class="line">-weights models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel \</span><br><span class="line">-gpu 0</span><br></pre></td></tr></table></figure>

<p>However, we will train using Python in this example.</p>
<p>We’ll first define <code>run_solvers</code>, a function that takes a list of solvers and steps each one in a round robin manner, recording the accuracy and loss values each iteration.  At the end, the learned weights are saved to a file.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_solvers</span>(<span class="params">niter, solvers, disp_interval=<span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run solvers for niter iterations,</span></span><br><span class="line"><span class="string">       returning the loss and accuracy recorded each iteration.</span></span><br><span class="line"><span class="string">       `solvers` is a list of (name, solver) tuples.&quot;&quot;&quot;</span></span><br><span class="line">    blobs = (<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;acc&#x27;</span>)</span><br><span class="line">    loss, acc = (&#123;name: np.zeros(niter) <span class="keyword">for</span> name, _ <span class="keyword">in</span> solvers&#125;</span><br><span class="line">                 <span class="keyword">for</span> _ <span class="keyword">in</span> blobs)</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> <span class="built_in">range</span>(niter):</span><br><span class="line">        <span class="keyword">for</span> name, s <span class="keyword">in</span> solvers:</span><br><span class="line">            s.step(<span class="number">1</span>)  <span class="comment"># run a single SGD step in Caffe</span></span><br><span class="line">            loss[name][it], acc[name][it] = (s.net.blobs[b].data.copy()</span><br><span class="line">                                             <span class="keyword">for</span> b <span class="keyword">in</span> blobs)</span><br><span class="line">        <span class="keyword">if</span> it % disp_interval == <span class="number">0</span> <span class="keyword">or</span> it + <span class="number">1</span> == niter:</span><br><span class="line">            loss_disp = <span class="string">&#x27;; &#x27;</span>.join(<span class="string">&#x27;%s: loss=%.3f, acc=%2d%%&#x27;</span> %</span><br><span class="line">                                  (n, loss[n][it], np.<span class="built_in">round</span>(<span class="number">100</span>*acc[n][it]))</span><br><span class="line">                                  <span class="keyword">for</span> n, _ <span class="keyword">in</span> solvers)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;%3d) %s&#x27;</span> % (it, loss_disp)     </span><br><span class="line">    <span class="comment"># Save the learned weights from both nets.</span></span><br><span class="line">    weight_dir = tempfile.mkdtemp()</span><br><span class="line">    weights = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, s <span class="keyword">in</span> solvers:</span><br><span class="line">        filename = <span class="string">&#x27;weights.%s.caffemodel&#x27;</span> % name</span><br><span class="line">        weights[name] = os.path.join(weight_dir, filename)</span><br><span class="line">        s.net.save(weights[name])</span><br><span class="line">    <span class="keyword">return</span> loss, acc, weights</span><br></pre></td></tr></table></figure>

<p>Let’s create and run solvers to train nets for the style recognition task.  We’ll create two solvers – one (<code>style_solver</code>) will have its train net initialized to the ImageNet-pretrained weights (this is done by the call to the <code>copy_from</code> method), and the other (<code>scratch_style_solver</code>) will start from a <em>randomly</em> initialized net.</p>
<p>During training, we should see that the ImageNet pretrained net is learning faster and attaining better accuracies than the scratch net.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">niter = <span class="number">200</span>  <span class="comment"># number of iterations to train</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset style_solver as before.</span></span><br><span class="line">style_solver_filename = solver(style_net(train=<span class="literal">True</span>))</span><br><span class="line">style_solver = caffe.get_solver(style_solver_filename)</span><br><span class="line">style_solver.net.copy_from(weights)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For reference, we also create a solver that isn&#x27;t initialized from</span></span><br><span class="line"><span class="comment"># the pretrained ImageNet weights.</span></span><br><span class="line">scratch_style_solver_filename = solver(style_net(train=<span class="literal">True</span>))</span><br><span class="line">scratch_style_solver = caffe.get_solver(scratch_style_solver_filename)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Running solvers for %d iterations...&#x27;</span> % niter</span><br><span class="line">solvers = [(<span class="string">&#x27;pretrained&#x27;</span>, style_solver),</span><br><span class="line">           (<span class="string">&#x27;scratch&#x27;</span>, scratch_style_solver)]</span><br><span class="line">loss, acc, weights = run_solvers(niter, solvers)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Done.&#x27;</span></span><br><span class="line"></span><br><span class="line">train_loss, scratch_train_loss = loss[<span class="string">&#x27;pretrained&#x27;</span>], loss[<span class="string">&#x27;scratch&#x27;</span>]</span><br><span class="line">train_acc, scratch_train_acc = acc[<span class="string">&#x27;pretrained&#x27;</span>], acc[<span class="string">&#x27;scratch&#x27;</span>]</span><br><span class="line">style_weights, scratch_style_weights = weights[<span class="string">&#x27;pretrained&#x27;</span>], weights[<span class="string">&#x27;scratch&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete solvers to save memory.</span></span><br><span class="line"><span class="keyword">del</span> style_solver, scratch_style_solver, solvers</span><br></pre></td></tr></table></figure>

<pre><code>Running solvers for 200 iterations...
  1) pretrained: loss=1.609, acc=28%; scratch: loss=1.609, acc=28%
 1)  pretrained: loss=1.293, acc=52%; scratch: loss=1.626, acc=14%
 2)  pretrained: loss=1.110, acc=56%; scratch: loss=1.646, acc=10%
 3)  pretrained: loss=1.084, acc=60%; scratch: loss=1.616, acc=20%
 4)  pretrained: loss=0.898, acc=64%; scratch: loss=1.588, acc=26%
 5)  pretrained: loss=1.024, acc=54%; scratch: loss=1.607, acc=32%
 6)  pretrained: loss=0.925, acc=66%; scratch: loss=1.616, acc=20%
 7)  pretrained: loss=0.861, acc=74%; scratch: loss=1.598, acc=24%
 8)  pretrained: loss=0.967, acc=60%; scratch: loss=1.588, acc=30%
 9)  pretrained: loss=1.274, acc=52%; scratch: loss=1.608, acc=20%
1)   pretrained: loss=1.113, acc=62%; scratch: loss=1.588, acc=30%
2)   pretrained: loss=0.922, acc=62%; scratch: loss=1.578, acc=36%
3)   pretrained: loss=0.918, acc=62%; scratch: loss=1.599, acc=20%
4)   pretrained: loss=0.959, acc=58%; scratch: loss=1.594, acc=22%
5)   pretrained: loss=1.228, acc=50%; scratch: loss=1.608, acc=14%
6)   pretrained: loss=0.727, acc=76%; scratch: loss=1.623, acc=16%
7)   pretrained: loss=1.074, acc=66%; scratch: loss=1.607, acc=20%
8)   pretrained: loss=0.887, acc=60%; scratch: loss=1.614, acc=20%
9)   pretrained: loss=0.961, acc=62%; scratch: loss=1.614, acc=18%
10)  pretrained: loss=0.737, acc=76%; scratch: loss=1.613, acc=18%
11)  pretrained: loss=0.836, acc=70%; scratch: loss=1.614, acc=16%
Done.
</code></pre>
<p>Let’s look at the training loss and accuracy produced by the two training procedures.  Notice how quickly the ImageNet pretrained model’s loss value (blue) drops, and that the randomly initialized model’s loss value (green) barely (if at all) improves from training only the classifier layer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot(np.vstack([train_loss, scratch_train_loss]).T)</span><br><span class="line">xlabel(<span class="string">&#x27;Iteration #&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.text.Text at 0x7f75d49e1090&gt;
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808102005756-1000541529.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot(np.vstack([train_acc, scratch_train_acc]).T)</span><br><span class="line">xlabel(<span class="string">&#x27;Iteration #&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.text.Text at 0x7f75d49e1a90&gt;
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808102008709-1558718778.png" alt="png"></p>
<p>Let’s take a look at the testing accuracy after running 200 iterations of training. Note that we’re classifying among 5 classes, giving chance accuracy of 20%. We expect both results to be better than chance accuracy (20%), and we further expect the result from training using the ImageNet pretraining initialization to be much better than the one from training from scratch. Let’s see.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eval_style_net</span>(<span class="params">weights, test_iters=<span class="number">10</span></span>):</span><br><span class="line">    test_net = caffe.Net(style_net(train=<span class="literal">False</span>), weights, caffe.TEST)</span><br><span class="line">    accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> xrange(test_iters):</span><br><span class="line">        accuracy += test_net.forward()[<span class="string">&#x27;acc&#x27;</span>]</span><br><span class="line">    accuracy /= test_iters</span><br><span class="line">    <span class="keyword">return</span> test_net, accuracy</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_net, accuracy = eval_style_net(style_weights)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Accuracy, trained from ImageNet initialization: %3.1f%%&#x27;</span> % (<span class="number">100</span>*accuracy, )</span><br><span class="line">scratch_test_net, scratch_accuracy = eval_style_net(scratch_style_weights)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Accuracy, trained from   random initialization: %3.1f%%&#x27;</span> % (<span class="number">100</span>*scratch_accuracy, )</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy, trained from ImageNet initialization: 50.0%
Accuracy, trained from   random initialization: 23.6%
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="End-to-end-finetuning-for-style"><a href="#End-to-end-finetuning-for-style" class="headerlink" title="End-to-end finetuning for style"></a>End-to-end finetuning for style</h3><p>Finally, we’ll train both nets again, starting from the weights we just learned.  The only difference this time is that we’ll be learning the weights “end-to-end” by turning on learning in <em>all</em> layers of the network, starting from the RGB <code>conv1</code> filters directly applied to the input image.  We pass the argument <code>learn_all=True</code> to the <code>style_net</code> function defined earlier in this notebook, which tells the function to apply a positive (non-zero) <code>lr_mult</code> value for all parameters.  Under the default, <code>learn_all=False</code>, all parameters in the pretrained layers (<code>conv1</code> through <code>fc7</code>) are frozen (<code>lr_mult = 0</code>), and we learn only the classifier layer <code>fc8_flickr</code>.</p>
<p>Note that both networks start at roughly the accuracy achieved at the end of the previous training session, and improve significantly with end-to-end training.  To be more scientific, we’d also want to follow the same additional training procedure <em>without</em> the end-to-end training, to ensure that our results aren’t better simply because we trained for twice as long.  Feel free to try this yourself!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">end_to_end_net = style_net(train=<span class="literal">True</span>, learn_all=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set base_lr to 1e-3, the same as last time when learning only the classifier.</span></span><br><span class="line"><span class="comment"># You may want to play around with different values of this or other</span></span><br><span class="line"><span class="comment"># optimization parameters when fine-tuning.  For example, if learning diverges</span></span><br><span class="line"><span class="comment"># (e.g., the loss gets very large or goes to infinity/NaN), you should try</span></span><br><span class="line"><span class="comment"># decreasing base_lr (e.g., to 1e-4, then 1e-5, etc., until you find a value</span></span><br><span class="line"><span class="comment"># for which learning does not diverge).</span></span><br><span class="line">base_lr = <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line">style_solver_filename = solver(end_to_end_net, base_lr=base_lr)</span><br><span class="line">style_solver = caffe.get_solver(style_solver_filename)</span><br><span class="line">style_solver.net.copy_from(style_weights)</span><br><span class="line"></span><br><span class="line">scratch_style_solver_filename = solver(end_to_end_net, base_lr=base_lr)</span><br><span class="line">scratch_style_solver = caffe.get_solver(scratch_style_solver_filename)</span><br><span class="line">scratch_style_solver.net.copy_from(scratch_style_weights)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Running solvers for %d iterations...&#x27;</span> % niter</span><br><span class="line">solvers = [(<span class="string">&#x27;pretrained, end-to-end&#x27;</span>, style_solver),</span><br><span class="line">           (<span class="string">&#x27;scratch, end-to-end&#x27;</span>, scratch_style_solver)]</span><br><span class="line">_, _, finetuned_weights = run_solvers(niter, solvers)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Done.&#x27;</span></span><br><span class="line"></span><br><span class="line">style_weights_ft = finetuned_weights[<span class="string">&#x27;pretrained, end-to-end&#x27;</span>]</span><br><span class="line">scratch_style_weights_ft = finetuned_weights[<span class="string">&#x27;scratch, end-to-end&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete solvers to save memory.</span></span><br><span class="line"><span class="keyword">del</span> style_solver, scratch_style_solver, solvers</span><br></pre></td></tr></table></figure>

<pre><code>Running solvers for 200 iterations...
  1) pretrained, end-to-end: loss=0.781, acc=64%; scratch, end-to-end: loss=1.585, acc=28%
 1)  pretrained, end-to-end: loss=1.178, acc=62%; scratch, end-to-end: loss=1.638, acc=14%
 2)  pretrained, end-to-end: loss=1.084, acc=60%; scratch, end-to-end: loss=1.637, acc= 8%
 3)  pretrained, end-to-end: loss=0.902, acc=76%; scratch, end-to-end: loss=1.600, acc=20%
 4)  pretrained, end-to-end: loss=0.865, acc=64%; scratch, end-to-end: loss=1.574, acc=26%
 5)  pretrained, end-to-end: loss=0.888, acc=60%; scratch, end-to-end: loss=1.604, acc=26%
 6)  pretrained, end-to-end: loss=0.538, acc=78%; scratch, end-to-end: loss=1.555, acc=34%
 7)  pretrained, end-to-end: loss=0.717, acc=72%; scratch, end-to-end: loss=1.563, acc=30%
 8)  pretrained, end-to-end: loss=0.695, acc=74%; scratch, end-to-end: loss=1.502, acc=42%
 9)  pretrained, end-to-end: loss=0.708, acc=68%; scratch, end-to-end: loss=1.523, acc=26%
1)   pretrained, end-to-end: loss=0.432, acc=78%; scratch, end-to-end: loss=1.500, acc=38%
2)   pretrained, end-to-end: loss=0.611, acc=78%; scratch, end-to-end: loss=1.618, acc=18%
3)   pretrained, end-to-end: loss=0.610, acc=76%; scratch, end-to-end: loss=1.473, acc=30%
4)   pretrained, end-to-end: loss=0.471, acc=78%; scratch, end-to-end: loss=1.488, acc=26%
5)   pretrained, end-to-end: loss=0.500, acc=76%; scratch, end-to-end: loss=1.514, acc=38%
6)   pretrained, end-to-end: loss=0.476, acc=80%; scratch, end-to-end: loss=1.452, acc=46%
7)   pretrained, end-to-end: loss=0.368, acc=82%; scratch, end-to-end: loss=1.419, acc=34%
8)   pretrained, end-to-end: loss=0.556, acc=76%; scratch, end-to-end: loss=1.583, acc=36%
9)   pretrained, end-to-end: loss=0.574, acc=72%; scratch, end-to-end: loss=1.556, acc=22%
10)  pretrained, end-to-end: loss=0.360, acc=88%; scratch, end-to-end: loss=1.429, acc=44%
11)  pretrained, end-to-end: loss=0.458, acc=78%; scratch, end-to-end: loss=1.370, acc=44%
Done.
</code></pre>
<p>Let’s now test the end-to-end finetuned models.  Since all layers have been optimized for the style recognition task at hand, we expect both nets to get better results than the ones above, which were achieved by nets with only their classifier layers trained for the style task (on top of either ImageNet pretrained or randomly initialized weights).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_net, accuracy = eval_style_net(style_weights_ft)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Accuracy, finetuned from ImageNet initialization: %3.1f%%&#x27;</span> % (<span class="number">100</span>*accuracy, )</span><br><span class="line">scratch_test_net, scratch_accuracy = eval_style_net(scratch_style_weights_ft)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Accuracy, finetuned from   random initialization: %3.1f%%&#x27;</span> % (<span class="number">100</span>*scratch_accuracy, )</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy, finetuned from ImageNet initialization: 53.6%
Accuracy, finetuned from   random initialization: 39.2%
</code></pre>
<p>We’ll first look back at the image we started with and check our end-to-end trained model’s predictions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(deprocess_net_image(image))</span><br><span class="line">disp_style_preds(test_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted style labels =
    (1) 55.67% Melancholy
    (2) 27.21% HDR
    (3) 16.46% Pastel
    (4)  0.63% Detailed
    (5)  0.03% Noir
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808102011453-804222341.png" alt="png"></p>
<p>Whew, that looks a lot better than before!  But note that this image was from the training set, so the net got to see its label at training time.</p>
<p>Finally, we’ll pick an image from the test set (an image the model hasn’t seen) and look at our end-to-end finetuned style model’s predictions for it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_index = <span class="number">1</span></span><br><span class="line">image = test_net.blobs[<span class="string">&#x27;data&#x27;</span>].data[batch_index]</span><br><span class="line">plt.imshow(deprocess_net_image(image))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;actual label =&#x27;</span>, style_labels[<span class="built_in">int</span>(test_net.blobs[<span class="string">&#x27;label&#x27;</span>].data[batch_index])]</span><br></pre></td></tr></table></figure>

<pre><code>actual label = Pastel
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808102014230-1327642113.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">disp_style_preds(test_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted style labels =
    (1) 99.76% Pastel
    (2)  0.13% HDR
    (3)  0.11% Detailed
    (4)  0.00% Melancholy
    (5)  0.00% Noir
</code></pre>
<p>We can also look at the predictions of the network trained from scratch.  We see that in this case, the scratch network also predicts the correct label for the image (<em>Pastel</em>), but is much less confident in its prediction than the pretrained net.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">disp_style_preds(scratch_test_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted style labels =
    (1) 49.81% Pastel
    (2) 19.76% Detailed
    (3) 17.06% Melancholy
    (4) 11.66% HDR
    (5)  1.72% Noir
</code></pre>
<p>Of course, we can again look at the ImageNet model’s predictions for the above image:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">disp_imagenet_preds(imagenet_net, image)</span><br></pre></td></tr></table></figure>

<pre><code>top 5 predicted ImageNet labels =
    (1) 34.90% n07579787 plate
    (2) 21.63% n04263257 soup bowl
    (3) 17.75% n07875152 potpie
    (4)  5.72% n07711569 mashed potato
    (5)  5.27% n07584110 consomme
</code></pre>
<p>So we did finetuning and it is awesome. Let’s take a look at what kind of results we are able to get with a longer, more complete run of the style recognition dataset. Note: the below URL might be occasionally down because it is run on a research machine.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180808: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>fine-tuning</tag>
        <tag>style recognition</tag>
      </tags>
  </entry>
  <entry>
    <title>learning lenet with caffe and python</title>
    <url>//blog/learning-lenet/</url>
    <content><![CDATA[<h2 id="Solving-in-Python-with-LeNet"><a href="#Solving-in-Python-with-LeNet" class="headerlink" title="Solving in Python with LeNet"></a>Solving in Python with LeNet</h2><p>In this example, we’ll explore learning with Caffe in Python, using the fully-exposed <code>Solver</code> interface.</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ul>
<li>Set up the Python environment: we’ll use the <code>pylab</code> import for numpy and plot inline.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<ul>
<li>Import <code>caffe</code>, adding it to <code>sys.path</code> if needed. Make sure you’ve built pycaffe.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file should be run from &#123;caffe_root&#125;/examples (otherwise change this line)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> caffe</span><br></pre></td></tr></table></figure>

<ul>
<li>We’ll be using the provided LeNet example data and networks (make sure you’ve downloaded the data and created the databases, as below).</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run scripts from caffe root</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(caffe_root)</span><br><span class="line"><span class="comment"># Download data</span></span><br><span class="line">!data/mnist/get_mnist.sh</span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">!examples/mnist/create_mnist.sh</span><br><span class="line"><span class="comment"># back to examples</span></span><br><span class="line">os.chdir(<span class="string">&#x27;examples&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Downloading...
Creating lmdb...
Done.
</code></pre>
<h3 id="Creating-the-net"><a href="#Creating-the-net" class="headerlink" title="Creating the net"></a>Creating the net</h3><p>Now let’s make a variant of LeNet, the classic 1989 convnet architecture.</p>
<p>We’ll need two external files to help out:</p>
<ul>
<li>the net <code>prototxt</code>, defining the architecture and pointing to the train&#x2F;test data</li>
<li>the solver <code>prototxt</code>, defining the learning parameters</li>
</ul>
<p>We start by creating the net. We’ll write the net in a succinct and natural way as Python code that serializes to Caffe’s protobuf model format.</p>
<p>This network expects to read from pregenerated LMDBs, but reading directly from <code>ndarray</code>s is also possible using <code>MemoryDataLayer</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> layers <span class="keyword">as</span> L, params <span class="keyword">as</span> P</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lenet</span>(<span class="params">lmdb, batch_size</span>):</span><br><span class="line">    <span class="comment"># our version of LeNet: a series of linear and simple nonlinear transformations</span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    </span><br><span class="line">    n.data, n.label = L.Data(batch_size=batch_size, backend=P.Data.LMDB, source=lmdb,</span><br><span class="line">                             transform_param=<span class="built_in">dict</span>(scale=<span class="number">1.</span>/<span class="number">255</span>), ntop=<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    n.conv1 = L.Convolution(n.data, kernel_size=<span class="number">5</span>, num_output=<span class="number">20</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    n.pool1 = L.Pooling(n.conv1, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, pool=P.Pooling.MAX)</span><br><span class="line">    n.conv2 = L.Convolution(n.pool1, kernel_size=<span class="number">5</span>, num_output=<span class="number">50</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    n.pool2 = L.Pooling(n.conv2, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, pool=P.Pooling.MAX)</span><br><span class="line">    n.fc1 =   L.InnerProduct(n.pool2, num_output=<span class="number">500</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    n.relu1 = L.ReLU(n.fc1, in_place=<span class="literal">True</span>)</span><br><span class="line">    n.score = L.InnerProduct(n.relu1, num_output=<span class="number">10</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    n.loss =  L.SoftmaxWithLoss(n.score, n.label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n.to_proto()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mnist/lenet_auto_train.prototxt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(lenet(<span class="string">&#x27;mnist/mnist_train_lmdb&#x27;</span>, <span class="number">64</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mnist/lenet_auto_test.prototxt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(lenet(<span class="string">&#x27;mnist/mnist_test_lmdb&#x27;</span>, <span class="number">100</span>)))</span><br></pre></td></tr></table></figure>

<p>The net has been written to disk in a more verbose but human-readable serialization format using Google’s protobuf library. You can read, write, and modify this description directly. Let’s take a look at the train net.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!cat mnist/lenet_auto_train.prototxt</span><br></pre></td></tr></table></figure>

<pre><code>layer &#123;
  name: &quot;data&quot;
  type: &quot;Data&quot;
  top: &quot;data&quot;
  top: &quot;label&quot;
  transform_param &#123;
    scale: 0.00392156862745
  &#125;
  data_param &#123;
    source: &quot;mnist/mnist_train_lmdb&quot;
    batch_size: 64
    backend: LMDB
  &#125;
&#125;
layer &#123;
  name: &quot;conv1&quot;
  type: &quot;Convolution&quot;
  bottom: &quot;data&quot;
  top: &quot;conv1&quot;
  convolution_param &#123;
    num_output: 20
    kernel_size: 5
    weight_filler &#123;
      type: &quot;xavier&quot;
    &#125;
  &#125;
&#125;
layer &#123;
  name: &quot;pool1&quot;
  type: &quot;Pooling&quot;
  bottom: &quot;conv1&quot;
  top: &quot;pool1&quot;
  pooling_param &#123;
    pool: MAX
    kernel_size: 2
    stride: 2
  &#125;
&#125;
layer &#123;
  name: &quot;conv2&quot;
  type: &quot;Convolution&quot;
  bottom: &quot;pool1&quot;
  top: &quot;conv2&quot;
  convolution_param &#123;
    num_output: 50
    kernel_size: 5
    weight_filler &#123;
      type: &quot;xavier&quot;
    &#125;
  &#125;
&#125;
layer &#123;
  name: &quot;pool2&quot;
  type: &quot;Pooling&quot;
  bottom: &quot;conv2&quot;
  top: &quot;pool2&quot;
  pooling_param &#123;
    pool: MAX
    kernel_size: 2
    stride: 2
  &#125;
&#125;
layer &#123;
  name: &quot;fc1&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;pool2&quot;
  top: &quot;fc1&quot;
  inner_product_param &#123;
    num_output: 500
    weight_filler &#123;
      type: &quot;xavier&quot;
    &#125;
  &#125;
&#125;
layer &#123;
  name: &quot;relu1&quot;
  type: &quot;ReLU&quot;
  bottom: &quot;fc1&quot;
  top: &quot;fc1&quot;
&#125;
layer &#123;
  name: &quot;score&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;fc1&quot;
  top: &quot;score&quot;
  inner_product_param &#123;
    num_output: 10
    weight_filler &#123;
      type: &quot;xavier&quot;
    &#125;
  &#125;
&#125;
layer &#123;
  name: &quot;loss&quot;
  type: &quot;SoftmaxWithLoss&quot;
  bottom: &quot;score&quot;
  bottom: &quot;label&quot;
  top: &quot;loss&quot;
&#125;
</code></pre>
<p>Now let’s see the learning parameters, which are also written as a <code>prototxt</code> file (already provided on disk). We’re using SGD with momentum, weight decay, and a specific learning rate schedule.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!cat mnist/lenet_auto_solver.prototxt</span><br></pre></td></tr></table></figure>

<pre><code># The train/test net protocol buffer definition
train_net: &quot;mnist/lenet_auto_train.prototxt&quot;
test_net: &quot;mnist/lenet_auto_test.prototxt&quot;
# test_iter specifies how many forward passes the test should carry out.
# In the case of MNIST, we have test batch size 100 and 100 test iterations,
# covering the full 10,000 testing images.
test_iter: 100
# Carry out testing every 500 training iterations.
test_interval: 500
# The base learning rate, momentum and the weight decay of the network.
base_lr: 0.01
momentum: 0.9
weight_decay: 0.0005
# The learning rate policy
lr_policy: &quot;inv&quot;
gamma: 0.0001
power: 0.75
# Display every 100 iterations
display: 100
# The maximum number of iterations
max_iter: 10000
# snapshot intermediate results
snapshot: 5000
snapshot_prefix: &quot;mnist/lenet&quot;
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="Loading-and-checking-the-solver"><a href="#Loading-and-checking-the-solver" class="headerlink" title="Loading and checking the solver"></a>Loading and checking the solver</h3><ul>
<li>Let’s pick a device and load the solver. We’ll use SGD (with momentum), but other methods (such as Adagrad and Nesterov’s accelerated gradient) are also available.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">caffe.set_device(<span class="number">0</span>)</span><br><span class="line">caffe.set_mode_gpu()</span><br><span class="line"></span><br><span class="line"><span class="comment">### load the solver and create train and test nets</span></span><br><span class="line">solver = <span class="literal">None</span>  <span class="comment"># ignore this workaround for lmdb data (can&#x27;t instantiate two solvers on the same data)</span></span><br><span class="line">solver = caffe.SGDSolver(<span class="string">&#x27;mnist/lenet_auto_solver.prototxt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>To get an idea of the architecture of our net, we can check the dimensions of the intermediate features (blobs) and parameters (these will also be useful to refer to when manipulating data later).</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># each output is (batch size, feature dim, spatial dim)</span></span><br><span class="line">[(k, v.data.shape) <span class="keyword">for</span> k, v <span class="keyword">in</span> solver.net.blobs.items()]</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;data&#39;, (64, 1, 28, 28)),
 (&#39;label&#39;, (64,)),
 (&#39;conv1&#39;, (64, 20, 24, 24)),
 (&#39;pool1&#39;, (64, 20, 12, 12)),
 (&#39;conv2&#39;, (64, 50, 8, 8)),
 (&#39;pool2&#39;, (64, 50, 4, 4)),
 (&#39;fc1&#39;, (64, 500)),
 (&#39;score&#39;, (64, 10)),
 (&#39;loss&#39;, ())]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># just print the weight sizes (we&#x27;ll omit the biases)</span></span><br><span class="line">[(k, v[<span class="number">0</span>].data.shape) <span class="keyword">for</span> k, v <span class="keyword">in</span> solver.net.params.items()]</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;conv1&#39;, (20, 1, 5, 5)),
 (&#39;conv2&#39;, (50, 20, 5, 5)),
 (&#39;fc1&#39;, (500, 800)),
 (&#39;score&#39;, (10, 500))]
</code></pre>
<ul>
<li>Before taking off, let’s check that everything is loaded as we expect. We’ll run a forward pass on the train and test nets and check that they contain our data.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">solver.net.forward()  <span class="comment"># train net</span></span><br><span class="line">solver.test_nets[<span class="number">0</span>].forward()  <span class="comment"># test net (there can be more than one)</span></span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;loss&#39;: array(2.365971088409424, dtype=float32)&#125;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we use a little trick to tile the first eight images</span></span><br><span class="line">imshow(solver.net.blobs[<span class="string">&#x27;data&#x27;</span>].data[:<span class="number">8</span>, <span class="number">0</span>].transpose(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>).reshape(<span class="number">28</span>, <span class="number">8</span>*<span class="number">28</span>), cmap=<span class="string">&#x27;gray&#x27;</span>); axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;train labels:&#x27;</span>, solver.net.blobs[<span class="string">&#x27;label&#x27;</span>].data[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<pre><code>train labels: [ 5.  0.  4.  1.  9.  2.  1.  3.]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094007919-402598205.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imshow(solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;data&#x27;</span>].data[:<span class="number">8</span>, <span class="number">0</span>].transpose(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>).reshape(<span class="number">28</span>, <span class="number">8</span>*<span class="number">28</span>), cmap=<span class="string">&#x27;gray&#x27;</span>); axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;test labels:&#x27;</span>, solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;label&#x27;</span>].data[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<pre><code>test labels: [ 7.  2.  1.  0.  4.  1.  4.  9.]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094011687-911149908.png" alt="png"></p>
<h3 id="Stepping-the-solver"><a href="#Stepping-the-solver" class="headerlink" title="Stepping the solver"></a>Stepping the solver</h3><p>Both train and test nets seem to be loading data, and to have correct labels.</p>
<ul>
<li>Let’s take one step of (minibatch) SGD and see what happens.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">solver.step(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>Do we have gradients propagating through our filters? Let’s see the updates to the first layer, shown here as a $4 \times 5$ grid of $5 \times 5$ filters.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imshow(solver.net.params[<span class="string">&#x27;conv1&#x27;</span>][<span class="number">0</span>].diff[:, <span class="number">0</span>].reshape(<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">       .transpose(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>).reshape(<span class="number">4</span>*<span class="number">5</span>, <span class="number">5</span>*<span class="number">5</span>), cmap=<span class="string">&#x27;gray&#x27;</span>); axis(<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(-0.5, 24.5, 19.5, -0.5)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094015260-1011851543.png" alt="png"></p>
<h3 id="Writing-a-custom-training-loop"><a href="#Writing-a-custom-training-loop" class="headerlink" title="Writing a custom training loop"></a>Writing a custom training loop</h3><p>Something is happening. Let’s run the net for a while, keeping track of a few things as it goes.<br>Note that this process will be the same as if training through the <code>caffe</code> binary. In particular:</p>
<ul>
<li>logging will continue to happen as normal</li>
<li>snapshots will be taken at the interval specified in the solver prototxt (here, every 5000 iterations)</li>
<li>testing will happen at the interval specified (here, every 500 iterations)</li>
</ul>
<p>Since we have control of the loop in Python, we’re free to compute additional things as we go, as we show below. We can do many other things as well, for example:</p>
<ul>
<li>write a custom stopping criterion</li>
<li>change the solving process by updating the net in the loop</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line">niter = <span class="number">200</span></span><br><span class="line">test_interval = <span class="number">25</span></span><br><span class="line"><span class="comment"># losses will also be stored in the log</span></span><br><span class="line">train_loss = zeros(niter)</span><br><span class="line">test_acc = zeros(<span class="built_in">int</span>(np.ceil(niter / test_interval)))</span><br><span class="line">output = zeros((niter, <span class="number">8</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># the main solver loop</span></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> <span class="built_in">range</span>(niter):</span><br><span class="line">    solver.step(<span class="number">1</span>)  <span class="comment"># SGD by Caffe</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store the train loss</span></span><br><span class="line">    train_loss[it] = solver.net.blobs[<span class="string">&#x27;loss&#x27;</span>].data</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store the output on the first test batch</span></span><br><span class="line">    <span class="comment"># (start the forward pass at conv1 to avoid loading new data)</span></span><br><span class="line">    solver.test_nets[<span class="number">0</span>].forward(start=<span class="string">&#x27;conv1&#x27;</span>)</span><br><span class="line">    output[it] = solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;score&#x27;</span>].data[:<span class="number">8</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run a full test every so often</span></span><br><span class="line">    <span class="comment"># (Caffe can also do this for us and write to a log, but we show here</span></span><br><span class="line">    <span class="comment">#  how to do it directly in Python, where more complicated things are easier.)</span></span><br><span class="line">    <span class="keyword">if</span> it % test_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Iteration&#x27;</span>, it, <span class="string">&#x27;testing...&#x27;</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> test_it <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            solver.test_nets[<span class="number">0</span>].forward()</span><br><span class="line">            correct += <span class="built_in">sum</span>(solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;score&#x27;</span>].data.argmax(<span class="number">1</span>)</span><br><span class="line">                           == solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;label&#x27;</span>].data)</span><br><span class="line">        test_acc[it // test_interval] = correct / <span class="number">1e4</span></span><br></pre></td></tr></table></figure>

<pre><code>Iteration 0 testing...
Iteration 25 testing...
Iteration 50 testing...
Iteration 75 testing...
Iteration 100 testing...
Iteration 125 testing...
Iteration 150 testing...
Iteration 175 testing...
CPU times: user 12.6 s, sys: 2.4 s, total: 15 s
Wall time: 14.4 s
</code></pre>
<ul>
<li>Let’s plot the train loss and test accuracy.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_, ax1 = subplots()</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax1.plot(arange(niter), train_loss)</span><br><span class="line">ax2.plot(test_interval * arange(<span class="built_in">len</span>(test_acc)), test_acc, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;iteration&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;train loss&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;test accuracy&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Test Accuracy: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(test_acc[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.text.Text at 0x7f5199b33610&gt;
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094018680-398130560.png" alt="png"></p>
<p>The loss seems to have dropped quickly and coverged (except for stochasticity), while the accuracy rose correspondingly. Hooray!</p>
<ul>
<li>Since we saved the results on the first test batch, we can watch how our prediction scores evolved. We’ll plot time on the $x$ axis and each possible label on the $y$, with lightness indicating confidence.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    figure(figsize=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    imshow(solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;data&#x27;</span>].data[i, <span class="number">0</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    figure(figsize=(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">    imshow(output[:<span class="number">50</span>, i].T, interpolation=<span class="string">&#x27;nearest&#x27;</span>, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    xlabel(<span class="string">&#x27;iteration&#x27;</span>)</span><br><span class="line">    ylabel(<span class="string">&#x27;label&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180808094024721-1595689994.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094029552-416345653.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094034649-822966977.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094311497-1449576622.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094314887-1994925148.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094317536-26566385.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094335122-926095188.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094337980-697149050.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094432007-708264326.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094434566-1643487577.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094437895-820163270.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094440686-873638921.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094443597-1649048206.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094538529-1155732317.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094541236-1763457969.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094544775-920829401.png" alt="png"></p>
<p>We started with little idea about any of these digits, and ended up with correct classifications for each. If you’ve been following along, you’ll see the last digit is the most difficult, a slanted “9” that’s (understandably) most confused with “4”.</p>
<ul>
<li>Note that these are the “raw” output scores rather than the softmax-computed probability vectors. The latter, shown below, make it easier to see the confidence of our net (but harder to see the scores for less likely digits).</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    figure(figsize=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    imshow(solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;data&#x27;</span>].data[i, <span class="number">0</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    figure(figsize=(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">    imshow(exp(output[:<span class="number">50</span>, i].T) / exp(output[:<span class="number">50</span>, i].T).<span class="built_in">sum</span>(<span class="number">0</span>), interpolation=<span class="string">&#x27;nearest&#x27;</span>, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    xlabel(<span class="string">&#x27;iteration&#x27;</span>)</span><br><span class="line">    ylabel(<span class="string">&#x27;label&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180808094547389-452464521.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094550416-1980646715.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094643633-1555377796.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094646089-423286443.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094648806-227199948.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094652998-1285471219.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094655636-2019663924.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094801120-1382644570.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094803553-433970977.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094806318-876599599.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094808993-1657424066.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094812363-210748808.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094910532-638562904.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094913556-1116095260.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094916138-1679934767.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094919214-1696881500.png" alt="png"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="Experiment-with-architecture-and-optimization"><a href="#Experiment-with-architecture-and-optimization" class="headerlink" title="Experiment with architecture and optimization"></a>Experiment with architecture and optimization</h3><p>Now that we’ve defined, trained, and tested LeNet there are many possible next steps:</p>
<ul>
<li>Define new architectures for comparison</li>
<li>Tune optimization by setting <code>base_lr</code> and the like or simply training longer</li>
<li>Switching the solver type from <code>SGD</code> to an adaptive method like <code>AdaDelta</code> or <code>Adam</code></li>
</ul>
<p>Feel free to explore these directions by editing the all-in-one example that follows.<br>Look for “<code>EDIT HERE</code>“ comments for suggested choice points.</p>
<p>By default this defines a simple linear classifier as a baseline.</p>
<p>In case your coffee hasn’t kicked in and you’d like inspiration, try out</p>
<ol>
<li>Switch the nonlinearity from <code>ReLU</code> to <code>ELU</code> or a saturing nonlinearity like <code>Sigmoid</code></li>
<li>Stack more fully connected and nonlinear layers</li>
<li>Search over learning rate 10x at a time (trying <code>0.1</code> and <code>0.001</code>)</li>
<li>Switch the solver type to <code>Adam</code> (this adaptive solver type should be less sensitive to hyperparameters, but no guarantees…)</li>
<li>Solve for longer by setting <code>niter</code> higher (to 500 or 1,000 for instance) to better show training differences</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_net_path = <span class="string">&#x27;mnist/custom_auto_train.prototxt&#x27;</span></span><br><span class="line">test_net_path = <span class="string">&#x27;mnist/custom_auto_test.prototxt&#x27;</span></span><br><span class="line">solver_config_path = <span class="string">&#x27;mnist/custom_auto_solver.prototxt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### define net</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_net</span>(<span class="params">lmdb, batch_size</span>):</span><br><span class="line">    <span class="comment"># define your own net!</span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># keep this data layer for all networks</span></span><br><span class="line">    n.data, n.label = L.Data(batch_size=batch_size, backend=P.Data.LMDB, source=lmdb,</span><br><span class="line">                             transform_param=<span class="built_in">dict</span>(scale=<span class="number">1.</span>/<span class="number">255</span>), ntop=<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># EDIT HERE to try different networks</span></span><br><span class="line">    <span class="comment"># this single layer defines a simple linear classifier</span></span><br><span class="line">    <span class="comment"># (in particular this defines a multiway logistic regression)</span></span><br><span class="line">    n.score =   L.InnerProduct(n.data, num_output=<span class="number">10</span>, weight_filler=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;xavier&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># EDIT HERE this is the LeNet variant we have already tried</span></span><br><span class="line">    <span class="comment"># n.conv1 = L.Convolution(n.data, kernel_size=5, num_output=20, weight_filler=dict(type=&#x27;xavier&#x27;))</span></span><br><span class="line">    <span class="comment"># n.pool1 = L.Pooling(n.conv1, kernel_size=2, stride=2, pool=P.Pooling.MAX)</span></span><br><span class="line">    <span class="comment"># n.conv2 = L.Convolution(n.pool1, kernel_size=5, num_output=50, weight_filler=dict(type=&#x27;xavier&#x27;))</span></span><br><span class="line">    <span class="comment"># n.pool2 = L.Pooling(n.conv2, kernel_size=2, stride=2, pool=P.Pooling.MAX)</span></span><br><span class="line">    <span class="comment"># n.fc1 =   L.InnerProduct(n.pool2, num_output=500, weight_filler=dict(type=&#x27;xavier&#x27;))</span></span><br><span class="line">    <span class="comment"># EDIT HERE consider L.ELU or L.Sigmoid for the nonlinearity</span></span><br><span class="line">    <span class="comment"># n.relu1 = L.ReLU(n.fc1, in_place=True)</span></span><br><span class="line">    <span class="comment"># n.score =   L.InnerProduct(n.fc1, num_output=10, weight_filler=dict(type=&#x27;xavier&#x27;))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># keep this loss layer for all networks</span></span><br><span class="line">    n.loss =  L.SoftmaxWithLoss(n.score, n.label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n.to_proto()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(train_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(custom_net(<span class="string">&#x27;mnist/mnist_train_lmdb&#x27;</span>, <span class="number">64</span>)))    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(test_net_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(custom_net(<span class="string">&#x27;mnist/mnist_test_lmdb&#x27;</span>, <span class="number">100</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">### define solver</span></span><br><span class="line"><span class="keyword">from</span> caffe.proto <span class="keyword">import</span> caffe_pb2</span><br><span class="line">s = caffe_pb2.SolverParameter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a seed for reproducible experiments:</span></span><br><span class="line"><span class="comment"># this controls for randomization in training.</span></span><br><span class="line">s.random_seed = <span class="number">0xCAFFE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify locations of the train and (maybe) test networks.</span></span><br><span class="line">s.train_net = train_net_path</span><br><span class="line">s.test_net.append(test_net_path)</span><br><span class="line">s.test_interval = <span class="number">500</span>  <span class="comment"># Test after every 500 training iterations.</span></span><br><span class="line">s.test_iter.append(<span class="number">100</span>) <span class="comment"># Test on 100 batches each time we test.</span></span><br><span class="line"></span><br><span class="line">s.max_iter = <span class="number">10000</span>     <span class="comment"># no. of times to update the net (training iterations)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># EDIT HERE to try different solvers</span></span><br><span class="line"><span class="comment"># solver types include &quot;SGD&quot;, &quot;Adam&quot;, and &quot;Nesterov&quot; among others.</span></span><br><span class="line">s.<span class="built_in">type</span> = <span class="string">&quot;SGD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the initial learning rate for SGD.</span></span><br><span class="line">s.base_lr = <span class="number">0.01</span>  <span class="comment"># EDIT HERE to try different learning rates</span></span><br><span class="line"><span class="comment"># Set momentum to accelerate learning by</span></span><br><span class="line"><span class="comment"># taking weighted average of current and previous updates.</span></span><br><span class="line">s.momentum = <span class="number">0.9</span></span><br><span class="line"><span class="comment"># Set weight decay to regularize and prevent overfitting</span></span><br><span class="line">s.weight_decay = <span class="number">5e-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set `lr_policy` to define how the learning rate changes during training.</span></span><br><span class="line"><span class="comment"># This is the same policy as our default LeNet.</span></span><br><span class="line">s.lr_policy = <span class="string">&#x27;inv&#x27;</span></span><br><span class="line">s.gamma = <span class="number">0.0001</span></span><br><span class="line">s.power = <span class="number">0.75</span></span><br><span class="line"><span class="comment"># EDIT HERE to try the fixed rate (and compare with adaptive solvers)</span></span><br><span class="line"><span class="comment"># `fixed` is the simplest policy that keeps the learning rate constant.</span></span><br><span class="line"><span class="comment"># s.lr_policy = &#x27;fixed&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display the current training loss and accuracy every 1000 iterations.</span></span><br><span class="line">s.display = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snapshots are files used to store networks we&#x27;ve trained.</span></span><br><span class="line"><span class="comment"># We&#x27;ll snapshot every 5K iterations -- twice during training.</span></span><br><span class="line">s.snapshot = <span class="number">5000</span></span><br><span class="line">s.snapshot_prefix = <span class="string">&#x27;mnist/custom_net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Train on the GPU</span></span><br><span class="line">s.solver_mode = caffe_pb2.SolverParameter.GPU</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the solver to a temporary file and return its filename.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(solver_config_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">### load the solver and create train and test nets</span></span><br><span class="line">solver = <span class="literal">None</span>  <span class="comment"># ignore this workaround for lmdb data (can&#x27;t instantiate two solvers on the same data)</span></span><br><span class="line">solver = caffe.get_solver(solver_config_path)</span><br><span class="line"></span><br><span class="line"><span class="comment">### solve</span></span><br><span class="line">niter = <span class="number">250</span>  <span class="comment"># EDIT HERE increase to train for longer</span></span><br><span class="line">test_interval = niter / <span class="number">10</span></span><br><span class="line"><span class="comment"># losses will also be stored in the log</span></span><br><span class="line">train_loss = zeros(niter)</span><br><span class="line">test_acc = zeros(<span class="built_in">int</span>(np.ceil(niter / test_interval)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># the main solver loop</span></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> <span class="built_in">range</span>(niter):</span><br><span class="line">    solver.step(<span class="number">1</span>)  <span class="comment"># SGD by Caffe</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store the train loss</span></span><br><span class="line">    train_loss[it] = solver.net.blobs[<span class="string">&#x27;loss&#x27;</span>].data</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run a full test every so often</span></span><br><span class="line">    <span class="comment"># (Caffe can also do this for us and write to a log, but we show here</span></span><br><span class="line">    <span class="comment">#  how to do it directly in Python, where more complicated things are easier.)</span></span><br><span class="line">    <span class="keyword">if</span> it % test_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Iteration&#x27;</span>, it, <span class="string">&#x27;testing...&#x27;</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> test_it <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            solver.test_nets[<span class="number">0</span>].forward()</span><br><span class="line">            correct += <span class="built_in">sum</span>(solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;score&#x27;</span>].data.argmax(<span class="number">1</span>)</span><br><span class="line">                           == solver.test_nets[<span class="number">0</span>].blobs[<span class="string">&#x27;label&#x27;</span>].data)</span><br><span class="line">        test_acc[it // test_interval] = correct / <span class="number">1e4</span></span><br><span class="line"></span><br><span class="line">_, ax1 = subplots()</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax1.plot(arange(niter), train_loss)</span><br><span class="line">ax2.plot(test_interval * arange(<span class="built_in">len</span>(test_acc)), test_acc, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;iteration&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;train loss&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;test accuracy&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Custom Test Accuracy: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(test_acc[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>Iteration 0 testing...
Iteration 25 testing...
Iteration 50 testing...
Iteration 75 testing...
Iteration 100 testing...
Iteration 125 testing...
Iteration 150 testing...
Iteration 175 testing...
Iteration 200 testing...
Iteration 225 testing...





&lt;matplotlib.text.Text at 0x7f5199af9f50&gt;
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180808094922779-1511591853.png" alt="png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180808: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>LeNet</tag>
      </tags>
  </entry>
  <entry>
    <title>Multilabel classification on PASCAL using python data-layers</title>
    <url>//blog/Multilabel-classification-on-PASCAL-using-python-data-layers/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this tutorial we will do multilabel classification on PASCAL VOC 2012.</p>
<p>Multilabel classification is a generalization of multiclass classification, where each instance (image) can belong to many classes. For example, an image may both belong to a “beach” category and a “vacation pictures” category. In multiclass classification, on the other hand, each image belongs to a single class.</p>
<p>Caffe supports multilabel classification through the SigmoidCrossEntropyLoss layer, and we will load data using a Python data layer. Data could also be provided through HDF5 or LMDB data layers, but the python data layer provides endless flexibility, so that’s what we will use.</p>
<h2 id="Preliminaries"><a href="#Preliminaries" class="headerlink" title="Preliminaries"></a>Preliminaries</h2><ul>
<li><p>First, make sure you compile caffe using<br>WITH_PYTHON_LAYER :&#x3D; 1</p>
</li>
<li><p>Second, download PASCAL VOC 2012. It’s available <a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html">here:</a></p>
</li>
<li><p>Third, import modules:</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">% matplotlib inline</span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file is expected to be in &#123;caffe_root&#125;/examples</span></span><br><span class="line">sys.path.append(caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> caffe <span class="comment"># If you get &quot;No module named _caffe&quot;, either you have not built pycaffe or you have the wrong path.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> caffe <span class="keyword">import</span> layers <span class="keyword">as</span> L, params <span class="keyword">as</span> P <span class="comment"># Shortcuts to define the net prototxt.</span></span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;pycaffe/layers&quot;</span>) <span class="comment"># the datalayers we will use are in this directory.</span></span><br><span class="line">sys.path.append(<span class="string">&quot;pycaffe&quot;</span>) <span class="comment"># the tools file is in this folder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools <span class="comment">#this contains some tools that we need</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Fourth, set data directories and initialize caffe</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set data root directory, e.g:</span></span><br><span class="line">pascal_root = osp.join(caffe_root, <span class="string">&#x27;data/pascal/VOC2012&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># these are the PASCAL classes, we&#x27;ll need them later.</span></span><br><span class="line">classes = np.asarray([<span class="string">&#x27;aeroplane&#x27;</span>, <span class="string">&#x27;bicycle&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;bottle&#x27;</span>, </span><br><span class="line">                      <span class="string">&#x27;bus&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;chair&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>, <span class="string">&#x27;diningtable&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;motorbike&#x27;</span>, <span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;pottedplant&#x27;</span>, </span><br><span class="line">                      <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;sofa&#x27;</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;tvmonitor&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure we have the caffenet weight downloaded.</span></span><br><span class="line"><span class="comment">#if not os.path.isfile(caffe_root + &#x27;models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;):</span></span><br><span class="line"><span class="comment">#    print(&quot;Downloading pre-trained CaffeNet model...&quot;)</span></span><br><span class="line"><span class="comment">#    !../scripts/download_model_binary.py ../models/bvlc_reference_caffenet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize caffe for gpu mode</span></span><br><span class="line">caffe.set_mode_gpu()</span><br><span class="line">caffe.set_device(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Define-network-prototxts"><a href="#Define-network-prototxts" class="headerlink" title="Define network prototxts"></a>Define network prototxts</h2><ul>
<li>Let’s start by defining the nets using caffe.NetSpec. Note how we used the SigmoidCrossEntropyLoss layer. This is the right loss for multilabel classification. Also note how the data layer is defined.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helper function for common structures</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv_relu</span>(<span class="params">bottom, ks, nout, stride=<span class="number">1</span>, pad=<span class="number">0</span>, group=<span class="number">1</span></span>):</span><br><span class="line">    conv = L.Convolution(bottom, kernel_size=ks, stride=stride,</span><br><span class="line">                                num_output=nout, pad=pad, group=group)</span><br><span class="line">    <span class="keyword">return</span> conv, L.ReLU(conv, in_place=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># another helper function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fc_relu</span>(<span class="params">bottom, nout</span>):</span><br><span class="line">    fc = L.InnerProduct(bottom, num_output=nout)</span><br><span class="line">    <span class="keyword">return</span> fc, L.ReLU(fc, in_place=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yet another helper function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_pool</span>(<span class="params">bottom, ks, stride=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> L.Pooling(bottom, pool=P.Pooling.MAX, kernel_size=ks, stride=stride)</span><br><span class="line"></span><br><span class="line"><span class="comment"># main netspec wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caffenet_multilabel</span>(<span class="params">data_layer_params, datalayer</span>):</span><br><span class="line">    <span class="comment"># setup the python data layer </span></span><br><span class="line">    n = caffe.NetSpec()</span><br><span class="line">    n.data, n.label = L.Python(module = <span class="string">&#x27;pascal_multilabel_datalayers&#x27;</span>, layer = datalayer, </span><br><span class="line">                               ntop = <span class="number">2</span>, param_str=<span class="built_in">str</span>(data_layer_params))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the net itself</span></span><br><span class="line">    n.conv1, n.relu1 = conv_relu(n.data, <span class="number">11</span>, <span class="number">96</span>, stride=<span class="number">4</span>)</span><br><span class="line">    n.pool1 = max_pool(n.relu1, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.norm1 = L.LRN(n.pool1, local_size=<span class="number">5</span>, alpha=<span class="number">1e-4</span>, beta=<span class="number">0.75</span>)</span><br><span class="line">    n.conv2, n.relu2 = conv_relu(n.norm1, <span class="number">5</span>, <span class="number">256</span>, pad=<span class="number">2</span>, group=<span class="number">2</span>)</span><br><span class="line">    n.pool2 = max_pool(n.relu2, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.norm2 = L.LRN(n.pool2, local_size=<span class="number">5</span>, alpha=<span class="number">1e-4</span>, beta=<span class="number">0.75</span>)</span><br><span class="line">    n.conv3, n.relu3 = conv_relu(n.norm2, <span class="number">3</span>, <span class="number">384</span>, pad=<span class="number">1</span>)</span><br><span class="line">    n.conv4, n.relu4 = conv_relu(n.relu3, <span class="number">3</span>, <span class="number">384</span>, pad=<span class="number">1</span>, group=<span class="number">2</span>)</span><br><span class="line">    n.conv5, n.relu5 = conv_relu(n.relu4, <span class="number">3</span>, <span class="number">256</span>, pad=<span class="number">1</span>, group=<span class="number">2</span>)</span><br><span class="line">    n.pool5 = max_pool(n.relu5, <span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">    n.fc6, n.relu6 = fc_relu(n.pool5, <span class="number">4096</span>)</span><br><span class="line">    n.drop6 = L.Dropout(n.relu6, in_place=<span class="literal">True</span>)</span><br><span class="line">    n.fc7, n.relu7 = fc_relu(n.drop6, <span class="number">4096</span>)</span><br><span class="line">    n.drop7 = L.Dropout(n.relu7, in_place=<span class="literal">True</span>)</span><br><span class="line">    n.score = L.InnerProduct(n.drop7, num_output=<span class="number">20</span>) <span class="comment"># z value</span></span><br><span class="line">    n.loss = L.SigmoidCrossEntropyLoss(n.score, n.label) <span class="comment"># a = sigmoid(z)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(n.to_proto())</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Write-nets-and-solver-files"><a href="#Write-nets-and-solver-files" class="headerlink" title="Write nets and solver files"></a>Write nets and solver files</h2><ul>
<li>Now we can crete net and solver prototxts. For the solver, we use the CaffeSolver class from the “tools” module</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workdir = <span class="string">&#x27;./pascal_multilabel_with_datalayer&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(workdir):</span><br><span class="line">    os.makedirs(workdir)</span><br><span class="line"></span><br><span class="line">solverprototxt = tools.CaffeSolver(trainnet_prototxt_path = osp.join(workdir, <span class="string">&quot;trainnet.prototxt&quot;</span>), </span><br><span class="line">                                   testnet_prototxt_path = osp.join(workdir, <span class="string">&quot;valnet.prototxt&quot;</span>))</span><br><span class="line">solverprototxt.sp[<span class="string">&#x27;display&#x27;</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">solverprototxt.sp[<span class="string">&#x27;base_lr&#x27;</span>] = <span class="string">&quot;0.0001&quot;</span></span><br><span class="line">solverprototxt.write(osp.join(workdir, <span class="string">&#x27;solver.prototxt&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># write train net.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(osp.join(workdir, <span class="string">&#x27;trainnet.prototxt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># provide parameters to the data layer as a python dictionary. Easy as pie!</span></span><br><span class="line">    data_layer_params = <span class="built_in">dict</span>(batch_size = <span class="number">128</span>, im_shape = [<span class="number">227</span>, <span class="number">227</span>], split = <span class="string">&#x27;train&#x27;</span>, pascal_root = pascal_root)</span><br><span class="line">    f.write(caffenet_multilabel(data_layer_params, <span class="string">&#x27;PascalMultilabelDataLayerSync&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># write validation net.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(osp.join(workdir, <span class="string">&#x27;valnet.prototxt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_layer_params = <span class="built_in">dict</span>(batch_size = <span class="number">128</span>, im_shape = [<span class="number">227</span>, <span class="number">227</span>], split = <span class="string">&#x27;val&#x27;</span>, pascal_root = pascal_root)</span><br><span class="line">    f.write(caffenet_multilabel(data_layer_params, <span class="string">&#x27;PascalMultilabelDataLayerSync&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>This net uses a python datalayer: ‘PascalMultilabelDataLayerSync’, which is defined in ‘.&#x2F;pycaffe&#x2F;layers&#x2F;pascal_multilabel_datalayers.py’. </p>
</li>
<li><p>Take a look at the code. It’s quite straight-forward, and gives you full control over data and labels.</p>
</li>
<li><p>Now we can load the caffe solver as usual.</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">solver = caffe.SGDSolver(osp.join(workdir, <span class="string">&#x27;solver.prototxt&#x27;</span>))</span><br><span class="line">solver.net.copy_from(caffe_root + <span class="string">&#x27;models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span>)</span><br><span class="line">solver.test_nets[<span class="number">0</span>].share_with(solver.net)</span><br><span class="line">solver.step(<span class="number">1</span>) <span class="comment"># load 128 train images</span></span><br><span class="line"><span class="comment"># 5717 train images; 5823 val images</span></span><br></pre></td></tr></table></figure>

<pre><code>BatchLoader initialized with 5717 images
PascalMultilabelDataLayerSync initialized for split: train, with bs: 128, im_shape: [227, 227].
BatchLoader initialized with 5823 images
PascalMultilabelDataLayerSync initialized for split: val, with bs: 128, im_shape: [227, 227].
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> solver.net.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape <span class="comment"># (128, 3, 227, 227)</span></span><br><span class="line"><span class="built_in">print</span> solver.net.blobs[<span class="string">&#x27;label&#x27;</span>].data.shape <span class="comment"># (128, 20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print solver.net.blobs[&#x27;loss&#x27;].data   # 13.8629436493</span></span><br><span class="line"><span class="comment">#print solver.test_nets[0].blobs[&#x27;data&#x27;].data.shape # (128, 3, 227, 227) no test images loaded</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print solver.net.params[&#x27;score&#x27;][0].data.shape # (20, 4096)  filled weights</span></span><br><span class="line"><span class="comment">#print solver.net.params[&#x27;score&#x27;][0].data[:20,:5]</span></span><br></pre></td></tr></table></figure>

<pre><code>(128, 3, 227, 227)
(128, 20)
</code></pre>
<ul>
<li>Let’s check the data we have loaded.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transformer = tools.SimpleTransformer() <span class="comment"># This is simply to add back the bias, re-shuffle the color channels to RGB, and so on...</span></span><br><span class="line">image_index = <span class="number">0</span> <span class="comment"># First image in the batch.</span></span><br><span class="line">image = solver.net.blobs[<span class="string">&#x27;data&#x27;</span>].data[image_index, ...]</span><br><span class="line"><span class="built_in">print</span> image.shape <span class="comment"># (3, 227, 227) BGR [0,255]</span></span><br><span class="line"><span class="comment">#print image[0,:10,:10]</span></span><br><span class="line"></span><br><span class="line">plot_image = transformer.deprocess(copy(image))</span><br><span class="line"><span class="comment">#print plot_image.shape #(227, 227, 3) RGB [0,255]</span></span><br><span class="line"><span class="comment">#print plot_image[:10,:10,0]</span></span><br><span class="line"></span><br><span class="line">image_labels = solver.net.blobs[<span class="string">&#x27;label&#x27;</span>].data[image_index]</span><br><span class="line"><span class="built_in">print</span> image_labels.shape <span class="comment"># (20,)</span></span><br><span class="line"><span class="built_in">print</span> image_labels <span class="comment">#float32 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.]</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(plot_image)</span><br><span class="line">gtlist = image_labels.astype(np.<span class="built_in">int</span>) <span class="comment"># float32-&gt;int labels</span></span><br><span class="line">plt.title(<span class="string">&#x27;GT: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(classes[np.where(gtlist)])) <span class="comment"># ground truth label list</span></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>(3, 227, 227)
(20,)
[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  1.  0.  0.  0.
  1.  0.]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100831322-968218798.png" alt="png"></p>
<ul>
<li>NOTE: we are readin the image from the data layer, so the resolution is lower than the original PASCAL image.</li>
</ul>
<h2 id="Train-a-net"><a href="#Train-a-net" class="headerlink" title="Train a net"></a>Train a net</h2><ul>
<li>Let’s train the net. First, though, we need some way to measure the accuracy. Hamming distance is commonly used in multilabel problems. We also need a simple test loop. Let’s write that down.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">gt, est</span>):</span><br><span class="line">    <span class="comment"># accu for only one image</span></span><br><span class="line">    <span class="comment">#   gt(20,) [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]</span></span><br><span class="line">    <span class="comment">#  est(20,) [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]</span></span><br><span class="line">    <span class="comment"># accu = 19/20 = 0.95</span></span><br><span class="line">    <span class="comment">#print gt.shape,est.shape</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="number">1</span> <span class="keyword">for</span> (g, e) <span class="keyword">in</span> <span class="built_in">zip</span>(gt, est) <span class="keyword">if</span> g == e]) / <span class="built_in">float</span>(<span class="built_in">len</span>(gt))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_accuracy</span>(<span class="params">net, num_batches, batch_size = <span class="number">128</span></span>):</span><br><span class="line">    acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(num_batches):</span><br><span class="line">        net.forward() <span class="comment"># load 128 batch images from test_nets</span></span><br><span class="line">        gts = net.blobs[<span class="string">&#x27;label&#x27;</span>].data <span class="comment"># (128,20)</span></span><br><span class="line">        gts = gts.astype(np.<span class="built_in">int</span>) <span class="comment"># float32-&gt;int</span></span><br><span class="line">        </span><br><span class="line">        ests = net.blobs[<span class="string">&#x27;score&#x27;</span>].data &gt; <span class="number">0</span> <span class="comment"># (128,20)  z-score&gt;0===&gt;1,otherwise ===&gt;0</span></span><br><span class="line">        ests = ests.astype(np.<span class="built_in">int</span>) <span class="comment"># bool-&gt;int</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> gt, est <span class="keyword">in</span> <span class="built_in">zip</span>(gts, ests): <span class="comment">#for each ground truth and estimated label vector</span></span><br><span class="line">            acc += hamming_distance(gt, est) <span class="comment"># gt(20,) est(20,) for 1 image</span></span><br><span class="line">    <span class="keyword">return</span> acc / (num_batches * batch_size)</span><br></pre></td></tr></table></figure>

<ul>
<li>Alright, now let’s train for a while</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">for</span> itt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    solver.step(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;itt:&#123;:3d&#125;&#x27;</span>.<span class="built_in">format</span>((itt + <span class="number">1</span>) * <span class="number">100</span>), <span class="string">&#x27;accuracy:&#123;0:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(check_accuracy(solver.test_nets[<span class="number">0</span>], <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#itt:100 accuracy:0.9591</span></span><br><span class="line"><span class="comment">#itt:200 accuracy:0.9599</span></span><br><span class="line"><span class="comment">#itt:300 accuracy:0.9596</span></span><br><span class="line"><span class="comment">#itt:400 accuracy:0.9584</span></span><br><span class="line"><span class="comment">#itt:500 accuracy:0.9598</span></span><br><span class="line"><span class="comment">#itt:600 accuracy:0.9590</span></span><br></pre></td></tr></table></figure>

<pre><code>itt:100 accuracy:0.9591
itt:200 accuracy:0.9599
itt:300 accuracy:0.9596
itt:400 accuracy:0.9584
itt:500 accuracy:0.9598
itt:600 accuracy:0.9590
</code></pre>
<ul>
<li>Great, the accuracy is increasing, and it seems to converge rather quickly. It may seem strange that it starts off so high but <strong>it is because the ground truth is sparse. There are 20 classes in PASCAL, and usually only one or two is present. So predicting all zeros yields rather high accuracy</strong>. Let’s check to make sure.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line">num_train_images = <span class="number">5717</span></span><br><span class="line">num_val_images = <span class="number">5823</span></span><br><span class="line">num_batches = num_val_images/<span class="number">128</span> <span class="comment"># 45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_baseline_accuracy</span>(<span class="params">net, num_batches, batch_size = <span class="number">128</span></span>):</span><br><span class="line">    acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(num_batches):</span><br><span class="line">        net.forward()</span><br><span class="line">        gts = net.blobs[<span class="string">&#x27;label&#x27;</span>].data        <span class="comment"># (128,20)  labels</span></span><br><span class="line">        ests = np.zeros((batch_size, <span class="number">20</span>))       <span class="comment"># (128,20)  set to [0,0,0,...0,0]</span></span><br><span class="line">        <span class="keyword">for</span> gt, est <span class="keyword">in</span> <span class="built_in">zip</span>(gts, ests): <span class="comment">#for each ground truth and estimated label vector</span></span><br><span class="line">            acc += hamming_distance(gt, est)</span><br><span class="line">    <span class="keyword">return</span> acc / (num_batches * batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gts 19 + 1, est 20, accu = 19/20 = 0.95</span></span><br><span class="line"><span class="comment"># gts 18 + 2, est 20, accu = 18/20 = 0.90</span></span><br><span class="line"><span class="comment"># avg cases: 0.925</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Baseline accuracy:&#123;0:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(check_baseline_accuracy(solver.test_nets[<span class="number">0</span>], num_batches))</span><br></pre></td></tr></table></figure>

<pre><code>Baseline accuracy:0.9241
CPU times: user 40.4 s, sys: 864 ms, total: 41.3 s
Wall time: 41.3 s
</code></pre>
<h2 id="Look-at-some-prediction-results"><a href="#Look-at-some-prediction-results" class="headerlink" title="Look at some prediction results"></a>Look at some prediction results</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_net = solver.test_nets[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> classes</span><br><span class="line"><span class="keyword">for</span> image_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span> </span><br><span class="line">    plt.figure()</span><br><span class="line">    plot_image = transformer.deprocess(copy(test_net.blobs[<span class="string">&#x27;data&#x27;</span>].data[image_index,...]))</span><br><span class="line">    plt.imshow(plot_image)</span><br><span class="line">    gtlist = test_net.blobs[<span class="string">&#x27;label&#x27;</span>].data[image_index, ...].astype(np.<span class="built_in">int</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;gt&#x27;</span>,gtlist</span><br><span class="line">    estlist = test_net.blobs[<span class="string">&#x27;score&#x27;</span>].data[image_index, ...] &gt; <span class="number">0</span></span><br><span class="line">    estlist = estlist.astype(np.<span class="built_in">int</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;est&#x27;</span>,estlist</span><br><span class="line">    plt.title(<span class="string">&#x27;GT: &#123;&#125; \n EST: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(classes[np.where(gtlist)], classes[np.where(estlist)]))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;aeroplane&#39; &#39;bicycle&#39; &#39;bird&#39; &#39;boat&#39; &#39;bottle&#39; &#39;bus&#39; &#39;car&#39; &#39;cat&#39; &#39;chair&#39;
 &#39;cow&#39; &#39;diningtable&#39; &#39;dog&#39; &#39;horse&#39; &#39;motorbike&#39; &#39;person&#39; &#39;pottedplant&#39;
 &#39;sheep&#39; &#39;sofa&#39; &#39;train&#39; &#39;tvmonitor&#39;]

gt [0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0]
est [0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0]

gt [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
est [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]

gt [0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
est [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

gt [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
est [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]

gt [0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0]
est [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100834890-529897754.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100834890-529897754.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100841701-574240140.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100844564-748953554.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816100848263-751780307.png" alt="png"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20180816: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>multilabel classification</tag>
      </tags>
  </entry>
  <entry>
    <title>Net Surgery with Caffe and Python</title>
    <url>//blog/Net-Surgery/</url>
    <content><![CDATA[<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>Caffe networks can be transformed to your particular needs by editing the model parameters. The data, diffs, and parameters of a net are all exposed in pycaffe.</p>
<p>Roll up your sleeves for net surgery with pycaffe!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure that caffe is on the python path:</span></span><br><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file is expected to be in &#123;caffe_root&#125;/examples</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure plotting</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.interpolation&#x27;</span>] = <span class="string">&#x27;nearest&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.cmap&#x27;</span>] = <span class="string">&#x27;gray&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Designer-Filters"><a href="#Designer-Filters" class="headerlink" title="Designer Filters"></a>Designer Filters</h3><p>To show how to load, manipulate, and save parameters we’ll design our own filters into a simple network that’s only a single convolution layer. This net has two blobs, <code>data</code> for the input and <code>conv</code> for the convolution output and one parameter <code>conv</code> for the convolution filter weights and biases.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load the net, list its data and params, and filter an example image.</span></span><br><span class="line">caffe.set_mode_cpu()</span><br><span class="line">net = caffe.Net(<span class="string">&#x27;net_surgery/conv.prototxt&#x27;</span>, caffe.TEST)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;blobs &#123;&#125;\nparams &#123;&#125;&quot;</span>.<span class="built_in">format</span>(net.blobs.keys(), net.params.keys()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># load image and prepare as a single input batch for Caffe</span></span><br><span class="line">im = np.array(caffe.io.load_image(<span class="string">&#x27;images/cat_gray.jpg&#x27;</span>, color=<span class="literal">False</span>)).squeeze()</span><br><span class="line"><span class="comment"># caffe.io.load_image: dims: (height,width,channels),order: RGB,range: [0,1] dtype: float32</span></span><br><span class="line"><span class="comment">#(360, 480, 1)--&gt;(360, 480)  </span></span><br><span class="line"><span class="comment">#print im[:5,:5]</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;original image&quot;</span>)</span><br><span class="line">plt.imshow(im)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im_input = im[np.newaxis, np.newaxis, :, :] <span class="comment">#(1, 1, 360, 480) (c,h,w) [0,1] float32</span></span><br><span class="line"></span><br><span class="line">net.blobs[<span class="string">&#x27;data&#x27;</span>].reshape(*im_input.shape) <span class="comment"># (1, 1, 100, 100) ---&gt;(1, 1, 360, 480)</span></span><br><span class="line"><span class="built_in">print</span> net.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape </span><br><span class="line">net.blobs[<span class="string">&#x27;data&#x27;</span>].data[...] = im_input</span><br></pre></td></tr></table></figure>

<pre><code>blobs [&#39;data&#39;, &#39;conv&#39;]
params [&#39;conv&#39;]
[[ 0.10196079  0.10588235  0.09803922  0.10980392  0.11372549]
 [ 0.10196079  0.10588235  0.09803922  0.10196079  0.10980392]
 [ 0.10196079  0.10588235  0.10196079  0.10196079  0.10588235]
 [ 0.10588235  0.10196079  0.10588235  0.10980392  0.11372549]
 [ 0.11764706  0.10196079  0.10196079  0.10588235  0.10980392]]
(1, 1, 360, 480)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816095053371-613196163.png" alt="png"></p>
<p>The convolution weights are initialized from Gaussian noise while the biases are initialized to zero. These random filters give output somewhat like edge detections.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helper show filter outputs</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_filters</span>(<span class="params">net</span>):</span><br><span class="line">    net.forward()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> name,blob <span class="keyword">in</span> net.blobs.iteritems():</span><br><span class="line">        <span class="built_in">print</span> name,blob.data.shape</span><br><span class="line">    <span class="comment"># data (1, 1, 360, 480)   o = (i+2*p-k)/s+1 -&gt;360-5+1=356, 480-5+1=476 </span></span><br><span class="line">    <span class="comment"># conv (1, 3, 356, 476)</span></span><br><span class="line">    <span class="built_in">print</span> </span><br><span class="line">    <span class="keyword">for</span> name,param <span class="keyword">in</span> net.params.iteritems():</span><br><span class="line">        <span class="built_in">print</span> name,param[<span class="number">0</span>].data.shape  <span class="comment"># conv (3, 1, 5, 5)</span></span><br><span class="line">        </span><br><span class="line">    plt.figure()</span><br><span class="line">    filt_count = <span class="number">3</span></span><br><span class="line">    filt_min, filt_max = net.blobs[<span class="string">&#x27;conv&#x27;</span>].data.<span class="built_in">min</span>(), net.blobs[<span class="string">&#x27;conv&#x27;</span>].data.<span class="built_in">max</span>()</span><br><span class="line">    <span class="built_in">print</span> filt_min,filt_max</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        plt.subplot(<span class="number">1</span>,<span class="number">4</span>,i+<span class="number">2</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;filter #&#123;&#125; output&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        </span><br><span class="line">        plt.imshow(net.blobs[<span class="string">&#x27;conv&#x27;</span>].data[<span class="number">0</span>, i], vmin=filt_min, vmax=filt_max)</span><br><span class="line">        <span class="comment">#plt.imshow(net.blobs[&#x27;conv&#x27;].data[0, i])</span></span><br><span class="line">        <span class="comment">#cbar = plt.colorbar() # depends on vmin,vmax</span></span><br><span class="line">        </span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter the image with initial </span></span><br><span class="line">show_filters(net)</span><br></pre></td></tr></table></figure>

<pre><code>data (1, 1, 360, 480)
conv (1, 3, 356, 476)

conv (3, 1, 5, 5)
-0.0651154 0.097207
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816095057441-58520598.png" alt="png"></p>
<p>Raising the bias of a filter will correspondingly raise its output:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pick first filter output</span></span><br><span class="line">conv0 = net.blobs[<span class="string">&#x27;conv&#x27;</span>].data[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pre-surgery output mean &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(conv0.mean()))</span><br><span class="line"><span class="comment"># set first filter bias to 1</span></span><br><span class="line"><span class="comment">#print net.params[&#x27;conv&#x27;][1].data.shape</span></span><br><span class="line">net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">1</span>].data[<span class="number">0</span>] = <span class="number">1.</span> <span class="comment">#(3,)</span></span><br><span class="line">net.forward()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;post-surgery output mean &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(conv0.mean()))</span><br><span class="line"><span class="comment"># for conv data,z = wx+b</span></span><br><span class="line"><span class="comment"># z = wx+0, z = wx+1</span></span><br></pre></td></tr></table></figure>

<pre><code>pre-surgery output mean 0.04
(3,)
post-surgery output mean 1.04
</code></pre>
<p>Altering the filter weights is more exciting since we can assign any kernel like Gaussian blur, the Sobel operator for edges, and so on. The following surgery turns the 0th filter into a Gaussian blur and the 1st and 2nd filters into the horizontal and vertical gradient parts of the Sobel operator.</p>
<p>See how the 0th output is blurred, the 1st picks up horizontal edges, and the 2nd picks up vertical edges.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ksize = net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">0</span>].data.shape[<span class="number">2</span>:] <span class="comment"># conv (3, 1, 5, 5)---&gt;(5,5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make Gaussian blur</span></span><br><span class="line">sigma = <span class="number">1.</span></span><br><span class="line">y, x = np.mgrid[-ksize[<span class="number">0</span>]//<span class="number">2</span> + <span class="number">1</span>:ksize[<span class="number">0</span>]//<span class="number">2</span> + <span class="number">1</span>, -ksize[<span class="number">1</span>]//<span class="number">2</span> + <span class="number">1</span>:ksize[<span class="number">1</span>]//<span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">g = np.exp(-((x**<span class="number">2</span> + y**<span class="number">2</span>)/(<span class="number">2.0</span>*sigma**<span class="number">2</span>)))</span><br><span class="line">gaussian = (g / g.<span class="built_in">sum</span>()).astype(np.float32)</span><br><span class="line"></span><br><span class="line">net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">0</span>].data[<span class="number">0</span>] = gaussian</span><br><span class="line"></span><br><span class="line"><span class="comment"># make Sobel operator for edge detection</span></span><br><span class="line">net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">0</span>].data[<span class="number">1</span>:] = <span class="number">0.</span></span><br><span class="line">sobel = np.array((-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>), dtype=np.float32).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">0</span>].data[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>] = sobel  <span class="comment"># horizontal</span></span><br><span class="line">net.params[<span class="string">&#x27;conv&#x27;</span>][<span class="number">0</span>].data[<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>] = sobel.T  <span class="comment"># vertical</span></span><br><span class="line">show_filters(net)</span><br></pre></td></tr></table></figure>

<pre><code>data (1, 1, 360, 480)
conv (1, 3, 356, 476)

conv (3, 1, 5, 5)
-3.67843 3.77647
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816095102256-537112316.png" alt="png"></p>
<p>With net surgery, parameters can be transplanted across nets, regularized by custom per-parameter operations, and transformed according to your schemes.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="Casting-a-Classifier-into-a-Fully-Convolutional-Network"><a href="#Casting-a-Classifier-into-a-Fully-Convolutional-Network" class="headerlink" title="Casting a Classifier into a Fully Convolutional Network"></a>Casting a Classifier into a Fully Convolutional Network</h3><p>Let’s take the standard Caffe Reference ImageNet model “CaffeNet” and transform it into a fully convolutional net for efficient, dense inference on large inputs. This model generates a classification map that covers a given input size instead of a single classification. In particular a 8 $\times$ 8 classification map on a 451 $\times$ 451 input gives 64x the output in only 3x the time. The computation exploits a natural efficiency of convolutional network (convnet) structure by amortizing the computation of overlapping receptive fields.</p>
<p>To do so we translate the <code>InnerProduct</code> matrix multiplication layers of CaffeNet into <code>Convolutional</code> layers. This is the only change: the other layer types are agnostic to spatial size. Convolution is translation-invariant, activations are elementwise operations, and so on. The <code>fc6</code> inner product when carried out as convolution by <code>fc6-conv</code> turns into a 6 $\times$ 6 filter with stride 1 on <code>pool5</code>. Back in image space this gives a classification for each 227 $\times$ 227 box with stride 32 in pixels. Remember the equation for output map &#x2F; receptive field size, output &#x3D; (input - kernel_size) &#x2F; stride + 1, and work out the indexing details for a clear understanding.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!diff net_surgery/bvlc_caffenet_full_conv.prototxt ../models/bvlc_reference_caffenet/deploy.prototxt</span><br></pre></td></tr></table></figure>

<pre><code>1,2c1
&lt; # Fully convolutional network version of CaffeNet.
&lt; name: &quot;CaffeNetConv&quot;
---
&gt; name: &quot;CaffeNet&quot;
7,11c6
&lt;   input_param &#123;
&lt;     # initial shape for a fully convolutional network:
&lt;     # the shape can be set for each input by reshape.
&lt;     shape: &#123; dim: 1 dim: 3 dim: 451 dim: 451 &#125;
&lt;   &#125;
---
&gt;   input_param &#123; shape: &#123; dim: 10 dim: 3 dim: 227 dim: 227 &#125; &#125;
157,158c152,153
&lt;   name: &quot;fc6-conv&quot;
&lt;   type: &quot;Convolution&quot;
---
&gt;   name: &quot;fc6&quot;
&gt;   type: &quot;InnerProduct&quot;
160,161c155,156
&lt;   top: &quot;fc6-conv&quot;
&lt;   convolution_param &#123;
---
&gt;   top: &quot;fc6&quot;
&gt;   inner_product_param &#123;
163d157
&lt;     kernel_size: 6
169,170c163,164
&lt;   bottom: &quot;fc6-conv&quot;
&lt;   top: &quot;fc6-conv&quot;
---
&gt;   bottom: &quot;fc6&quot;
&gt;   top: &quot;fc6&quot;
175,176c169,170
&lt;   bottom: &quot;fc6-conv&quot;
&lt;   top: &quot;fc6-conv&quot;
---
&gt;   bottom: &quot;fc6&quot;
&gt;   top: &quot;fc6&quot;
182,186c176,180
&lt;   name: &quot;fc7-conv&quot;
&lt;   type: &quot;Convolution&quot;
&lt;   bottom: &quot;fc6-conv&quot;
&lt;   top: &quot;fc7-conv&quot;
&lt;   convolution_param &#123;
---
&gt;   name: &quot;fc7&quot;
&gt;   type: &quot;InnerProduct&quot;
&gt;   bottom: &quot;fc6&quot;
&gt;   top: &quot;fc7&quot;
&gt;   inner_product_param &#123;
188d181
&lt;     kernel_size: 1
194,195c187,188
&lt;   bottom: &quot;fc7-conv&quot;
&lt;   top: &quot;fc7-conv&quot;
---
&gt;   bottom: &quot;fc7&quot;
&gt;   top: &quot;fc7&quot;
200,201c193,194
&lt;   bottom: &quot;fc7-conv&quot;
&lt;   top: &quot;fc7-conv&quot;
---
&gt;   bottom: &quot;fc7&quot;
&gt;   top: &quot;fc7&quot;
207,211c200,204
&lt;   name: &quot;fc8-conv&quot;
&lt;   type: &quot;Convolution&quot;
&lt;   bottom: &quot;fc7-conv&quot;
&lt;   top: &quot;fc8-conv&quot;
&lt;   convolution_param &#123;
---
&gt;   name: &quot;fc8&quot;
&gt;   type: &quot;InnerProduct&quot;
&gt;   bottom: &quot;fc7&quot;
&gt;   top: &quot;fc8&quot;
&gt;   inner_product_param &#123;
213d205
&lt;     kernel_size: 1
219c211
&lt;   bottom: &quot;fc8-conv&quot;
---
&gt;   bottom: &quot;fc8&quot;
</code></pre>
<p>The only differences needed in the architecture are to change the fully connected classifier inner product layers into convolutional layers with the right filter size – 6 x 6, since the reference model classifiers take the 36 elements of <code>pool5</code> as input – and stride 1 for dense classification. Note that the layers are renamed so that Caffe does not try to blindly load the old parameters when it maps layer names to the pretrained model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load the original network and extract the fully connected layers&#x27; parameters.</span></span><br><span class="line">net = caffe.Net(<span class="string">&#x27;../models/bvlc_reference_caffenet/deploy.prototxt&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;../models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span>, </span><br><span class="line">                caffe.TEST)</span><br><span class="line">params = [<span class="string">&#x27;fc6&#x27;</span>, <span class="string">&#x27;fc7&#x27;</span>, <span class="string">&#x27;fc8&#x27;</span>]</span><br><span class="line"><span class="comment"># fc_params = &#123;name: (weights, biases)&#125;</span></span><br><span class="line">fc_params = &#123;pr: (net.params[pr][<span class="number">0</span>].data, net.params[pr][<span class="number">1</span>].data) <span class="keyword">for</span> pr <span class="keyword">in</span> params&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pr <span class="keyword">in</span> params:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#123;&#125; weights are &#123;&#125; dimensional and biases are &#123;&#125; dimensional&#x27;</span>.<span class="built_in">format</span>(pr, fc_params[pr][<span class="number">0</span>].shape, fc_params[pr][<span class="number">1</span>].shape)</span><br><span class="line">    </span><br><span class="line">pr = <span class="string">&#x27;fc6&#x27;</span></span><br><span class="line"><span class="built_in">print</span> net.params[pr][<span class="number">0</span>].data[<span class="number">0</span>,:<span class="number">6</span>*<span class="number">6</span>]  <span class="comment"># no weight_filler,loaded from weights file  </span></span><br><span class="line"><span class="built_in">print</span> net.params[pr][<span class="number">1</span>].data[<span class="number">0</span>]       <span class="comment"># no bias_filler,loaded from weights file  </span></span><br></pre></td></tr></table></figure>

<pre><code>fc6 weights are (4096, 9216) dimensional and biases are (4096,) dimensional
fc7 weights are (4096, 4096) dimensional and biases are (4096,) dimensional
fc8 weights are (1000, 4096) dimensional and biases are (1000,) dimensional
[ 0.00639847  0.00915686  0.00467043  0.00118941  0.00083305  0.00249258
  0.00249609 -0.00354958 -0.00502381 -0.00660044 -0.00810635 -0.00120969
 -0.00182751 -0.00181385 -0.00327348 -0.00657627 -0.01059825 -0.00223066
  0.00023664  0.00040984 -0.00052619 -0.00124062 -0.00269398 -0.00051081
  0.0014997   0.00123309 -0.00013806 -0.00111619  0.00321043  0.00284487
  0.00051387 -0.00087142 -0.00038937 -0.0008678   0.0049024   0.00155215]
0.983698
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> layer_name, blob <span class="keyword">in</span> net.blobs.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(blob.data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>data	(10, 3, 227, 227)
conv1	(10, 96, 55, 55)
pool1	(10, 96, 27, 27)
norm1	(10, 96, 27, 27)
conv2	(10, 256, 27, 27)
pool2	(10, 256, 13, 13)
norm2	(10, 256, 13, 13)
conv3	(10, 384, 13, 13)
conv4	(10, 384, 13, 13)
conv5	(10, 256, 13, 13)
pool5	(10, 256, 6, 6)
fc6	(10, 4096)
fc7	(10, 4096)
fc8	(10, 1000)
prob	(10, 1000)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> layer_name, param <span class="keyword">in</span> net.params.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(param[<span class="number">0</span>].data.shape), <span class="built_in">str</span>(param[<span class="number">1</span>].data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>conv1	(96, 3, 11, 11) (96,)
conv2	(256, 48, 5, 5) (256,)
conv3	(384, 256, 3, 3) (384,)
conv4	(384, 192, 3, 3) (384,)
conv5	(256, 192, 3, 3) (256,)
fc6	(4096, 9216) (4096,)
fc7	(4096, 4096) (4096,)
fc8	(1000, 4096) (1000,)
</code></pre>
<p>Consider the shapes of the inner product parameters. The weight dimensions are the output and input sizes while the bias dimension is the output size.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load the fully convolutional network to transplant the parameters.</span></span><br><span class="line">net_full_conv = caffe.Net(<span class="string">&#x27;net_surgery/bvlc_caffenet_full_conv.prototxt&#x27;</span>, </span><br><span class="line">                          <span class="string">&#x27;../models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel&#x27;</span>,</span><br><span class="line">                          caffe.TEST)</span><br><span class="line">params_full_conv = [<span class="string">&#x27;fc6-conv&#x27;</span>, <span class="string">&#x27;fc7-conv&#x27;</span>, <span class="string">&#x27;fc8-conv&#x27;</span>]</span><br><span class="line"><span class="comment"># conv_params = &#123;name: (weights, biases)&#125;</span></span><br><span class="line">conv_params = &#123;pr: (net_full_conv.params[pr][<span class="number">0</span>].data, net_full_conv.params[pr][<span class="number">1</span>].data) <span class="keyword">for</span> pr <span class="keyword">in</span> params_full_conv&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pr <span class="keyword">in</span> params_full_conv:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#123;&#125; weights are &#123;&#125; dimensional and biases are &#123;&#125; dimensional&#x27;</span>.<span class="built_in">format</span>(pr, conv_params[pr][<span class="number">0</span>].shape, conv_params[pr][<span class="number">1</span>].shape)</span><br><span class="line"></span><br><span class="line">pr = <span class="string">&#x27;fc6-conv&#x27;</span></span><br><span class="line"><span class="built_in">print</span> net_full_conv.params[pr][<span class="number">0</span>].data[<span class="number">0</span>,<span class="number">0</span>,:,:] <span class="comment"># no weight_filler,default to 0s</span></span><br><span class="line"><span class="built_in">print</span> net_full_conv.params[pr][<span class="number">1</span>].data[<span class="number">0</span>]      <span class="comment"># no bias_filler,default to 0s</span></span><br></pre></td></tr></table></figure>

<pre><code>fc6-conv weights are (4096, 256, 6, 6) dimensional and biases are (4096,) dimensional
fc7-conv weights are (4096, 4096, 1, 1) dimensional and biases are (4096,) dimensional
fc8-conv weights are (1000, 4096, 1, 1) dimensional and biases are (1000,) dimensional
[[ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]]
0.0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> layer_name, blob <span class="keyword">in</span> net_full_conv.blobs.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(blob.data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>data	(1, 3, 451, 451)
conv1	(1, 96, 111, 111)
pool1	(1, 96, 55, 55)
norm1	(1, 96, 55, 55)
conv2	(1, 256, 55, 55)
pool2	(1, 256, 27, 27)
norm2	(1, 256, 27, 27)
conv3	(1, 384, 27, 27)
conv4	(1, 384, 27, 27)
conv5	(1, 256, 27, 27)
pool5	(1, 256, 13, 13)
fc6-conv	(1, 4096, 8, 8)
fc7-conv	(1, 4096, 8, 8)
fc8-conv	(1, 1000, 8, 8)
prob	(1, 1000, 8, 8)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> layer_name, param <span class="keyword">in</span> net_full_conv.params.iteritems():</span><br><span class="line">    <span class="built_in">print</span> layer_name + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(param[<span class="number">0</span>].data.shape), <span class="built_in">str</span>(param[<span class="number">1</span>].data.shape)</span><br></pre></td></tr></table></figure>

<pre><code>conv1	(96, 3, 11, 11) (96,)
conv2	(256, 48, 5, 5) (256,)
conv3	(384, 256, 3, 3) (384,)
conv4	(384, 192, 3, 3) (384,)
conv5	(256, 192, 3, 3) (256,)
fc6-conv	(4096, 256, 6, 6) (4096,)
fc7-conv	(4096, 4096, 1, 1) (4096,)
fc8-conv	(1000, 4096, 1, 1) (1000,)
</code></pre>
<p>The convolution weights are arranged in output $\times$ input $\times$ height $\times$ width dimensions. To map the inner product weights to convolution filters, we could roll the flat inner product vectors into channel $\times$ height $\times$ width filter matrices, but actually these are identical in memory (as row major arrays) so we can assign them directly.</p>
<p>The biases are identical to those of the inner product.</p>
<p>Let’s transplant!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_params</span>():</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> params:</span><br><span class="line">        <span class="built_in">print</span> pr, fc_params[pr][<span class="number">0</span>].shape, fc_params[pr][<span class="number">1</span>].shape</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> params_full_conv:</span><br><span class="line">        <span class="built_in">print</span> pr, conv_params[pr][<span class="number">0</span>].shape, conv_params[pr][<span class="number">1</span>].shape</span><br><span class="line">    </span><br><span class="line">    pr = <span class="string">&#x27;fc6-conv&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;params value for &#x27;</span>,pr</span><br><span class="line">    <span class="built_in">print</span> net_full_conv.params[pr][<span class="number">0</span>].data[<span class="number">0</span>,<span class="number">0</span>,:,:] </span><br><span class="line">    <span class="built_in">print</span> net_full_conv.params[pr][<span class="number">1</span>].data[<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;*&#x27;</span>*<span class="number">50</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;(1) before updated by fc&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;*&#x27;</span>*<span class="number">50</span></span><br><span class="line">print_params()</span><br><span class="line"></span><br><span class="line"><span class="comment">#print type(conv_params[pr_conv][0]) # ndarray  ndarray.flat</span></span><br><span class="line"><span class="comment">#conv_params[pr_conv][0].flat = fc_params[pr][0].flat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set w6,w7,w8 of conv from fc w6,w7,w8</span></span><br><span class="line"><span class="keyword">for</span> pr, pr_conv <span class="keyword">in</span> <span class="built_in">zip</span>(params, params_full_conv):</span><br><span class="line">    conv_params[pr_conv][<span class="number">0</span>].flat = fc_params[pr][<span class="number">0</span>].flat  <span class="comment"># flat unrolls the arrays</span></span><br><span class="line">    conv_params[pr_conv][<span class="number">1</span>][...] = fc_params[pr][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">print_conv_params = <span class="literal">True</span></span><br><span class="line">print_conv_params = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> print_conv_params:</span><br><span class="line">    pr = <span class="string">&#x27;fc6&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> net.params[pr][<span class="number">0</span>].data[<span class="number">0</span>,:<span class="number">6</span>*<span class="number">6</span>]  <span class="comment"># no weight_filler,loaded from weights file  </span></span><br><span class="line">    <span class="built_in">print</span> net.params[pr][<span class="number">1</span>].data[<span class="number">0</span>]       <span class="comment"># no bias_filler,loaded from weights file  </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;after init from fc&#x27;</span></span><br><span class="line">    pr = <span class="string">&#x27;fc6-conv&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> net_full_conv.params[pr][<span class="number">0</span>].data[<span class="number">0</span>,<span class="number">0</span>,:,:] <span class="comment"># no weight_filler,default to 0s, here updated by fc</span></span><br><span class="line">    <span class="built_in">print</span> net_full_conv.params[pr][<span class="number">1</span>].data[<span class="number">0</span>]      <span class="comment"># no bias_filler,default to 0s , here updated by fc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;*&#x27;</span>*<span class="number">50</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;(2) after updated by  fc&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;*&#x27;</span>*<span class="number">50</span></span><br><span class="line">print_params()</span><br></pre></td></tr></table></figure>

<pre><code>**************************************************
(1) before updated by fc
**************************************************
fc6 (4096, 9216) (4096,)
fc7 (4096, 4096) (4096,)
fc8 (1000, 4096) (1000,)
fc6-conv (4096, 256, 6, 6) (4096,)
fc7-conv (4096, 4096, 1, 1) (4096,)
fc8-conv (1000, 4096, 1, 1) (1000,)
params value for  fc6-conv
[[ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.]]
0.0
**************************************************
(2) after updated by  fc
**************************************************
fc6 (4096, 9216) (4096,)
fc7 (4096, 4096) (4096,)
fc8 (1000, 4096) (1000,)
fc6-conv (4096, 256, 6, 6) (4096,)
fc7-conv (4096, 4096, 1, 1) (4096,)
fc8-conv (1000, 4096, 1, 1) (1000,)
params value for  fc6-conv
[[ 0.00639847  0.00915686  0.00467043  0.00118941  0.00083305  0.00249258]
 [ 0.00249609 -0.00354958 -0.00502381 -0.00660044 -0.00810635 -0.00120969]
 [-0.00182751 -0.00181385 -0.00327348 -0.00657627 -0.01059825 -0.00223066]
 [ 0.00023664  0.00040984 -0.00052619 -0.00124062 -0.00269398 -0.00051081]
 [ 0.0014997   0.00123309 -0.00013806 -0.00111619  0.00321043  0.00284487]
 [ 0.00051387 -0.00087142 -0.00038937 -0.0008678   0.0049024   0.00155215]]
0.983698
</code></pre>
<p>Next, save the new model weights.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net_full_conv.save(<span class="string">&#x27;net_surgery/bvlc_caffenet_full_conv.caffemodel&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>To conclude, let’s make a classification map from the example cat image and visualize the confidence of “tiger cat” as a probability heatmap. This gives an 8-by-8 prediction on overlapping regions of the 451 $\times$ 451 input.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># load input and configure preprocessing</span></span><br><span class="line">im = caffe.io.load_image(<span class="string">&#x27;images/cat.jpg&#x27;</span>)</span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>: net_full_conv.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape&#125;) <span class="comment"># (1,3,451,451)</span></span><br><span class="line">transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, np.load(<span class="string">&#x27;../python/caffe/imagenet/ilsvrc_2012_mean.npy&#x27;</span>).mean(<span class="number">1</span>).mean(<span class="number">1</span>))</span><br><span class="line">transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">transformer.set_channel_swap(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">transformer.set_raw_scale(<span class="string">&#x27;data&#x27;</span>, <span class="number">255.0</span>)</span><br><span class="line"></span><br><span class="line">transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, im)</span><br><span class="line"><span class="comment">#print transformed_image.shape #(3, 451, 451)</span></span><br><span class="line">net_full_conv.blobs[<span class="string">&#x27;data&#x27;</span>].data[...] = transformed_image <span class="comment"># (1, 3, 451, 451)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#out = net_full_conv.forward_all(data=np.asarray([transformer.preprocess(&#x27;data&#x27;, im)]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make classification map by forward and print prediction indices at each location</span></span><br><span class="line">out = net_full_conv.forward()</span><br><span class="line">prob = out[<span class="string">&#x27;prob&#x27;</span>][<span class="number">0</span>] <span class="comment"># (1, 1000, 8, 8)--&gt;(1000, 8, 8)</span></span><br><span class="line">classification_map = out[<span class="string">&#x27;prob&#x27;</span>][<span class="number">0</span>].argmax(axis=<span class="number">0</span>) </span><br><span class="line"><span class="built_in">print</span> classification_map <span class="comment"># (8,8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show net input and confidence map (probability of the top prediction at each location)</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.imshow(transformer.deprocess(<span class="string">&#x27;data&#x27;</span>, net_full_conv.blobs[<span class="string">&#x27;data&#x27;</span>].data[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.imshow(out[<span class="string">&#x27;prob&#x27;</span>][<span class="number">0</span>,<span class="number">281</span>]) <span class="comment"># correct class = 281</span></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure>

<pre><code>[[282 282 281 281 281 281 277 282]
 [281 283 283 281 281 281 281 282]
 [283 283 283 283 283 283 287 282]
 [283 283 283 281 283 283 283 259]
 [283 283 283 283 283 283 283 259]
 [283 283 283 283 283 283 259 259]
 [283 283 283 283 259 259 259 277]
 [335 335 283 259 263 263 263 277]]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816095105836-233219882.png" alt="png"></p>
<p>The classifications include various cats – 282 &#x3D; tiger cat, 281 &#x3D; tabby, 283 &#x3D; persian – and foxes and other mammals.</p>
<p>In this way the fully connected layers can be extracted as dense features across an image (see <code>net_full_conv.blobs[&#39;fc6&#39;].data</code> for instance), which is perhaps more useful than the classification map itself.</p>
<p>Note that this model isn’t totally appropriate for sliding-window detection since it was trained for whole-image classification. Nevertheless it can work just fine. Sliding-window training and finetuning can be done by defining a sliding-window ground truth and loss such that a loss map is made for every location and solving as usual. (This is an exercise for the reader.)</p>
<p><em>A thank you to Rowland Depp for first suggesting this trick.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net_full_conv.blobs[<span class="string">&#x27;fc6-conv&#x27;</span>].data[<span class="number">0</span>,<span class="number">176</span>,:,:] <span class="comment"># (1, 4096, 8, 8)</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[  0.        ,   3.78561878,   4.91759014,  11.89788914,
         14.29053116,  16.50216484,   3.7467947 ,   0.        ],
       [  0.        ,  17.67206573,  25.0014534 ,  39.59349442,
         39.08831787,  29.11470604,   9.98679352,   0.        ],
       [  1.67216611,  18.15454102,  24.08405876,  39.18917847,
         37.54191971,  15.41128445,   0.        ,   0.        ],
       [  0.        ,   3.00706673,   5.87482309,  15.25675011,
         12.55344582,   0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ,   0.        ,
          1.        ,   0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ,   0.        ,
          1.        ,   0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ,   0.        ,
          1.        ,   0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ,   0.        ,
          1.        ,   0.        ,   0.        ,   0.        ]], dtype=float32)
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180816: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>matplot RGB vs opencv BGR vs caffe images</title>
    <url>//blog/matplot-RGB-vs-opencv-BGR-vs-caffe-images/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Matplot-skimage-PIL-Image"><a href="#Matplot-skimage-PIL-Image" class="headerlink" title="Matplot (skimage&#x2F; PIL Image)"></a>Matplot (skimage&#x2F; PIL Image)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Matplot: dims: (height,width,channels),order: RGB,range: [0,255] dtype: uint8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> img</span><br><span class="line">image = img.imread(<span class="string">&quot;images/cat.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> image.shape <span class="comment"># (360, 480, 3)</span></span><br><span class="line"><span class="built_in">print</span> image[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment">#plt.axis(&quot;off&quot;)</span></span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>(360, 480, 3)
[[26 27 25 28 30]
 [26 27 25 26 28]
 [26 26 26 26 27]
 [27 26 27 28 29]
 [29 27 26 26 29]]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102819164-727852617.png" alt="png"></p>
<h3 id="PIL-Image"><a href="#PIL-Image" class="headerlink" title="PIL.Image"></a>PIL.Image</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PIL Image.open: dims: hwc,order: RGB, ??( range: [0,255] dtype: uint8)??</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;images/cat.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(image)</span><br><span class="line"><span class="comment"># &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x7F258E0B8410&gt;</span></span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20180816102819164-727852617.png" alt="png"></p>
<h3 id="skimage"><a href="#skimage" class="headerlink" title="skimage"></a>skimage</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line">image = skimage.io.imread(image_filepath) <span class="comment"># RGB  (608, 606, 3)</span></span><br></pre></td></tr></table></figure>


<h3 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># OpenCV: dims: (height,width,channels),order: BGR,range: [0,255] dtype: uint8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;images/cat.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> image.shape <span class="comment"># (360, 480, 3)</span></span><br><span class="line"><span class="built_in">print</span> image[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment">#plt.axis(&quot;off&quot;)</span></span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>(360, 480, 3)
[[49 50 47 48 50]
 [51 52 48 48 50]
 [51 51 49 48 49]
 [50 49 49 48 49]
 [52 50 49 48 49]]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102822472-37116830.png" alt="png"></p>
<p>The colors of our image are clearly wrong! Why is this?</p>
<p>The answer lies as a caveat with OpenCV.OpenCV represents RGB images as multi-dimensional NumPy arrays…but in reverse order! This means that <strong>OpenCV images are actually represented in BGR order rather than RGB</strong>!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;images/cat.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># convert from BGR to RGB</span></span><br><span class="line">rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.imshow(rgb_image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://kezunlin.me/images/posts/635233-20180816102827030-476523183.png" alt="png"></p>
<h3 id="Matplot-VS-OpenCV"><a href="#Matplot-VS-OpenCV" class="headerlink" title="Matplot VS. OpenCV"></a>Matplot VS. OpenCV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> img</span><br><span class="line">image1 = img.imread(<span class="string">&quot;images/cat.jpg&quot;</span>) <span class="comment"># rgb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;images/cat.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># convert from BGR to RGB</span></span><br><span class="line">image2 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) <span class="comment"># rgb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#image1 and image2 are same at all.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> image1.dtype</span><br><span class="line"><span class="built_in">print</span> image1[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> image2.dtype</span><br><span class="line"><span class="built_in">print</span> image2[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line">equal_count = np.<span class="built_in">sum</span>( np.equal(image1[:,:,:],image2[:,:,:]) )</span><br><span class="line"><span class="built_in">print</span> equal_count</span><br><span class="line"><span class="built_in">print</span> equal_count == <span class="number">360</span>*<span class="number">480</span>*<span class="number">3</span></span><br></pre></td></tr></table></figure>

<pre><code>uint8
[[26 27 25 28 30]
 [26 27 25 26 28]
 [26 26 26 26 27]
 [27 26 27 28 29]
 [29 27 26 26 29]]

uint8
[[26 27 25 28 30]
 [26 27 25 26 28]
 [26 26 26 26 27]
 [27 26 27 28 29]
 [29 27 26 26 29]]
518400
True
</code></pre>
<h3 id="caffe-io-load-image"><a href="#caffe-io-load-image" class="headerlink" title="caffe.io.load_image"></a>caffe.io.load_image</h3><p><code>caffe.io.load_image</code> loads data in a normalized form (0-1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># caffe.io.load_image: dims: (height,width,channels),order: RGB,range: [0,1] dtype: float32</span></span><br><span class="line"><span class="comment"># matplot: caffe_image = matplot_image/255.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure plotting</span></span><br><span class="line"><span class="comment">#plt.rcParams[&#x27;figure.figsize&#x27;] = (10, 10)</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.interpolation&#x27;</span>] = <span class="string">&#x27;nearest&#x27;</span></span><br><span class="line"><span class="comment">#plt.rcParams[&#x27;image.cmap&#x27;] = &#x27;gray&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file should be run from &#123;caffe_root&#125;/examples (otherwise change this line)</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line"><span class="comment"># load image</span></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line">image = caffe.io.load_image(caffe_root + <span class="string">&#x27;examples/images/cat.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> image.shape,image.dtype <span class="comment"># (360, 480, 3) float32</span></span><br><span class="line"><span class="built_in">print</span> image[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(image) <span class="comment"># (360, 480, 3) RGB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line"><span class="comment"># load color image with color=False</span></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line">image2 = caffe.io.load_image(caffe_root + <span class="string">&#x27;examples/images/cat.jpg&#x27;</span>,color=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span> image2.shape  <span class="comment">#(360, 480, 1)</span></span><br><span class="line">gray_image2 = image2.squeeze()</span><br><span class="line"><span class="built_in">print</span> gray_image2.shape,gray_image2.dtype <span class="comment"># (360, 480) float32</span></span><br><span class="line"><span class="built_in">print</span> gray_image2[:<span class="number">5</span>,:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(gray_image2) <span class="comment"># (360, 480) gray</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line"><span class="comment"># load color image with color=False</span></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line">image3 = caffe.io.load_image(caffe_root + <span class="string">&#x27;examples/images/cat_gray.jpg&#x27;</span>,color=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span> image3.shape  <span class="comment">#(360, 480, 1)</span></span><br><span class="line">gray_image3 = image3.squeeze()</span><br><span class="line"><span class="built_in">print</span> gray_image3.shape,gray_image3.dtype <span class="comment"># (360, 480) float32</span></span><br><span class="line"><span class="built_in">print</span> gray_image3[:<span class="number">5</span>,:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(gray_image3) <span class="comment"># (360, 480) gray</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>(360, 480, 3) float32
[[ 0.10196079  0.10588235  0.09803922  0.10980392  0.11764706]
 [ 0.10196079  0.10588235  0.09803922  0.10196079  0.10980392]
 [ 0.10196079  0.10196079  0.10196079  0.10196079  0.10588235]
 [ 0.10588235  0.10196079  0.10588235  0.10980392  0.11372549]
 [ 0.11372549  0.10588235  0.10196079  0.10196079  0.11372549]]
(360, 480, 1)
(360, 480) float32
[[ 0.19543412  0.19935569  0.18842432  0.19120707  0.1990502 ]
 [ 0.19599961  0.19992118  0.19151255  0.19234589  0.20018902]
 [ 0.19599961  0.19599961  0.19543412  0.19234589  0.19626746]
 [ 0.19935569  0.19543412  0.19626746  0.19120707  0.19512863]
 [ 0.20719883  0.19935569  0.19543412  0.19234589  0.19512863]]
(360, 480, 1)
(360, 480) float32
[[ 0.10196079  0.10588235  0.09803922  0.10980392  0.11372549]
 [ 0.10196079  0.10588235  0.09803922  0.10196079  0.10980392]
 [ 0.10196079  0.10588235  0.10196079  0.10196079  0.10588235]
 [ 0.10588235  0.10196079  0.10588235  0.10980392  0.11372549]
 [ 0.11764706  0.10196079  0.10196079  0.10588235  0.10980392]]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102829804-2136984998.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102832577-885538468.png" alt="png"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102837178-881579112.png" alt="png"></p>
<h3 id="caffe-io-Transformer"><a href="#caffe-io-Transformer" class="headerlink" title="caffe.io.Transformer"></a>caffe.io.Transformer</h3><p><code>caffe.io.Transformer</code> for Network input blob(m,c,h,w):</p>
<ul>
<li><strong>caffe Network default use BGR image format just as OpenCV format</strong>.</li>
<li>caffe mean files use BGR ordering, which is calculated from <strong>trainning images</strong> instead of test images. <code>mu = np.array([104, 117, 123] # BGR</code></li>
<li>pixel range in <strong>[0,255] with dtype float32.</strong></li>
<li>(m,c,h,w), BGR order,[0,255] range,float32</li>
</ul>
<h4 id="caffe-io-load-image-1"><a href="#caffe-io-load-image-1" class="headerlink" title="caffe.io.load_image"></a>caffe.io.load_image</h4><p><code>caffe.io.Transformer</code>: </p>
<ul>
<li>input image: caffe.io.load_image: (h,w,c),RGB,[0,1],float32 </li>
<li>transformed image: (c,h,w), BGR,[0,255] float32</li>
</ul>
<p><code>caffe.io.Transformer</code> steps: </p>
<p>Note that the mean subtraction is always carried out before scaling. </p>
<ul>
<li>transformer.set_transpose(‘data’, (2,0,1))  #(h,w,c)-&gt;(c,h,w)</li>
<li>transformer.set_channel_swap(‘data’, (2,1,0)) # RGB-&gt;BGR</li>
<li>transformer.set_raw_scale(‘data’, 255) # [0,1]-&gt;[0,255] float32</li>
<li>transformer.set_mean(‘data’, mu) #  subtract BGR</li>
</ul>
<p>keep in mind that <strong>the Transformer is only required when using a deploy.prototxt</strong>-like network definition, so without the Data Layer. When using a Data Layer, things get easier to understand.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">caffe_root = <span class="string">&#x27;../&#x27;</span>  <span class="comment"># this file should be run from &#123;caffe_root&#125;/examples (otherwise change this line)</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line">image = caffe.io.load_image(caffe_root + <span class="string">&#x27;examples/images/cat.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># caffe.io.load_image: dims: (height,width,channels),order: RGB,range: [0,1] dtype: float32</span></span><br><span class="line"><span class="built_in">print</span> image.shape,image.dtype <span class="comment"># (360, 480, 3) float32</span></span><br><span class="line"><span class="built_in">print</span> image[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#plt.imshow(image)</span></span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line"></span><br><span class="line">mu = np.load(caffe_root + <span class="string">&#x27;python/caffe/imagenet/ilsvrc_2012_mean.npy&#x27;</span>) </span><br><span class="line">mu = mu.mean(<span class="number">1</span>).mean(<span class="number">1</span>)  <span class="comment"># # BGR</span></span><br><span class="line"></span><br><span class="line">data_shape = (<span class="number">10</span>, <span class="number">3</span>, <span class="number">227</span>, <span class="number">227</span>)</span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>: data_shape&#125;)</span><br><span class="line"></span><br><span class="line">transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment"># h,w,c-&gt;c,h,w(012-&gt;201) move image channels to outermost dimension</span></span><br><span class="line">transformer.set_channel_swap(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment"># swap channels from RGB to BGR</span></span><br><span class="line">transformer.set_raw_scale(<span class="string">&#x27;data&#x27;</span>, <span class="number">255</span>)      <span class="comment"># rescale from [0, 1] to [0, 255]</span></span><br><span class="line">transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, mu)            <span class="comment"># subtract the dataset-mean value(BGR) in each channel</span></span><br><span class="line"></span><br><span class="line">transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image) </span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;original  image: &#x27;</span>,image.shape,image.dtype             <span class="comment"># (360, 480, 3) float32</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;transform image: &#x27;</span>,transformed_image.shape,transformed_image.dtype <span class="comment">#(3, 227, 227) float32</span></span><br><span class="line"><span class="built_in">print</span> transformed_image[<span class="number">0</span>,:<span class="number">5</span>,:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, using CaffeNet, your net.blobs[&#x27;data&#x27;].data.shape == (10, 3, 227, 227). </span></span><br><span class="line"><span class="comment"># This is because 10 random 227x227 crops are supposed to be extracted from a 256x256 image </span></span><br><span class="line"><span class="comment"># and passed through the net.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># net.blobs[&#x27;data&#x27;].reshape(50,3,227,227) # we can change network input mini-batch to 50 as we like</span></span><br><span class="line"><span class="comment"># net.blobs[&#x27;data&#x27;].data[...] = transformed_image # ---&gt;(50,3,227,227) 50 images</span></span><br></pre></td></tr></table></figure>

<pre><code>(360, 480, 3) float32
[[ 0.10196079  0.10588235  0.09803922  0.10980392  0.11764706]
 [ 0.10196079  0.10588235  0.09803922  0.10196079  0.10980392]
 [ 0.10196079  0.10196079  0.10196079  0.10196079  0.10588235]
 [ 0.10588235  0.10196079  0.10588235  0.10980392  0.11372549]
 [ 0.11372549  0.10588235  0.10196079  0.10196079  0.11372549]]

original  image:  (360, 480, 3) float32
transform image:  (3, 227, 227) float32
[[-53.86381531 -56.23903656 -53.54626465 -53.14715195 -51.32625961]
 [-52.93947601 -55.71855164 -54.00423813 -54.76469803 -52.88771057]
 [-53.89373398 -55.67879486 -55.4278717  -55.22265625 -53.47174454]
 [-50.98455811 -51.3506012  -54.06866074 -52.09104156 -52.94168854]
 [-49.92769241 -49.85874176 -52.08575439 -52.50840759 -51.3900528 ]]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h4 id="cv2-imread"><a href="#cv2-imread" class="headerlink" title="cv2.imread"></a>cv2.imread</h4><p><code>caffe.io.Transformer</code>: </p>
<ul>
<li>input image: cv2.imread: (h,w,c),BGR,[0,255],float32 </li>
<li>transformed image: (c,h,w), BGR order,[0,255] float32</li>
</ul>
<p><code>caffe.io.Transformer</code> steps: </p>
<p>Note that the mean subtraction is always carried out before scaling. </p>
<ul>
<li>transformer.set_transpose(‘data’, (2,0,1))  #(h,w,c)-&gt;(c,h,w)</li>
<li>transformer.set_mean(‘data’, mu) #  subtract BGR</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">image = cv2.imread(<span class="string">&quot;test/cat.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">data_shape = (<span class="number">10</span>, <span class="number">3</span>, <span class="number">227</span>, <span class="number">227</span>)</span><br><span class="line"></span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>: data_shape&#125;)</span><br><span class="line">transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) </span><br><span class="line">transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, mu)     </span><br><span class="line"></span><br><span class="line">transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image) </span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;original  image: &#x27;</span>,image.shape,image.dtype             <span class="comment"># (360, 480, 3) float32</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;transform image: &#x27;</span>,transformed_image.shape,transformed_image.dtype <span class="comment">#(3, 227, 227) float32</span></span><br><span class="line"><span class="built_in">print</span> transformed_image[<span class="number">0</span>,:<span class="number">5</span>,:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, using CaffeNet, your net.blobs[&#x27;data&#x27;].data.shape == (10, 3, 227, 227). </span></span><br><span class="line"><span class="comment"># This is because 10 random 227x227 crops are supposed to be extracted from a 256x256 image </span></span><br><span class="line"><span class="comment"># and passed through the net.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># net.blobs[&#x27;data&#x27;].reshape(50,3,227,227) # we can change network input mini-batch to 50 as we like</span></span><br><span class="line"><span class="comment"># net.blobs[&#x27;data&#x27;].data[...] = transformed_image # ---&gt;(50,3,227,227) 50 </span></span><br></pre></td></tr></table></figure>

<h4 id="deprocess-transformed-image"><a href="#deprocess-transformed-image" class="headerlink" title="deprocess transformed_image"></a>deprocess transformed_image</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Helper function for deprocessing preprocessed images, e.g., for display.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deprocess_net_image</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="comment"># [(&#x27;B&#x27;, 104.0069879317889), (&#x27;G&#x27;, 116.66876761696767), (&#x27;R&#x27;, 122.6789143406786)]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># input: (c,h,w), BGR,[lower,upper],float32</span></span><br><span class="line">    <span class="comment"># output: (h,w,c), RGB,[0,255],      uint8</span></span><br><span class="line">    image = image.copy()              <span class="comment"># don&#x27;t modify destructively</span></span><br><span class="line">    image = image[::-<span class="number">1</span>]               <span class="comment"># BGR -&gt; RGB</span></span><br><span class="line">    image = image.transpose(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)  <span class="comment"># CHW -&gt; HWC</span></span><br><span class="line">    image += [<span class="number">123</span>, <span class="number">117</span>, <span class="number">104</span>]          <span class="comment"># (approximately) undo mean subtraction  RGB</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># clamp values in [0, 255]</span></span><br><span class="line">    image[image &lt; <span class="number">0</span>], image[image &gt; <span class="number">255</span>] = <span class="number">0</span>, <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># round and cast from float32 to uint8</span></span><br><span class="line">    image = np.<span class="built_in">round</span>(image)</span><br><span class="line">    image = np.require(image, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">image = deprocess_net_image(transformed_image)</span><br><span class="line"><span class="comment">#(h,w,c), RGB,[0,255],      uint8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> image.shape,image.dtype <span class="comment"># (227, 227, 3) uint8</span></span><br><span class="line"><span class="built_in">print</span> image[:<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>(227, 227, 3) uint8
[[27 27 29 29 30]
 [26 26 28 27 28]
 [27 27 27 26 28]
 [27 28 25 28 27]
 [26 29 28 28 28]]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816102840423-899986139.png" alt="png"></p>
<h4 id="set-3-dim-image-to-4-dim-input-blob-data"><a href="#set-3-dim-image-to-4-dim-input-blob-data" class="headerlink" title="set 3-dim image to 4-dim input blob data"></a>set 3-dim image to 4-dim input blob data</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.zeros((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> data</span><br><span class="line">image = np.arange(<span class="number">48</span>).reshape(<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>) </span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> image</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;set image to data&#x27;</span></span><br><span class="line">data[...] = image <span class="comment"># auto broadcasting from 3-dims to 4-dims</span></span><br><span class="line"><span class="built_in">print</span> data</span><br></pre></td></tr></table></figure>

<pre><code>[[[[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]

  [[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]

  [[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]]


 [[[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]

  [[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]

  [[ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]
   [ 0.  0.  0.  0.]]]]

[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]
  [12 13 14 15]]

 [[16 17 18 19]
  [20 21 22 23]
  [24 25 26 27]
  [28 29 30 31]]

 [[32 33 34 35]
  [36 37 38 39]
  [40 41 42 43]
  [44 45 46 47]]]
set image to data
[[[[  0.   1.   2.   3.]
   [  4.   5.   6.   7.]
   [  8.   9.  10.  11.]
   [ 12.  13.  14.  15.]]

  [[ 16.  17.  18.  19.]
   [ 20.  21.  22.  23.]
   [ 24.  25.  26.  27.]
   [ 28.  29.  30.  31.]]

  [[ 32.  33.  34.  35.]
   [ 36.  37.  38.  39.]
   [ 40.  41.  42.  43.]
   [ 44.  45.  46.  47.]]]


 [[[  0.   1.   2.   3.]
   [  4.   5.   6.   7.]
   [  8.   9.  10.  11.]
   [ 12.  13.  14.  15.]]

  [[ 16.  17.  18.  19.]
   [ 20.  21.  22.  23.]
   [ 24.  25.  26.  27.]
   [ 28.  29.  30.  31.]]

  [[ 32.  33.  34.  35.]
   [ 36.  37.  38.  39.]
   [ 40.  41.  42.  43.]
   [ 44.  45.  46.  47.]]]]
</code></pre>
<h3 id="transformer-vs-python-code"><a href="#transformer-vs-python-code" class="headerlink" title="transformer vs. python code"></a>transformer vs. python code</h3><h4 id="caffe-io-load-image-2"><a href="#caffe-io-load-image-2" class="headerlink" title="caffe.io.load_image"></a>caffe.io.load_image</h4><h5 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"># Make sure that caffe is on the python path:</span><br><span class="line">caffe_root = &#x27;./&#x27;</span><br><span class="line">os.chdir(caffe_root)</span><br><span class="line">sys.path.insert(0, os.path.join(caffe_root, &#x27;python&#x27;))</span><br><span class="line">import caffe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># caffe.io.load_image: transformer  + python code</span><br><span class="line">data_shape = [1,3,512,512]</span><br><span class="line"></span><br><span class="line">transformer = caffe.io.Transformer(&#123;&#x27;data&#x27;:data_shape&#125;) # resize</span><br><span class="line">transformer.set_transpose(&#x27;data&#x27;, (2, 0, 1)) # hwc ===&gt; chw</span><br><span class="line">transformer.set_channel_swap(&#x27;data&#x27;, (2, 1, 0))  # rgb===&gt;bgr</span><br><span class="line">transformer.set_raw_scale(&#x27;data&#x27;, 255)  # [0-1]===&gt; [0,255]</span><br><span class="line">transformer.set_mean(&#x27;data&#x27;, np.array([104, 117, 123]))  # bgr mean pixel</span><br><span class="line"></span><br><span class="line">image_file = &quot;./images/1.png&quot;</span><br><span class="line">print(&quot;image_file=&quot;, image_file)</span><br><span class="line">image = caffe.io.load_image(image_file) # hwc, rgb, 0-1 </span><br><span class="line">print(&quot;image.shape=&quot;, image.shape)</span><br><span class="line"></span><br><span class="line">transformed_image = transformer.preprocess(&#x27;data&#x27;, image) #</span><br><span class="line">print(&quot;transformed_image.shape=&quot;, transformed_image.shape) # 3,512,512</span><br><span class="line">b,g,r = transformed_image </span><br><span class="line">print(b.shape) # 512,512</span><br><span class="line">print(g.shape)</span><br><span class="line">print(r.shape)</span><br><span class="line"></span><br><span class="line">print(&quot;&quot;)</span><br><span class="line">print(transformed_image[:,:5,:5])</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>(&#39;image_file=&#39;, &#39;./images/1.png&#39;)
(&#39;image.shape=&#39;, (1080, 1920, 3))
(&#39;transformed_image.shape=&#39;, (3, 512, 512))
(512, 512)
(512, 512)
(512, 512)

[[[ -98.          -98.          -98.          -98.          -98.        ]
  [ -98.          -98.          -98.          -98.          -98.        ]
  [ -23.96776581  -28.58105469  -31.359375    -25.08592987  -28.90721893]
  [  -8.21874237  -12.71092987  -15.46875     -15.27832031  -10.57226562]
  [  -7.75        -12.12499237  -15.          -15.          -10.984375  ]]

 [[-117.         -117.         -117.         -117.         -117.        ]
  [-117.         -117.         -117.         -117.         -117.        ]
  [ -43.96776581  -48.58105469  -51.359375    -45.08592987  -48.90721893]
  [ -26.21874237  -30.71092987  -33.46875     -33.27832031  -33.57226562]
  [ -24.75        -29.12499237  -32.          -32.          -31.984375  ]]

 [[-123.         -123.         -123.         -123.         -123.        ]
  [-123.         -123.         -123.         -123.         -123.        ]
  [ -52.96776581  -57.58105469  -60.359375    -54.08592987  -57.90721893]
  [ -40.21874237  -44.71092987  -47.46875     -47.27832031  -44.572258  ]
  [ -40.75        -45.12499237  -48.          -48.          -47.984375  ]]]
</code></pre>
<h5 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(image.shape) # hwc,rgb,0-1   (1080, 1920, 3)</span><br><span class="line">print(image.dtype) # float32</span><br><span class="line"></span><br><span class="line"># resize</span><br><span class="line">image = cv2.resize(image, (512,512)) </span><br><span class="line">print(&quot;image resize = &quot;,image.shape) # (512, 512, 3)</span><br><span class="line"></span><br><span class="line"># hwc,rgb ===&gt; chw, bgr</span><br><span class="line">r,g,b = image[:,:,0],image[:,:,1],image[:,:,2]</span><br><span class="line"></span><br><span class="line">print(b.shape) # (512, 512)</span><br><span class="line">print(g.shape) # (512, 512)</span><br><span class="line">print(r.shape) # (512, 512)</span><br><span class="line"></span><br><span class="line">bgr = np.zeros([3,b.shape[0],b.shape[1]])</span><br><span class="line">print(bgr.shape)</span><br><span class="line">bgr[0,:,:] = b </span><br><span class="line">bgr[1,:,:] = g </span><br><span class="line">bgr[2,:,:] = r </span><br><span class="line"></span><br><span class="line"># 0-1 ===&gt;0-255</span><br><span class="line">bgr = bgr *255.</span><br><span class="line"></span><br><span class="line"># -mean</span><br><span class="line">print(&quot;&quot;)</span><br><span class="line">bgr[0] -= 104</span><br><span class="line">bgr[1] -= 117</span><br><span class="line">bgr[2] -= 123</span><br><span class="line">print(bgr[:,:5,:5])</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>(1080, 1920, 3)
float32
(&#39;image resize = &#39;, (512, 512, 3))
float32
(512, 512)
(512, 512)
(512, 512)
(3, 512, 512)

[[[ -97.99999988  -97.99999988  -97.99999988  -97.99999988  -97.99999988]
  [ -97.99999988  -97.99999988  -97.99999988  -97.99999988  -97.99999988]
  [ -23.9677673   -28.58105415  -31.35937387  -25.0859333   -28.90722105]
  [  -8.21874478  -12.71093214  -15.46874815  -15.27831757  -10.5722701 ]
  [  -7.74999434  -12.12499598  -14.99999771  -14.99999771  -10.98437318]]

 [[-117.         -117.         -117.         -117.         -117.        ]
  [-117.         -117.         -117.         -117.         -117.        ]
  [ -43.96776688  -48.58105373  -51.35937345  -45.08593288  -48.90722823]
  [ -26.21874449  -30.71093184  -33.46874785  -33.27831727  -33.5722695 ]
  [ -24.7499941   -29.12499574  -31.99999747  -31.99999747  -31.98437271]]

 [[-123.         -123.         -123.         -123.         -123.        ]
  [-123.         -123.         -123.         -123.         -123.        ]
  [ -52.9677667   -57.58105356  -60.35937327  -54.0859327   -57.90722805]
  [ -40.21874401  -44.71093136  -47.46874738  -47.2783168   -44.5722692 ]
  [ -40.7499935   -45.12499514  -47.99999687  -47.99999687  -47.98437211]]]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h4 id="cv2-imread-1"><a href="#cv2-imread-1" class="headerlink" title="cv2.imread"></a>cv2.imread</h4><h5 id="transformer-1"><a href="#transformer-1" class="headerlink" title="transformer"></a>transformer</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cv2.imread: transformer  + python code</span></span><br><span class="line">data_shape = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">512</span>,<span class="number">512</span>]</span><br><span class="line"></span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>:data_shape&#125;) <span class="comment"># resize</span></span><br><span class="line">transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)) <span class="comment"># hwc ===&gt; chw</span></span><br><span class="line"><span class="comment">#transformer.set_channel_swap(&#x27;data&#x27;, (2, 1, 0))  # rgb===&gt;bgr</span></span><br><span class="line"><span class="comment">#transformer.set_raw_scale(&#x27;data&#x27;, 255)  # [0-1]===&gt; [0,255]</span></span><br><span class="line">transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, np.array([<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>]))  <span class="comment"># bgr mean pixel</span></span><br><span class="line"></span><br><span class="line">image_file = <span class="string">&quot;./images/1.png&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image_file=&quot;</span>, image_file)</span><br><span class="line">image = cv2.imread(image_file) <span class="comment"># hwc, bgr, 0-255</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image.shape=&quot;</span>, image.shape)</span><br><span class="line"></span><br><span class="line">transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image) <span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;transformed_image.shape=&quot;</span>, transformed_image.shape) <span class="comment"># 3,512,512</span></span><br><span class="line">b,g,r = transformed_image </span><br><span class="line"><span class="built_in">print</span>(b.shape) <span class="comment"># 512,512</span></span><br><span class="line"><span class="built_in">print</span>(g.shape)</span><br><span class="line"><span class="built_in">print</span>(r.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(transformed_image[:,:<span class="number">5</span>,:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>(&#39;image_file=&#39;, &#39;./images/1.png&#39;)
(&#39;image.shape=&#39;, (1080, 1920, 3))
(&#39;transformed_image.shape=&#39;, (3, 512, 512))
(512, 512)
(512, 512)
(512, 512)

[[[ -98.          -98.          -98.          -98.          -98.        ]
  [ -98.          -98.          -98.          -98.          -98.        ]
  [ -23.96777344  -28.58105469  -31.359375    -25.0859375   -28.90722656]
  [  -8.21875     -12.7109375   -15.46875     -15.27832031  -10.57226562]
  [  -7.75        -12.125       -15.          -15.          -10.984375  ]]

 [[-117.         -117.         -117.         -117.         -117.        ]
  [-117.         -117.         -117.         -117.         -117.        ]
  [ -43.96777344  -48.58105469  -51.359375    -45.0859375   -48.90722656]
  [ -26.21875     -30.7109375   -33.46875     -33.27832031  -33.57226562]
  [ -24.75        -29.125       -32.          -32.          -31.984375  ]]

 [[-123.         -123.         -123.         -123.         -123.        ]
  [-123.         -123.         -123.         -123.         -123.        ]
  [ -52.96777344  -57.58105469  -60.35937119  -54.0859375   -57.90722656]
  [ -40.21875     -44.7109375   -47.46875     -47.27832031  -44.57226562]
  [ -40.75        -45.125       -48.          -48.          -47.984375  ]]]
</code></pre>
<h5 id="python-code-1"><a href="#python-code-1" class="headerlink" title="python code"></a>python code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(image.shape) # hwc,bgr,0-255   (1080, 1920, 3)</span><br><span class="line">print(image.dtype) # uint8</span><br><span class="line"></span><br><span class="line"># int8 ===&gt;float32</span><br><span class="line">image = image.astype(&#x27;float32&#x27;) # key steps</span><br><span class="line">print(image.dtype) # float32</span><br><span class="line"></span><br><span class="line"># resize</span><br><span class="line">image = cv2.resize(image, (512,512)) </span><br><span class="line">print(&quot;image resize = &quot;,image.shape) # (512, 512, 3)</span><br><span class="line">print(image.dtype) # float32</span><br><span class="line"></span><br><span class="line"># hwc ===&gt; chw</span><br><span class="line">b,g,r = image[:,:,0],image[:,:,1],image[:,:,2]</span><br><span class="line"></span><br><span class="line">print(b.shape) # (512, 512)</span><br><span class="line">print(g.shape) # (512, 512)</span><br><span class="line">print(r.shape) # (512, 512)</span><br><span class="line"></span><br><span class="line">bgr = np.zeros([3,b.shape[0],b.shape[1]])</span><br><span class="line">print(bgr.shape)</span><br><span class="line"></span><br><span class="line"># -mean</span><br><span class="line">b -= 104</span><br><span class="line">g -= 117</span><br><span class="line">r -= 123</span><br><span class="line"></span><br><span class="line">bgr[0,:,:] = b </span><br><span class="line">bgr[1,:,:] = g </span><br><span class="line">bgr[2,:,:] = r </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(bgr[:,:5,:5])</span><br></pre></td></tr></table></figure>

<h5 id="python-code-v2"><a href="#python-code-v2" class="headerlink" title="python code v2"></a>python code v2</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">image = cv2.imread(filepath) # hwc, bgr,0-255</span><br><span class="line">print(image.dtype) # uint8</span><br><span class="line">        </span><br><span class="line">image = image.astype(&#x27;float32&#x27;) # key steps</span><br><span class="line">image = cv2.resize(image, (512,512)) </span><br><span class="line">print(&quot;image resize = &quot;,image.shape) # (512, 512, 3)</span><br><span class="line">print(image.dtype) # float32</span><br><span class="line"></span><br><span class="line">image -= np.array((104.00698793,116.66876762,122.67891434)) # bgr mean</span><br><span class="line">image = image.transpose((2,0,1)) # hwc ===&gt;chw</span><br><span class="line"></span><br><span class="line">print(image[:,:5,:5])</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>(1080, 1920, 3)
uint8
float32
(&#39;image resize = &#39;, (512, 512, 3))
float32
(512, 512)
(512, 512)
(512, 512)
(3, 512, 512)

[[[ -98.          -98.          -98.          -98.          -98.        ]
  [ -98.          -98.          -98.          -98.          -98.        ]
  [ -23.96777344  -28.58105469  -31.359375    -25.0859375   -28.90722656]
  [  -8.21875     -12.7109375   -15.46875     -15.27832031  -10.57226562]
  [  -7.75        -12.125       -15.          -15.          -10.984375  ]]

 [[-117.         -117.         -117.         -117.         -117.        ]
  [-117.         -117.         -117.         -117.         -117.        ]
  [ -43.96777344  -48.58105469  -51.359375    -45.0859375   -48.90722656]
  [ -26.21875     -30.7109375   -33.46875     -33.27832031  -33.57226562]
  [ -24.75        -29.125       -32.          -32.          -31.984375  ]]

 [[-123.         -123.         -123.         -123.         -123.        ]
  [-123.         -123.         -123.         -123.         -123.        ]
  [ -52.96777344  -57.58105469  -60.359375    -54.0859375   -57.90722656]
  [ -40.21875     -44.7109375   -47.46875     -47.27832031  -44.57226562]
  [ -40.75        -45.125       -48.          -48.          -47.984375  ]]]
</code></pre>
<h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><ul>
<li><strong>Matplot.imread</strong>:        dims: (height,width,channels),order: RGB,range: [0,255] dtype: uint8, plot</li>
<li><strong>OpenCV.imread</strong>:         dims: (height,width,channels),order: <strong>BGR</strong>,range: [0,255] dtype: uint8, plot</li>
<li><strong>caffe.io.load_image</strong>:   dims: (height,width,channels),order: RGB,range: <strong>[0,1]</strong>   dtype: float32 (caffe_io_image &#x3D; matplot_image&#x2F;255.0) ,plot</li>
<li><strong>caffe Network Input(Transformer)</strong>:   dims: (m,c,h,w), order: <strong>BGR</strong>, range [0,255],dtype: float32, <strong>PLOT ERROR</strong></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.pyimagesearch.com/2014/11/03/display-matplotlib-rgb-image/">display-matplotlib-rgb-image</a></li>
<li><a href="http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_matplotlib_rgb_brg_image_load_display_save.php">python_opencv3_matplotlib_rgb_brg_image_load_display_save</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180816: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>rgb</tag>
        <tag>bgr</tag>
      </tags>
  </entry>
  <entry>
    <title>a quick guide to rcnn</title>
    <url>//blog/rcnn-tutorial/</url>
    <content><![CDATA[<h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p><a href="https://github.com/rbgirshick/rcnn">R-CNN</a> is a state-of-the-art detector that classifies region proposals by a finetuned Caffe model. For the full details of the R-CNN system and model, refer to its project site and the paper:</p>
<blockquote>
<p><em>Rich feature hierarchies for accurate object detection and semantic segmentation</em>. Ross Girshick, Jeff Donahue, Trevor Darrell, Jitendra Malik. CVPR 2014. <a href="http://arxiv.org/abs/1311.2524">Arxiv 2013</a>.</p>
</blockquote>
<p>In this example, we do detection by a pure Caffe edition of the R-CNN model for ImageNet. The R-CNN detector outputs class scores for the 200 detection classes of ILSVRC13. Keep in mind that these are raw one vs. all SVM scores, so they are not probabilistically calibrated or exactly comparable across classes. Note that this off-the-shelf model is simply for convenience, and is not the full R-CNN model.</p>
<p>Let’s run detection on an image of a bicyclist riding a fish bike in the desert (from the ImageNet challenge—no joke).</p>
<h3 id="selective-search"><a href="#selective-search" class="headerlink" title="selective search"></a>selective search</h3><p>First, we’ll need region proposals and the Caffe R-CNN ImageNet model:</p>
<blockquote>
<p><a href="http://koen.me/research/selectivesearch/">Selective Search</a> is the region proposer used by R-CNN. The <a href="https://github.com/sergeyk/selective_search_ijcv_with_python">selective_search_ijcv_with_python</a> Python module takes care of extracting proposals through the selective search MATLAB implementation. </p>
</blockquote>
<h4 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$CAFFE_ROOT</span>/caffe/python</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sergeyk/selective_search_ijcv_with_python.git`</span><br><span class="line"></span><br><span class="line">pip install tables</span><br></pre></td></tr></table></figure>

<h4 id="install-matlab"><a href="#install-matlab" class="headerlink" title="install matlab"></a>install matlab</h4><p>Install <code>matlab</code> and run <code>demo.m</code> file to compile functions</p>
<p>see <a href="https://kezunlin.me/post/deab4886/">here</a></p>
<p><strong>Notice: Restart computer for Solving Errors</strong>: </p>
<pre><code>OSError: [Errno 2] No such file or directory
</code></pre>
<h4 id="compile-matlab-functions"><a href="#compile-matlab-functions" class="headerlink" title="compile matlab functions"></a>compile matlab functions</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe/python/caffe/selective_search_ijcv_with_python</span><br><span class="line"><span class="built_in">which</span> matlab</span><br><span class="line"><span class="comment">#/opt/MATLAB/R2016b/bin/matlab</span></span><br><span class="line"></span><br><span class="line">matlab demo.m</span><br></pre></td></tr></table></figure>

<ul>
<li><p>run demo in matlab<br><img src="https://kezunlin.me/images/posts/635233-20180822101918577-1947950229.png" alt="png"></p>
</li>
<li><p>origin image<br><img src="https://kezunlin.me/images/posts/635233-20180822102036279-1691824045.jpg" alt="png"></p>
</li>
<li><p>region results<br><img src="https://kezunlin.me/images/posts/635233-20180822101930740-496243953.png" alt="png"></p>
</li>
</ul>
<h3 id="detect-regions"><a href="#detect-regions" class="headerlink" title="detect regions"></a>detect regions</h3><p>Run scripts to get the Caffe R-CNN ImageNet model.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/download_model_binary.py models/bvlc_reference_rcnn_ilsvrc13</span><br></pre></td></tr></table></figure>

<p>With that done, we’ll call the bundled <code>detect.py</code> to generate the region proposals and run the network. For an explanation of the arguments, do <code>./detect.py --help</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe/examples/</span><br><span class="line"><span class="built_in">mkdir</span> -p _temp</span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>`/images/fish-bike.jpg &gt; _temp/det_input.txt</span><br><span class="line">../python/detect.py --crop_mode=selective_search --pretrained_model=../models/bvlc_reference_rcnn_ilsvrc13/bvlc_reference_rcnn_ilsvrc13.caffemodel --model_def=../models/bvlc_reference_rcnn_ilsvrc13/deploy.prototxt --gpu --raw_scale=255 _temp/det_input.txt _temp/det_output.h5</span><br></pre></td></tr></table></figure>

<pre><code>...
I1129 15:02:22.498908  3483 net.cpp:242] This network produces output fc-rcnn
I1129 15:02:22.498919  3483 net.cpp:255] Network initialization done.
I1129 15:02:22.577332  3483 upgrade_proto.cpp:53] Attempting to upgrade input file specified using deprecated V1LayerParameter: ../models/bvlc_reference_rcnn_ilsvrc13/bvlc_reference_rcnn_ilsvrc13.caffemodel
I1129 15:02:22.685262  3483 upgrade_proto.cpp:61] Successfully upgraded file specified using deprecated V1LayerParameter
I1129 15:02:22.685796  3483 upgrade_proto.cpp:67] Attempting to upgrade input file specified using deprecated input fields: ../models/bvlc_reference_rcnn_ilsvrc13/bvlc_reference_rcnn_ilsvrc13.caffemodel
I1129 15:02:22.685804  3483 upgrade_proto.cpp:70] Successfully upgraded file specified using deprecated input fields.
W1129 15:02:22.685809  3483 upgrade_proto.cpp:72] Note that future Caffe releases will only support input layers and not input fields.
Loading input...
selective_search_rcnn(&#123;&#39;/home/kezunlin/program/caffe/examples/images/fish-bike.jpg&#39;&#125;, &#39;/tmp/tmpkOe6J0.mat&#39;)
/home/kezunlin/program/caffe/python/caffe/detector.py:140: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  crop = im[window[0]:window[2], window[1]:window[3]]
/home/kezunlin/program/caffe/python/caffe/detector.py:174: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  context_crop = im[box[0]:box[2], box[1]:box[3]]
/usr/local/lib/python2.7/dist-packages/skimage/transform/_warps.py:84: UserWarning: The default mode, &#39;constant&#39;, will be changed to &#39;reflect&#39; in skimage 0.15.
  warn(&quot;The default mode, &#39;constant&#39;, will be changed to &#39;reflect&#39; in &quot;
/home/kezunlin/program/caffe/python/caffe/detector.py:177: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  crop[pad_y:(pad_y + crop_h), pad_x:(pad_x + crop_w)] = context_crop
Processed 1565 windows in 15.899 s.
/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py:1299: PerformanceWarning: 
your performance may suffer as PyTables will pickle object types that it cannot
map directly to c-types [inferred_type-&gt;mixed,key-&gt;block1_values] [items-&gt;[&#39;prediction&#39;]]

  return pytables.to_hdf(path_or_buf, key, self, **kwargs)
Saved to _temp/det_output.h5 in 0.082 s.
</code></pre>
<p>This run was in GPU mode. For CPU mode detection, call <code>detect.py</code> without the <code>--gpu</code> argument.</p>
<h3 id="process-regions"><a href="#process-regions" class="headerlink" title="process regions"></a>process regions</h3><p>Running this outputs a DataFrame with the filenames, selected windows, and their detection scores to an HDF5 file.<br>(We only ran on one image, so the filenames will all be the same.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">df = pd.read_hdf(<span class="string">&#x27;_temp/det_output.h5&#x27;</span>, <span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br><span class="line">row = df.iloc[<span class="number">0</span>] <span class="comment"># prediction(200,), bbox as input image</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;row &#x27;</span>,row.shape</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;prediction &#x27;</span>,row[<span class="number">0</span>].shape</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(row)  <span class="comment"># class &#x27;pandas.core.series.Series</span></span><br><span class="line"><span class="built_in">print</span> row</span><br></pre></td></tr></table></figure>

<pre><code>(1565, 5)
row  (5,)
prediction  (200,)
&lt;class &#39;pandas.core.series.Series&#39;&gt;
prediction    [-2.60202, -2.87814, -3.0061, -2.77251, -2.077...
ymin                                                    152.958
xmin                                                    159.692
ymax                                                    261.702
xmax                                                    340.586
Name: /home/kezunlin/program/caffe/examples/images/fish-bike.jpg, dtype: object
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<p>1570 regions were proposed with the R-CNN configuration of selective search. The number of proposals will vary from image to image based on its contents and size – selective search isn’t scale invariant.</p>
<p>In general, <code>detect.py</code> is most efficient when running on a lot of images: it first extracts window proposals for all of them, batches the windows for efficient GPU processing, and then outputs the results.<br>Simply list an image per line in the <code>images_file</code>, and it will process all of them.</p>
<p>Although this guide gives an example of R-CNN ImageNet detection, <code>detect.py</code> is clever enough to adapt to different Caffe models’ input dimensions, batch size, and output categories. You can switch the model definition and pretrained model as desired. Refer to <code>python detect.py --help</code> for the parameters to describe your data set. There’s no need for hardcoding.</p>
<p>Anyway, let’s now load the ILSVRC13 detection class names and make a DataFrame of the predictions. Note you’ll need the auxiliary ilsvrc2012 data fetched by <code>data/ilsvrc12/get_ilsvrc12_aux.sh</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment">#n01443537 goldfish</span></span><br><span class="line"><span class="comment">#n03445777 golf ball</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/ilsvrc12/det_synset_words.txt&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 200 classes from 1000 imagenet classes</span></span><br><span class="line">    labels_df = pd.DataFrame([</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;synset_id&#x27;</span>: l.strip().split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27; &#x27;</span>.join(l.strip().split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>:]).split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> f.readlines()</span><br><span class="line">    ])</span><br><span class="line">labels_df.sort_values(by=<span class="string">&#x27;synset_id&#x27;</span>) <span class="comment"># from a... to z</span></span><br><span class="line"><span class="built_in">print</span> labels_df.shape <span class="comment"># (200, 2)</span></span><br><span class="line"><span class="built_in">print</span> labels_df.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<pre><code>(200, 2)
        name  synset_id
0  accordion  n02672831
1   airplane  n02691156
2        ant  n02219486
3   antelope  n02419796
4      apple  n07739125
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print type(df.prediction) # &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> df.prediction.values.shape <span class="comment"># numpy.ndarray (1565,)</span></span><br><span class="line"><span class="built_in">print</span> df.prediction.values[<span class="number">0</span>].shape <span class="comment"># numpy.ndarray (200,)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> np.vstack(df.prediction.values).shape <span class="comment"># (1565, 200)</span></span><br><span class="line"></span><br><span class="line">predictions_df = pd.DataFrame(np.vstack(df.prediction.values), columns=labels_df[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="comment">#print predictions_df.values.shape # (1565, 200)</span></span><br><span class="line"><span class="built_in">print</span>(predictions_df.iloc[:<span class="number">5</span>,:<span class="number">7</span>])</span><br></pre></td></tr></table></figure>

<pre><code>(1565,)
(200,)
(1565, 200)
name  accordion  airplane       ant  antelope     apple  armadillo  artichoke
0     -2.602018 -2.878137 -3.006104 -2.772514 -2.077227  -2.590448  -2.414262
1     -2.997767 -3.312270 -2.878942 -3.434367 -2.227469  -2.492260  -2.383878
2     -2.476110 -3.145484 -2.377191 -2.684406 -2.289587  -2.428077  -2.390187
3     -2.362699 -2.784188 -1.981096 -2.664146 -2.207042  -2.299127  -2.181105
4     -2.929469 -2.323617 -2.755007 -3.165601 -2.188648  -2.486410  -2.505435
</code></pre>
<p>Let’s look at the activations.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.gray()</span><br><span class="line">plt.matshow(predictions_df.values) <span class="comment"># (1565, 200)</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Classes&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Windows&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20180816101220026-1212221400.png" alt="png"></p>
<p>Now let’s take max across all windows and plot the top classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_s = predictions_df.<span class="built_in">max</span>(<span class="number">0</span>)</span><br><span class="line">max_s = max_s.sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(max_s[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<pre><code>name
person          1.839882
bicycle         0.855625
unicycle        0.085192
motorcycle      0.003604
turtle         -0.030388
banjo          -0.114999
electric fan   -0.220595
cart           -0.225192
lizard         -0.365949
helmet         -0.477555
dtype: float32
</code></pre>
<p>The top detections are in fact a person and bicycle.<br>Picking good localizations is a work in progress; we pick the top-scoring person and bicycle detections.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = predictions_df[<span class="string">&#x27;person&#x27;</span>].argmax() <span class="comment"># 70  rect</span></span><br><span class="line">j = predictions_df[<span class="string">&#x27;bicycle&#x27;</span>].argmax()<span class="comment"># 262 rect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show top predictions for top detection.</span></span><br><span class="line">f = pd.Series(df[<span class="string">&#x27;prediction&#x27;</span>].iloc[i], index=labels_df[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># (200,)</span></span><br><span class="line"><span class="comment">#print f.head(5)</span></span><br><span class="line"><span class="comment">#print </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Top detection:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.sort_values(ascending=<span class="literal">False</span>)[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show top predictions for second-best detection.</span></span><br><span class="line">f = pd.Series(df[<span class="string">&#x27;prediction&#x27;</span>].iloc[j], index=labels_df[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># (200,)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Second-best detection:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.sort_values(ascending=<span class="literal">False</span>)[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<pre><code>Top detection:
name
person             1.839882
swimming trunks   -1.157806
turtle            -1.168884
tie               -1.217267
rubber eraser     -1.246662
dtype: float32

Second-best detection:
name
bicycle     0.855625
unicycle   -0.334367
scorpion   -0.824552
lobster    -0.965544
lamp       -1.076224
dtype: float32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Find, print, and display the top detections: person and bicycle.</span></span><br><span class="line">i = predictions_df[<span class="string">&#x27;person&#x27;</span>].argmax()</span><br><span class="line">j = predictions_df[<span class="string">&#x27;bicycle&#x27;</span>].argmax()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show top predictions for top detection.</span></span><br><span class="line">f = pd.Series(df[<span class="string">&#x27;prediction&#x27;</span>].iloc[i], index=labels_df[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Top detection:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.sort_values(ascending=<span class="literal">False</span>)[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show top predictions for second-best detection.</span></span><br><span class="line">f = pd.Series(df[<span class="string">&#x27;prediction&#x27;</span>].iloc[j], index=labels_df[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Second-best detection:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.sort_values(ascending=<span class="literal">False</span>)[:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show top detection in red, second-best top detection in blue.</span></span><br><span class="line">im = plt.imread(<span class="string">&#x27;images/fish-bike.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(im)</span><br><span class="line">currentAxis = plt.gca()</span><br><span class="line"></span><br><span class="line">det = df.iloc[i]</span><br><span class="line">coords = (det[<span class="string">&#x27;xmin&#x27;</span>], det[<span class="string">&#x27;ymin&#x27;</span>]), det[<span class="string">&#x27;xmax&#x27;</span>] - det[<span class="string">&#x27;xmin&#x27;</span>], det[<span class="string">&#x27;ymax&#x27;</span>] - det[<span class="string">&#x27;ymin&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> coords <span class="comment"># ((207.792, 7.6959999999999997), 134.71799999999999, 155.88200000000001)</span></span><br><span class="line">currentAxis.add_patch(plt.Rectangle(*coords, fill=<span class="literal">False</span>, edgecolor=<span class="string">&#x27;r&#x27;</span>, linewidth=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">det = df.iloc[j]</span><br><span class="line">coords = (det[<span class="string">&#x27;xmin&#x27;</span>], det[<span class="string">&#x27;ymin&#x27;</span>]), det[<span class="string">&#x27;xmax&#x27;</span>] - det[<span class="string">&#x27;xmin&#x27;</span>], det[<span class="string">&#x27;ymax&#x27;</span>] - det[<span class="string">&#x27;ymin&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> coords <span class="comment"># ((108.706, 184.70400000000001), 284.78999999999996, 127.98399999999998)</span></span><br><span class="line">currentAxis.add_patch(plt.Rectangle(*coords, fill=<span class="literal">False</span>, edgecolor=<span class="string">&#x27;b&#x27;</span>, linewidth=<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Top detection:
name
person             1.839882
swimming trunks   -1.157806
turtle            -1.168884
tie               -1.217267
rubber eraser     -1.246662
dtype: float32

Second-best detection:
name
bicycle     0.855625
unicycle   -0.334367
scorpion   -0.824552
lobster    -0.965544
lamp       -1.076224
dtype: float32
((207.792, 7.6959999999999997), 134.71799999999999, 155.88200000000001)
((108.706, 184.70400000000001), 284.78999999999996, 127.98399999999998)
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816101222714-1713668340.png" alt="png"></p>
<p>That’s cool. Let’s take all ‘bicycle’ detections and NMS them to get rid of overlapping windows.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nms_detections</span>(<span class="params">dets, overlap=<span class="number">0.3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Non-maximum suppression: Greedily select high-scoring detections and</span></span><br><span class="line"><span class="string">    skip detections that are significantly covered by a previously</span></span><br><span class="line"><span class="string">    selected detection.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This version is translated from Matlab code by Tomasz Malisiewicz,</span></span><br><span class="line"><span class="string">    who sped up Pedro Felzenszwalb&#x27;s code.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    dets: ndarray</span></span><br><span class="line"><span class="string">        each row is [&#x27;xmin&#x27;, &#x27;ymin&#x27;, &#x27;xmax&#x27;, &#x27;ymax&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">    overlap: float</span></span><br><span class="line"><span class="string">        minimum overlap ratio (0.3 default)  &gt;iou,then drop rect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Output</span></span><br><span class="line"><span class="string">    ------</span></span><br><span class="line"><span class="string">    dets: ndarray</span></span><br><span class="line"><span class="string">        remaining after suppression.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x1 = dets[:, <span class="number">0</span>]</span><br><span class="line">    y1 = dets[:, <span class="number">1</span>]</span><br><span class="line">    x2 = dets[:, <span class="number">2</span>]</span><br><span class="line">    y2 = dets[:, <span class="number">3</span>]</span><br><span class="line">    ind = np.argsort(dets[:, <span class="number">4</span>]) <span class="comment"># current ind set (min---&gt;max)</span></span><br><span class="line"></span><br><span class="line">    w = x2 - x1</span><br><span class="line">    h = y2 - y1</span><br><span class="line">    area = (w * h).astype(<span class="built_in">float</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    dets</span></span><br><span class="line"><span class="string">    pick = []</span></span><br><span class="line"><span class="string">    ind = [a,b,c,d,e,f]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    while not ind.empty:</span></span><br><span class="line"><span class="string">        f, pick=[f],    ind=[a,b,c,d,e], o=[0.1,0.2,0.5,0.9,0.2],keep_ind=[0,1,4],ind=[a,b,e]</span></span><br><span class="line"><span class="string">        e, pick=[f,e],  ind=[a,b],       o=[0.4,0.1],keep_ind=[1],ind=[b]</span></span><br><span class="line"><span class="string">        b, pick=[f,e,b],ind=[],          o=[],       keep_ind=[], ind=[]</span></span><br><span class="line"><span class="string">    return dets[pick]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    pick = [] <span class="comment"># pick index</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(ind) &gt; <span class="number">0</span>:</span><br><span class="line">        i = ind[-<span class="number">1</span>] <span class="comment"># choose last best index</span></span><br><span class="line">        pick.append(i)</span><br><span class="line">        ind = ind[:-<span class="number">1</span>] <span class="comment"># remove last one</span></span><br><span class="line"></span><br><span class="line">        xx1 = np.maximum(x1[i], x1[ind])</span><br><span class="line">        yy1 = np.maximum(y1[i], y1[ind])</span><br><span class="line">        xx2 = np.minimum(x2[i], x2[ind])</span><br><span class="line">        yy2 = np.minimum(y2[i], y2[ind])</span><br><span class="line"></span><br><span class="line">        w = np.maximum(<span class="number">0.</span>, xx2 - xx1)</span><br><span class="line">        h = np.maximum(<span class="number">0.</span>, yy2 - yy1)</span><br><span class="line"></span><br><span class="line">        wh = w * h</span><br><span class="line">        o = wh / (area[i] + area[ind] - wh) <span class="comment"># [0.1,0.2,0.5,0.9,0.2]</span></span><br><span class="line"></span><br><span class="line">        keep_ind = np.nonzero(o &lt;= overlap)[<span class="number">0</span>] <span class="comment"># (array([0, 1, 4]),) ===&gt;[0 1 4]</span></span><br><span class="line">        ind = ind[keep_ind]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dets[pick, :]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = predictions_df[<span class="string">&#x27;bicycle&#x27;</span>] <span class="comment"># (1565,)</span></span><br><span class="line">windows = df[[<span class="string">&#x27;xmin&#x27;</span>, <span class="string">&#x27;ymin&#x27;</span>, <span class="string">&#x27;xmax&#x27;</span>, <span class="string">&#x27;ymax&#x27;</span>]].values <span class="comment"># (1565, 4)</span></span><br><span class="line">dets = np.hstack((windows, scores[:, np.newaxis])) <span class="comment"># (1565, 4) (1565,1)===&gt;(1565,5) xmin,ymin,xmax,ymax,score</span></span><br><span class="line">nms_dets = nms_detections(dets,<span class="number">0.3</span>)</span><br><span class="line"><span class="built_in">print</span> dets.shape <span class="comment"># (1565, 5)</span></span><br><span class="line"><span class="built_in">print</span> nms_dets.shape <span class="comment"># (181, 5)</span></span><br></pre></td></tr></table></figure>

<pre><code>(1565, 5)
(181, 5)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> nms_dets[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<pre><code>[[ 108.706       184.704       393.496       312.688         0.85562503]
 [   0.           14.43        397.344       323.27         -0.73134482]
 [ 131.794       202.982       249.196       290.562        -1.26836455]]
</code></pre>
<p>Show top 3 NMS’d detections for ‘bicycle’ in the image and note the gap between the top scoring box (red) and the remaining boxes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(im)</span><br><span class="line">currentAxis = plt.gca()</span><br><span class="line">colors = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> c, det <span class="keyword">in</span> <span class="built_in">zip</span>(colors, nms_dets[:<span class="number">3</span>]):</span><br><span class="line">    currentAxis.add_patch(</span><br><span class="line">        plt.Rectangle((det[<span class="number">0</span>], det[<span class="number">1</span>]), det[<span class="number">2</span>]-det[<span class="number">0</span>], det[<span class="number">3</span>]-det[<span class="number">1</span>],</span><br><span class="line">        fill=<span class="literal">False</span>, edgecolor=c, linewidth=<span class="number">5</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scores:&#x27;</span>, nms_dets[:<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<pre><code>scores: [ 0.85562503 -0.73134482 -1.26836455]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20180816101225186-628963131.png" alt="png"></p>
<p>This was an easy instance for bicycle as it was in the class’s training set. However, the person result is a true detection since this was not in the set for that class.</p>
<p>You should try out detection on an image of your own next!</p>
<p>(Remove the temp directory to clean up, and we’re done.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!rm -rf _temp</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://demo.vislab.berkeleyvision.org/">demo</a></li>
<li><a href="https://github.com/BVLC/caffe">caffe git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180816: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>rcnn</tag>
      </tags>
  </entry>
  <entry>
    <title>introduction to neural network forward/inference framework</title>
    <url>//blog/introduction-to-neural-network-forward-inference-framework/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="ncnn"><a href="#ncnn" class="headerlink" title="ncnn"></a>ncnn</h3><p>ncnn 是一个为手机端极致优化的高性能神经网络前向计算框架。ncnn 从设计之初深刻考虑手机端的部署和使用。无第三方依赖，跨平台，手机端 cpu 的速度快于目前所有已知的开源框架。基于 ncnn，开发者能够将深度学习算法轻松移植到手机端高效执行，开发出人工智能 APP，将 AI 带到你的指尖。ncnn 目前已在腾讯多款应用中使用，如 QQ，Qzone，微信，天天P图等。</p>
<p>功能概述</p>
<ul>
<li>支持卷积神经网络，支持多输入和多分支结构，可计算部分分支</li>
<li>无任何第三方库依赖，不依赖 BLAS&#x2F;NNPACK 等计算框架</li>
<li>纯 C++ 实现，跨平台，支持 android ios 等</li>
<li>ARM NEON 汇编级良心优化，计算速度极快</li>
<li>精细的内存管理和数据结构设计，内存占用极低</li>
<li>支持多核并行计算加速，ARM big.LITTLE cpu 调度优化</li>
<li>整体库体积小于 500K，并可轻松精简到小于 300K</li>
<li>可扩展的模型设计，支持 8bit 量化和半精度浮点存储，可导入 caffe 模型</li>
<li>支持直接内存零拷贝引用加载网络模型</li>
<li>可注册自定义层实现并扩展</li>
<li>恩，很强就是了，不怕被塞卷 QvQ</li>
</ul>
<p>nihui，喜爱C&#x2F;C++，腾讯优图实验室基础研究组高级研究员，负责图像和人脸相关的技术研究和软件开发，非常热爱开源社区，系腾讯社交网络事业群首个AI开源项目ncnn负责人。</p>
<p>features:</p>
<ul>
<li>跑vgg、googlenet、resnet等模型速度比其他已知的开源框架快2~4倍</li>
<li>C++较接近底层，能控制几乎所有资源，运行代价小。目前主要是面向android和ios的，实际上只要有C++编译器就可以。无任何第三方库依赖，不依赖 BLAS&#x2F;NNPACK等计算框架</li>
<li>ncnn代码全部使用C&#x2F;C++实现，跨平台的cmake编译系统，可在已知的绝大多数平台编译运行，如Linux，Windows，MacOS，Android，iOS等。由于ncnn不依赖第三方库，且采用C++03标准实现，只用到了std::vector和std::string两个STL模板，可轻松移植到其他系统和设备上。</li>
<li>为什么在计算硬件上选择CPU而不是GPU？CPU的兼容性很好，但是各种各样的GPU功能支持都不一样，不容易实现，比如ios的metal和android的opencl。不否认GPU会更快，但GPU优化很复杂，想写一个通用的GPU路径很难，目前实现起来也有一定的难度。</li>
<li>ncnn支撑着一些优图提供的算法，例如人脸相关的应用:人像自动美颜，照片风格化，超分辨率，物体识别等等，对于小型的网络模型可以跑到实时。</li>
<li>云端vs终端？AR，VR都需要实时性，云端即使再快也无法实时，所以终端部署是很有必要的。云端适合处理大数据，比如推荐系统，安全系统，终端适合实时化的应用场景，比如智能机器人，无人驾驶。</li>
</ul>
<p>tools:</p>
<ul>
<li>caffe2ncnn: caffe模型(prototxt,caffemodel)转换为ncnn的xxx.param,xxx.bin文件</li>
<li>ncnn2mem: 对模型xxx.param进行加密生成二进制文件xxx.param.bin</li>
</ul>
<p>NCNN暂时只支持opencv2。</p>
<h3 id="FeatherCNN"><a href="#FeatherCNN" class="headerlink" title="FeatherCNN"></a>FeatherCNN</h3><p>腾讯出品。</p>
<p>see <a href="https://github.com/Tencent/FeatherCNN">here</a></p>
<h3 id="mace"><a href="#mace" class="headerlink" title="mace"></a>mace</h3><p>小米出品。</p>
<p>features</p>
<ul>
<li>速度：对于放在移动端进行计算的模型，一般对整体的预测延迟有着非常高的要求。在框架底层，针对ARM CPU进行了NEON指令级优化，针对移动端GPU，实现了高效的OpenCL内核代码。针对高通DSP，集成了nnlib计算库进行HVX加速。同时在算法层面，采用Winograd算法对卷积进行加速。</li>
<li>功耗：移动端对功耗非常敏感，框架针对ARM处理器的big.LITTLE架构，提供了高性能，低功耗等多种组合配置。针对Adreno GPU，提供了不同的功耗性能选项，使得开发者能够对性能和功耗进行灵活的调整。</li>
<li>系统响应：对于GPU计算模式，框架底层对OpenCL内核自适应的进行分拆调度，保证GPU渲染任务能够更好的进行抢占调度，从而保证系统的流畅度。</li>
<li>初始化延迟：在实际项目中，初始化时间对用户体验至关重要，框架对此进行了针对性的优化。</li>
<li>内存占用：通过对模型的算子进行依赖分析，引入内存复用技术，大大减少了内存的占用。</li>
<li>模型保护：对于移动端模型，知识产权的保护往往非常重要，MACE支持将模型转换成C++代码，大大提高了逆向工程的难度。<br>此外，MACE 支持 TensorFlow 和 Caffe 模型，提供转换工具，可以将训练好的模型转换成专有的模型数据文件，同时还可以选择将模型转换成C++代码，支持生成动态库或者静态库，提高模型保密性。</li>
</ul>
<h3 id="TensorRT"><a href="#TensorRT" class="headerlink" title="TensorRT"></a>TensorRT</h3><p>NVIDIA TensorRT是一种用于产品开发的高性能的深度学习推理引擎，应用有图像分类，分割和目标检测，提供的帧&#x2F;秒速度比只有CPU的推理引擎高14倍。</p>
<p>主要特点：</p>
<p>1）生成优化了的、实现好了的、可以用于预测的模型；</p>
<p>2）优化和部署广泛的神经网络层，如卷积，全连接，LRN，汇集，激活，softmax，Concat和反卷积层</p>
<p>3）支持caffe prototxt网络描述文件;</p>
<p>4）实现神经网络在全精度上（FP32）或减少（INT8、FP16精度）；</p>
<p>5）使用自定义层API来定义和实现独特的功能；</p>
<p>DIGITS 5和TensorRT可供NVIDIA开发者计划成员免费下载。</p>
<p>在线的部署最大的特点是对实时性要求很高，它对latency非常敏感，要我们能非常快的给出推断（Inference）的结果。部署端不只是成本的问题，如果方法不得当，即使使用目前最先进的GPU，也无法满足推断（Inference）的实时性要求。因为模型如果做得不好，没有做优化，可能需要二三百毫秒才能做完一次推断（Inference），再加上来回的网络传输，用户可能一秒后才能得到结果。在语音识别的场景之下，用户可以等待；但是在驾驶的场景之下，可能会有性命之庾。</p>
<p>在部署阶段，latency是非常重要的点，而TensorRT是专门针对部署端进行优化的，目前TensorRT支持大部分主流的深度学习应用，当然最擅长的是CNN（卷积神经网络）领域，但是的TensorRT 3.0也是有RNN的API。</p>
<p>总结一下推断（Inference）和训练（Training）的不同：</p>
<ul>
<li><p>推断（Inference）的网络权值已经固定下来，无后向传播过程，因此可以模型固定，可以对计算图进行优化； 输入输出大小固定，可以做memory优化（注意：有一个概念是fine-tuning，即训练好的模型继续调优，只是在已有的模型做小的改动，本质上仍然是训练（Training）的过程，TensorRT没有fine-tuning）</p>
</li>
<li><p>推断（Inference）的batch size要小很多，仍然是latency的问题，因为训练(training)如果batch size很大，吞吐可以达到很大，比如每秒可以处理1024个batch，500毫秒处理完，吞吐可以达到2048，可以很好地利用GPU；但是推断（Inference）不能做500毫秒处理，可以是8或者16，吞吐降低，没有办法很好地利用GPU.</p>
</li>
<li><p>推断（Inference）可以使用低精度的技术，训练的时候因为要保证前后向传播，每次梯度的更新是很微小的，这个时候需要相对较高的精度，一般来说需要float型，如FP32，32位的浮点型来处理数据，但是在推断（Inference）的时候，对精度的要求没有那么高，很多研究表明可以用低精度，如半长（16）的float型，即FP16，也可以用8位的整型（INT8）来做推断（Inference），研究结果表明没有特别大的精度损失，尤其对CNN。更有甚者，对Binary（二进制）的使用也处在研究过程中，即权值只有0和1。目前FP16和INT8的研究使用相对来说比较成熟。低精度计算的好处是一方面可以减少计算量，原来计算32位的单元处理FP16的时候，理论上可以达到两倍的速度，处理INT8的时候理论上可以达到四倍的速度。当然会引入一些其他额外的操作，后面的讲解中会详细介绍FP18和INT8；另一方面是模型需要的空间减少，不管是权值的存储还是中间值的存储，应用更低的精度，模型大小会相应减小。</p>
</li>
</ul>
<p>暂时抛开TensorRT，如果让大家从头写一个深度学习模型的前向过程，具体过程应该是</p>
<ol>
<li><p>首先实现NN的layer，如卷积的实现，pooling的实现。</p>
</li>
<li><p>管理memory，数据在各层之间如何流动。</p>
</li>
<li><p>推断（Inference）的engine来调用各层的实现。</p>
</li>
</ol>
<p>TensorRT高级特征介绍:</p>
<ul>
<li>插件支持: 在某些层TensorRT不支持的情况下，需要通过Plugin的形式自己去实现。</li>
<li>低精度支持: 低精度指的是之前所说过的FP16和INT8，其中FP16主要是Pascal P100和V100（tensor core）这两张卡支持；而INT8主要针对的是 P4和P40这两张卡，P4是专门针对线上做推断（Inference）的小卡，和IPhone手机差不多大，75瓦的一张卡，功耗和性能非常好。</li>
<li>Python接口和更多的框架支持: TensorRT目前支持Python和C++的API。Model importer（即Parser）主要支持Caffe和Uff，其他的框架可以通过API来添加。TensorRT去做推断（Inference）的时候是不再需要框架的（caffe,tensorflow）</li>
</ul>
<p>低精度的推断（Inference）</p>
<ul>
<li><p>FP16 推断（Inference: TensorRT支持高度自动化的FP16推断（Inference），解析模型要将模型的的数据类型设置为DataType::kHALF，同时通过builder- &gt;setHalf2Mode(true)指令将推断（Inference）设置为FP16的模式。需要注意两点，一点是FP16推断（Inference）不需要额外的输入，只需要输入预先训练好的FP32模型，另一点是目前只有Tesla P100&#x2F;V100支持原生的FP16。</p>
</li>
<li><p>INT8 推断（Inference: 主要关注INT8推断（Inference）的几个方面，即：如何生成校准表，如何使用校准表，和INT8推断（Inference）实例。</p>
</li>
</ul>
<p> 最后总结一下TensorRT的优点：</p>
<ul>
<li>TensorRT是一个高性能的深度学习推断（Inference）的优化器和运行的引擎；</li>
<li>TensorRT支持Plugin，对于不支持的层，用户可以通过Plugin来支持自定义创建；</li>
<li>TensorRT使用低精度的技术获得相对于FP32二到三倍的加速，用户只需要通过相应的代码来实现。</li>
</ul>
<h3 id="Anakin"><a href="#Anakin" class="headerlink" title="Anakin"></a>Anakin</h3><p>百度PaddlePaddle Anakin。<br>see <a href="https://github.com/PaddlePaddle/Anakin">here</a></p>
<p>Anakin supports a wide range of neural network architectures and different hardware platforms. It is easy to run Anakin on GPU &#x2F; x86 &#x2F; ARM platform.</p>
<h3 id="TVM"><a href="#TVM" class="headerlink" title="TVM"></a>TVM</h3><p>see <a href="https://github.com/dmlc/tvm">here</a></p>
<p>TVM是一个全新的框架，可以：</p>
<ul>
<li>为CPU、GPU和其他专用硬件，表示和优化常见的深度学习计算工作负载</li>
<li>自动转换计算图以最小化内存占用，优化数据布局和融合计算模式</li>
<li>提供端到端编译，从现有的前端框架到裸机硬件，直到浏览器可执行的javascript</li>
</ul>
<p>在TVM的帮助下，可以轻松在手机、嵌入式设备甚至浏览器上运行深度学习的工作负载，而不需要额外的工作。TVM还为许多硬件平台上的深度学习工作负载，提供统一的优化框架，包括依赖于新计算基元的专用加速器。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://news.yesky.com/hotnews/305/275888305.shtml">腾讯优图　ncnn</a></li>
<li><a href="https://blog.csdn.net/sanallen/article/details/79022669">ncnn compile for arm</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1604506265110753139&wfr=spider&for=pc">小米　mace</a></li>
<li><a href="https://github.com/Tencent/ncnn">ncnn git</a></li>
<li><a href="https://github.com/XiaoMi/mace">mace igt</a></li>
</ul>
<p>TenorRT</p>
<ul>
<li><p><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-developer-guide/index.html">tensorrt-developer-guide</a></p>
</li>
<li><p><a href="https://github.com/dusty-nv/jetson-inference">TensorRT inferene for classification</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/59fe26073a41">NVIDIA TensorRT使用记录</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/35657027">高性能深度学习支持引擎实战——TensorRT</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28597477">tvm</a></p>
</li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180817: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>inference framework</tag>
        <tag>ncnn</tag>
        <tag>anakin</tag>
        <tag>tensorrt</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install and use bazel on ubuntu 16.04</title>
    <url>//blog/guide-to-install-and-use-bazel-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="How-to-Install"><a href="#How-to-Install" class="headerlink" title="How to Install"></a>How to Install</h2><blockquote>
<p>Bazel is an open-source build and test tool similar to Make, Maven, and Gradle. It uses a human-readable, high-level build language. Bazel supports projects in multiple languages and builds outputs for multiple platforms. Bazel supports large codebases across multiple repositories, and large numbers of users.</p>
</blockquote>
<p>support language and platform:</p>
<ul>
<li>c++</li>
<li>java</li>
<li>android</li>
<li>ios</li>
</ul>
<h3 id="Using-binary-installer"><a href="#Using-binary-installer" class="headerlink" title="Using binary installer"></a>Using binary installer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install pkg-config zip g++ zlib1g-dev unzip python</span><br><span class="line"></span><br><span class="line"><span class="comment">#download `bazel-0.16.1-installer-linux-x86_64.sh` from `https://github.com/bazelbuild/bazel/releases`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x bazel-0.16.1-installer-linux-x86_64.sh</span><br><span class="line">./bazel-0.16.1-installer-linux-x86_64.sh --user</span><br><span class="line"><span class="comment"># The --user flag installs Bazel to the $HOME/bin directory on your system and sets the .bazelrc path to $HOME/.bazelrc.</span></span><br><span class="line"></span><br><span class="line">vim .bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="Using-Bazel-custom-APT-repository"><a href="#Using-Bazel-custom-APT-repository" class="headerlink" title="Using Bazel custom APT repository"></a>Using Bazel custom APT repository</h3><blockquote>
<p>unable to access <code>googleapis.com</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/bazel.list</span><br><span class="line">curl https://bazel.build/bazel-release.pub.gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get install bazel</span><br><span class="line"><span class="built_in">sudo</span> apt-get upgrade bazel</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>get examples</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bazelbuild/examples/</span><br></pre></td></tr></table></figure>

<p>folder structure</p>
<pre><code>cpp-tutorial/
├── README.md
├── stage1
│   ├── main
│   │   ├── BUILD
│   │   └── hello-world.cc
│   ├── README.md
│   └── WORKSPACE
├── stage2
│   ├── main
│   │   ├── BUILD
│   │   ├── hello-greet.cc
│   │   ├── hello-greet.h
│   │   └── hello-world.cc
│   ├── README.md
│   └── WORKSPACE
└── stage3
    ├── lib
    │   ├── BUILD
    │   ├── hello-time.cc
    │   └── hello-time.h
    ├── main
    │   ├── BUILD
    │   ├── hello-greet.cc
    │   ├── hello-greet.h
    │   └── hello-world.cc
    ├── README.md
    └── WORKSPACE

7 directories, 20 files
</code></pre>
<h3 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h3><h4 id="Understand-the-BUILD-file"><a href="#Understand-the-BUILD-file" class="headerlink" title="Understand the BUILD file"></a>Understand the BUILD file</h4><p>cpp-tutorial&#x2F;stage1&#x2F;main&#x2F;BUILD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>build target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> stage1</span><br><span class="line">bazel build //main:hello-world</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>INFO: Found 1 target...
Target //main:hello-world up-to-date:
  bazel-bin/main/hello-world
INFO: Elapsed time: 2.267s, Critical Path: 0.25s
</code></pre>
<p>test binary</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bazel-bin/main/hello-world</span><br></pre></td></tr></table></figure>

<h4 id="Review-the-dependency-graph"><a href="#Review-the-dependency-graph" class="headerlink" title="Review the dependency graph"></a>Review the dependency graph</h4><p>install graphviz </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install graphviz xdot</span><br></pre></td></tr></table></figure>

<p>vizualize </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bazel query --nohost_deps --noimplicit_deps <span class="string">&#x27;deps(//main:hello-world)&#x27;</span> --output graph</span><br><span class="line">xdot &lt;(bazel query --nohost_deps --noimplicit_deps <span class="string">&#x27;deps(//main:hello-world)&#x27;</span> --output graph)</span><br></pre></td></tr></table></figure>
<p>graph</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180821175314471-138498875.png" alt="png"></p>
<h3 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h3><p>Specify multiple build targets</p>
<p>cpp-tutorial&#x2F;stage2&#x2F;main&#x2F;BUILD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-greet&quot;,</span><br><span class="line">    srcs = [&quot;hello-greet.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-greet.h&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:hello-greet&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>build target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> stage2</span><br><span class="line">bazel build //main:hello-world</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>INFO: Found 1 target...
Target //main:hello-world up-to-date:
  bazel-bin/main/hello-world
INFO: Elapsed time: 2.267s, Critical Path: 0.25s
</code></pre>
<p>test binary</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bazel-bin/main/hello-world</span><br></pre></td></tr></table></figure>

<p>graph</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180821175337552-1624012450.png" alt="png"></p>
<h3 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h3><p>Use multiple packages</p>
<p>folder structure</p>
<pre><code>└──stage3
   ├── main
   │   ├── BUILD
   │   ├── hello-world.cc
   │   ├── hello-greet.cc
   │   └── hello-greet.h
   ├── lib
   │   ├── BUILD
   │   ├── hello-time.cc
   │   └── hello-time.h
   └── WORKSPACE
</code></pre>
<p>lib&#x2F;BUILD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-time&quot;,</span><br><span class="line">    srcs = [&quot;hello-time.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-time.h&quot;],</span><br><span class="line">    visibility = [&quot;//main:__pkg__&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>This is because by default targets are only visible to other targets in the same BUILD file.</p>
<p>main&#x2F;BUILD</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = <span class="string">&quot;hello-greet&quot;</span>,</span><br><span class="line">    srcs = [<span class="string">&quot;hello-greet.cc&quot;</span>],</span><br><span class="line">    hdrs = [<span class="string">&quot;hello-greet.h&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_binary(</span><br><span class="line">    name = <span class="string">&quot;hello-world&quot;</span>,</span><br><span class="line">    srcs = [<span class="string">&quot;hello-world.cc&quot;</span>],</span><br><span class="line">    deps = [</span><br><span class="line">        <span class="string">&quot;:hello-greet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;//lib:hello-time&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>build target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> stage3</span><br><span class="line">bazel build //main:hello-world</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>INFO: Found 1 target...
Target //main:hello-world up-to-date:
  bazel-bin/main/hello-world
INFO: Elapsed time: 2.267s, Critical Path: 0.25s
</code></pre>
<p>test binary</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bazel-bin/main/hello-world</span><br></pre></td></tr></table></figure>

<p>graph</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180821175340712-200534963.png" alt="png"></p>
<h3 id="Use-labels-to-reference-targets"><a href="#Use-labels-to-reference-targets" class="headerlink" title="Use labels to reference targets"></a>Use labels to reference targets</h3><pre><code>//path/to/package:target-name
</code></pre>
<ul>
<li>When referencing targets within the same package, you can skip the package path and just use <code>//:target-name</code>. </li>
<li>When referencing targets within the same BUILD file, you can even skip the <code>//</code> workspace root identifier and just use <code>:target-name</code>.</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.bazel.build/versions/master/install.html">bazel install</a></li>
<li><a href="https://docs.bazel.build/versions/master/tutorial/cpp.html">bazel cpp tutorials</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180821: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>bazel</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ 11 lambda</title>
    <url>//blog/c-11-lambda/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h3><p>syntax</p>
<pre><code>[ capture clause ] (parameters) -&gt; return-type  
&#123;   
   definition of method   
&#125; 
</code></pre>
<h3 id="capture"><a href="#capture" class="headerlink" title="capture"></a>capture</h3><p>We can capture external variables from enclosing scope by three ways :</p>
<pre><code>  Capture by reference
  Capture by value (making a copy)
  Capture by both (mixed capture)
</code></pre>
<p>Syntax used for capturing variables :</p>
<pre><code>    []:   capture nothing
  [&amp;] : capture all external variable by reference
  [=] : capture all external variable by value (making a copy)
  [a, &amp;b] : capture a by value and b by reference 
  [this] :	Capture the this pointer of the enclosing class
</code></pre>
<p>C++11中的Lambda表达式捕获外部变量主要有以下形式：</p>
<pre><code>捕获形式	说明
[]	不捕获任何外部变量
[变量名, …]	默认以值得形式捕获指定的多个外部变量（用逗号分隔），如果引用捕获，需要显示声明（使用&amp;说明符）
[this]	以值的形式捕获this指针
[=]	以值的形式捕获所有外部变量
[&amp;]	以引用形式捕获所有外部变量
[=, &amp;x]	变量x以引用形式捕获，其余变量以传值形式捕获
[&amp;, x]	变量x以值的形式捕获，其余变量以引用形式捕获
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="example-code"><a href="#example-code" class="headerlink" title="example code"></a>example code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_labmda_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// call lambda with ending ();</span></span><br><span class="line">    [] () </span><br><span class="line">    &#123; </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Hello, my Greek friends&quot;</span>; </span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return value </span></span><br><span class="line">    <span class="keyword">auto</span> l1 = [] () </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; ; <span class="comment">// compiler knows this returns an integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> l2 = [] () -&gt; <span class="type">int</span> </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; ; <span class="comment">// now we&#x27;re telling the compiler what we want</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to print vector </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// lambda expression to print vector </span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">int</span> i) </span><br><span class="line">    &#123; </span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line">    &#125;); </span><br><span class="line">    cout &lt;&lt; endl; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_lambda_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>&#125;; </span><br><span class="line">    <span class="built_in">printVector</span>(v); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// capture nothing</span></span><br><span class="line">    std::<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">return</span> a &gt; b; </span><br><span class="line">    &#125;); </span><br><span class="line">    <span class="built_in">printVector</span>(v); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">accumulate</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">0</span>, </span><br><span class="line">      [](<span class="type">int</span> i,<span class="type">int</span> j)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> i+j;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SUM = &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_lambda_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>&#125;; </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v2 = &#123;<span class="number">10</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">9</span>&#125;; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  access v1 and v2 by reference </span></span><br><span class="line">    <span class="keyword">auto</span> pushinto = [&amp;] (<span class="type">int</span> m) </span><br><span class="line">    &#123; </span><br><span class="line">        v<span class="number">1.</span><span class="built_in">push_back</span>(m); </span><br><span class="line">        v<span class="number">2.</span><span class="built_in">push_back</span>(m); </span><br><span class="line">    &#125;; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// it pushes 20 in both v1 and v2 </span></span><br><span class="line">    <span class="built_in">pushinto</span>(<span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// access v1 by value (copy) </span></span><br><span class="line">    <span class="keyword">auto</span> printv = [v1]() </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = v<span class="number">1.</span><span class="built_in">begin</span>(); p != v<span class="number">1.</span><span class="built_in">end</span>(); p++) </span><br><span class="line">        &#123; </span><br><span class="line">            cout &lt;&lt; *p &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        cout &lt;&lt; endl; </span><br><span class="line">    &#125;; </span><br><span class="line">    <span class="built_in">printv</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N = <span class="number">5</span>; </span><br><span class="line">    <span class="comment">// below snippet find first number greater than N </span></span><br><span class="line">    <span class="comment">// [N]  denotes,   can access only N by value </span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;:: iterator p = <span class="built_in">find_if</span>(v<span class="number">1.</span><span class="built_in">begin</span>(), v<span class="number">1.</span><span class="built_in">end</span>(), [N](<span class="type">int</span> i) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">return</span> i &gt; N; </span><br><span class="line">    &#125;); </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;First number greater than 5 is : &quot;</span> &lt;&lt; *p &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span> () : _x( <span class="number">3</span> ) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// a very silly, but illustrative way of printing out the value of _x</span></span><br><span class="line">        [<span class="keyword">this</span>] () </span><br><span class="line">        &#123; </span><br><span class="line">          cout &lt;&lt; <span class="keyword">this</span>-&gt;_x; </span><br><span class="line">        &#125; ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test_labmda_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Foo f;</span><br><span class="line">    f.<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">test_lambda_0</span>();</span><br><span class="line">   <span class="built_in">test_lambda_1</span>();</span><br><span class="line">   <span class="built_in">test_lambda_2</span>();</span><br><span class="line">   <span class="built_in">test_labmda_3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">main_demo</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cprogramming.com/c++11/c++11-lambda-closures.html">c++11-lambda-closures</a></li>
<li><a href="https://appdividend.com/2019/06/19/c-lambda-function-tutorial-lambda-expression-in-c-example/">c-lambda-function-tutorial-lambda-expression-in-c-example</a></li>
<li><a href="https://www.geeksforgeeks.org/lambda-expression-in-c/">lambda-expression-in-c</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180823: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>lambda</tag>
        <tag>c++ 11</tag>
      </tags>
  </entry>
  <entry>
    <title>install and use tensorflow on ubuntu 16.04</title>
    <url>//blog/quick-guide-to-install-and-use-tensorflow-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li><strong><a href="https://kezunlin.me/post/f7eab850/">Part 1: Tensorflow for Unbutu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/a123bf9e/">Part 2: Tensorflow for Windows 10</a></li>
</ul>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul>
<li>ubuntu 16.04 64 bit</li>
<li>cuda driver 384.130</li>
<li>tensorflow-gpu 1.4.0 (CUDA 8.0 + cudnn 6.0)</li>
<li>tensorflow-gpu 1.5.0+ (CUDA 9.0 + cudnn )</li>
<li>python 3.5</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p> version: </p>
<ul>
<li>cpu:  tensorflow</li>
<li>gpu: tensorflow-gpu</li>
</ul>
<p>commands </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">pip install tensorflow-gpu==1.4 </span><br><span class="line">pip install keras</span><br><span class="line"></span><br><span class="line">pip install Pillow scipy sklearn scikit-image ipython</span><br><span class="line"></span><br><span class="line">pip list</span><br><span class="line">pip3 list <span class="comment"># same results as pip</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips, for virtualenv workon see <a href="https://kezunlin.me/post/f07cae6a/">python virtualenv tutorial</a></p>
</blockquote>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">&#x27;Hello, TensorFlow!&#x27;</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="built_in">print</span> hello</span><br><span class="line"><span class="built_in">print</span>(sess.run(hello))</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>Tensor(&quot;Const:0&quot;, shape=(), dtype=string)
Hello, TensorFlow!
</code></pre>
<h3 id="fix-errors"><a href="#fix-errors" class="headerlink" title="fix errors"></a>fix errors</h3><p>error </p>
<pre><code>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory
ImportError: libcudnn.so.6: cannot open shared object file: No such file or directory
</code></pre>
<p><code>tensorflow-gpu 1.5</code> use <code>cuda 9.0</code>, so we install <code>tensorflow-gpu 1.4</code>to use <code>cuda 8.0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall tensorflow-gpu</span><br><span class="line">pip install tensorflow-gpu==1.4</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Jupyter-notebook-with-tensorflow"><a href="#Jupyter-notebook-with-tensorflow" class="headerlink" title="Jupyter notebook with tensorflow"></a>Jupyter notebook with tensorflow</h2><h3 id="install-tensorflow-kernel"><a href="#install-tensorflow-kernel" class="headerlink" title="install tensorflow kernel"></a>install tensorflow kernel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">pip install ipykernel</span><br><span class="line"></span><br><span class="line">python -m ipykernel install --user --name=tensorflow</span><br><span class="line">Installed kernelspec tensorflow <span class="keyword">in</span> /home/kezunlin/.local/share/jupyter/kernels/tensorflow</span><br></pre></td></tr></table></figure>

<h3 id="use-tensorflow-kernel"><a href="#use-tensorflow-kernel" class="headerlink" title="use tensorflow kernel"></a>use tensorflow kernel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace/anjian</span><br><span class="line">jupyter notebook </span><br></pre></td></tr></table></figure>

<p>create a notebook with <code>tensorflow</code> kernel </p>
<p><img src="https://kezunlin.me/images/posts/635233-20180822180822847-2097924604.png" alt="png"></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="disable-info"><a href="#disable-info" class="headerlink" title="disable info"></a>disable info</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="comment">#默认为0：输出所有log信息</span></span><br><span class="line"><span class="comment">#设置为1：进一步屏蔽INFO信息</span></span><br><span class="line"><span class="comment">#设置为2：进一步屏蔽WARNING信息</span></span><br><span class="line"><span class="comment">#设置为3：进一步屏蔽ERROR信息</span></span><br><span class="line">```bash</span><br><span class="line"></span><br><span class="line"><span class="comment">### tensorflow errors</span></span><br><span class="line"></span><br><span class="line">error</span><br><span class="line"></span><br><span class="line">    Exception ignored <span class="keyword">in</span>: &lt;bound method BaseSession.__del__ of &lt;tensorflow.python.client.session.Session <span class="built_in">object</span> at <span class="number">0x7fd3edd13e10</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;venv/lib/python3.5/site-packages/tensorflow/python/client/session.py&quot;</span>, line <span class="number">712</span>, <span class="keyword">in</span> __del__</span><br><span class="line">    TypeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br><span class="line"></span><br><span class="line">fix </span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">K.clear_session()</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/lengguoxing/article/details/78456279">tensorflow tips</a></li>
<li><a href="https://blog.csdn.net/fan_pgm_v/article/details/79637700">tensorflow with jupyter notebook</a></li>
<li><a href="https://www.pyimagesearch.com/2015/06/22/install-opencv-3-0-and-python-2-7-on-ubuntu/">install opencv with python on ubuntu</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180821: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>a quick guide to py-faster-rcnn</title>
    <url>//blog/py-faster-rcnn-tutorials/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Quick-guide-with-Demo"><a href="#Quick-guide-with-Demo" class="headerlink" title="Quick guide with Demo"></a>Quick guide with Demo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install packages</span></span><br><span class="line"></span><br><span class="line">pip install cython  </span><br><span class="line">pip install easydict  </span><br><span class="line">apt-get install python-opencv  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure to clone with --recursive</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/rbgirshick/py-faster-rcnn.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build the Cython modules</span></span><br><span class="line">py-faster-rcnn/lib</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Caffe and pycaffe</span></span><br><span class="line"><span class="built_in">cd</span> py-faster-rcnn/caffe-fast-rcnn</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Download pre-computed Faster R-CNN detectors</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> py-faster-rcnn</span><br><span class="line">./data/scripts/fetch_faster_rcnn_models.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will populate the `FRCN_ROOT/data` folder with faster_rcnn_models. See `data/README.md` for details. These models were trained on VOC 2007 trainval.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Demo </span></span><br><span class="line">./tools/demo.py　--gpu 0 --net zf </span><br><span class="line">./tools/demo.py　--gpu 0 --net vgg16</span><br></pre></td></tr></table></figure>


<h4 id="fix-gflags-error"><a href="#fix-gflags-error" class="headerlink" title="fix gflags error"></a>fix gflags error</h4><ul>
<li>caffe-fast-rcnn&#x2F;include&#x2F;caffe&#x2F;common.hpp</li>
<li>caffe-fast-rcnn&#x2F;examples&#x2F;mnist&#x2F;convert_mnist_data.cpp</li>
</ul>
<p>Comment out the ifndef</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifndef GFLAGS_GFLAGS_H_</span></span><br><span class="line"><span class="keyword">namespace</span> gflags = google;</span><br><span class="line"><span class="comment">// #endif  // GFLAGS_GFLAGS_H_</span></span><br></pre></td></tr></table></figure>

<h3 id="Train-net-with-your-own-data"><a href="#Train-net-with-your-own-data" class="headerlink" title="Train net with your own data"></a>Train net with your own data</h3><p>faster rcnn训练方式有两种</p>
<ul>
<li>一种是交替优化方法（alternating optimization），即训练两个网络，一个是rpn，一个是fast rcnn，总计两个stage，每个stage各训练一次rpn和fast rcnn。</li>
<li>另外一种训练方式为近似联合训练（approximate joint training），也称end to end的训练方式，训练过程中只训练一个权重网络，训练速度有可观的提升，而训练精度不变。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># prepare data</span></span><br><span class="line">wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar</span><br><span class="line">wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar</span><br><span class="line">wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar</span><br><span class="line"></span><br><span class="line">tar xvf VOCtrainval_06-Nov-2007.tar</span><br><span class="line">tar xvf VOCtest_06-Nov-2007.tar</span><br><span class="line">tar xvf VOCdevkit_08-Jun-2007.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VOCdevkit/                           <span class="comment"># development kit</span></span><br><span class="line">VOCdevkit/VOCcode/                   <span class="comment"># VOC utility code</span></span><br><span class="line">VOCdevkit/VOC2007                    <span class="comment"># image sets, annotations, etc.</span></span><br><span class="line"><span class="comment"># ... and several other directories ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> py-faster-rcnn/data</span><br><span class="line"><span class="built_in">ln</span> -s VOCdevkit VOCdevkit2007</span><br><span class="line"><span class="comment"># Using symlinks is a good idea because you will likely want to share the same PASCAL dataset installation between multiple projects.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download pre-trained imagenet models</span></span><br><span class="line">./data/scripts/fetch_imagenet_models.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># train net</span></span><br><span class="line">./experiments/scripts/faster_rcnn_end2end.sh 0 ZF pascal_voc</span><br></pre></td></tr></table></figure>


<h4 id="error-fixs"><a href="#error-fixs" class="headerlink" title="error fixs"></a>error fixs</h4><p>error </p>
<pre><code>AttributeError: &#39;module&#39; object has no attribute &#39;text_format&#39;
</code></pre>
<p>fix </p>
<p>.&#x2F;lib&#x2F;fast_rcnn&#x2F;train.py增加一行</p>
<pre><code>import google.protobuf.text_format
</code></pre>
<h4 id="training-results"><a href="#training-results" class="headerlink" title="training results"></a>training results</h4><pre><code>AP for aeroplane = 0.6312
AP for bicycle = 0.7069
AP for bird = 0.5836
AP for boat = 0.4471
AP for bottle = 0.3562
AP for bus = 0.6682
AP for car = 0.7569
AP for cat = 0.7249
AP for chair = 0.3844
AP for cow = 0.6152
AP for diningtable = 0.6162
AP for dog = 0.6502
AP for horse = 0.7580
AP for motorbike = 0.7128
AP for person = 0.6744
AP for pottedplant = 0.3358
AP for sheep = 0.5872
AP for sofa = 0.5649
AP for train = 0.7128
AP for tvmonitor = 0.6133
Mean AP = 0.6050

Results:
0.631
0.707
0.584
0.447
0.356
0.668
0.757
0.725
0.384
0.615
0.616
0.650
0.758
0.713
0.674
0.336
0.587
0.565
0.713
0.613
0.605

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------

real	5m16.906s
user	4m6.179s
sys	1m16.157s
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://github.com/rbgirshick/py-faster-rcnn">py-faster-rcnn</a></p>
</li>
<li><p><a href="https://huangying-zhan.github.io/2016/09/22/detection-faster-rcnn.html">faster rcnn and train net</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/hansjorn/p/7724852.html">py faster rcnn and train your own data</a></p>
</li>
<li><p><strong><a href="https://www.slideshare.net/hpkim0512/tutorial-of-faster-rcnn">ppt for faster rcnn</a></strong></p>
</li>
<li><p><strong><a href="https://tryolabs.com/blog/2018/01/18/faster-r-cnn-down-the-rabbit-hole-of-modern-object-detection/">faster-r-cnn-down-the-rabbit-hole-of-modern-object-detection</a></strong></p>
</li>
<li><p><strong><a href="http://kaiminghe.com/iccv17tutorial/maskrcnn_iccv2017_tutorial_kaiminghe.pdf">kaiminghe mask rcnn tutorial</a></strong></p>
</li>
<li><p><strong><a href="https://www.slideshare.net/windmdk/mask-rcnn">kaiminghe mask rcnn oral</a></strong></p>
</li>
<li><p><a href="https://www.slideshare.net/JinwonLee9/pr12-faster-rcnn170528">ppt2 for faster rcnn</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/skyfsm/p/6806246.html">rcnn, fast rcnn, faster rcnn</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_17448289/article/details/52871461">faster rcnn notes</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/cognitive-toolkit/object-detection-using-faster-r-cnn">object-detection-using-faster-r-cnn</a></p>
</li>
<li><p><a href="https://huangying-zhan.github.io/2016/09/22/detection-faster-rcnn.html">detection-faster-rcnn</a></p>
</li>
<li><p><a href="https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/">a-gentle-guide-to-deep-learning-object-detection</a></p>
</li>
<li><p><a href="https://cv-tricks.com/object-detection/faster-r-cnn-yolo-ssd/">faster rcnn yolo ssd</a></p>
</li>
<li><p><a href="https://research.fb.com/wp-content/uploads/2017/08/maskrcnn.pdf">paper mask rcnn</a></p>
</li>
<li><p><a href="https://blog.csdn.net/jiongnima/article/details/79094159">csdn mask rcnn</a></p>
</li>
<li><p><a href="https://blog.csdn.net/JNingWei/article/details/78822159">roialign</a></p>
</li>
<li><p><strong><a href="http://blog.leanote.com/post/afanti.deng@gmail.com/b5f4f526490b">roialign roipool</a></strong></p>
</li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180816: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>rcnn</tag>
        <tag>faster rcnn</tag>
      </tags>
  </entry>
  <entry>
    <title>speed up opencv image mat for loop</title>
    <url>//blog/opencv-mat-for-loop/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/15f5c3e8/">Part 1: compile opencv on ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/6580691f/">Part 2: compile opencv with CUDA support on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/61d55ab4/">Part 3: opencv mat for loop</a></strong></li>
<li><a href="https://kezunlin.me/post/7a6ba82e/">Part 4: speed up opencv image processing with openmp</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Mat"><a href="#Mat" class="headerlink" title="Mat"></a>Mat</h3><ul>
<li>for gray image,     use type <code>&lt;uchar&gt;</code></li>
<li>for RGB color image，use type <code>&lt;Vec3b&gt;</code></li>
</ul>
<p>gray format storage<br><img src="https://kezunlin.me/images/posts/635233-20180906105458661-1770351097.png" alt="gray"></p>
<p>color format storage: BGR<br><img src="https://kezunlin.me/images/posts/635233-20180906105501938-701356597.png" alt="BGR">  </p>
<blockquote>
<p>we can use method <code>isContinuous()</code> to judge whether the memory buffer is continuous or not.</p>
</blockquote>
<h3 id="color-space-reduction"><a href="#color-space-reduction" class="headerlink" title="color space reduction"></a>color space reduction</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">uchar <span class="title">color_space_reduction</span><span class="params">(uchar pixel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	0-9 ===&gt;0</span></span><br><span class="line"><span class="comment">	10-19===&gt;10</span></span><br><span class="line"><span class="comment">	20-29===&gt;20</span></span><br><span class="line"><span class="comment">	...</span></span><br><span class="line"><span class="comment">	240-249===&gt;24</span></span><br><span class="line"><span class="comment">	250-255===&gt;25</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	map from 256*256*256===&gt;26*26*26</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> divideWith = <span class="number">10</span>;</span><br><span class="line">	uchar new_pixel = (pixel / divideWith)*divideWith;</span><br><span class="line">	<span class="keyword">return</span> new_pixel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="color-table"><a href="#color-table" class="headerlink" title="color table"></a>color table</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_color_table</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// cache color value in table[256]</span></span><br><span class="line">	<span class="type">int</span> divideWith = <span class="number">10</span>;</span><br><span class="line">	uchar table[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">		table[i] = divideWith* (i / divideWith);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="ptr"><a href="#ptr" class="headerlink" title="ptr []"></a>ptr []</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C ptr []: faster but not safe</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_Cptr</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// accept only char type matrices</span></span><br><span class="line">	<span class="built_in">CV_Assert</span>(I.<span class="built_in">depth</span>() != <span class="built_in">sizeof</span>(uchar));</span><br><span class="line">	<span class="type">int</span> channels = I.<span class="built_in">channels</span>();</span><br><span class="line">	<span class="type">int</span> nRows = I.rows;</span><br><span class="line">	<span class="type">int</span> nCols = I.cols* channels;</span><br><span class="line">	<span class="keyword">if</span> (I.<span class="built_in">isContinuous</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		nCols *= nRows;</span><br><span class="line">		nRows = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	uchar* p;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nRows; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = I.<span class="built_in">ptr</span>&lt;uchar&gt;(i);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nCols; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			p[j] = table[p[j]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ptr-1"><a href="#ptr-1" class="headerlink" title="ptr ++"></a>ptr ++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C ptr ++: faster but not safe</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_Cptr2</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// accept only char type matrices</span></span><br><span class="line">	<span class="built_in">CV_Assert</span>(I.<span class="built_in">depth</span>() != <span class="built_in">sizeof</span>(uchar));</span><br><span class="line">	<span class="type">int</span> channels = I.<span class="built_in">channels</span>();</span><br><span class="line">	<span class="type">int</span> nRows = I.rows;</span><br><span class="line">	<span class="type">int</span> nCols = I.cols* channels;</span><br><span class="line">	<span class="keyword">if</span> (I.<span class="built_in">isContinuous</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		nCols *= nRows;</span><br><span class="line">		nRows = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	uchar* start = I.<span class="built_in">ptr</span>&lt;uchar&gt;(<span class="number">0</span>); <span class="comment">// same as I.ptr&lt;uchar&gt;(0,0)</span></span><br><span class="line">	uchar* end = start + nRows * nCols;</span><br><span class="line">	<span class="keyword">for</span> (uchar* p=start; p &lt; end; ++p)</span><br><span class="line">	&#123;</span><br><span class="line">		*p = table[*p];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="at-i-j"><a href="#at-i-j" class="headerlink" title="at(i,j)"></a>at<uchar>(i,j)</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// at&lt;uchar&gt;(i,j): random access, slow</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_atRandomAccess</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// accept only char type matrices</span></span><br><span class="line">	<span class="built_in">CV_Assert</span>(I.<span class="built_in">depth</span>() != <span class="built_in">sizeof</span>(uchar));</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> channels = I.<span class="built_in">channels</span>();</span><br><span class="line">	<span class="keyword">switch</span> (channels)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; I.rows; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; I.cols; ++j)</span><br><span class="line">				I.<span class="built_in">at</span>&lt;uchar&gt;(i, j) = table[I.<span class="built_in">at</span>&lt;uchar&gt;(i, j)];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	&#123;</span><br><span class="line">		Mat_&lt;Vec3b&gt; _I = I;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; I.rows; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; I.cols; ++j)</span><br><span class="line">			&#123;</span><br><span class="line">				_I(i, j)[<span class="number">0</span>] = table[_I(i, j)[<span class="number">0</span>]];</span><br><span class="line">				_I(i, j)[<span class="number">1</span>] = table[_I(i, j)[<span class="number">1</span>]];</span><br><span class="line">				_I(i, j)[<span class="number">2</span>] = table[_I(i, j)[<span class="number">2</span>]];</span><br><span class="line">			&#125;</span><br><span class="line">		I = _I;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// MatIterator_&lt;uchar&gt;: safe but slow</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_Iterator</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// accept only char type matrices</span></span><br><span class="line">	<span class="built_in">CV_Assert</span>(I.<span class="built_in">depth</span>() != <span class="built_in">sizeof</span>(uchar));</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> channels = I.<span class="built_in">channels</span>();</span><br><span class="line">	<span class="keyword">switch</span> (channels)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	&#123;</span><br><span class="line">		MatIterator_&lt;uchar&gt; it, end;</span><br><span class="line">		<span class="keyword">for</span> (it = I.<span class="built_in">begin</span>&lt;uchar&gt;(), end = I.<span class="built_in">end</span>&lt;uchar&gt;(); it != end; ++it)</span><br><span class="line">			*it = table[*it];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	&#123;</span><br><span class="line">		MatIterator_&lt;Vec3b&gt; it, end;</span><br><span class="line">		<span class="keyword">for</span> (it = I.<span class="built_in">begin</span>&lt;Vec3b&gt;(), end = I.<span class="built_in">end</span>&lt;Vec3b&gt;(); it != end; ++it)</span><br><span class="line">		&#123;</span><br><span class="line">			(*it)[<span class="number">0</span>] = table[(*it)[<span class="number">0</span>]];</span><br><span class="line">			(*it)[<span class="number">1</span>] = table[(*it)[<span class="number">1</span>]];</span><br><span class="line">			(*it)[<span class="number">2</span>] = table[(*it)[<span class="number">2</span>]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="opencv-LUT"><a href="#opencv-LUT" class="headerlink" title="opencv LUT"></a>opencv LUT</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// LUT</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_LUT</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Mat <span class="title">lookUpTable</span><span class="params">(<span class="number">1</span>, <span class="number">256</span>, CV_8U)</span></span>;</span><br><span class="line">	uchar* p = lookUpTable.data;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">		p[i] = table[i];</span><br><span class="line"></span><br><span class="line">	cv::<span class="built_in">LUT</span>(I, lookUpTable, I);</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p><code>forEach</code> method of the <code>Mat</code> class that utilizes all the cores on your machine to apply any function at every pixel.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parallel execution with function object.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ForEachOperator</span></span><br><span class="line">&#123;</span><br><span class="line">	uchar m_table[<span class="number">256</span>];</span><br><span class="line">	<span class="built_in">ForEachOperator</span>(<span class="type">const</span> uchar* <span class="type">const</span> table)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			m_table[i] = table[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(uchar&amp; p, <span class="type">const</span> <span class="type">int</span> * position)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// Perform a simple operation</span></span><br><span class="line">		p = m_table[p];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach use multiple processors, very fast</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_forEach</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	I.forEach&lt;uchar&gt;(<span class="built_in">ForEachOperator</span>(table));</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="forEach-with-lambda"><a href="#forEach-with-lambda" class="headerlink" title="forEach with lambda"></a>forEach with lambda</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forEach lambda use multiple processors, very fast (lambda slower than ForEachOperator)</span></span><br><span class="line"><span class="function">Mat&amp; <span class="title">ScanImageAndReduce_forEach_with_lambda</span><span class="params">(Mat&amp; I, <span class="type">const</span> uchar* <span class="type">const</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	I.forEach&lt;uchar&gt;</span><br><span class="line">	(</span><br><span class="line">		[=](uchar &amp;p, <span class="type">const</span> <span class="type">int</span> * position) -&gt; <span class="type">void</span></span><br><span class="line">		&#123;</span><br><span class="line">			p = table[p];</span><br><span class="line">		&#125;</span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="time-cost"><a href="#time-cost" class="headerlink" title="time cost"></a>time cost</h3><h4 id="no-foreach"><a href="#no-foreach" class="headerlink" title="no foreach"></a>no foreach</h4><pre><code>[1 Cptr   ] times=5000, total_cost=988 ms, avg_cost=0.1976 ms
[1 Cptr2  ] times=5000, total_cost=1704 ms, avg_cost=0.3408 ms
[2 atRandom] times=5000, total_cost=9611 ms, avg_cost=1.9222 ms
[3 Iterator] times=5000, total_cost=20195 ms, avg_cost=4.039 ms
[4 LUT    ] times=5000, total_cost=899 ms, avg_cost=0.1798 ms

[1 Cptr   ] times=10000, total_cost=2425 ms, avg_cost=0.2425 ms
[1 Cptr2  ] times=10000, total_cost=3391 ms, avg_cost=0.3391 ms
[2 atRandom] times=10000, total_cost=20024 ms, avg_cost=2.0024 ms
[3 Iterator] times=10000, total_cost=39980 ms, avg_cost=3.998 ms
[4 LUT    ] times=10000, total_cost=103 ms, avg_cost=0.0103 ms
</code></pre>
<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><pre><code>[5 forEach     ] times=200000, total_cost=199 ms, avg_cost=0.000995 ms
[5 forEach lambda] times=200000, total_cost=521 ms, avg_cost=0.002605 ms

[5 forEach     ] times=20000, total_cost=17 ms, avg_cost=0.00085 ms
[5 forEach lambda] times=20000, total_cost=23 ms, avg_cost=0.00115 ms
</code></pre>
<h4 id="results"><a href="#results" class="headerlink" title="results"></a>results</h4><p>Loop Type | Time Cost (us)<br>:—-:   |<br>ptr []   | 242<br>ptr ++   | 339<br>at<uchar> | 2002<br>iterator  | 3998<br>LUT     | 10<br>forEach   | 0.85<br>forEach lambda  | 1.15 </p>
<p><code>forEach</code> is 10x times faster than <code>LUT</code>, 240<del>340x times faster than <code>ptr []</code> and <code>ptr ++</code>, and 2000</del>4000x times faster than <code>at</code> and <code>iterator</code>.</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p><a href="https://gist.github.com/kezunlin/8a8f1be7c0e101ce3f0e16e529288afc">code here</a></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="pure-python"><a href="#pure-python" class="headerlink" title="pure python"></a>pure python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import the necessary packages</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="built_in">print</span>(cv2.__version__)</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<pre><code>3.4.2
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load the original image, convert it to grayscale, and display</span></span><br><span class="line"><span class="comment"># it inline</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;cat.jpg&quot;</span>)</span><br><span class="line">image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="built_in">print</span>(image.shape)</span><br><span class="line"><span class="comment">#plt.imshow(image, cmap=&quot;gray&quot;)</span></span><br></pre></td></tr></table></figure>

<pre><code>(360, 480)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%load_ext cython</span><br></pre></td></tr></table></figure>

<pre><code>The cython extension is already loaded. To reload it, use:
  %reload_ext cython
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%cython -a</span><br><span class="line"> </span><br><span class="line">def threshold_python(T, image):</span><br><span class="line">    # grab the image dimensions</span><br><span class="line">    h = image.shape[0]</span><br><span class="line">    w = image.shape[1]</span><br><span class="line">    </span><br><span class="line">    # loop over the image, pixel by pixel</span><br><span class="line">    for y in range(0, h):</span><br><span class="line">        for x in range(0, w):</span><br><span class="line">            # threshold the pixel</span><br><span class="line">            image[y, x] = 255 if image[y, x] &gt;= T else 0</span><br><span class="line">            </span><br><span class="line">    # return the thresholded image</span><br><span class="line">    return image</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit threshold_python(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>263 ms ± 20.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
<h3 id="cython"><a href="#cython" class="headerlink" title="cython"></a>cython</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%cython -a</span><br><span class="line"> </span><br><span class="line">import cython</span><br><span class="line"> </span><br><span class="line">@cython.boundscheck(False)</span><br><span class="line">cpdef unsigned char[:, :] threshold_cython(int T, unsigned char [:, :] image):</span><br><span class="line">    # set the variable extension types</span><br><span class="line">    cdef int x, y, w, h</span><br><span class="line">    </span><br><span class="line">    # grab the image dimensions</span><br><span class="line">    h = image.shape[0]</span><br><span class="line">    w = image.shape[1]</span><br><span class="line">    </span><br><span class="line">    # loop over the image</span><br><span class="line">    for y in range(0, h):</span><br><span class="line">        for x in range(0, w):</span><br><span class="line">            # threshold the pixel</span><br><span class="line">            image[y, x] = 255 if image[y, x] &gt;= T else 0</span><br><span class="line">    </span><br><span class="line">    # return the thresholded image</span><br><span class="line">    return image</span><br></pre></td></tr></table></figure>

<h3 id="numba"><a href="#numba" class="headerlink" title="numba"></a>numba</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit threshold_cython(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>150 µs ± 7.14 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numba <span class="keyword">import</span> njit</span><br><span class="line"></span><br><span class="line"><span class="meta">@njit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">threshold_njit</span>(<span class="params">T, image</span>):</span><br><span class="line">    <span class="comment"># grab the image dimensions</span></span><br><span class="line">    h = image.shape[<span class="number">0</span>]</span><br><span class="line">    w = image.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop over the image, pixel by pixel</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">            <span class="comment"># threshold the pixel</span></span><br><span class="line">            image[y, x] = <span class="number">255</span> <span class="keyword">if</span> image[y, x] &gt;= T <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment"># return the thresholded image</span></span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit threshold_njit(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>43.5 µs ± 142 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">threshold_numpy</span>(<span class="params">T, image</span>):</span><br><span class="line">    image[image &gt; T] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit threshold_numpy(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>111 µs ± 334 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<h3 id="conclusions"><a href="#conclusions" class="headerlink" title="conclusions"></a>conclusions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = cv2.imread(<span class="string">&quot;cat.jpg&quot;</span>)</span><br><span class="line">image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="built_in">print</span>(image.shape)</span><br><span class="line"></span><br><span class="line">%timeit threshold_python(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_cython(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_njit(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_numpy(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>(360, 480)
251 ms ± 6.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
143 µs ± 1.19 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
43.8 µs ± 284 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
113 µs ± 957 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = cv2.imread(<span class="string">&quot;big.jpg&quot;</span>)</span><br><span class="line">image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="built_in">print</span>(image.shape)</span><br><span class="line"></span><br><span class="line">%timeit threshold_python(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_cython(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_njit(<span class="number">5</span>, image)</span><br><span class="line">%timeit threshold_numpy(<span class="number">5</span>, image)</span><br></pre></td></tr></table></figure>

<pre><code>(2880, 5120)
21.8 s ± 460 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
12.3 ms ± 231 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
3.91 ms ± 66.1 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
10.3 ms ± 179 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>60,480</p>
<ul>
<li>python: 251 ms</li>
<li>cython: 143 us</li>
<li>numba: 43 us</li>
<li>numpy: 113 us</li>
</ul>
<p>2880, 5120</p>
<ul>
<li>python: 21 s</li>
<li>cython: 12 ms</li>
<li>numba: 4 ms</li>
<li>numpy: 10 ms</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.learnopencv.com/parallel-pixel-access-in-opencv-using-foreach/">parallel-pixel-access-in-opencv-using-foreach</a></li>
<li><a href="https://www.pyimagesearch.com/2017/08/28/fast-optimized-for-pixel-loops-with-opencv-and-python/">fast-optimized-for-pixel-loops-with-opencv-and-python</a></li>
<li><a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips">python performance tips</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180823: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>cython</tag>
        <tag>numba</tag>
      </tags>
  </entry>
  <entry>
    <title>install and configure tensorflow on windows 10</title>
    <url>//blog/install-and-configure-tensorflow-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/f7eab850/">Part 1: Tensorflow for Unbutu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/a123bf9e/">Part 2: Tensorflow for Windows 10</a></strong></li>
</ul>
<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>version 1:</p>
<ul>
<li>windows 10 64 bit + GTX 1060(8G) + cuda driver</li>
<li>windows 10 64 bit + GTX 1080(12G) + cuda driver</li>
<li>CUDA 8.0 + cudnn 6.0.1(win10) + tensorflow-gpu 1.4.0</li>
<li>python 3.5.3</li>
</ul>
<p>version 2:</p>
<ul>
<li>windows 10 64 bit + GeForce Titan Xp(12G) + cuda driver for Titan xp</li>
<li>CUDA 9.0 + cudnn 7.1.4(win10) + tensorflow-gpu 1.8.0 ( 1.8.0, 1.9.0 for cuda 9.0)</li>
</ul>
<p>version 3: </p>
<ul>
<li>windows 10 64 bit + Quadro P4000(8G) + cuda driver for Quadro P4000(实测用Titan Xp的driver也可以)</li>
<li>CUDA 9.0 + cudnn 7.1.4(win10) + tensorflow-gpu 1.8.0 ( 1.8.0, 1.9.0 for cuda 9.0)</li>
</ul>
<p>errors </p>
<pre><code>error retrieving driver version: Unimplemented: kernel reported driver version not implemented on Windows
</code></pre>
<p>see <a href="https://pypi.org/project/tensorflow-gpu/1.4.0/#files">tensorflow-gpu&#x3D;&#x3D;1.4.0</a></p>
<blockquote>
<p>Tips:  for tensorflow-gpu&#x3D;&#x3D;1.4.0<br>on linux, support python 2.7,3.3,3.4,3.5,3.6.<br>on windows, only support python 3.5,3.6. </p>
</blockquote>
<p>see <a href="https://pypi.org/project/tensorflow-gpu/1.8.0/#files">tensorflow-gpu&#x3D;&#x3D;1.8.0</a></p>
<blockquote>
<p>Tips:  for tensorflow-gpu&#x3D;&#x3D;1.8.0<br>on linux, support python 2.7,3.3,3.4,3.5,3.6.<br>on windows, only support python 3.5,3.6. </p>
</blockquote>
<p>from <code>Tensorflow1.6</code> use <code>CUDA9.0+cuDNN7</code>.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180830181732605-573127103.png" alt="tensorflow download pages"></p>
<h3 id="cuda-cudnn"><a href="#cuda-cudnn" class="headerlink" title="cuda &amp; cudnn"></a>cuda &amp; cudnn</h3><p>see <a href="https://kezunlin.me/post/1739694c/">Part 1: Install and Configure Caffe on windows 10</a></p>
<p>system env </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin</span><br></pre></td></tr></table></figure>

<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>install <code>python 3.5.3</code>,add python and pip path to system env.</p>
<p>copy <code>python.exe</code> to <code>python3.exe</code>,<br>copy <code>pip.exe</code> to <code>pip3.exe</code></p>
<p>system env</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zunli\AppData\Local\Programs\Python\Python35\</span><br><span class="line">C:\Users\zunli\AppData\Local\Programs\Python\Python35\Scripts</span><br></pre></td></tr></table></figure>

<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; ^Z</span><br></pre></td></tr></table></figure>

<p>pip3 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 -V</span><br><span class="line">pip 9.0.1 from c:\<span class="built_in">users</span>\zunli\appdata\<span class="built_in">local</span>\programs\python\python35\lib\site-packages (python 3.5)</span><br></pre></td></tr></table></figure>

<h3 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple Pillow scipy sklearn scikit-image matplotlib</span><br></pre></td></tr></table></figure>

<h4 id="1-4-0"><a href="#1-4-0" class="headerlink" title="1.4.0"></a>1.4.0</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==1.4.0 keras=2.1.0</span><br></pre></td></tr></table></figure>

<h4 id="1-8-0"><a href="#1-8-0" class="headerlink" title="1.8.0"></a>1.8.0</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==1.8.0 keras=2.2.0</span><br></pre></td></tr></table></figure>

<h4 id="test-tensorflow"><a href="#test-tensorflow" class="headerlink" title="test tensorflow"></a>test tensorflow</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">hello=tf.constant(<span class="string">&#x27;hhh&#x27;</span>)</span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="built_in">print</span> (sess.run(hello))</span><br></pre></td></tr></table></figure>

<h4 id="test-cuda-and-gpu"><a href="#test-cuda-and-gpu" class="headerlink" title="test cuda and gpu"></a>test cuda and gpu</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.test.is_built_with_cuda()  <span class="comment"># 判断CUDA是否可以用</span></span><br><span class="line"></span><br><span class="line">b = tf.test.is_gpu_available(</span><br><span class="line">    cuda_only=<span class="literal">False</span>,</span><br><span class="line">    min_cuda_compute_capability=<span class="literal">None</span></span><br><span class="line">)  <span class="comment"># 判断GPU是否可以用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<h4 id="test-gpu"><a href="#test-gpu" class="headerlink" title="test gpu"></a>test gpu</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.device(<span class="string">&#x27;/cpu:0&#x27;</span>):</span><br><span class="line">    a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>], shape=[<span class="number">3</span>], name=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    b = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>], shape=[<span class="number">3</span>], name=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> tf.device(<span class="string">&#x27;/gpu:0&#x27;</span>):</span><br><span class="line">    c = a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：allow_soft_placement=True表明：计算设备可自行选择，如果没有这个参数，会报错。</span></span><br><span class="line"><span class="comment"># 因为不是所有的操作都可以被放在GPU上，如果强行将无法放在GPU上的操作指定到GPU上，将会报错。</span></span><br><span class="line">sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=<span class="literal">True</span>, log_device_placement=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))</span></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="built_in">print</span>(sess.run(c))</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20180913114222255-1520775956.png" alt="gpu run"></p>
<h3 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h3><p>run code with pycharm</p>
<p><img src="https://kezunlin.me/images/posts/635233-20180829180600357-194824745.png" alt="pycharm with python3"></p>
<h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tensorflow</span><br><span class="line"></span><br><span class="line">Installed kernelspec tensorflow <span class="keyword">in</span> C:\Users\zunli\AppData\Roaming\jupyter\kernels\tensorflow</span><br></pre></td></tr></table></figure>

<h3 id="error-fix"><a href="#error-fix" class="headerlink" title="error fix"></a>error fix</h3><p>errors:</p>
<pre><code>No matching distribution found for tensorflow
</code></pre>
<p>solution: use <code>python 3.5</code> instead of <code>python 2.7</code></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/fo40225/tensorflow-windows-wheel">tensorflow-windows-wheel</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180829: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install docker and nvidia-docker2  on ubuntu 16.04</title>
    <url>//blog/nvidia-docker2-guide-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Docker-Guide"><a href="#Docker-Guide" class="headerlink" title="Docker Guide"></a>Docker Guide</h2><h3 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step 1: install tools</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2: install GPG </span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: add apt repo</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: install docker-ce</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y update</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>install docker-ce for given version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Step 1: search versions</span></span><br><span class="line"><span class="comment"># apt-cache madison docker-ce</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: install given version</span></span><br><span class="line"><span class="comment"># sudo apt-get -y install docker-ce=17.03.1~ce-0~ubuntu-xenial</span></span><br></pre></td></tr></table></figure>

<h3 id="test-docker"><a href="#test-docker" class="headerlink" title="test docker"></a>test docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:24:56 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:23:21 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="docker-namespace"><a href="#docker-namespace" class="headerlink" title="docker namespace"></a>docker namespace</h3><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><pre><code>id
uid=1000(kezunlin) gid=1000(kezunlin) groups=1000(kezunlin),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)

sudo docker images
sudo docker run -it --name kzl -v /home/kezunlin/workspace/:/home/kezunlin/workspace nvidia/cuda
</code></pre>
<h4 id="container"><a href="#container" class="headerlink" title="container"></a>container</h4><pre><code>root@6f167ef72a80:/home/kezunlin/workspace# ll
total 48
drwxrwxr-x 12 1000 1000 4096 Nov 30 10:04 ./
drwxr-xr-x  3 root root 4096 Nov 30 10:14 ../
drwxrwxr-x 10 1000 1000 4096 Dec  5  2017 MyGit/
drwxrwxr-x 12 1000 1000 4096 Oct 31 03:01 blog/
drwxrwxr-x  5 1000 1000 4096 Sep 20 07:33 opencv/
drwxrwxr-x  4 1000 1000 4096 Oct 31 07:55 openmp/
drwxrwxr-x  5 1000 1000 4096 Jan  9  2018 qt/
drwxrwxr-x  2 1000 1000 4096 Jan  4  2018 ros/
drwxrwxr-x  4 1000 1000 4096 Nov 16  2017 voc/
drwxrwxr-x  5 1000 1000 4096 Aug  7 03:19 vs/
root@6f167ef72a80:/home/kezunlin/workspace# touch 1.txt

root@6f167ef72a80:/home/kezunlin/workspace# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre>
<h4 id="host-1"><a href="#host-1" class="headerlink" title="host"></a>host</h4><pre><code>ll /home/kezunlin/workspace/
total 48
drwxrwxr-x 12 kezunlin kezunlin 4096 11月 30 18:14 ./
drwxr-xr-x 47 kezunlin kezunlin 4096 11月 30 18:04 ../

-rw-r--r--  1 root     root        0 11月 30 18:14 1.txt

drwxrwxr-x 12 kezunlin kezunlin 4096 10月 31 11:01 blog/
drwxrwxr-x  5 kezunlin kezunlin 4096 9月  20 15:33 opencv/
drwxrwxr-x  4 kezunlin kezunlin 4096 10月 31 15:55 openmp/
drwxrwxr-x  5 kezunlin kezunlin 4096 1月   9  2018 qt/
drwxrwxr-x  2 kezunlin kezunlin 4096 1月   4  2018 ros/
drwxrwxr-x  4 kezunlin kezunlin 4096 11月 16  2017 voc/
drwxrwxr-x  5 kezunlin kezunlin 4096 8月   7 11:19 vs/
</code></pre>
<h3 id="install-nvidia-docker2"><a href="#install-nvidia-docker2" class="headerlink" title="install nvidia-docker2"></a>install nvidia-docker2</h3><blockquote>
<p>The machine running the CUDA container only requires the NVIDIA driver, the CUDA toolkit doesn’t have to be installed.<br>Host系统只需要安装NVIDIA driver即可运行CUDA container。</p>
</blockquote>
<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><p>remove nvidia-docker 1.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker <span class="built_in">rm</span> -f</span><br><span class="line"><span class="built_in">sudo</span> apt-get purge -y nvidia-docker</span><br></pre></td></tr></table></figure>

<p>Add the package repositories</p>
<p>vim repo.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  <span class="built_in">sudo</span> apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> $ID<span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure>

<p>run scripts </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x repo.sh</span><br><span class="line">./repo.sh</span><br></pre></td></tr></table></figure>

<p>Install nvidia-docker2 and reload the Docker daemon configuration</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y nvidia-docker2</span><br><span class="line"><span class="built_in">sudo</span> pkill -SIGHUP dockerd</span><br></pre></td></tr></table></figure>

<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run --runtime=nvidia --<span class="built_in">rm</span> nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure>
<p>output </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Unable to find image <span class="string">&#x27;nvidia/cuda:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from nvidia/cuda</span><br><span class="line">8ee29e426c26: Pull complete </span><br><span class="line">6e83b260b73b: Pull complete </span><br><span class="line">e26b65fd1143: Pull complete </span><br><span class="line">40dca07f8222: Pull complete </span><br><span class="line">b420ae9e10b3: Pull complete </span><br><span class="line">a579c1327556: Pull complete </span><br><span class="line">b440bb8df79e: Pull complete </span><br><span class="line">de3b2ccf9562: Pull complete </span><br><span class="line">a69a544d350e: Pull complete </span><br><span class="line">02348b5db71c: Pull complete </span><br><span class="line">Digest: sha256:5996fa2fc0666972360502fe32118286177b879a8a1a834a176e7786021b8cee</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nvidia/cuda:latest</span><br><span class="line">Mon Sep  3 10:08:27 2018       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 384.130                Driver Version: 384.130                   |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1060    Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| N/A   59C    P8     8W /  N/A |    408MiB /  6072MiB |     40%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>or by tty</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run --runtime=nvidia -t -i --privileged nvidia/cuda bash</span><br><span class="line"></span><br><span class="line">root@8f3ebd5ecbb6:/# nvidia-smi</span><br><span class="line">Tue Sep  4 01:26:31 2018       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 384.130                Driver Version: 384.130                   |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1060    Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| N/A   56C    P0    31W /  N/A |    374MiB /  6072MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="Advanced-Topics"><a href="#Advanced-Topics" class="headerlink" title="Advanced Topics"></a>Advanced Topics</h3><h4 id="Default-runtime"><a href="#Default-runtime" class="headerlink" title="Default runtime"></a>Default runtime</h4><p>The default runtime used by the Docker® Engine is <code>runc</code>, our runtime can become the default one by configuring the docker daemon with <code>--default-runtime=nvidia</code>. Doing so will remove the need to add the <code>--runtime=nvidia</code> argument to docker run. It is also the only way to have GPU access during docker build.</p>
<h4 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h4><p>The behavior of the runtime can be modified through environment variables (such as <code>NVIDIA_VISIBLE_DEVICES</code>).<br>Those environment variables are consumed by <code>nvidia-container-runtime</code> and are documented here.<br>Our official CUDA images use default values for these variables.</p>
<h3 id="docker-command"><a href="#docker-command" class="headerlink" title="docker command"></a>docker command</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker image list</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nvidia/cuda         latest              04a9ce0dec6d        3 weeks ago         1.96GB</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> docker run -it --privileged nvidia/cuda bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build --network=host -t anakin:<span class="variable">$tag</span> . -f <span class="variable">$DockerfilePath</span></span><br></pre></td></tr></table></figure>

<h2 id="kubernetes-with-GPU"><a href="#kubernetes-with-GPU" class="headerlink" title="kubernetes with GPU"></a>kubernetes with GPU</h2><p>kubernetes 对于 GPU 的支持截止到 1.9 版本，算是经历了3个阶段：</p>
<ul>
<li><p>kubernetes 1.3 版本开始支持GPU，但是只支持单个 GPU卡；</p>
</li>
<li><p>kubernetes 1.6 版本开始支持对多个GPU卡的支持；</p>
</li>
<li><p>kubernetes 1.8 版本以 device plugin 方式提供对GPU的支持。</p>
<p>ls &#x2F;dev&#x2F;nvidia*<br>&#x2F;dev&#x2F;nvidia0  &#x2F;dev&#x2F;nvidia2  &#x2F;dev&#x2F;nvidia4  &#x2F;dev&#x2F;nvidia6  &#x2F;dev&#x2F;nvidiactl<br>&#x2F;dev&#x2F;nvidia1  &#x2F;dev&#x2F;nvidia3  &#x2F;dev&#x2F;nvidia5  &#x2F;dev&#x2F;nvidia7</p>
</li>
<li><p>Kubernetes 1.8~1.9，通过<code>k8s-device-plugin</code> 获取每个Node上GPU的信息，根据这些信息对GPU资源进行管理和调度。需要结合 nvidia-docker2 使用。</p>
</li>
<li><p><code>k8s-device-plugin</code>也是由 nvidia 提供，在kubernetes中可以DaemonSet方式运行。</p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(version-2.0)#prerequisites">nvidia-docker2</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/run/">docker command</a></li>
<li><a href="http://ju.outofmemory.cn/entry/348390">GPU 在 docker 和 kubernetes 中的使用</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27376696">Kubernetes GPU使用指南</a></li>
<li><a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/">scheduling-gpus</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180903: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nvidia-docker</tag>
      </tags>
  </entry>
  <entry>
    <title>install and configure tensorrt 4 on ubuntu 16.04</title>
    <url>//blog/install%20-and-configure-%20tensorrt-4-on-%20ubuntu-16.04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/dacc4196/">Part 1: install and configure tensorrt 4 on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/bcdfb73c/">Part 2: tensorrt fp32 fp16 tutorial</a></li>
<li><a href="https://kezunlin.me/post/30e0cb19/">Part 3: tensorrt int8 tutorial</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul>
<li>ubuntu 16.04 (14.04,16.04 only) not support Windows</li>
<li><del>CUDA 8.0</del> (8.0,9.0,9.2 only)</li>
<li>CUDA 9.2</li>
<li>cudnn 7.1.4 (7.1 only)</li>
<li>TensorRT 4.0.1.6 </li>
<li>TensorFlow-gpu v1.4+</li>
<li>python: 3.5.2 (2.7 or 3.5)</li>
</ul>
<h3 id="TensorRT-support-matrix"><a href="#TensorRT-support-matrix" class="headerlink" title="TensorRT support matrix"></a>TensorRT support matrix</h3><ul>
<li><p>4.0.1.6<br><img src="https://kezunlin.me/images/posts/635233-20180912150412426-572657767.png" alt="support matrix"></p>
</li>
<li><p>5.0.2.6<br><img src="https://kezunlin.me/images/posts/635233-20181119095055341-1432624267.png" alt="support matrix"></p>
</li>
</ul>
<h3 id="hardware-precision-matrix"><a href="#hardware-precision-matrix" class="headerlink" title="hardware precision matrix"></a>hardware precision matrix</h3><p>hardware precision support matrix<br><img src="https://kezunlin.me/images/posts/635233-20190422151849087-402485522.png" alt="hardware precision support matrix"></p>
<blockquote>
<p>see <a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-support-matrix/index.html#hardware-precision-matrix">tensorrt-support-matrix</a></p>
</blockquote>
<h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><ul>
<li>GeForce 1060 (fp32,int8)  no fp16</li>
</ul>
<h4 id="jetson-products"><a href="#jetson-products" class="headerlink" title="jetson products"></a>jetson products</h4><ul>
<li>Jetson TX1   (fp32,fp16)</li>
<li>Jetson TX2    (fp32,fp16)</li>
<li>Jetson AGX Xavier (fp32,fp16,int8,dla)</li>
<li>Jetson Nano (Jetbot)</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><h4 id="download-and-install"><a href="#download-and-install" class="headerlink" title="download and install"></a>download and install</h4><p>download <code>TensorRT-4.0.1.6.Ubuntu-16.04.4.x86_64-gnu.cuda-8.0.cudnn7.1.tar.gz</code> from <a href="https://developer.nvidia.com/tensorrt">here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf TensorRT-4.0.1.6.Ubuntu-16.04.4.x86_64-gnu.cuda-8.0.cudnn7.1.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> TensorRT-4.0.1.6</span><br><span class="line">bin  data  doc  graphsurgeon  include  lib  python  samples  targets  TensorRT-Release-Notes.pdf  uff</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> TensorRT-4.0.1.6 /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s TensorRT-4.0.1.6/ tensorrt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Updates: from cuda-8.0 &#x3D;&#x3D;&#x3D;&gt; cuda-9.2. download <code>TensorRT-4.0.1.6.Ubuntu-16.04.4.x86_64-gnu.cuda-9.2.cudnn7.1.tar.gz</code> from <a href="https://developer.nvidia.com/tensorrt">here</a></p>
</blockquote>
<h4 id="add-lib-to-path"><a href="#add-lib-to-path" class="headerlink" title="add lib to path"></a>add lib to path</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ld.so.conf.d/tensorrt</span><br><span class="line">/opt/tensorrt/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/opt/tensorrt/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="python-package"><a href="#python-package" class="headerlink" title="python package"></a>python package</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/tensorrt/python</span><br><span class="line"><span class="built_in">sudo</span> pip2 install tensorrt-4.0.1.6-cp27-cp27mu-linux_x86_64.whl </span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/tensorrt/python</span><br><span class="line"><span class="built_in">sudo</span> pip3 install tensorrt-4.0.1.6-cp35-cp35m-linux_x86_64.whl </span><br></pre></td></tr></table></figure>

<h4 id="uff-package"><a href="#uff-package" class="headerlink" title="uff package"></a>uff package</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/tensorrt/uff </span><br><span class="line"><span class="built_in">sudo</span> pip install uff-0.4.0-py2.py3-none-any.whl </span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> convert-to-uff</span><br><span class="line">/usr/local/bin/convert-to-uff</span><br></pre></td></tr></table></figure>

<h3 id="folder-structure"><a href="#folder-structure" class="headerlink" title="folder structure"></a>folder structure</h3><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree include/</span><br><span class="line">include/</span><br><span class="line">├── NvCaffeParser.h</span><br><span class="line">├── NvInfer.h</span><br><span class="line">├── NvInferPlugin.h</span><br><span class="line">├── NvOnnxConfig.h</span><br><span class="line">├── NvOnnxParser.h</span><br><span class="line">├── NvUffParser.h</span><br><span class="line">└── NvUtils.h</span><br></pre></td></tr></table></figure>

<h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al *.4.1.2</span><br><span class="line">lrwxrwxrwx 1 kezunlin kezunlin       21 6月  12 15:42 libnvcaffe_parser.so.4.1.2 -&gt; libnvparsers.so.4.1.2</span><br><span class="line">-rwxrwxr-x 1 kezunlin kezunlin  2806840 6月  12 15:42 libnvinfer_plugin.so.4.1.2</span><br><span class="line">-rwxrwxr-x 1 kezunlin kezunlin 80434488 6月  12 15:42 libnvinfer.so.4.1.2</span><br><span class="line">-rwxrwxr-x 1 kezunlin kezunlin  3951712 6月  12 15:42 libnvparsers.so.4.1.2</span><br></pre></td></tr></table></figure>

<h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree bin</span><br><span class="line">bin</span><br><span class="line">├── download-digits-model.py</span><br><span class="line">├── giexec</span><br><span class="line">└── trtexec</span><br></pre></td></tr></table></figure>

<h4 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h4><p>add envs </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensorrt cuda and cudnn</span></span><br><span class="line"><span class="built_in">export</span> CUDA_INSTALL_DIR=/usr/local/cuda</span><br><span class="line"><span class="built_in">export</span> CUDNN_INSTALL_DIR=/usr/local/cuda</span><br></pre></td></tr></table></figure>

<h4 id="compile-all"><a href="#compile-all" class="headerlink" title="compile all"></a>compile all</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> samples/</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>generate all sample_xxx to bin&#x2F; folder.</p>
</blockquote>
<h4 id="compile-sampleMNIST"><a href="#compile-sampleMNIST" class="headerlink" title="compile sampleMNIST"></a>compile sampleMNIST</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> samples/sampleMNIST</span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line">Makefile  sampleMNIST.cpp</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<p>error occurs</p>
<pre><code>dpkg-query: no packages found matching cuda-cudart-[0-9]*
../Makefile.config:6: CUDA_INSTALL_DIR variable is not specified, using /usr/local/cuda- by default, use CUDA_INSTALL_DIR=&lt;cuda_directory&gt; to change.
../Makefile.config:9: CUDNN_INSTALL_DIR variable is not specified, using  by default, use CUDNN_INSTALL_DIR=&lt;cudnn_directory&gt; to change.
</code></pre>
<p>fix solutions:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensorrt cuda and cudnn</span></span><br><span class="line"><span class="built_in">export</span> CUDA_INSTALL_DIR=/opt/cuda</span><br><span class="line"><span class="built_in">export</span> CUDNN_INSTALL_DIR=/opt/cuda</span><br></pre></td></tr></table></figure>

<p>make again </p>
<pre><code>:
:
Compiling: sampleMNIST.cpp
Compiling: sampleMNIST.cpp
Linking: ../../bin/sample_mnist
Linking: ../../bin/sample_mnist_debug
# Copy every EXTRA_FILE of this sample to bin dir
</code></pre>
<p>test <code>sample_mnist</code></p>
<pre><code>./sample_mnist
Reading Caffe prototxt: ../../../data/mnist/mnist.prototxt
Reading Caffe model: ../../../data/mnist/mnist.caffemodel

Input:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@%.:@@@@@@@@@@@@
@@@@@@@@@@@@@: *@@@@@@@@@@@@
@@@@@@@@@@@@* =@@@@@@@@@@@@@
@@@@@@@@@@@% :@@@@@@@@@@@@@@
@@@@@@@@@@@- *@@@@@@@@@@@@@@
@@@@@@@@@@# .@@@@@@@@@@@@@@@
@@@@@@@@@@: #@@@@@@@@@@@@@@@
@@@@@@@@@+ -@@@@@@@@@@@@@@@@
@@@@@@@@@: %@@@@@@@@@@@@@@@@
@@@@@@@@+ +@@@@@@@@@@@@@@@@@
@@@@@@@@:.%@@@@@@@@@@@@@@@@@
@@@@@@@% -@@@@@@@@@@@@@@@@@@
@@@@@@@% -@@@@@@#..:@@@@@@@@
@@@@@@@% +@@@@@-    :@@@@@@@
@@@@@@@% =@@@@%.#@@- +@@@@@@
@@@@@@@@..%@@@*+@@@@ :@@@@@@
@@@@@@@@= -%@@@@@@@@ :@@@@@@
@@@@@@@@@- .*@@@@@@+ +@@@@@@
@@@@@@@@@@+  .:-+-: .@@@@@@@
@@@@@@@@@@@@+:    :*@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Output:

0: 
1: 
2: 
3: 
4: 
5: 
6: **********
7: 
8: 
9: 
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>compile all samples </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> sample</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<h3 id="sample-mnist"><a href="#sample-mnist" class="headerlink" title="sample_mnist"></a>sample_mnist</h3><p>see above. skip.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd sample_mnist</span><br><span class="line">    linux-vdso.so.1 =&gt;  (0x00007ffecd9f3000)</span><br><span class="line">    libnvinfer.so.4 =&gt; /opt/tensorrt/lib/libnvinfer.so.4 (0x00007f48de6f2000)</span><br><span class="line">    libnvparsers.so.4.1.2 =&gt; /opt/tensorrt/lib/libnvparsers.so.4.1.2 (0x00007f48de12c000)</span><br><span class="line">    librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f48ddf24000)</span><br><span class="line">    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f48ddd20000)</span><br><span class="line">    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f48ddb03000)</span><br><span class="line">    libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f48dd781000)</span><br><span class="line">    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f48dd478000)</span><br><span class="line">    libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f48dd262000)</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f48dce98000)</span><br><span class="line">    libcudnn.so.7 =&gt; /usr/local/cuda/lib64/libcudnn.so.7 (0x00007f48c8818000)</span><br><span class="line">    libcublas.so.9.2 =&gt; /usr/local/cuda/lib64/libcublas.so.9.2 (0x00007f48c4dca000)</span><br><span class="line">    libcudart.so.9.2 =&gt; /usr/local/cuda/lib64/libcudart.so.9.2 (0x00007f48c4b60000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007f48e42bc000)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>libnvinfer.so, libnvparsers.so, libcudart.so, libcudnn.so, libcublas.so</p>
</blockquote>
<h3 id="sample-onnx-mnist"><a href="#sample-onnx-mnist" class="headerlink" title="sample_onnx_mnist"></a>sample_onnx_mnist</h3><pre><code>./sample_onnx_mnist



---------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@%.-@@@@@@@@@@@
@@@@@@@@@@@*-    %@@@@@@@@@@
@@@@@@@@@@= .-.  *@@@@@@@@@@
@@@@@@@@@= +@@@  *@@@@@@@@@@
@@@@@@@@* =@@@@  %@@@@@@@@@@
@@@@@@@@..@@@@%  @@@@@@@@@@@
@@@@@@@# *@@@@-  @@@@@@@@@@@
@@@@@@@: @@@@%   @@@@@@@@@@@
@@@@@@@: @@@@-   @@@@@@@@@@@
@@@@@@@: =+*= +: *@@@@@@@@@@
@@@@@@@*.    +@: *@@@@@@@@@@
@@@@@@@@%#**#@@: *@@@@@@@@@@
@@@@@@@@@@@@@@@: -@@@@@@@@@@
@@@@@@@@@@@@@@@+ :@@@@@@@@@@
@@@@@@@@@@@@@@@*  @@@@@@@@@@
@@@@@@@@@@@@@@@@  %@@@@@@@@@
@@@@@@@@@@@@@@@@  #@@@@@@@@@
@@@@@@@@@@@@@@@@: +@@@@@@@@@
@@@@@@@@@@@@@@@@- +@@@@@@@@@
@@@@@@@@@@@@@@@@*:%@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@


 Prob 0  0.00000: 
 Prob 1  0.00001: 
 Prob 2  0.00002: 
 Prob 3  0.00003: 
 Prob 4  0.00044: 
 Prob 5  0.00005: 
 Prob 6  0.00006: 
 Prob 7  0.00007: 
 Prob 8  0.00008: 
 Prob 9  0.99969: **********
</code></pre>
<h3 id="sample-uff-mnist"><a href="#sample-uff-mnist" class="headerlink" title="sample_uff_mnist"></a>sample_uff_mnist</h3><pre><code>../../../data/mnist/lenet5.uff



---------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@%.-@@@@@@@@@@@
@@@@@@@@@@@*-    %@@@@@@@@@@
@@@@@@@@@@= .-.  *@@@@@@@@@@
@@@@@@@@@= +@@@  *@@@@@@@@@@
@@@@@@@@* =@@@@  %@@@@@@@@@@
@@@@@@@@..@@@@%  @@@@@@@@@@@
@@@@@@@# *@@@@-  @@@@@@@@@@@
@@@@@@@: @@@@%   @@@@@@@@@@@
@@@@@@@: @@@@-   @@@@@@@@@@@
@@@@@@@: =+*= +: *@@@@@@@@@@
@@@@@@@*.    +@: *@@@@@@@@@@
@@@@@@@@%#**#@@: *@@@@@@@@@@
@@@@@@@@@@@@@@@: -@@@@@@@@@@
@@@@@@@@@@@@@@@+ :@@@@@@@@@@
@@@@@@@@@@@@@@@*  @@@@@@@@@@
@@@@@@@@@@@@@@@@  %@@@@@@@@@
@@@@@@@@@@@@@@@@  #@@@@@@@@@
@@@@@@@@@@@@@@@@: +@@@@@@@@@
@@@@@@@@@@@@@@@@- +@@@@@@@@@
@@@@@@@@@@@@@@@@*:%@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
10 eltCount
--- OUTPUT ---
0 =&gt; -2.75228	 : 
1 =&gt; -1.51534	 : 
2 =&gt; -4.11729	 : 
3 =&gt; 0.316925	 : 
4 =&gt; 3.73423	 : 
5 =&gt; -3.00593	 : 
6 =&gt; -6.18866	 : 
7 =&gt; -1.02671	 : 
8 =&gt; 1.937	 : 
9 =&gt; 14.8275	 : ***

Average over 10 runs is 0.0843257 ms.
</code></pre>
<h3 id="sample-mnist-api"><a href="#sample-mnist-api" class="headerlink" title="sample_mnist_api"></a>sample_mnist_api</h3><pre><code>./sample_mnist_api
Loading weights: ../../../data/mnist/mnistapi.wts

Input:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@+ @@@@@@@@@@@@@@
@@@@@@@@@@@@. @@@@@@@@@@@@@@
@@@@@@@@@@@@- @@@@@@@@@@@@@@
@@@@@@@@@@@#  @@@@@@@@@@@@@@
@@@@@@@@@@@#  *@@@@@@@@@@@@@
@@@@@@@@@@@@  :@@@@@@@@@@@@@
@@@@@@@@@@@@= .@@@@@@@@@@@@@
@@@@@@@@@@@@#  %@@@@@@@@@@@@
@@@@@@@@@@@@% .@@@@@@@@@@@@@
@@@@@@@@@@@@%  %@@@@@@@@@@@@
@@@@@@@@@@@@%  %@@@@@@@@@@@@
@@@@@@@@@@@@@= +@@@@@@@@@@@@
@@@@@@@@@@@@@* -@@@@@@@@@@@@
@@@@@@@@@@@@@*  @@@@@@@@@@@@
@@@@@@@@@@@@@@  @@@@@@@@@@@@
@@@@@@@@@@@@@@  *@@@@@@@@@@@
@@@@@@@@@@@@@@  *@@@@@@@@@@@
@@@@@@@@@@@@@@  *@@@@@@@@@@@
@@@@@@@@@@@@@@  *@@@@@@@@@@@
@@@@@@@@@@@@@@* @@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Output:

0: 
1: **********
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
</code></pre>
<h3 id="sample-int8"><a href="#sample-int8" class="headerlink" title="sample_int8"></a>sample_int8</h3><pre><code>./sample_int8 mnist

FP32 run:400 batches of size 100 starting at 100
........................................
Top1: 0.9904, Top5: 1
Processing 40000 images averaged 0.00332707 ms/image and 0.332707 ms/batch.

FP16 run:400 batches of size 100 starting at 100
Engine could not be created at this precision

INT8 run:400 batches of size 100 starting at 100
........................................
Top1: 0.9909, Top5: 1
Processing 40000 images averaged 0.00215323 ms/image and 0.215323 ms/batch.
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-developer-guide/index.html">TensorRT developer guide</a></li>
<li><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-developer-guide/index.htm">TensorRT install guide</a></li>
<li><a href="https://devblogs.nvidia.com/speed-up-inference-tensorrt/">speed-up-inference-tensorrt</a></li>
<li><a href="https://devblogs.nvidia.com/large-scale-object-detection-tensorrt/">large-scale-object-detection-tensorrt</a></li>
<li><a href="https://devblogs.nvidia.com/int8-inference-autonomous-vehicles-tensorrt/">int8-inference-autonomous-vehicles-tensorrt</a></li>
<li><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-api/c_api/classnvinfer1_1_1_i_builder.html">tensorrt api</a><br><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-support-matrix/index.html#hardware-precision-matrix">tensorrt-support-matrix</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180907: created.</li>
<li>20181119: add tensorrt-5.0.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>tensorrt</tag>
        <tag>nvidia</tag>
      </tags>
  </entry>
  <entry>
    <title>compile baidu anakin on ubuntu 16.04</title>
    <url>//blog/anakin-guide-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul>
<li>gcc 4.8.5&#x2F;5.4.0</li>
<li>g++ 4.8.5&#x2F;5.4.0</li>
<li>cmake 3.2.2</li>
<li>nvidia driver 396.54 + cuda 9.2 + cudnn 7.1.4</li>
<li>protobuf 3.4.0</li>
</ul>
<h3 id="install-nvidia-docker2"><a href="#install-nvidia-docker2" class="headerlink" title="install nvidia-docker2"></a>install nvidia-docker2</h3><p>see <a href="https://kezunlin.me/post/6293dd25/">nvidia-docker2 guide on ubuntu 16.04</a></p>
<p>test </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run --runtime=nvidia --<span class="built_in">rm</span> nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure>

<h3 id="build-and-run"><a href="#build-and-run" class="headerlink" title="build and run"></a>build and run</h3><p>build</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PaddlePaddle/Anakin.git anakin</span><br><span class="line"><span class="built_in">cd</span> anakin/docker</span><br><span class="line">./anakin_docker_build_and_run.sh -p NVIDIA-GPU -o Ubuntu -m Build</span><br></pre></td></tr></table></figure>

<p>error occur with <code>cudnn</code>. skip.</p>
<p>run</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./anakin_docker_build_and_run.sh  -p NVIDIA-GPU -o Ubuntu -m Run</span><br></pre></td></tr></table></figure>

<h3 id="compile-anakin"><a href="#compile-anakin" class="headerlink" title="compile anakin"></a>compile anakin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -it --runtime=nvidia fdcda959f60a bin/bash</span><br><span class="line">root@962077742ae9:/# <span class="built_in">cd</span> Anakin/</span><br><span class="line">git checkout developing</span><br></pre></td></tr></table></figure>

<p>build</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. use script to build</span></span><br><span class="line">./tools/gpu_build.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. or you can build directly.</span></span><br><span class="line"><span class="built_in">mkdir</span> build  </span><br><span class="line"><span class="built_in">cd</span> build  </span><br><span class="line">cmake ..  </span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<h4 id="x86-build"><a href="#x86-build" class="headerlink" title="x86 build"></a>x86 build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tools/x86_build.sh</span><br></pre></td></tr></table></figure>
<p>OK. no errors.</p>
<h4 id="gpu-build"><a href="#gpu-build" class="headerlink" title="gpu build"></a>gpu build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tools/gpu_build.sh</span><br></pre></td></tr></table></figure>

<p>build errors occur. no <code>cudnn</code> found.</p>
<h2 id="compile-anakin-in-host"><a href="#compile-anakin-in-host" class="headerlink" title="compile anakin in host"></a>compile anakin in host</h2><h3 id="install-protobuf"><a href="#install-protobuf" class="headerlink" title="install protobuf"></a>install protobuf</h3><p>install protobuf 3.4.0, see <a href="https://kezunlin.me/post/d60ff6fe/">Part 1: compile protobuf-cpp on ubuntu 16.04</a></p>
<h3 id="configure-env"><a href="#configure-env" class="headerlink" title="configure env"></a>configure env</h3><p>vim .bashrc </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cuda for anakin</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDNN for anakin</span></span><br><span class="line"><span class="built_in">export</span> CUDNN_ROOT=/usr/local/cuda/</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;CUDNN_ROOT&#125;</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CPLUS_INCLUDE_PATH=<span class="variable">$&#123;CUDNN_ROOT&#125;</span>/include:<span class="variable">$CPLUS_INCLUDE_PATH</span></span><br></pre></td></tr></table></figure>

<p>source .bashrc</p>
<h3 id="build-anakin"><a href="#build-anakin" class="headerlink" title="build anakin"></a>build anakin</h3><h4 id="x86-build-1"><a href="#x86-build-1" class="headerlink" title="x86 build"></a>x86 build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout developing  </span><br><span class="line">./tools/x86_build.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> output x86_output</span><br></pre></td></tr></table></figure>
<p>OK. no errors.</p>
<p>if error occurs, then </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf CMakeFiles</span><br><span class="line"><span class="built_in">rm</span> -rf anakin/framework/model_parser/proto/*.h</span><br><span class="line"><span class="built_in">rm</span> output</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R kezunlin:kezunlin anakin</span><br></pre></td></tr></table></figure>

<h4 id="gpu-build-1"><a href="#gpu-build-1" class="headerlink" title="gpu build"></a>gpu build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tools/gpu_build.sh</span><br><span class="line"><span class="built_in">mv</span> output gpu_output</span><br></pre></td></tr></table></figure>

<h4 id="gpu-build-with-cmake"><a href="#gpu-build-with-cmake" class="headerlink" title="gpu build with cmake"></a>gpu build with cmake</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> anakin</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="anakin-overview"><a href="#anakin-overview" class="headerlink" title="anakin overview"></a>anakin overview</h2><p><img src="https://kezunlin.me/images/posts/635233-20180906173919156-600432026.png" alt="anakin"></p>
<p>用Anakin来进行前向计算主要分为三个步骤：</p>
<ol>
<li>将外部模型通过Anakin Parser解析为Anakin模型</li>
<li>加载Anakin模型生成原始计算图，然后需要对原始计算图进行优化。</li>
<li>Anakin会选择不同硬件平台执行计算图。</li>
</ol>
<h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p><code>Tensor</code>接受三个模板参数:</p>
<pre><code> template&lt;typename TargetType, DataType datatype, typename LayOutType = NCHW&gt;
 class Tensor .../* Inherit other class */&#123;
  //some implements
  ...
 &#125;;
</code></pre>
<ul>
<li><a href="#target">TargetType</a>是平台类型，如X86，GPU等等，在Anakin内部有相应的标识与之对应；</li>
<li><a href="#datatype">datatype</a>是普通的数据类型，在Anakin内部也有相应的标志与之对应；</li>
<li><a href="#layout">LayOutType</a>是数据分布类型，如batch x channel x height x width [NxCxHxW], 在Anakin内部用一个struct来标识。 Anakin中数据类型与基本数据类型的对应如下:</li>
</ul>
<p><span id='target'>TargetType</span></p>
<p>Anakin TargetType | platform<br>:—-: |<br>NV | NVIDIA GPU<br>ARM | ARM<br>AMD | AMD GPU<br>X86 | X86<br>NVHX86 | NVIDIA GPU with Pinned Memory</p>
<p><sapn id='datatype'>DataType</span></p>
<table>
<thead>
<tr>
<th align="center">Anakin DataType</th>
<th align="center">C++</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AK_HALF</td>
<td align="center">short</td>
<td align="center">fp16</td>
</tr>
<tr>
<td align="center">AK_FLOAT</td>
<td align="center">float</td>
<td align="center">fp32</td>
</tr>
<tr>
<td align="center">AK_DOUBLE</td>
<td align="center">double</td>
<td align="center">fp64</td>
</tr>
<tr>
<td align="center">AK_INT8</td>
<td align="center">char</td>
<td align="center">int8</td>
</tr>
<tr>
<td align="center">AK_INT16</td>
<td align="center">short</td>
<td align="center">int16</td>
</tr>
<tr>
<td align="center">AK_INT32</td>
<td align="center">int</td>
<td align="center">int32</td>
</tr>
<tr>
<td align="center">AK_INT64</td>
<td align="center">long</td>
<td align="center">int64</td>
</tr>
<tr>
<td align="center">AK_UINT8</td>
<td align="center">unsigned char</td>
<td align="center">uint8</td>
</tr>
<tr>
<td align="center">AK_UINT16</td>
<td align="center">unsigned short</td>
<td align="center">uint8</td>
</tr>
<tr>
<td align="center">AK_UINT32</td>
<td align="center">unsigned int</td>
<td align="center">uint32</td>
</tr>
<tr>
<td align="center">AK_STRING</td>
<td align="center">std::string</td>
<td align="center">&#x2F;</td>
</tr>
<tr>
<td align="center">AK_BOOL</td>
<td align="center">bool</td>
<td align="center">&#x2F;</td>
</tr>
<tr>
<td align="center">AK_SHAPE</td>
<td align="center">&#x2F;</td>
<td align="center">Anakin Shape</td>
</tr>
<tr>
<td align="center">AK_TENSOR</td>
<td align="center">&#x2F;</td>
<td align="center">Anakin Tensor</td>
</tr>
</tbody></table>
<p><span id = 'layout'>LayOutType </span></p>
<table>
<thead>
<tr>
<th align="center">Anakin LayOutType ( Tensor LayOut )</th>
<th align="center">Tensor Dimention</th>
<th align="center">Tensor Support</th>
<th align="center">Op Support</th>
</tr>
</thead>
<tbody><tr>
<td align="center">W</td>
<td align="center">1-D</td>
<td align="center">YES</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">HW</td>
<td align="center">2-D</td>
<td align="center">YES</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">WH</td>
<td align="center">2-D</td>
<td align="center">YES</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">NW</td>
<td align="center">2-D</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">NHW</td>
<td align="center">3-D</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">NCHW ( default )</td>
<td align="center">4-D</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">NHWC</td>
<td align="center">4-D</td>
<td align="center">YES</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">NCHW_C4</td>
<td align="center">5-D</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
</tbody></table>
<p>理论上，Anakin支持申明1维以上的tensor，但是对于Anakin中的Op来说，只支持NW、NHW、NCHW、NCHW_C4这四种LayOut，其中NCHW是默认的LayOutType，NCHW_C4是专门针对于int8这种数据类型的。</p>
<h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><p><code>Graph</code>类负责加载Anakin模型生成计算图、对图进行优化、存储模型等操作。</p>
<pre><code>template&lt;typename TargetType, DataType Dtype, Precision Ptype&gt;
class Graph ... /* inherit other class*/&#123;

  //some implements
  ...

&#125;;
</code></pre>
<h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><pre><code>//some declarations
...
auto graph = new Graph&lt;NV, AK_FLOAT, Precision::FP32&gt;();
std::string model_path = &quot;the/path/to/where/your/models/are&quot;;
const char *model_path1 = &quot;the/path/to/where/your/models/are&quot;;

//Loading Anakin model to generate a compute graph.
auto status = graph-&gt;load(model_path);

//Or this way.
auto status = graph-&gt;load(model_path1);
//Check whether load operation success.
if(!status)&#123;
  std::cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;
  //do something...
&#125;
</code></pre>
<h4 id="optimize"><a href="#optimize" class="headerlink" title="optimize"></a>optimize</h4><pre><code>//some declarations
...
//Load graph.
...
//According to the ops of loaded graph, optimize compute graph.
graph-&gt;Optimize();
</code></pre>
<h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><pre><code>//some declarations
...
//Load graph.
...
// save a model
//save_model_path: the path to where your model is.
auto status = graph-&gt;save(save_model_path);

//Checking
if(!status)&#123;
  cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;
  //do somethin...
&#125;
</code></pre>
<h3 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h3><p><code>Net</code>是计算图的执行器，通过Net对象获得输入和输出。</p>
<pre><code>template&lt;typename TargetType, DataType Dtype, Precision PType, OpRunType RunType = OpRunType::ASYNC&gt;
class Net&#123;
  //some implements
  ...

&#125;;
</code></pre>
<ul>
<li><a href="#precision">Precision</a>指定Op的精度。</li>
<li><a href="#opruntype">OpRunType</a>表示同步或异步类型，异步是默认类型。OpRunType::SYNC表示同步，在GPU上只有单个流；OpRunType::ASYNC表示异步，在GPU上有多个流并以异步方式执行。</li>
</ul>
<p><span id = 'precision'> Precision </span></p>
<table>
<thead>
<tr>
<th align="center">Precision</th>
<th align="center">Op support</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Precision::INT4</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">Precision::INT8</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">Precision::FP16</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">Precision::FP32</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">Precision::FP64</td>
<td align="center">NO</td>
</tr>
</tbody></table>
<p>现在Op的精度只支持FP32， 但在将来我们会支持剩下的Precision.</p>
<p><span id = 'opruntype'> OpRunType </span></p>
<table>
<thead>
<tr>
<th align="center">OpRunType</th>
<th align="center">Sync&#x2F;Aync</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OpRunType::SYNC</td>
<td align="center">Synchronization</td>
<td align="center">single-stream on GPU</td>
</tr>
<tr>
<td align="center">OpRunType::ASYNC</td>
<td align="center">Asynchronization</td>
<td align="center">multi-stream on GPU</td>
</tr>
</tbody></table>
<h4 id="create-a-executor"><a href="#create-a-executor" class="headerlink" title="create a executor"></a>create a executor</h4><pre><code>//some declarations
...
//Create a pointer to a graph.
auto graph = new Graph&lt;NV, AK_FLOAT, Precision::FP32&gt;();
//do something...
...

//create a executor
Net&lt;NV, AK_FLOAT, Precision::FP32&gt; executor(*graph);
</code></pre>
<h4 id="get-input-tensor"><a href="#get-input-tensor" class="headerlink" title="get input tensor"></a>get input tensor</h4><pre><code>//some declaratinos
...

//create a executor
//TargetType is NV [NVIDIA GPU]
Net&lt;NV, AK_FLOAT, Precision::FP32&gt; executor(*graph);

//Get the first input tensor.
//The following tensors(tensor_in0, tensor_in2 ...) are resident at GPU.
//Note: Member function get_in returns an pointer to tensor.
Tensor&lt;NV, AK_FLOAT&gt;* tensor_in0 = executor.get_in(&quot;input_0&quot;);

//If you have multiple input tensors
//You just type this code below.
Tensor&lt;NV, AK_FLOAT&gt;* tensor_in1 = executor.get_in(&quot;input_1&quot;);
...
auto tensor_inn = executor.get_in(&quot;input_n&quot;);
</code></pre>
<h4 id="fill-input-tensor"><a href="#fill-input-tensor" class="headerlink" title="fill input tensor"></a>fill input tensor</h4><pre><code>//This tensor is resident at GPU.
auto tensor_d_in = executor.get_in(&quot;input_0&quot;);

//If we want to feed above tensor, we must feed the tensor which is resident at host. And then copy the host tensor to the device&#39;s one.

//using Tensor4d = Tensor&lt;Ttype, Dtype&gt;;
Tensor4d&lt;X86, AK_FLOAT&gt; tensor_h_in; //host tensor;
//Tensor&lt;X86, AK_FLOAT&gt; tensor_h_in; 

//Allocate memory for host tensor.
tensor_h_in.re_alloc(tensor_d_in-&gt;valid_shape());
//Get a writable pointer to tensor.
float *h_data = tensor_h_in.mutable_data();

//Feed your tensor.
/** example
for(int i = 0; i &lt; tensor_h_in.size(); i++)&#123;
  h_data[i] = 1.0f;
&#125;
*/
//Copy host tensor&#39;s data to device tensor.
tensor_d_in-&gt;copy_from(tensor_h_in);

// And then
</code></pre>
<h4 id="get-output-tensor"><a href="#get-output-tensor" class="headerlink" title="get output tensor"></a>get output tensor</h4><pre><code>//Note: this tensor are resident at GPU.
Tensor&lt;NV, AK_FLOAT&gt;* tensor_out_d = executor.get_out(&quot;pred_out&quot;);
</code></pre>
<h4 id="execute-graph"><a href="#execute-graph" class="headerlink" title="execute graph"></a>execute graph</h4><pre><code>executor.prediction();
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string model_path = <span class="string">&quot;your_Anakin_models/xxxxx.anakin.bin&quot;</span>;</span><br><span class="line"><span class="comment">// Create an empty graph object.</span></span><br><span class="line"><span class="keyword">auto</span> graph = <span class="keyword">new</span> <span class="built_in">Graph</span>&lt;NV, AK_FLOAT, Precision::FP32&gt;();</span><br><span class="line"><span class="comment">// Load Anakin model.</span></span><br><span class="line"><span class="keyword">auto</span> status = graph-&gt;<span class="built_in">load</span>(model_path);</span><br><span class="line"><span class="keyword">if</span>(!status ) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot; [ERROR] &quot;</span> &lt;&lt; status.<span class="built_in">info</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Reshape</span></span><br><span class="line">graph-&gt;<span class="built_in">Reshape</span>(<span class="string">&quot;input_0&quot;</span>, &#123;<span class="number">10</span>, <span class="number">384</span>, <span class="number">960</span>, <span class="number">10</span>&#125;);</span><br><span class="line"><span class="comment">// You must optimize graph for the first time.</span></span><br><span class="line">graph-&gt;<span class="built_in">Optimize</span>();</span><br><span class="line"><span class="comment">// Create a executer.</span></span><br><span class="line"><span class="function">Net&lt;NV, AK_FLOAT, Precision::FP32&gt; <span class="title">net_executer</span><span class="params">(*graph)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get your input tensors through some specific string such as &quot;input_0&quot;, &quot;input_1&quot;, and </span></span><br><span class="line"><span class="comment">//so on. </span></span><br><span class="line"><span class="comment">//And then, feed the input tensor.</span></span><br><span class="line"><span class="comment">//If you don&#x27;t know Which input do these specific string (&quot;input_0&quot;, &quot;input_1&quot;) correspond with, you can launch dash board to find out.</span></span><br><span class="line"><span class="keyword">auto</span> d_tensor_in_p = net_executer.<span class="built_in">get_in</span>(<span class="string">&quot;input_0&quot;</span>);</span><br><span class="line">Tensor4d&lt;X86, AK_FLOAT&gt; h_tensor_in;</span><br><span class="line"><span class="keyword">auto</span> valid_shape_in = d_tensor_in_p-&gt;<span class="built_in">valid_shape</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;valid_shape_in.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;detect input dims[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; valid_shape_in[i]; <span class="comment">//see tensor&#x27;s dimentions</span></span><br><span class="line">&#125;</span><br><span class="line">h_tensor_in.<span class="built_in">re_alloc</span>(valid_shape_in);</span><br><span class="line"><span class="type">float</span>* h_data = h_tensor_in.<span class="built_in">mutable_data</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;h_tensor_in.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    h_data[i] = <span class="number">1.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line">d_tensor_in_p-&gt;<span class="built_in">copy_from</span>(h_tensor_in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Do inference.</span></span><br><span class="line">net_executer.<span class="built_in">prediction</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get result tensor through the name of output node.</span></span><br><span class="line"><span class="comment">//And also, you need to see the dash board again to find out how many output nodes are and remember their name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//For example, you&#x27;ve got a output node named obj_pre_out</span></span><br><span class="line"><span class="comment">//Then, you can get an output tensor.</span></span><br><span class="line"><span class="keyword">auto</span> d_tensor_out_0_p = net_executer.<span class="built_in">get_out</span>(<span class="string">&quot;obj_pred_out&quot;</span>); <span class="comment">//get_out returns a pointer to output tensor.</span></span><br><span class="line"><span class="keyword">auto</span> d_tensor_out_1_p = net_executer.<span class="built_in">get_out</span>(<span class="string">&quot;lc_pred_out&quot;</span>); <span class="comment">//get_out returns a pointer to output tensor.</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="comment">// do something else ...</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//save model.</span></span><br><span class="line"><span class="comment">//You might not optimize the graph when you load the saved model again.</span></span><br><span class="line">std::string save_model_path = model_path + std::<span class="built_in">string</span>(<span class="string">&quot;.saved&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> status = graph-&gt;<span class="built_in">save</span>(save_model_path);</span><br><span class="line"><span class="keyword">if</span> (!status ) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot; [ERROR] &quot;</span> &lt;&lt; status.<span class="built_in">info</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="anakin-converter"><a href="#anakin-converter" class="headerlink" title="anakin converter"></a>anakin converter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> anakin/tools/external_converter_v2</span><br><span class="line"><span class="built_in">sudo</span> pip install flask prettytable</span><br><span class="line"></span><br><span class="line">vim config.yaml </span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">python converter.py</span><br></pre></td></tr></table></figure>

<p>config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">OPTIONS:</span></span><br><span class="line">    <span class="attr">Framework:</span> <span class="string">CAFFE</span></span><br><span class="line">    <span class="attr">SavePath:</span> <span class="string">./output</span></span><br><span class="line">    <span class="attr">ResultName:</span> <span class="string">mylenet</span></span><br><span class="line">    <span class="attr">Config:</span></span><br><span class="line">        <span class="attr">LaunchBoard:</span> <span class="string">ON</span></span><br><span class="line">        <span class="attr">Server:</span></span><br><span class="line">            <span class="attr">ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">        <span class="attr">OptimizedGraph:</span> </span><br><span class="line">            <span class="attr">enable:</span> <span class="string">OFF</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">./anakin_optimized/lenet.anakin.bin.saved</span></span><br><span class="line">    <span class="attr">LOGGER:</span></span><br><span class="line">        <span class="attr">LogToPath:</span> <span class="string">./log/</span></span><br><span class="line">        <span class="attr">WithColor:</span> <span class="string">ON</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">TARGET:</span></span><br><span class="line">    <span class="attr">CAFFE:</span></span><br><span class="line">        <span class="comment"># path to proto files</span></span><br><span class="line">        <span class="attr">ProtoPaths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/home/kezunlin/program/caffe/src/caffe/proto/caffe.proto</span></span><br><span class="line">        <span class="attr">PrototxtPath:</span> <span class="string">/home/kezunlin/program/caffe/examples/mnist/lenet.prototxt</span></span><br><span class="line">        <span class="attr">ModelPath:</span> <span class="string">/home/kezunlin/program/caffe/examples/mnist/lenet_iter_10000.caffemodel</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">FLUID:</span></span><br><span class="line">        <span class="comment"># path of fluid inference model</span></span><br><span class="line">        <span class="attr">Debug:</span> <span class="literal">NULL</span>                            <span class="comment"># Generally no need to modify.</span></span><br><span class="line">        <span class="attr">ModelPath:</span> <span class="string">/path/to/your/model/</span>        <span class="comment"># The upper path of a fluid inference model.</span></span><br><span class="line">        <span class="attr">NetType:</span>                               <span class="comment"># Generally no need to modify.</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">LEGO:</span></span><br><span class="line">        <span class="comment"># path to proto files</span></span><br><span class="line">        <span class="attr">ProtoPath:</span></span><br><span class="line">        <span class="attr">PrototxtPath:</span></span><br><span class="line">        <span class="attr">ModelPath:</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">TENSORFLOW:</span></span><br><span class="line">        <span class="attr">ProtoPaths:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">PrototxtPath:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">ModelPath:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">OutPuts:</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">ONNX:</span></span><br><span class="line">        <span class="attr">ProtoPath:</span></span><br><span class="line">        <span class="attr">PrototxtPath:</span></span><br><span class="line">        <span class="attr">ModelPath:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>input: caffe.proto + lenet.prototxt + lenet_iter_10000.caffemodel</li>
<li>output: output&#x2F;mylenet.anakin.bin + log&#x2F;xxx.log</li>
</ul>
<h2 id="anakin-test"><a href="#anakin-test" class="headerlink" title="anakin test"></a>anakin test</h2><h3 id="model-test-cpp"><a href="#model-test-cpp" class="headerlink" title="model_test.cpp"></a>model_test.cpp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> Anakin/test/framework/net/model_test.cpp</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> gpu_output</span><br><span class="line">./unit_test/model_test <span class="string">&#x27;/home/kezunlin/program/anakin/demo/model/&#x27;</span> </span><br></pre></td></tr></table></figure>

<h3 id="example-nv-cnn-net-cpp"><a href="#example-nv-cnn-net-cpp" class="headerlink" title="example_nv_cnn_net.cpp"></a>example_nv_cnn_net.cpp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> Anakin/examples/cuda/example_nv_cnn_net.cpp</span><br></pre></td></tr></table></figure>

<h2 id="my-example"><a href="#my-example" class="headerlink" title="my example"></a>my example</h2><h3 id="my-workspace"><a href="#my-workspace" class="headerlink" title="my workspace"></a>my workspace</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> demo/</span><br><span class="line">anakin_lib  build  cmake  CMakeLists.txt  image  model  src</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree demo/src/ demo/model/ demo/cmake demo/image</span><br><span class="line">demo/src/</span><br><span class="line">└── demo.cpp</span><br><span class="line">demo/model/</span><br><span class="line">└── mylenet.anakin.bin</span><br><span class="line">demo/cmake</span><br><span class="line">├── anakin-config.cmake</span><br><span class="line">├── msg_color.cmake</span><br><span class="line">├── statistic.cmake</span><br><span class="line">└── utils.cmake</span><br><span class="line">demo/image</span><br><span class="line">├── big.jpg</span><br><span class="line">└── cat.jpg</span><br><span class="line"></span><br><span class="line">0 directories, 8 files</span><br></pre></td></tr></table></figure>

<h3 id="anakin-lib"><a href="#anakin-lib" class="headerlink" title="anakin_lib"></a>anakin_lib</h3><p>use <code>./tools/gpu_build.sh</code> to generate <code>gpu_build_sm61</code> and rename to <code>anakin_lib</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./tools/gpu_build.sh</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> gpu_build_sm61 anakin_lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> anakin_lib/</span><br><span class="line">anakin_config.h  libanakin_saber_common.so        libanakin.so        <span class="built_in">log</span>    unit_test</span><br><span class="line">framework        libanakin_saber_common.so.0.1.2  libanakin.so.0.1.2  saber  utils</span><br></pre></td></tr></table></figure>

<h4 id="anakin-config-cmake"><a href="#anakin-config-cmake" class="headerlink" title="anakin-config.cmake"></a>anakin-config.cmake</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(ANAKIN_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_VERSION <span class="number">0.1</span>.<span class="number">2</span>)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_ROOT_DIR <span class="string">&quot;/home/kezunlin/program/anakin/demo/anakin_lib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_ROOT <span class="variable">$&#123;ANAKIN_ROOT_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK <span class="variable">$&#123;ANAKIN_ROOT&#125;</span>/framework)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_SABER <span class="variable">$&#123;ANAKIN_ROOT&#125;</span>/saber)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_UTILS <span class="variable">$&#123;ANAKIN_ROOT&#125;</span>/utils)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK_CORE <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span>/core)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK_GRAPH <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span>/graph)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK_LITE <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span>/lite)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK_MODEL_PARSER <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span>/model_parser)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_FRAMEWORK_OPERATORS <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span>/operators)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_SABER_CORE <span class="variable">$&#123;ANAKIN_SABER&#125;</span>/core)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_SABER_FUNCS <span class="variable">$&#123;ANAKIN_SABER&#125;</span>/funcs)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_SABER_LITE <span class="variable">$&#123;ANAKIN_SABER&#125;</span>/lite)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_UTILS_LOGGER <span class="variable">$&#123;ANAKIN_UTILS&#125;</span>/logger)</span><br><span class="line"><span class="keyword">set</span>(ANAKIN_UTILS_UINT_TEST <span class="variable">$&#123;ANAKIN_UTILS&#125;</span>/unit_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#find_path(ANAKIN_INCLUDE_DIR NAMES anakin_config.h PATHS &quot;$&#123;ANAKIN_ROOT_DIR&#125;&quot;) </span></span><br><span class="line"><span class="keyword">mark_as_advanced</span>(ANAKIN_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(ANAKIN_SABER_COMMON_LIBRARY NAMES anakin_saber_common PATHS <span class="string">&quot;$&#123;ANAKIN_ROOT_DIR&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(ANAKIN_SABER_COMMON_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(ANAKIN_LIBRARY NAMES anakin PATHS <span class="string">&quot;$&#123;ANAKIN_ROOT_DIR&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(ANAKIN_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_INCLUDE_DIRS </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_ROOT&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_SABER&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_UTILS&#125;</span> </span><br><span class="line"></span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK_CORE&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK_GRAPH&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK_LITE&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK_MODEL_PARSER&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_FRAMEWORK_OPERATORS&#125;</span> </span><br><span class="line"></span><br><span class="line">    <span class="variable">$&#123;ANAKIN_SABER_CORE&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_SABER_FUNCS&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_SABER_LITE&#125;</span> </span><br><span class="line"></span><br><span class="line">    <span class="variable">$&#123;ANAKIN_UTILS_LOGGER&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_UTILS_UINT_TEST&#125;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ANAKIN_LIBRARIES <span class="variable">$&#123;ANAKIN_SABER_COMMON_LIBRARY&#125;</span> <span class="variable">$&#123;ANAKIN_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;anakin-config.cmake &quot;</span> <span class="variable">$&#123;ANAKIN_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(cmake/msg_color.cmake)</span><br><span class="line"><span class="keyword">include</span>(cmake/utils.cmake)</span><br><span class="line"><span class="keyword">include</span>(cmake/statistic.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_definitions( -Dshared_DEBUG) # define macro</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ROOT_CMAKE_DIR ./cmake)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_PREFIX_PATH <span class="variable">$&#123;CMAKE_PREFIX_PATH&#125;</span> <span class="string">&quot;$&#123;ROOT_CMAKE_DIR&#125;;$&#123;CMAKE_PREFIX_PATH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [cmake] <span class="string">&quot; CMAKE_PREFIX_PATH = $&#123;CMAKE_PREFIX_PATH&#125; for find_package&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find includes in corresponding build directories</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d) </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find anakin-config.cmake file</span></span><br><span class="line"><span class="comment">#include(cmake/anakin-config.cmake)</span></span><br><span class="line"><span class="keyword">find_package</span>(ANAKIN REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;ANAKIN_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#message( [opencv] $&#123;OpenCV_INCLUDE_DIRS&#125; )</span></span><br><span class="line"><span class="comment">#message( [opencv] $&#123;OpenCV_LIBS&#125; )</span></span><br><span class="line"><span class="comment">#message( [anakin] $&#123;ANAKIN_INCLUDE_DIRS&#125; )</span></span><br><span class="line"><span class="comment">#message( [anakin] $&#123;ANAKIN_LIBRARIES&#125; )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">    src/demo.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dl pthread </span></span><br><span class="line"><span class="comment"># error with  -std=c++11 -lpthread -ldl </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">    dl </span><br><span class="line">    pthread</span><br><span class="line">    <span class="variable">$&#123;OpenCV_LIBS&#125;</span> </span><br><span class="line">    <span class="variable">$&#123;ANAKIN_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="src-demo-cpp"><a href="#src-demo-cpp" class="headerlink" title="src&#x2F;demo.cpp"></a>src&#x2F;demo.cpp</h3><p>edit from <code>Anakin/examples/cuda/example_nv_cnn_net.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// opencv</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anakin</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils/logger/logger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework/graph/graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework/core/net/net.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*util to fill tensor*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;saber/core/tensor_op.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> anakin;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> anakin::graph;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> anakin::saber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+------------+-----------------+-------+-----------+</span></span><br><span class="line"><span class="comment">| Input Name |      Shape      | Alias | Data Type |</span></span><br><span class="line"><span class="comment">+------------+-----------------+-------+-----------+</span></span><br><span class="line"><span class="comment">|  input_0   | [64, 1, 28, 28] |  NULL |    NULL   |</span></span><br><span class="line"><span class="comment">+------------+-----------------+-------+-----------+</span></span><br><span class="line"><span class="comment">+-------------+</span></span><br><span class="line"><span class="comment">| Output Name |</span></span><br><span class="line"><span class="comment">+-------------+</span></span><br><span class="line"><span class="comment">|   prob_out  |</span></span><br><span class="line"><span class="comment">+-------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fill_tensor</span><span class="params">(Tensor4d&lt;X86, AK_FLOAT&gt;&amp; h_tensor_in, <span class="type">const</span> cv::Mat&amp; image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write data to tensor</span></span><br><span class="line">    <span class="type">int</span> height = image.rows;</span><br><span class="line">    <span class="type">int</span> width = image.cols;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOG</span>(INFO)&lt;&lt;<span class="string">&quot;height*width =&quot;</span>&lt;&lt; height*width &lt;&lt;std::endl;  <span class="comment">// 784</span></span><br><span class="line">    <span class="built_in">LOG</span>(INFO)&lt;&lt;<span class="string">&quot;h_tensor_in.size() =&quot;</span>&lt;&lt;h_tensor_in.<span class="built_in">size</span>()&lt;&lt;std::endl; <span class="comment">// 784</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span>* tensor_ptr = h_tensor_in.<span class="built_in">mutable_data</span>(); <span class="comment">// int, float or double.</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span>* ptr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; h &lt; height; ++h)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr = image.<span class="built_in">ptr</span>&lt;<span class="type">float</span>&gt;(h); <span class="comment">// row ptr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; width; ++w)</span><br><span class="line">        &#123;</span><br><span class="line">            *tensor_ptr++ = *ptr++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *model_path = <span class="string">&quot;../model/mylenet.anakin.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat image = <span class="built_in">imread</span>(<span class="string">&quot;../image/cat.jpg&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    cv::<span class="built_in">resize</span>(image,image,<span class="built_in">Size</span>(<span class="number">28</span>,<span class="number">28</span>));</span><br><span class="line">    <span class="comment">//imshow(&quot;image&quot;,image);</span></span><br><span class="line">    <span class="comment">//waitKey(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*init graph object, graph is the skeleton of model*/</span></span><br><span class="line">    Graph&lt;NV, AK_FLOAT, Precision::FP32&gt; graph;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*load model from file to init the graph*/</span></span><br><span class="line">    <span class="keyword">auto</span> status = graph.<span class="built_in">load</span>(model_path);</span><br><span class="line">    <span class="keyword">if</span> (!status) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot; [ERROR] &quot;</span> &lt;&lt; status.<span class="built_in">info</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*set net input shape and use this shape to optimize the graph(fusion and init operator),shape is n,c,h,w*/</span></span><br><span class="line">    graph.<span class="built_in">Reshape</span>(<span class="string">&quot;input_0&quot;</span>, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>&#125;);</span><br><span class="line">    graph.<span class="built_in">Optimize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*net_executer is the executor object of model. use graph to init Net*/</span></span><br><span class="line">    <span class="function">Net&lt;NV, AK_FLOAT, Precision::FP32&gt; <span class="title">net_executer</span><span class="params">(graph, <span class="literal">true</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*use input string to get the input tensor of net. for we use NV as target, the tensor of net_executer is on GPU memory*/</span></span><br><span class="line">    <span class="keyword">auto</span> d_tensor_in_p = net_executer.<span class="built_in">get_in</span>(<span class="string">&quot;input_0&quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> valid_shape_in = d_tensor_in_p-&gt;<span class="built_in">valid_shape</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*create tensor located in host*/</span></span><br><span class="line">    Tensor4d&lt;X86, AK_FLOAT&gt; h_tensor_in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*alloc for host tensor*/</span></span><br><span class="line">    h_tensor_in.<span class="built_in">re_alloc</span>(valid_shape_in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*init host tensor by random*/</span></span><br><span class="line">    <span class="comment">//fill_tensor_host_rand(h_tensor_in, -1.0f, 1.0f);</span></span><br><span class="line"></span><br><span class="line">    image.<span class="built_in">convertTo</span>(image, CV_32FC1); <span class="comment">// faster</span></span><br><span class="line">    <span class="built_in">fill_tensor</span>(h_tensor_in,image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*use host tensor to int device tensor which is net input*/</span></span><br><span class="line">    d_tensor_in_p-&gt;<span class="built_in">copy_from</span>(h_tensor_in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*run infer*/</span></span><br><span class="line">    net_executer.<span class="built_in">prediction</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOG</span>(INFO)&lt;&lt;<span class="string">&quot;infer finish&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*get the out put of net, which is a device tensor*/</span></span><br><span class="line">    <span class="keyword">auto</span> d_out=net_executer.<span class="built_in">get_out</span>(<span class="string">&quot;prob_out&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*create another host tensor, and copy the content of device tensor to host*/</span></span><br><span class="line">    Tensor4d&lt;X86, AK_FLOAT&gt; h_tensor_out;</span><br><span class="line">    h_tensor_out.<span class="built_in">re_alloc</span>(d_out-&gt;<span class="built_in">valid_shape</span>());</span><br><span class="line">    h_tensor_out.<span class="built_in">copy_from</span>(*d_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*show output content*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;h_tensor_out.<span class="built_in">valid_size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">LOG</span>(INFO)&lt;&lt;<span class="string">&quot;out [&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;] = &quot;</span>&lt;&lt;h_tensor_out.<span class="built_in">data</span>()[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compile demo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make </span><br><span class="line">./demo </span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>ERR| 16:45:56.00581| 110838.067s|         37CBF8C0| operator_attr.h:94]  you have set the argument: is_reverse , so it&#39;s igrored by anakin
 ERR| 16:45:56.00581| 110838.067s|         37CBF8C0| operator_attr.h:94]  you have set the argument: is_reverse , so it&#39;s igrored by anakin
   0| 16:45:56.00681| 0.098s|         37CBF8C0| parser.cpp:96] graph name: LeNet
   0| 16:45:56.00681| 0.099s|         37CBF8C0| parser.cpp:101] graph in: input_0
   0| 16:45:56.00681| 0.099s|         37CBF8C0| parser.cpp:107] graph out: prob_out
   0| 16:45:56.00742| 0.159s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvBatchnormScaleReluPool
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvBatchnormScaleRelu
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvReluPool
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvBatchnormScale
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : DeconvRelu
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvRelu
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : PermutePower
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : ConvBatchnorm
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : EltwiseRelu
   0| 16:45:56.00742| 0.160s|         37CBF8C0| graph.cpp:153]  processing in-ordered fusion : EltwiseActivation
 WAN| 16:45:56.00743| 0.160s|         37CBF8C0| net.cpp:663] Detect and initial 1 lanes.
   0| 16:45:56.00743| 0.161s|         37CBF8C0| env.h:44] found 1 device(s)
   0| 16:45:56.00743| 0.161s|         37CBF8C0| cuda_device.cpp:45] Device id: 0 , name: GeForce GTX 1060
   0| 16:45:56.00743| 0.161s|         37CBF8C0| cuda_device.cpp:47] Multiprocessors: 10
   0| 16:45:56.00743| 0.161s|         37CBF8C0| cuda_device.cpp:50] frequency:1733MHz
   0| 16:45:56.00743| 0.161s|         37CBF8C0| cuda_device.cpp:52] CUDA Capability : 6.1
   0| 16:45:56.00743| 0.161s|         37CBF8C0| cuda_device.cpp:54] total global memory: 6078MBytes.
 WAN| 16:45:56.00743| 0.161s|         37CBF8C0| net.cpp:667] Current used device id : 0
 WAN| 16:45:56.00744| 0.161s|         37CBF8C0| input.cpp:16] Parsing Input op parameter.
   0| 16:45:56.00744| 0.161s|         37CBF8C0| input.cpp:19]  |-- shape [0]: 1
   0| 16:45:56.00744| 0.161s|         37CBF8C0| input.cpp:19]  |-- shape [1]: 1
   0| 16:45:56.00744| 0.161s|         37CBF8C0| input.cpp:19]  |-- shape [2]: 28
   0| 16:45:56.00744| 0.161s|         37CBF8C0| input.cpp:19]  |-- shape [3]: 28
 ERR| 16:45:56.00744| 0.161s|         37CBF8C0| net.cpp:210] node_ptr-&gt;get_op_name()  sass not support yet.
 ERR| 16:45:56.00744| 0.161s|         37CBF8C0| net.cpp:210] node_ptr-&gt;get_op_name()  sass not support yet.
 WAN| 16:45:57.00269| 0.686s|         37CBF8C0| context.h:40] device index exceeds the number of devices, set to default device(0)!
   0| 16:45:57.00270| 0.687s|         37CBF8C0| net.cpp:300] Temp mem used:        0 MB
   0| 16:45:57.00270| 0.687s|         37CBF8C0| net.cpp:301] Original mem used:    0 MB
   0| 16:45:57.00270| 0.687s|         37CBF8C0| net.cpp:302] Model mem used:       1 MB
   0| 16:45:57.00270| 0.687s|         37CBF8C0| net.cpp:303] System mem used:      153 MB
   0| 16:45:57.00270| 0.687s|         37CBF8C0| demo.cpp:40] height*width =784
   0| 16:45:57.00270| 0.687s|         37CBF8C0| demo.cpp:41] h_tensor_in.size() =784
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:105] infer finish
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [0] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [1] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [2] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [3] = 1
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [4] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [5] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [6] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [7] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [8] = 0
   0| 16:45:57.00270| 0.688s|         37CBF8C0| demo.cpp:117] out [9] = 0
</code></pre>
<h2 id="For-Windows-skip"><a href="#For-Windows-skip" class="headerlink" title="For Windows (skip)"></a>For Windows (skip)</h2><h3 id="version-1"><a href="#version-1" class="headerlink" title="version"></a>version</h3><ul>
<li>windows 10</li>
<li>vs 2015</li>
<li>cmake 3.2.2</li>
<li>cuda 8.0 + cudnn 6.0.21 (same as caffe) sm_61</li>
<li><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.4.0/protobuf-cpp-3.4.0.zip">protobuf 3.4.0</a></li>
</ul>
<h3 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3><p>see <a href="https://kezunlin.me/post/876d75f2/">compile protobuf-cpp on windows 10</a></p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#git clone https://github.com/PaddlePaddle/Anakin.git anakin</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/kezunlin/Anakin.git anakin</span><br><span class="line"><span class="built_in">cd</span> anakin </span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>CUDNN_ROOT &quot;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0/&quot;
PROTOBUF_ROOT &quot;C:/Program Files/protobuf&quot; 

BUILD_SHARED ON
USE_GPU_PLACE ON
USE_OPENMP OFF
USE_OPENCV ON
</code></pre>
<p>generate <code>Anakin.sln</code> and compile with <code>VS 2015</code> with <code>x64 Release</code> mode.</p>
<h3 id="error-fixs"><a href="#error-fixs" class="headerlink" title="error fixs"></a>error fixs</h3><blockquote>
<p>we get 101 errors, hard to fix.<br>skip now.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/PaddlePaddle/Anakin/blob/developing/docker/README.md">anakin with docker on ubuntu</a></li>
<li><a href="https://github.com/PaddlePaddle/Anakin/blob/developing/docs/Manual/Tutorial_ch.md">anakin tutorial</a></li>
<li><a href="https://github.com/PaddlePaddle/Anakin/blob/developing/docs/Manual/Converter_ch.md">Converter</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180903: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>anakin</tag>
        <tag>baidu</tag>
      </tags>
  </entry>
  <entry>
    <title>install and configure cuda 9.2 with cudnn 7.1 on ubuntu 16.04</title>
    <url>//blog/install-and-configure-cuda-9-2-with-cudnn-7-1-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>cuda 9.2</p>
<ul>
<li>nvidia driver 396.54</li>
<li>cuda 9.2 (not install driver,install toolkit and samples)</li>
<li>cudnn 7.1.4 for cuda9.2 (for TensorRT) caffe,tensorflow, baidu anakin</li>
</ul>
<p>cuda 8.0 </p>
<ul>
<li>nvidia driver 384.130</li>
<li>cuda 8.0 (not install driver,install toolkit and samples)</li>
<li>cudnn 6.0.21 for cuda8.0 caffe</li>
</ul>
<h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h3><p>GUI vs tty</p>
<ul>
<li>ctrl+alt+F7 to enter GUI</li>
<li>ctrl+alt+F1-F6 to enter tty1-6, login with(username,password)</li>
</ul>
<p>use <code>fbterm</code> instead of default terminal when we are in tty1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install fbterm</span><br><span class="line"><span class="built_in">sudo</span> fbterm</span><br></pre></td></tr></table></figure>

<p>cuda and cudnn</p>
<ul>
<li>download <code>cuda_9.2.148_396.37_linux.run</code> from <a href="https://developer.nvidia.com/cuda-downloads">cuda</a></li>
<li>download <code>cudnn-9.2-linux-x64-v7.1.tgz</code> from <a href="https://developer.nvidia.com/rdp/cudnn-archive">cudnn</a></li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><h3 id="install-general-dependencies"><a href="#install-general-dependencies" class="headerlink" title="install general dependencies"></a>install general dependencies</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># blas</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install git cmake build-essential</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix missing </span></span><br><span class="line"><span class="comment">#sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span></span><br></pre></td></tr></table></figure>


<h3 id="GUI-mode"><a href="#GUI-mode" class="headerlink" title="GUI mode"></a>GUI mode</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># disable default ubuntu driver</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/modprobe.d/blacklist-nouveau.conf</span><br><span class="line"></span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"><span class="built_in">alias</span> nouveau off</span><br><span class="line"><span class="built_in">alias</span> lbm-nouveau off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> options nouveau modeset=0 | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/modprobe.d/nouveau-kms.conf</span><br><span class="line"><span class="built_in">sudo</span> update-initramfs -u</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="tty-mode"><a href="#tty-mode" class="headerlink" title="tty mode"></a>tty mode</h3><blockquote>
<p>ctrl+alt+F1 to enter tty1, login with(username,password)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> fbterm</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop x-server before install cuda driver</span></span><br><span class="line"><span class="built_in">sudo</span> service lightdm stop</span><br></pre></td></tr></table></figure>

<h4 id="remove-previous-nvidia-driver-cuda-toolkit"><a href="#remove-previous-nvidia-driver-cuda-toolkit" class="headerlink" title="remove previous nvidia driver + cuda toolkit"></a>remove previous nvidia driver + cuda toolkit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove --purge nvidia-*</span><br><span class="line"><span class="comment"># remove 8.0</span></span><br><span class="line"><span class="built_in">sudo</span> /usr/local/cuda-8.0/bin/uninstall_cuda_8.0.pl</span><br><span class="line"><span class="comment"># remove 9.2</span></span><br><span class="line"><span class="built_in">sudo</span> /usr/local/cuda-9.2/bin/uninstall_cuda_9.2.pl</span><br></pre></td></tr></table></figure>

<h4 id="install-nvidia-driver-from-ppa"><a href="#install-nvidia-driver-from-ppa" class="headerlink" title="install nvidia driver from ppa"></a>install nvidia driver from ppa</h4><blockquote>
<p>DO NOT use <code>cuda_xxx_linux.run</code> to install nvidia driver, otherwise we<br>get <code>Loop Login Problem</code> when we reboot.</p>
<p>安装显卡驱动推荐使用官方ppa源的方式进行安装，使用<code>cuda_xxx_linux.run</code>文件离线安装会导致循环登录问题。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudp apt-get update</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-cache search nvidia-*</span><br><span class="line"><span class="comment"># nvidia-384</span></span><br><span class="line"><span class="comment"># nvidia-396</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install nvidia-396</span><br><span class="line"></span><br><span class="line"><span class="comment"># test </span></span><br><span class="line"><span class="built_in">sudo</span> nvidia-smi</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### install cuda toolkit from run file</span></span><br><span class="line"></span><br><span class="line">&gt; 1. DO NOT install nvidia driver, install cuda toolkit + samples.</span><br><span class="line">&gt;</span><br><span class="line">&gt; 2. use default install path `/usr/local/cuda-9.2`</span><br><span class="line">&gt; </span><br><span class="line">&gt; 3. use `/usr/local/cuda-9.2/bin/uninstall_cuda_9.2.pl` to uninstall </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">chmod</span> +x ./cuda_9.2.148_396.37_linux.run</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using unspported compiler---&gt; override</span></span><br><span class="line">./cuda_9.2.148_396.37_linux.run --override</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>---------------------------------------
Do you accept the previously read EULA? 
(accept/decline/quit): accept

Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 396.37? (y)es/(n)o/(q)uit: no

Install the CUDA 9.2 Toolkit? 
(y)es/(n)o/(q)uit: yes

Enter Toolkit Location 
    [ default is /usr/local/cuda-9.2 ]:

Do you want to install a symbolic link at /usr/local/cuda? (y)es/(n)o/(q)uit: yes


Install the CUDA 9.2 Samples? 
(y)es/(n)o/(q)uit: yes

Enter CUDA Samples Location 
    [ default is /home/kezunlin ]: 


Installing the CUDA Toolkit in /usr/local/cuda-9.2 ...
Installing the CUDA Samples in /home/kezunlin ...

===========
= Summary =
===========

Driver:   Not Selected
Toolkit:  Installed in /usr/local/cuda-9.2
Samples:  Installed in /home/kezunlin

Please make sure that
 -   PATH includes /usr/local/cuda-9.2/bin
 -   LD_LIBRARY_PATH includes /usr/local/cuda-9.2/lib64, or, add /usr/local/cuda-9.2/lib64 to /etc/ld.so.conf and run ldconfig as root

To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.2/bin

Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.2/doc/pdf for detailed information on setting up CUDA.

***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.2 functionality to work.
To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this run file:
    sudo &lt;CudaInstaller&gt;.run -silent -driver

Logfile is /tmp/cuda_install_6659.log
</code></pre>
<h3 id="reboot-to-enter-GUI"><a href="#reboot-to-enter-GUI" class="headerlink" title="reboot to enter GUI"></a>reboot to enter GUI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot </span><br></pre></td></tr></table></figure>

<blockquote>
<p>OK. we no longer have <code>Loop Login Problem</code>.</p>
</blockquote>
<h3 id="add-library-path"><a href="#add-library-path" class="headerlink" title="add library path"></a>add library path</h3><p>system env </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># for cuda and cudnn</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>

<p>or by conf file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ld.so.conf.d/cuda.conf</span><br><span class="line">/usr/local/cuda/lib64</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> ldconifg</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="nvidia-smi"><a href="#nvidia-smi" class="headerlink" title="nvidia-smi"></a>nvidia-smi</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">Tue Sep 18 10:35:55 2018       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 396.54                 Driver Version: 396.54                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1060    Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| N/A   58C    P0    31W /  N/A |    288MiB /  6078MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0      1636      G   /usr/lib/xorg/Xorg                           164MiB |</span><br><span class="line">|    0      2569      G   compiz                                        40MiB |</span><br><span class="line">|    0      4828      G   ...-token=2DAB0000EFF3321D4D304928FA64B811    81MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>

<h4 id="nvcc"><a href="#nvcc" class="headerlink" title="nvcc"></a>nvcc</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2018 NVIDIA Corporation</span><br><span class="line">Built on Tue_Jun_12_23:07:04_CDT_2018</span><br><span class="line">Cuda compilation tools, release 9.2, V9.2.148</span><br></pre></td></tr></table></figure>

<h4 id="deviceQuery"><a href="#deviceQuery" class="headerlink" title="deviceQuery"></a>deviceQuery</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/NVIDIA_CUDA-9.2_Samples/1_Utilities/deviceQuery</span><br><span class="line">make </span><br><span class="line">./deviceQuery </span><br></pre></td></tr></table></figure>

<p>output </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line">    CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: <span class="string">&quot;GeForce GTX 1060&quot;</span></span><br><span class="line">    CUDA Driver Version / Runtime Version          9.2 / 9.2</span><br><span class="line">    CUDA Capability Major/Minor version number:    6.1</span><br><span class="line">    Total amount of global memory:                 6078 MBytes (6373572608 bytes)</span><br><span class="line">    (10) Multiprocessors, (128) CUDA Cores/MP:     1280 CUDA Cores</span><br><span class="line">    GPU Max Clock rate:                            1733 MHz (1.73 GHz)</span><br><span class="line">    Memory Clock rate:                             4004 Mhz</span><br><span class="line">    Memory Bus Width:                              192-bit</span><br><span class="line">    L2 Cache Size:                                 1572864 bytes</span><br><span class="line">    Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)</span><br><span class="line">    Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers</span><br><span class="line">    Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers</span><br><span class="line">    Total amount of constant memory:               65536 bytes</span><br><span class="line">    Total amount of shared memory per block:       49152 bytes</span><br><span class="line">    Total number of registers available per block: 65536</span><br><span class="line">    Warp size:                                     32</span><br><span class="line">    Maximum number of threads per multiprocessor:  2048</span><br><span class="line">    Maximum number of threads per block:           1024</span><br><span class="line">    Max dimension size of a thread block (x,y,z): (1024, 1024, 64)</span><br><span class="line">    Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)</span><br><span class="line">    Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">    Texture alignment:                             512 bytes</span><br><span class="line">    Concurrent copy and kernel execution:          Yes with 2 copy engine(s)</span><br><span class="line">    Run time <span class="built_in">limit</span> on kernels:                     Yes</span><br><span class="line">    Integrated GPU sharing Host Memory:            No</span><br><span class="line">    Support host page-locked memory mapping:       Yes</span><br><span class="line">    Alignment requirement <span class="keyword">for</span> Surfaces:            Yes</span><br><span class="line">    Device has ECC support:                        Disabled</span><br><span class="line">    Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">    Device supports Compute Preemption:            Yes</span><br><span class="line">    Supports Cooperative Kernel Launch:            Yes</span><br><span class="line">    Supports MultiDevice Co-op Kernel Launch:      Yes</span><br><span class="line">    Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0</span><br><span class="line">    Compute Mode:</span><br><span class="line">        &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.2, CUDA Runtime Version = 9.2, NumDevs = 1</span><br><span class="line">Result = PASS</span><br></pre></td></tr></table></figure>

<p>we get <code>Result = PASS</code>.</p>
<h3 id="install-cudnn"><a href="#install-cudnn" class="headerlink" title="install cudnn"></a>install cudnn</h3><p>download <code>cudnn-9.2-linux-x64-v7.1.tgz</code> for ubuntu 16.04</p>
<ul>
<li>copy <code>include</code> to <code>/usr/local/cuda-9.2/include</code></li>
<li>copy <code>lib64</code> to <code>/usr/local/cuda-9.2/lib64</code></li>
</ul>
<p>commands </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf cudnn-9.2-linux-x64-v7.1.tgz </span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> cuda/include/cudnn.h /usr/local/cuda/include/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> cuda/lib64/* /usr/local/cuda/lib64/</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/">setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180917: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>cudnn</tag>
        <tag>nvidia</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install opencv on ubuntu 16.04</title>
    <url>//blog/compile-opencv-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/15f5c3e8/">Part 1: compile opencv on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/6580691f/">Part 2: compile opencv with CUDA support on windows 10</a></li>
<li><a href="https://kezunlin.me/post/61d55ab4/">Part 3: opencv mat for loop</a></li>
<li><a href="https://kezunlin.me/post/7a6ba82e/">Part 4: speed up opencv image processing with openmp</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>ubuntu: 16.04</li>
<li>opencv: 3.3.0</li>
</ul>
<h3 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake-gui</span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">wget https://github.com/opencv/opencv/archive/3.1.0.zip</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> opencv-3.1.0</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># may take several minutes</span></span><br><span class="line"><span class="built_in">sudo</span> make -j8 </span><br><span class="line"></span><br><span class="line"><span class="comment"># install to /usr/local/bin</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h3 id="check-version"><a href="#check-version" class="headerlink" title="check version"></a>check version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opencv_version</span><br><span class="line">3.3.0</span><br></pre></td></tr></table></figure>

<h3 id="python-cv2"><a href="#python-cv2" class="headerlink" title="python cv2"></a>python cv2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt; cv2.__version__</span><br></pre></td></tr></table></figure>

<h3 id="pip-install-opencv"><a href="#pip-install-opencv" class="headerlink" title="pip install opencv"></a>pip install opencv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">pip install opencv-contrib-python</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">&gt;import cv2</span><br><span class="line">&gt;cv2.__version__</span><br><span class="line"><span class="string">&#x27;3.3.0&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>for virtualenv, see <a href="https://kezunlin.me/post/f07cae6a/">python virtualenv tutorial</a></p>
</blockquote>
<h3 id="opencv-samples"><a href="#opencv-samples" class="headerlink" title="opencv samples"></a>opencv samples</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> samples</span><br><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat image = <span class="built_in">imread</span>(<span class="string">&quot;../image/cat.jpg&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find includes in corresponding build directories</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED COMPONENTS core highgui imgproc features2d calib3d) </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( [opencv] <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">message</span>( [opencv] <span class="variable">$&#123;$&#123;OpenCV_LIBS&#125;</span>&#125; )</span><br><span class="line"><span class="keyword">message</span>( [opencv] <span class="variable">$&#123;$&#123;OpenCV_LIBRARIES&#125;</span>&#125; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">    demo.cpp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/6580691f/">Guide to compile and use opencv with CUDA support on windows 10</a></li>
<li><a href="https://stackoverflow.com/questions/9842127/using-a-mask-with-an-adaptive-threshold">opencv with openmp</a></li>
<li><a href="https://stackoverflow.com/questions/21990580/best-way-to-parallelize-opencv-cvcanny-with-openmp">opencv WITH_OPENMP</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180919:  created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>openmp</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV OCR and text recognition with Tesseract on ubuntu 16.04</title>
    <url>//blog/OpenCV-OCR-and-text-recognition-with-Tesseract-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>ubuntu: 16.04</li>
<li>python: 3.5.2</li>
<li>opencv: 3.4.2+</li>
<li>tesseract: v4 (binary)</li>
<li>pytesseract: 0.2.4 (python bindings)</li>
</ul>
<h3 id="install-python"><a href="#install-python" class="headerlink" title="install python"></a>install python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-dev python3-pip </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### install opencv </span></span><br><span class="line">```bash</span><br><span class="line">workon py3 </span><br><span class="line">pip install opencv-contrib-python</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"><span class="comment">### install tesseract</span></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:alex-p/tesseract-ocr</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt install tesseract-ocr</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The latest release of <code>Tesseract (v4)</code> supports deep learning-based OCR that is significantly more accurate.</p>
</blockquote>
<blockquote>
<p>The underlying OCR engine itself utilizes a <code>Long Short-Term Memory (LSTM) network</code>, a kind of <code>Recurrent Neural Network (RNN)</code>.</p>
</blockquote>
<p>check </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract -v</span><br><span class="line">tesseract 4.0.0-beta.4-138-g2093</span><br><span class="line">  leptonica-1.76.0</span><br><span class="line">  libgif 5.1.4 : libjpeg 8d (libjpeg-turbo 1.4.2) : libpng 1.2.54 : libtiff 4.0.6 : zlib 1.2.8 : libwebp 0.4.4 : libopenjp2 2.1.2</span><br><span class="line">  Found AVX2</span><br><span class="line">  Found AVX</span><br><span class="line">  Found SSE</span><br></pre></td></tr></table></figure>

<h3 id="install-Tesseract-Python-bindings"><a href="#install-Tesseract-Python-bindings" class="headerlink" title="install Tesseract + Python bindings"></a>install Tesseract + Python bindings</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">pip install pytesseract</span><br><span class="line">pip install pillow imutils</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="tesseract"><a href="#tesseract" class="headerlink" title="tesseract"></a>tesseract</h2><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><pre><code>tesseract --help
Usage:
  tesseract --help | --help-extra | --version
  tesseract --list-langs
  tesseract imagename outputbase [options...] [configfile...]

OCR options:
  -l LANG[+LANG]        Specify language(s) used for OCR.
NOTE: These options must occur before any configfile.

Single options:
  --help                Show this help message.
  --help-extra          Show extra help for advanced users.
  --version             Show version information.
  --list-langs          List available languages for tesseract engine.
</code></pre>
<h3 id="help-extra"><a href="#help-extra" class="headerlink" title="help-extra"></a>help-extra</h3><pre><code>tesseract --help-extra
Usage:
  tesseract --help | --help-extra | --help-psm | --help-oem | --version
  tesseract --list-langs [--tessdata-dir PATH]
  tesseract --print-parameters [options...] [configfile...]
  tesseract imagename|imagelist|stdin outputbase|stdout [options...] [configfile...]

OCR options:
  --tessdata-dir PATH   Specify the location of tessdata path.
  --user-words PATH     Specify the location of user words file.
  --user-patterns PATH  Specify the location of user patterns file.
  -l LANG[+LANG]        Specify language(s) used for OCR.
  -c VAR=VALUE          Set value for config variables.
                        Multiple -c arguments are allowed.
  --psm NUM             Specify page segmentation mode.
  --oem NUM             Specify OCR Engine mode.
NOTE: These options must occur before any configfile.

Page segmentation modes:
  0    Orientation and script detection (OSD) only.
  1    Automatic page segmentation with OSD.
  2    Automatic page segmentation, but no OSD, or OCR.
  3    Fully automatic page segmentation, but no OSD. (Default)
  4    Assume a single column of text of variable sizes.
  5    Assume a single uniform block of vertically aligned text.
  6    Assume a single uniform block of text.
  7    Treat the image as a single text line.
  8    Treat the image as a single word.
  9    Treat the image as a single word in a circle.
 10    Treat the image as a single character.
 11    Sparse text. Find as much text as possible in no particular order.
 12    Sparse text with OSD.
 13    Raw line. Treat the image as a single text line,
       bypassing hacks that are Tesseract-specific.

OCR Engine modes: (see https://github.com/tesseract-ocr/tesseract/wiki#linux)
  0    Legacy engine only.
  1    Neural nets LSTM engine only.
  2    Legacy + LSTM engines.
  3    Default, based on what is available.

Single options:
  -h, --help            Show minimal help message.
  --help-extra          Show extra help for advanced users.
  --help-psm            Show page segmentation modes.
  --help-oem            Show OCR Engine modes.
  -v, --version         Show version information.
  --list-langs          List available languages for tesseract engine.
  --print-parameters    Print tesseract parameters.
</code></pre>
<h3 id="run-script"><a href="#run-script" class="headerlink" title="run script"></a>run script</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python text_recognition.py --east frozen_east_text_detection.pb \</span><br><span class="line">    --image images/example_01.jpg</span><br><span class="line">[INFO] loading EAST text detector...</span><br><span class="line">OCR TEXT</span><br><span class="line">========</span><br><span class="line">OH OK</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/">OpenCV OCR and text recognition with Tesseract</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180920:  created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>ocr</tag>
        <tag>tesseract</tag>
      </tags>
  </entry>
  <entry>
    <title>how to use linux xargs command</title>
    <url>//blog/linux-xargs-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="param-input-stdin"><a href="#param-input-stdin" class="headerlink" title="param input &amp;&amp; stdin"></a>param input &amp;&amp; stdin</h3><p>linux命令可以从两个地方读取要处理的内容</p>
<ul>
<li>通过命令行参数输入,通过main函数的argc,argv获取</li>
<li>标准输入stdin,通过scanf或者cin获取</li>
</ul>
<p>然后产生输出</p>
<ul>
<li>标准输出stdout,通过printf或者cout输出</li>
</ul>
<p>命令类型</p>
<ul>
<li>部分命令可以接受参数输入＋标准输入stdin，比如cat、grep等。</li>
<li>部分命令只接受参数输入，不接受标准输入stdin，比如kill、rm等。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>*argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// argc, argv</span></span><br><span class="line">    <span class="comment">// cin, scanf </span></span><br><span class="line">    <span class="comment">// cout printf</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指定参数输入，则从参数输入读取内容;<br>未指定或者在命令的最后使用 <code>-</code>则从标准输入读取内容;<br>管道<code>｜</code>将stdout重定向到后续命令的stdin;</p>
</blockquote>
<h3 id="cat-grep"><a href="#cat-grep" class="headerlink" title="cat&#x2F;grep"></a>cat&#x2F;grep</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><ul>
<li><p>指定参数输入1.txt，文件存在【从参数输入读取】</p>
<pre><code>cat 1.txt
hello world 
</code></pre>
</li>
<li><p>指定参数输入1.txt，文件不存在【从参数输入读取】</p>
<pre><code>cat 1.txt2
cat: 1.txt2: No such file or directory
</code></pre>
</li>
<li><p>未指定参数输入【从stdin读取】</p>
<pre><code>cat
hello
hello
^C
</code></pre>
</li>
<li><p>使用<code>-</code>【从stdin读取】</p>
<pre><code>cat -
hello
hello
^C
</code></pre>
</li>
<li><p>指定参数输入1.txt，文件存在+使用<code>-</code>【从参数输入读取+stdin读取】</p>
<pre><code>cat 1.txt -
hello world 
hello
hello
^C
</code></pre>
</li>
</ul>
<h4 id="cat-pipe"><a href="#cat-pipe" class="headerlink" title="cat + pipe"></a>cat + pipe</h4><ul>
<li><p>指定参数输入1.txt，文件存在 + stdin【only从参数输入读取】</p>
<pre><code>echo &#39;hello&#39; | cat 1.txt
hello world 
</code></pre>
</li>
<li><p>指定参数输入1.txt，文件不存在【only从参数输入读取】</p>
<pre><code>echo &#39;hello&#39; | cat 1.txt2
cat: 1.txt2: No such file or directory
</code></pre>
</li>
<li><p>未指定参数输入【从stdin读取】</p>
<pre><code>echo &#39;hello&#39; |　cat
hello
</code></pre>
</li>
<li><p>使用<code>-</code>【从stdin读取】</p>
<pre><code>echo &#39;hello&#39; |　cat -
hello
</code></pre>
</li>
<li><p>指定参数输入1.txt，文件存在+使用<code>-</code>【从参数输入读取+stdin读取】</p>
<pre><code>echo &#39;hello&#39; |　cat 1.txt -
hello world 
hello
</code></pre>
</li>
</ul>
<h4 id="grep-pipe"><a href="#grep-pipe" class="headerlink" title="grep + pipe"></a>grep + pipe</h4><ul>
<li><p>指定参数输入1.txt，文件存在 + stdin【only从参数输入读取】</p>
<pre><code>echo &#39;hello&#39; | grep &#39;hello&#39; 1.txt
hello world 
</code></pre>
</li>
<li><p>指定参数输入1.txt，文件存在+使用<code>-</code>【从参数输入读取+stdin读取】</p>
<pre><code>echo &#39;hello&#39; | grep &#39;hello&#39; 1.txt -
1.txt:hello world
(standard input):hello
</code></pre>
</li>
</ul>
<h3 id="kill-rm"><a href="#kill-rm" class="headerlink" title="kill&#x2F;rm"></a>kill&#x2F;rm</h3><ul>
<li><p>kill不接受stdin</p>
<pre><code>echo &#39;516&#39; | kill
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
</code></pre>
</li>
<li><p>rm 不接受stdin</p>
<pre><code>  echo &#39;test&#39; | rm -f
</code></pre>
</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>如何实现<code>echo &#39;516&#39; | kill</code>类似的效果?</p>
<ul>
<li><p>method 1</p>
<pre><code>  kill `ps -ef | grep &#39;xxx&#39;`  # same as   kill $pid
</code></pre>
</li>
<li><p>method 2</p>
<pre><code>  for pid in $(ps -aux | grep &quot;some search&quot; | awk &#39;&#123;print $2&#125;&#39;); 				do kill -9 $pid; 
  done 
</code></pre>
</li>
<li><p>method 3</p>
<pre><code>  ps -ef | grep &#39;xxx&#39; | xargs kill
</code></pre>
</li>
</ul>
<p>xargs命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数输入</p>
<blockquote>
<p>xargs可以实现命令的参数输入</p>
</blockquote>
<h3 id="xargs-vs-pipe"><a href="#xargs-vs-pipe" class="headerlink" title="xargs vs pipe"></a>xargs vs pipe</h3><ul>
<li><p>pipe 使得–help成为cat的stdin</p>
<pre><code>$ echo &#39;--help&#39; | cat 
--help
</code></pre>
</li>
<li><p>xargs使得–help成为cat的命令行参数输入,等价于 <code>cat --help</code></p>
<pre><code>$ echo &#39;--help&#39; | xargs cat 
Usage: cat [OPTION]... [FILE]...
Concatenate FILE(s) to standard output.

With no FILE, or when FILE is -, read standard input.

  -A, --show-all           equivalent to -vET
  -b, --number-nonblank    number nonempty output lines, overrides -n
  -e                       equivalent to -vE
  -E, --show-ends          display $ at end of each line
  -n, --number             number all output lines
  -s, --squeeze-blank      suppress repeated empty output lines
  -t                       equivalent to -vT
  -T, --show-tabs          display TAB characters as ^I
  -u                       (ignored)
  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB
      --help     display this help and exit
      --version  output version information and exit

Examples:
  cat f - g  Output f&#39;s contents, then standard input, then g&#39;s contents.
  cat        Copy standard input to standard output.

GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
Full documentation at: &lt;http://www.gnu.org/software/coreutils/cat&gt;
or available locally via: info &#39;(coreutils) cat invocation&#39;
</code></pre>
</li>
</ul>
<p><code>echo &#39;1.txt 2.txt&#39; | xargs cat</code> 等价于 <code>cat 1.txt 2.txt</code></p>
<h3 id="xargs-options"><a href="#xargs-options" class="headerlink" title="xargs options"></a>xargs options</h3><h4 id="d-选项"><a href="#d-选项" class="headerlink" title="-d 选项"></a>-d 选项</h4><p>默认情况下xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个之后当作命令行参数传递给其后面的命令，并运行之，我们可以使用 -d 命令指定分隔符</p>
<pre><code>  echo &#39;11@22@33&#39; | xargs echo 
  11@22@33

  echo &#39;11@22@33&#39; | xargs -d &#39;@&#39; echo 
  11 22 33
</code></pre>
<p>等价于 </p>
<pre><code>echo 11 22 33
</code></pre>
<h4 id="p-选项"><a href="#p-选项" class="headerlink" title="-p 选项"></a>-p 选项</h4><p>使用该选项之后xargs并不会马上执行其后面的命令，而是输出即将要执行的完整的命令(包括命令以及传递给命令的命令行参数)，询问是否执行，输入 y 才继续执行，否则不执行。这种方式可以清楚的看到执行的命令是什么样子，也就是xargs传递给命令的参数是什么</p>
<pre><code>  echo &#39;11@22@33&#39; | xargs -p -d &#39;@&#39;  echo 
  echo 11 22 33
   ?...yes
  11 22 33
</code></pre>
<h4 id="n-选项"><a href="#n-选项" class="headerlink" title="-n 选项"></a>-n 选项</h4><p>该选项表示将xargs生成的命令行参数，每次传递几个参数给其后面的命令执行，例如如果xargs从标准输入中读入内容，然后以分隔符分割之后生成的命令行参数有10个，使用 -n 3 之后表示一次传递给xargs后面的命令是3个参数，因为一共有10个参数，所以要执行4次，才能将参数用完。</p>
<pre><code>  echo &#39;11@22@33@44@55@66@77@88@99@00&#39; | xargs -d &#39;@&#39; -n 3 echo 
  11 22 33
  44 55 66
  77 88 99
  00
</code></pre>
<p>等价于</p>
<pre><code>echo 11 22 33
echo 44 55 66
echo 77 88 99
echo 00
</code></pre>
<p>使用<code>-n 1</code>得到类似于对循环处理的结果。</p>
<p>默认一次送入n个参数，一次处理完毕</p>
<pre><code>ls *.txt | xargs -p cat 
cat 1.txt 2.txt 3.txt ?...y
111
222
333


等价与
cat 1.txt 2.txt 3.txt
111
222
333
</code></pre>
<p><code>-n 1</code>一次送入１个参数，相当于循环处理了３次，每次处理一个文件</p>
<pre><code>ls *.txt | xargs -n 1 -p cat 
cat 1.txt ?...y
111
cat 2.txt ?...y
222
cat 3.txt ?...y
333


 
等价与
cat 1.txt
111

cat ２.txt
222

cat ３.txt
333
</code></pre>
<h4 id="E-选项"><a href="#E-选项" class="headerlink" title="-E 选项"></a>-E 选项</h4><p>有的系统的xargs版本可能是<code>-e  eof-str</code>,该选项指定一个字符串，当xargs解析出多个命令行参数的时候，如果搜索到-e指定的命令行参数，则只会将-e指定的命令行参数之前的参数(不包括-e指定的这个参数)传递给xargs后面的命令</p>
<pre><code>echo &#39;11 22 33 44&#39; | xargs -E &#39;33&#39; echo 
11 22 
</code></pre>
<blockquote>
<p>-E只有在xargs不指定-d或者-0的时候有效<br>-0 选项表示以 ‘\0’ 为分隔符，一般与find结合使用<br>-0 等同于 -d ‘\0’</p>
</blockquote>
<p>使用<code>-d</code> </p>
<pre><code>  echo &#39;11@22@33@44@55@66@77@88@99@00 aa 33 bb&#39; | xargs -E &#39;33&#39; -d &#39;@&#39; -p  echo
  xargs: warning: the -E option has no effect if -0 or -d is used.

  echo 11 22 33 44 55 66 77 88 99 00 aa 33 bb
   ?...y
  11 22 33 44 55 66 77 88 99 00 aa 33 bb
</code></pre>
<p>不使用<code>-d</code></p>
<pre><code>  echo &#39;11@22@33@44@55@66@77@88@99@00 aa 33 bb&#39; | xargs -E &#39;33&#39; -p  echo
  echo 11@22@33@44@55@66@77@88@99@00 aa ?...y
  11@22@33@44@55@66@77@88@99@00 aa
</code></pre>
<h4 id="0-find"><a href="#0-find" class="headerlink" title="-0 &amp;&amp; find"></a>-0 &amp;&amp; find</h4><pre><code>find . -name &quot;*.txt&quot;
./2.txt
./3.txt
./1.txt     =&gt; 默认情况下find的输出结果是每条记录后面加上换行，也就是每条记录是一个新行

find . -name &quot;*.txt&quot; -print0
./2.txt./3.txt./1.txt     =&gt; 加上 -print0 参数表示find输出的每条结果后面加上 &#39;\0&#39; 而不是换行

find . -name &quot;*.txt&quot; -print0 | xargs -0 echo 
./2.txt ./3.txt ./1.txt

等同于
find . -name &quot;*.txt&quot; -print0 | xargs -d &#39;\0&#39; echo 
./2.txt ./3.txt ./1.txt

默认使用空白分隔符(换行符也是)
find . -name &quot;*.txt&quot;  | xargs  echo 
./2.txt ./3.txt ./1.txt
</code></pre>
<h3 id="xargs-as-loop"><a href="#xargs-as-loop" class="headerlink" title="xargs as loop"></a>xargs as loop</h3><p>one image at once </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python text_recognition.py  --east frozen_east_text_detection.pb --image 1.jpg</span><br></pre></td></tr></table></figure>

<p>for loop </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find roi/ -name <span class="string">&quot;*.jpg&quot;</span> | xargs -n 1 python text_recognition.py  --east frozen_east_text_detection.pb --image </span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> roi/*.jpg | xargs -n 1 python text_recognition.py  --east frozen_east_text_detection.pb --image </span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/wangqiguo/p/6464234.html">xargs命令详解，xargs与管道的区别</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180920:  created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>xargs</tag>
      </tags>
  </entry>
  <entry>
    <title>python virtualenv tutorial</title>
    <url>//blog/python-virtualenv-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-python"><a href="#install-python" class="headerlink" title="install python"></a>install python</h3><p>install commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python3-pip python3-dev</span><br><span class="line"></span><br><span class="line">pip3 -V</span><br><span class="line">pip 8.1.1 from /usr/lib/python3/dist-packages (python 3.5)</span><br></pre></td></tr></table></figure>

<h3 id="change-pip-source"><a href="#change-pip-source" class="headerlink" title="change pip source"></a>change pip source</h3><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><p>edit <code>.pip/pip.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>edit <code>C:\Users\zunli\AppData\Roaming\pip\pip.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span><br></pre></td></tr></table></figure>

<h3 id="temp-solutions"><a href="#temp-solutions" class="headerlink" title="temp solutions"></a>temp solutions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==1.4.0</span><br></pre></td></tr></table></figure>

<h3 id="install-virtualenv"><a href="#install-virtualenv" class="headerlink" title="install virtualenv"></a>install virtualenv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip3 install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure>

<p>vim <code>.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for virtualenv and virtualenvwrapper</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.local</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">source</span> /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>

<p>source <code>.bashrc</code></p>
<h4 id="mkvirtualenv"><a href="#mkvirtualenv" class="headerlink" title="mkvirtualenv"></a>mkvirtualenv</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kezunlin@ke: mkvirtualenv py3 -p python3</span><br><span class="line">(py3) kezunlin@ke:~$ </span><br></pre></td></tr></table></figure>

<h4 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="variable">$WORKON_HOME</span></span><br><span class="line">mkvirtualenv py3 -p python3</span><br><span class="line">mkvirtualenv py2 -p python2</span><br><span class="line">rmvirtualenv py3</span><br><span class="line"></span><br><span class="line">lsvirtualenv </span><br><span class="line">lssitepackages</span><br><span class="line"></span><br><span class="line">workon py3</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Opencv-with-virtualenv"><a href="#Opencv-with-virtualenv" class="headerlink" title="Opencv with virtualenv"></a>Opencv with virtualenv</h2><h3 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h3><p>OpenCV should now be installed in </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate cv2.so</span><br><span class="line">/usr/local/lib/python2.7/dist-packages/cv2.so</span><br></pre></td></tr></table></figure>

<p>However, our <code>py2</code>  virtual environment is located in our home directory — thus to use OpenCV within our <code>py2</code> environment, we first need to sym-link OpenCV into the site-packages  directory of the <code>py2</code>  virtual environment:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.local/py2/lib/python2.7/site-packages/</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/lib/python2.7/site-packages/cv2.so cv2.so</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/lib/python2.7/dist-packages/cv2.so cv2.so</span><br><span class="line"> ```   </span><br><span class="line"></span><br><span class="line">import opencv </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">workon py2</span><br><span class="line">python</span><br><span class="line">&gt;import cv2</span><br><span class="line">&gt;<span class="built_in">print</span>(cv2.__version__)</span><br><span class="line"><span class="string">&#x27;3.1.0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><p>you may get error </p>
<pre><code>ImportError: dynamic module does not define init function (PyInit_cv2) 
</code></pre>
<p>when import <code>cv2</code> in python3 (no such problem in python2).</p>
<p>install <code>opencv-python</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">pip3 install opencv-contrib-python</span><br></pre></td></tr></table></figure>

<p>test version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3</span><br><span class="line">python</span><br><span class="line">import cv2</span><br><span class="line"><span class="built_in">print</span>(cv2.__version__)</span><br><span class="line"><span class="string">&#x27;3.4.2&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="install-pycharm"><a href="#install-pycharm" class="headerlink" title="install pycharm"></a>install pycharm</h2><h3 id="apt-get-slow"><a href="#apt-get-slow" class="headerlink" title="apt-get (slow)"></a>apt-get (slow)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:mystic-mirage/pycharm</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># no free</span></span><br><span class="line"><span class="built_in">sudo</span> apt install pycharm</span><br><span class="line"></span><br><span class="line"><span class="comment"># free</span></span><br><span class="line"><span class="built_in">sudo</span> apt install pycharm-community</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="built_in">sudo</span> apt remove pycharm pycharm-community &amp;&amp; <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>

<h3 id="offical-faster"><a href="#offical-faster" class="headerlink" title="offical (faster)"></a>offical (faster)</h3><p>download from <a href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=linux">here</a></p>
<p>start by</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh pycharm.sh</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/iamjqy/p/7000874.html">install pycharm</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20180920: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>install and use Superdog to encrypt program on windows 10</title>
    <url>//blog/Superdog-tutorial-on-windows-10/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Superdog-soft"><a href="#Superdog-soft" class="headerlink" title="Superdog soft"></a>Superdog soft</h3><p>2个dog:</p>
<ul>
<li>开发狗：Superdog公司给客户公司(kezunlin)提供的开发狗，包含公司的vendor_code，相当于管理员。不要遗失。</li>
<li>超级狗：可以通过软件写入feature_id交付用户。可以有多个超级狗。</li>
</ul>
<p>如何给超级狗写入特征id?</p>
<blockquote>
<p>提示：写入特征之前，必须确保开发狗+超级狗都连接在电脑。</p>
</blockquote>
<p>（1）安装windows版本加密狗软件到<code>C:\Program Files (x86)\SafeNet\SuperDog\2.3\</code>。<br>（2）在线下载开发商代码。<br>（3）打开授权管理工具，添加特征。例如feature_id&#x3D;101,然后编程到超级狗。</p>
<blockquote>
<p>开发商代码会写入vendor_code到<code>C:\Program Files (x86)\SafeNet\SuperDog\2.3\VendorCodes\BYAUY.hvc</code></p>
</blockquote>
<h3 id="Superdog-sample"><a href="#Superdog-sample" class="headerlink" title="Superdog sample"></a>Superdog sample</h3><p>参见 <code>C:\Program Files (x86)\SafeNet\SuperDog\2.3\Samples\Licensing\C</code></p>
<h3 id="Superdog-C-SDK"><a href="#Superdog-C-SDK" class="headerlink" title="Superdog C SDK"></a>Superdog C SDK</h3><p>从API中整理出C版本的SDK，供后面使用。</p>
<pre><code>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2014/6/30      8:43           9521 dog_api.h
-a----       2016/11/10     19:10        3297280 dog_windows_3150436.dll
-a----       2016/11/10     19:10           5668 dog_windows_3150436.lib
-a----       2016/11/10     19:10        3632128 dog_windows_x64_3150436.dll
-a----       2016/11/10     19:10           5530 dog_windows_x64_3150436.lib
</code></pre>
<h3 id="superdog-config-cmake"><a href="#superdog-config-cmake" class="headerlink" title="superdog-config.cmake"></a>superdog-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(SUPERDOG_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(SUPERDOG_VERSION <span class="number">2.3</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(SUPERDOG_ROOT_DIR <span class="string">&quot;C:/car_libs/superdog-c-2.3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(SUPERDOG_INCLUDE_DIR NAMES superdog/dog_api.h PATHS <span class="string">&quot;$&#123;SUPERDOG_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(SUPERDOG_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(SUPERDOG_LIBRARY NAMES dog_windows_x64_3150436.lib PATHS <span class="string">&quot;$&#123;SUPERDOG_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(SUPERDOG_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(SUPERDOG_INCLUDE_DIRS <span class="variable">$&#123;SUPERDOG_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(SUPERDOG_LIBRARIES <span class="variable">$&#123;SUPERDOG_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;superdog-config.cmake &quot;</span> <span class="variable">$&#123;SUPERDOG_ROOT_DIR&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><h3 id="MyDogApiImpl-h"><a href="#MyDogApiImpl-h" class="headerlink" title="MyDogApiImpl.h"></a>MyDogApiImpl.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;superdog/dog_api.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;errorprinter.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDogApiImpl</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyDogApiImpl</span>(<span class="type">int</span> feature_id, <span class="type">const</span> std::string&amp; vendor_code);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">logout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">dog_handle_t</span>   handle;</span><br><span class="line">	<span class="type">int</span> m_feature_id;</span><br><span class="line">	std::string m_vendor_code;</span><br><span class="line"></span><br><span class="line">	ErrorPrinter err;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="MyDogApiImpl-cpp"><a href="#MyDogApiImpl-cpp" class="headerlink" title="MyDogApiImpl.cpp"></a>MyDogApiImpl.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydog_api_impi.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyDogApiImpl::<span class="built_in">MyDogApiImpl</span>(<span class="type">int</span> feature_id, <span class="type">const</span> std::string&amp; vendor_code)</span><br><span class="line">&#123;</span><br><span class="line">	m_feature_id = feature_id;</span><br><span class="line">	m_vendor_code = vendor_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyDogApiImpl::login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">dog_status_t</span> status = <span class="built_in">dog_login</span>(</span><br><span class="line">		m_feature_id,</span><br><span class="line">		(<span class="type">dog_vendor_code_t</span> *)m_vendor_code.<span class="built_in">c_str</span>(),</span><br><span class="line">		&amp;handle</span><br><span class="line">	);</span><br><span class="line">	err.<span class="built_in">printError</span>(status);</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">int</span>)status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyDogApiImpl::logout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">dog_status_t</span> status = <span class="built_in">dog_logout</span>(handle);</span><br><span class="line">	err.<span class="built_in">printError</span>(status);</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">int</span>)status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glog/logging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydog/mydog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test_api</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> feature_id = <span class="number">111</span>;</span><br><span class="line">	std::string vendor_code = <span class="string">&quot;xxx&quot;</span>; <span class="comment">// from `VendorCodes\BYAUY.hvc`</span></span><br><span class="line">	</span><br><span class="line">	<span class="function">MyDogApi <span class="title">dog</span><span class="params">(feature_id, vendor_code)</span></span>;</span><br><span class="line">	<span class="type">int</span> status = dog.<span class="built_in">login</span>(); <span class="comment">// 0  OK, other failed (feature id error, vendor_code error, NO SuperDog)</span></span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;status = &quot;</span> &lt;&lt; status &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> status2 = dog.<span class="built_in">logout</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;status2 = &quot;</span> &lt;&lt; status2 &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST</span>(test, test_api) &#123;</span><br><span class="line">	<span class="built_in">test_api</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Python-version-supported"><a href="#Python-version-supported" class="headerlink" title="Python version supported"></a>Python version supported</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydog_api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUILD_PYTHON_MYDOG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> BUILD_PYTHON_MYDOG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pybind11/pybind11.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> py = pybind11;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">	<span class="built_in">Pet</span>(<span class="type">const</span> std::string &amp;name) : <span class="built_in">name</span>(name) &#123; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">const</span> std::string &amp;name_)</span> </span>&#123; name = name_; &#125;</span><br><span class="line">	<span class="function"><span class="type">const</span> std::string &amp;<span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">	std::string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PYBIND11_MODULE</span>(mydog, m)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// optional module docstring</span></span><br><span class="line">	m.<span class="built_in">doc</span>() = <span class="string">&quot;mydog plugin for python &quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// FUNCTIONS</span></span><br><span class="line">	<span class="comment">// expose add function, and add keyword arguments and default arguments</span></span><br><span class="line">	m.<span class="built_in">def</span>(<span class="string">&quot;add&quot;</span>, &amp;add, <span class="string">&quot;A function which adds two numbers&quot;</span>, py::<span class="built_in">arg</span>(<span class="string">&quot;i&quot;</span>) = <span class="number">1</span>, py::<span class="built_in">arg</span>(<span class="string">&quot;j&quot;</span>) = <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// DATA</span></span><br><span class="line">	<span class="comment">// exporting variables</span></span><br><span class="line">	m.<span class="built_in">attr</span>(<span class="string">&quot;the_answer&quot;</span>) = <span class="number">42</span>;</span><br><span class="line">	py::object world = py::<span class="built_in">cast</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">	m.<span class="built_in">attr</span>(<span class="string">&quot;what&quot;</span>) = world;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// CLASSES</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	py::class_&lt;Pet&gt;(m, &quot;Pet&quot;)</span></span><br><span class="line"><span class="comment">	.def(py::init&lt;const std::string &amp;&gt;())</span></span><br><span class="line"><span class="comment">	.def(&quot;setName&quot;, &amp;Pet::setName)</span></span><br><span class="line"><span class="comment">	.def(&quot;getName&quot;, &amp;Pet::getName);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// MyDog</span></span><br><span class="line">	py::<span class="built_in">class_</span>&lt;MyDogApi&gt;(m, <span class="string">&quot;MyDogApi&quot;</span>)</span><br><span class="line">		.<span class="built_in">def</span>(py::<span class="built_in">init</span>&lt;<span class="type">int</span>, <span class="type">const</span> std::string &amp;&gt;())</span><br><span class="line">		.<span class="built_in">def</span>(<span class="string">&quot;login&quot;</span>, &amp;MyDogApi::login)</span><br><span class="line">		.<span class="built_in">def</span>(<span class="string">&quot;logout&quot;</span>, &amp;MyDogApi::logout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// =====================1</span></span><br><span class="line"><span class="comment">pybind11_add_module($&#123;PYMYDOG_TARGET&#125;</span></span><br><span class="line"><span class="comment">$&#123;HEADER_FILES&#125;</span></span><br><span class="line"><span class="comment">$&#123;SOURCE_FILES&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># supder dog (dog_login,dog_logout)</span></span><br><span class="line"><span class="comment">$&#123;SUPERDOG_LIBRARIES&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// =====================2</span></span><br><span class="line"><span class="comment">add_library($&#123;PYMYDOG_TARGET&#125; MODULE</span></span><br><span class="line"><span class="comment">$&#123;HEADER_FILES&#125;</span></span><br><span class="line"><span class="comment">$&#123;SOURCE_FILES&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">target_link_libraries($&#123;PYMYDOG_TARGET&#125;</span></span><br><span class="line"><span class="comment">pybind11::module</span></span><br><span class="line"><span class="comment">$&#123;SUPERDOG_LIBRARIES&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// BUILD_PYTHON_MYDOG</span></span></span><br></pre></td></tr></table></figure>

<h3 id="cmake-for-C-version"><a href="#cmake-for-C-version" class="headerlink" title="cmake for C++ version"></a>cmake for C++ version</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(SUPERDOG REQUIRED) <span class="comment"># user-defined supderdog 2.3</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;SUPERDOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;MYDOG_TARGET&#125;</span> </span><br><span class="line">	<span class="variable">$&#123;HEADER_FILES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;SOURCE_FILES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">$&#123;MYDOG_TARGET&#125;</span>   </span><br><span class="line">	<span class="variable">$&#123;SUPERDOG_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="cmake-for-Python-version"><a href="#cmake-for-Python-version" class="headerlink" title="cmake for Python version"></a>cmake for Python version</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(SUPERDOG REQUIRED) <span class="comment"># user-defined supderdog 2.3</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;SUPERDOG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(pybind11 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;pybind11_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;MYDOG_TARGET&#125;</span> </span><br><span class="line">	<span class="variable">$&#123;HEADER_FILES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;SOURCE_FILES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">$&#123;MYDOG_TARGET&#125;</span>   </span><br><span class="line">	pybind11::module</span><br><span class="line">	<span class="variable">$&#123;SUPERDOG_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rename <code>mydog.dll</code> to <code>mydog.pyd</code></p>
</blockquote>
<h3 id="test-pymydog"><a href="#test-pymydog" class="headerlink" title="test pymydog"></a>test pymydog</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mydog <span class="comment"># mydog.pyd</span></span><br><span class="line"></span><br><span class="line">feature_id = <span class="number">111</span></span><br><span class="line">vendor_code = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line">dog = mydog.MyDogApi(feature_id,vendor_code)</span><br><span class="line"><span class="built_in">print</span>(dog.login())</span><br><span class="line"><span class="built_in">print</span>(dog.logout())</span><br></pre></td></tr></table></figure>

<p>with files</p>
<pre><code>dog_windows_x64_3150436.dll
mydog.py
mydog.pyd
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181022: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>superdog</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install cryptopp 7.0 on windows 10</title>
    <url>//blog/compile-cryptopp-7-0-on-windows-10/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>windows 10 64-bit</li>
<li>crypto++ 7.0 </li>
<li>vs 2015</li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>download <a href="https://github.com/weidai11/cryptopp/archive/CRYPTOPP_7_0_0.zip">crypto++ 7.0</a></p>
<p>open <code>cryptest.sln</code> with <code>Visual Studio 2015</code></p>
<p>change <code>Windows SDK Version</code> from <code>8.1</code> to <code>10.0</code></p>
<p><img src="https://kezunlin.me/images/posts/635233-20181018145051821-1901848873.png" alt="png"></p>
<p>compile <code>cryptodll</code> with <code>Release x64</code> and we get <code>cryptopp.dll</code> and <code>cryptopp.lib</code><br><img src="https://kezunlin.me/images/posts/635233-20181018150015903-521843035.png" alt="png"></p>
<h3 id="sdk"><a href="#sdk" class="headerlink" title="sdk"></a>sdk</h3><p>copy headers to <code>include</code>, copy libs to <code>lib</code> and dlls to <code>dll</code> like this:</p>
<p><img src="https://kezunlin.me/images/posts/635233-20181018151300297-2070989019.png" alt="png"></p>
<h3 id="cryptopp-config-cmake"><a href="#cryptopp-config-cmake" class="headerlink" title="cryptopp-config.cmake"></a>cryptopp-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CRYPTOPP_FOUND <span class="keyword">TRUE</span>) <span class="comment"># auto </span></span><br><span class="line"><span class="keyword">set</span>(CRYPTOPP_VERSION <span class="number">7.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(CRYPTOPP_ROOT_DIR <span class="string">&quot;C:/car_libs/cryptopp-7.0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(CRYPTOPP_INCLUDE_DIR NAMES cryptopp/aes.h PATHS <span class="string">&quot;$&#123;CRYPTOPP_ROOT_DIR&#125;/include&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(CRYPTOPP_INCLUDE_DIR) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(CRYPTOPP_LIBRARY NAMES cryptopp.lib PATHS <span class="string">&quot;$&#123;CRYPTOPP_ROOT_DIR&#125;/lib&quot;</span>) </span><br><span class="line"><span class="keyword">mark_as_advanced</span>(CRYPTOPP_LIBRARY) <span class="comment"># show entry in cmake-gui</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use xxx_INCLUDE_DIRS and xxx_LIBRARIES in CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(CRYPTOPP_INCLUDE_DIRS <span class="variable">$&#123;CRYPTOPP_INCLUDE_DIR&#125;</span> )</span><br><span class="line"><span class="keyword">set</span>(CRYPTOPP_LIBRARIES <span class="variable">$&#123;CRYPTOPP_LIBRARY&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>( <span class="string">&quot;cryptopp-config.cmake &quot;</span> <span class="variable">$&#123;CRYPTOPP_ROOT_DIR&#125;</span>)</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>see <code>cryptopp-7.0/dlltest.cpp</code></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="cipher-h"><a href="#cipher-h" class="headerlink" title="cipher.h"></a>cipher.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable: 4275 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable: 4819 )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cryptopp/dll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cryptopp/cryptlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cryptopp/aes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cryptopp/filters.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cryptopp/modes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">USING_NAMESPACE</span>(CryptoPP)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CipherApiImpl</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">enum</span> <span class="title class_">MODE</span></span><br><span class="line">	&#123;</span><br><span class="line">		AES,</span><br><span class="line">		DES</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CipherApiImpl</span>(MODE mode = MODE::AES);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">get_filesize</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">save</span><span class="params">(<span class="type">const</span> std::string&amp; filepath, <span class="type">const</span> std::string&amp; str)</span></span>;</span><br><span class="line">	<span class="function">std::string <span class="title">load</span><span class="params">(<span class="type">const</span> std::string&amp; filepath)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">std::string <span class="title">encrypt_string</span><span class="params">(<span class="type">const</span> std::string&amp; plain_text)</span></span>;</span><br><span class="line">	<span class="function">std::string <span class="title">decrypt_string</span><span class="params">(<span class="type">const</span> std::string&amp; cipher_text)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">std::string <span class="title">encrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile)</span></span>;</span><br><span class="line">	<span class="function">std::string <span class="title">decrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">encrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile, <span class="type">const</span> std::string&amp; outfile)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">decrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile, <span class="type">const</span> std::string&amp; outfile)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function">std::string <span class="title">tohex</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; c)</span></span>;</span><br><span class="line">	<span class="function">std::string <span class="title">tohexs</span><span class="params">(<span class="type">const</span> std::string&amp; str)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">char</span> <span class="title">tochar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; hex1, <span class="type">const</span> <span class="type">char</span>&amp; hex2)</span></span>;</span><br><span class="line">	<span class="function">std::string <span class="title">tochars</span><span class="params">(<span class="type">const</span> std::string&amp; hex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">// 32 + 16</span></span><br><span class="line">	<span class="type">const</span> byte aes_key[CryptoPP::AES::MAX_KEYLENGTH] = &#123;</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">const</span> byte aes_iv[CryptoPP::AES::BLOCKSIZE] = &#123;</span><br><span class="line">		<span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span>,<span class="number">0x90</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span>,<span class="number">0x90</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 24+8</span></span><br><span class="line">	<span class="type">const</span> byte des_key[CryptoPP::DES_EDE3::MAX_KEYLENGTH] = &#123;</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,</span><br><span class="line">		<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">const</span> byte des_iv[CryptoPP::DES_EDE3::BLOCKSIZE] = &#123;</span><br><span class="line">		<span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span>,<span class="number">0x90</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	CryptoPP::CFB_FIPS_Mode&lt;CryptoPP::AES&gt;::Encryption aes_encryption;</span><br><span class="line">	CryptoPP::CFB_FIPS_Mode&lt;CryptoPP::AES&gt;::Decryption aes_decryption;</span><br><span class="line"></span><br><span class="line">	CryptoPP::CFB_FIPS_Mode&lt;CryptoPP::DES_EDE3&gt;::Encryption des_encryption;</span><br><span class="line">	CryptoPP::CFB_FIPS_Mode&lt;CryptoPP::DES_EDE3&gt;::Decryption des_decryption;</span><br><span class="line"></span><br><span class="line">	MODE m_mode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="cipher-cpp"><a href="#cipher-cpp" class="headerlink" title="cipher.cpp"></a>cipher.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cipher_api_impl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">CipherApiImpl::<span class="built_in">CipherApiImpl</span>(MODE mode)</span><br><span class="line">&#123;</span><br><span class="line">	m_mode = mode;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// for des</span></span><br><span class="line">	des_encryption.<span class="built_in">SetKeyWithIV</span>(des_key, <span class="built_in">sizeof</span>(des_key), des_iv);</span><br><span class="line">	des_decryption.<span class="built_in">SetKeyWithIV</span>(des_key, <span class="built_in">sizeof</span>(des_key), des_iv);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for aes</span></span><br><span class="line">	aes_encryption.<span class="built_in">SetKeyWithIV</span>(aes_key, <span class="built_in">sizeof</span>(aes_key), aes_iv);</span><br><span class="line">	aes_decryption.<span class="built_in">SetKeyWithIV</span>(aes_key, <span class="built_in">sizeof</span>(aes_key), aes_iv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region hex/char</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::tohex</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	00,01,02,...0F   [0,1,2,...15]</span></span><br><span class="line"><span class="comment">	10,11,12,...1F   [16,17,...31]</span></span><br><span class="line"><span class="comment">	...</span></span><br><span class="line"><span class="comment">	F0,F1,F2,...FF	[240,241,...255]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	char ch[2] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">	sprintf(ch, &quot;%02x&quot;, static_cast&lt;byte&gt;(c)); //  char ---&gt; 16 hex</span></span><br><span class="line"><span class="comment">	return std::string(ch);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> HEX[] = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> HEX_BASE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	std::string c_hex;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> uc = (<span class="type">unsigned</span> <span class="type">char</span>)(c);</span><br><span class="line">	<span class="type">int</span> a = uc / HEX_BASE;</span><br><span class="line">	<span class="type">int</span> b = uc % HEX_BASE;</span><br><span class="line">	c_hex.<span class="built_in">push_back</span>(HEX[a]);</span><br><span class="line">	c_hex.<span class="built_in">push_back</span>(HEX[b]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> c_hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::tohexs</span><span class="params">(<span class="type">const</span> std::string&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> HEX[] = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> HEX_BASE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	std::string hex_result;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::string c_hex;</span><br><span class="line">		<span class="type">int</span> uc = (<span class="type">unsigned</span> <span class="type">char</span>)(str[i]);</span><br><span class="line">		<span class="type">int</span> a = uc / HEX_BASE;</span><br><span class="line">		<span class="type">int</span> b = uc % HEX_BASE;</span><br><span class="line">		c_hex.<span class="built_in">push_back</span>(HEX[a]);</span><br><span class="line">		c_hex.<span class="built_in">push_back</span>(HEX[b]);</span><br><span class="line"></span><br><span class="line">		hex_result += c_hex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hex_result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">CipherApiImpl::tochar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; hex1, <span class="type">const</span> <span class="type">char</span>&amp; hex2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> HEX_BASE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> h1 = (<span class="type">int</span>)hex1;</span><br><span class="line">	<span class="type">int</span> h2 = (<span class="type">int</span>)hex2;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// F1 ===&gt; 16,1===&gt;15*16+1 = 241 ===&gt; char</span></span><br><span class="line">	<span class="type">char</span> uc = (<span class="type">char</span>)(h1*HEX_BASE + h2);</span><br><span class="line">	<span class="keyword">return</span> uc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::tochars</span><span class="params">(<span class="type">const</span> std::string&amp; hex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hex.<span class="built_in">size</span>() % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hex_int = &#123;</span><br><span class="line">		&#123; <span class="string">&#x27;0&#x27;</span> , <span class="number">0</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;4&#x27;</span>, <span class="number">4</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;5&#x27;</span>, <span class="number">5</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;6&#x27;</span>, <span class="number">6</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;7&#x27;</span>, <span class="number">7</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;8&#x27;</span>, <span class="number">8</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;9&#x27;</span>, <span class="number">9</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;A&#x27;</span>, <span class="number">10</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;B&#x27;</span>, <span class="number">11</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;C&#x27;</span>, <span class="number">12</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;D&#x27;</span>, <span class="number">13</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;E&#x27;</span>, <span class="number">14</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;F&#x27;</span>, <span class="number">15</span> &#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	std::string char_result;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> HEX_BASE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hex.<span class="built_in">size</span>(); i += <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> h1 = hex_int.<span class="built_in">at</span>(hex[i]);   <span class="comment">// &#x27;F&#x27; ===&gt;15</span></span><br><span class="line">		<span class="type">int</span> h2 = hex_int.<span class="built_in">at</span>(hex[i + <span class="number">1</span>]); <span class="comment">// &#x27;1&#x27;===&gt;1</span></span><br><span class="line"></span><br><span class="line">										 <span class="comment">// F1 ===&gt; 15,1===&gt;15*16+1 = 241 ===&gt; char</span></span><br><span class="line">										 <span class="comment">//std::cout &lt;&lt; &quot;===============\n&quot;;</span></span><br><span class="line">		<span class="type">char</span> uc = (<span class="type">char</span>)(h1*HEX_BASE + h2);</span><br><span class="line">		<span class="comment">//std::cout &lt;&lt; h1 &lt;&lt;&quot;,&quot;&lt;&lt;h2 &lt;&lt; std::endl;</span></span><br><span class="line">		<span class="comment">//std::cout &lt;&lt; uc &lt;&lt; std::endl;</span></span><br><span class="line">		char_result += uc;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> char_result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region encrypt_string and decrypt_string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CipherApiImpl::get_filesize</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">stat</span> f_stat;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">stat</span>(filename, &amp;f_stat) == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f_stat.st_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">std::string load_text_not_use(const std::string&amp; filepath)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">std::string str;</span></span><br><span class="line"><span class="comment">ifstream in(filepath, ios::in | ios::binary);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">std::string line;</span></span><br><span class="line"><span class="comment">std::string content;</span></span><br><span class="line"><span class="comment">while (getline(in, line))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;line.size()=&quot; &lt;&lt; line.size() &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">if (line.size() &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">content += line + &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">line.clear();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">in.close();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return content;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CipherApiImpl::save</span><span class="params">(<span class="type">const</span> std::string&amp; filepath, <span class="type">const</span> std::string&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ofstream <span class="title">out</span><span class="params">(filepath, ios::out | ios::binary)</span></span>; <span class="comment">// binary mode (default text mode)</span></span><br><span class="line">	out.<span class="built_in">write</span>(str.<span class="built_in">c_str</span>(), str.<span class="built_in">length</span>());</span><br><span class="line">	out.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::load</span><span class="params">(<span class="type">const</span> std::string&amp; filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> filesize = <span class="built_in">get_filesize</span>(filepath.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *buffer = <span class="keyword">new</span> <span class="type">char</span>[filesize];</span><br><span class="line"></span><br><span class="line">	<span class="function">ifstream <span class="title">in</span><span class="params">(filepath, ios::in | ios::binary)</span></span>; <span class="comment">// binary mode (default text mode)</span></span><br><span class="line">	in.<span class="built_in">read</span>(buffer, filesize);</span><br><span class="line">	in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// std::string content(buffer); // ERROR for binary file</span></span><br><span class="line">	std::string content;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; filesize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		content.<span class="built_in">push_back</span>(buffer[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] buffer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//==========================================================================</span></span><br><span class="line"><span class="comment">std::string cipher_text;</span></span><br><span class="line"><span class="comment">CryptoPP::AES::CipherApiImpl aesEncryption(key, CryptoPP::AES::MAX_KEYLENGTH);</span></span><br><span class="line"><span class="comment">CryptoPP::CBC_Mode_ExternalCipher::CipherApiImpl cbcEncryption(aesEncryption, iv);</span></span><br><span class="line"><span class="comment">CryptoPP::StreamTransformationFilter stfEncryptor(cbcEncryption, new CryptoPP::StringSink(cipher_text));</span></span><br><span class="line"><span class="comment">stfEncryptor.Put(reinterpret_cast&lt;const unsigned char*&gt;(plain_text.c_str()), plain_text.length());</span></span><br><span class="line"><span class="comment">stfEncryptor.MessageEnd();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">std::string cipher_text_hex = tohexs(cipher_text);</span></span><br><span class="line"><span class="comment">return cipher_text_hex;</span></span><br><span class="line"><span class="comment">//==========================================================================</span></span><br><span class="line"><span class="comment">CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::MAX_KEYLENGTH);</span></span><br><span class="line"><span class="comment">CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption(aesDecryption, iv);</span></span><br><span class="line"><span class="comment">CryptoPP::StreamTransformationFilter stfDecryptor(cbcDecryption, new CryptoPP::StringSink(decryptedText));</span></span><br><span class="line"><span class="comment">stfDecryptor.Put(reinterpret_cast&lt;const unsigned char*&gt;(cipher_text.c_str()), cipher_text.size());</span></span><br><span class="line"><span class="comment">stfDecryptor.MessageEnd();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return decrypted_text;</span></span><br><span class="line"><span class="comment">//==========================================================================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">byte ciphertext[24];</span></span><br><span class="line"><span class="comment">byte decrypted[24];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CFB_FIPS_Mode&lt;DES_EDE3&gt;::Encryption encryption_DES_EDE3_CFB;</span></span><br><span class="line"><span class="comment">encryption_DES_EDE3_CFB.SetKeyWithIV(key, sizeof(key), iv);</span></span><br><span class="line"><span class="comment">encryption_DES_EDE3_CFB.ProcessString(ciphertext, plaintext, 24);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CFB_FIPS_Mode&lt;DES_EDE3&gt;::Decryption decryption_DES_EDE3_CFB;</span></span><br><span class="line"><span class="comment">decryption_DES_EDE3_CFB.SetKeyWithIV(key, sizeof(key), iv);</span></span><br><span class="line"><span class="comment">decryption_DES_EDE3_CFB.ProcessString(decrypted, ciphertext, 24);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::encrypt_string</span><span class="params">(<span class="type">const</span> std::string&amp; plain_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">size_t</span> size = plain_text.<span class="built_in">size</span>();</span><br><span class="line">	<span class="type">const</span> byte* in_byte = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)(plain_text.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">	byte* out_byte = <span class="keyword">new</span> byte[size];</span><br><span class="line"></span><br><span class="line">	des_encryption.<span class="built_in">ProcessString</span>(out_byte, in_byte, size);</span><br><span class="line"></span><br><span class="line">	std::string cipher_text;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cipher_text.<span class="built_in">push_back</span>(out_byte[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] out_byte;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cipher_text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::decrypt_string</span><span class="params">(<span class="type">const</span> std::string&amp; cipher_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">size_t</span> size = cipher_text.<span class="built_in">size</span>();</span><br><span class="line">	<span class="type">const</span> byte* in_byte = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)(cipher_text.<span class="built_in">c_str</span>());</span><br><span class="line">	byte* out_byte = <span class="keyword">new</span> byte[size];</span><br><span class="line"></span><br><span class="line">	des_decryption.<span class="built_in">ProcessString</span>(out_byte, in_byte, size);</span><br><span class="line"></span><br><span class="line">	std::string plain_text;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		plain_text.<span class="built_in">push_back</span>(out_byte[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] out_byte;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> plain_text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::encrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string plain_text = <span class="built_in">load</span>(infile);</span><br><span class="line">	std::string cipher_text = <span class="built_in">encrypt_string</span>(plain_text);</span><br><span class="line">	<span class="keyword">return</span> cipher_text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">CipherApiImpl::decrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string cipher_text = <span class="built_in">load</span>(infile);</span><br><span class="line">	std::string plain_text = <span class="built_in">decrypt_string</span>(cipher_text);</span><br><span class="line">	<span class="keyword">return</span> plain_text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CipherApiImpl::encrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile, <span class="type">const</span> std::string&amp; outfile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string cipher_text_hex = <span class="built_in">encrypt_file</span>(infile);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">save</span>(outfile, cipher_text_hex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CipherApiImpl::decrypt_file</span><span class="params">(<span class="type">const</span> std::string&amp; infile, <span class="type">const</span> std::string&amp; outfile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string plain_text = <span class="built_in">decrypt_file</span>(infile);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">save</span>(outfile, plain_text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br></pre></td></tr></table></figure>

<h4 id="test-cpp"><a href="#test-cpp" class="headerlink" title="test.cpp"></a>test.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glog/logging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable: 4819 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable: 4244 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable: 4267 ) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cipher/cipher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test_cipher_api</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CipherApi cipher;</span><br><span class="line"></span><br><span class="line">	std::string text = <span class="string">&quot;[hello zhuzhu dashen !]\n[1234567]\n[123]\n1\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text : &quot;</span> &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text size: &quot;</span> &lt;&lt; text.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cipher.<span class="built_in">save</span>(<span class="string">&quot;./tmp/text.txt&quot;</span>, text);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;==============encrypt/decrypt string======================\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">	std::string cipherHex = cipher.<span class="built_in">encrypt_string</span>(text);</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;cipher : &quot; &lt;&lt; cipherHex &lt;&lt; endl;</span></span><br><span class="line">	cipher.<span class="built_in">save</span>(<span class="string">&quot;./tmp/cipherHex.txt&quot;</span>, cipherHex);</span><br><span class="line"></span><br><span class="line">	std::string text2 = cipher.<span class="built_in">decrypt_string</span>(cipherHex);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text2 : &quot;</span> &lt;&lt; text2 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text2 size: &quot;</span> &lt;&lt; text<span class="number">2.</span><span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cipher.<span class="built_in">save</span>(<span class="string">&quot;./tmp/text2.txt&quot;</span>, text2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// load_text </span></span><br><span class="line">	std::string text_load = cipher.<span class="built_in">load</span>(<span class="string">&quot;./tmp/text2.txt&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text_load : &quot;</span> &lt;&lt; text_load &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;text_load size: &quot;</span> &lt;&lt; text_load.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// encrypt/decrypt text file</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;==============encrypt/decrypt text file======================\n&quot;</span>;</span><br><span class="line">	cipher.<span class="built_in">encrypt_file</span>(<span class="string">&quot;./tmp/text.txt&quot;</span>, <span class="string">&quot;./tmp/text_encryption.txt&quot;</span>);</span><br><span class="line">	cipher.<span class="built_in">decrypt_file</span>(<span class="string">&quot;./tmp/cipherHex.txt&quot;</span>, <span class="string">&quot;./tmp/cipherHex_decryption.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// encrypt/decrypt prototxt </span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;==============encrypt/decrypt prototxt======================\n&quot;</span>;</span><br><span class="line">	cipher.<span class="built_in">encrypt_file</span>(<span class="string">&quot;./tmp/small/deploy.prototxt&quot;</span>, <span class="string">&quot;./tmp/small/deploy_encryption.prototxt&quot;</span>);</span><br><span class="line">	cipher.<span class="built_in">decrypt_file</span>(<span class="string">&quot;./tmp/small/deploy_encryption.prototxt&quot;</span>, <span class="string">&quot;./tmp/small/deploy_new.prototxt&quot;</span>);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;==============encrypt/decrypt caffemodel======================\n&quot;</span>;</span><br><span class="line">	cipher.<span class="built_in">encrypt_file</span>(<span class="string">&quot;./tmp/small/recon__iter_140000.caffemodel&quot;</span>, <span class="string">&quot;./tmp/small/recon__iter_140000_encryption.caffemodel&quot;</span>);</span><br><span class="line">	cipher.<span class="built_in">decrypt_file</span>(<span class="string">&quot;./tmp/small/recon__iter_140000_encryption.caffemodel&quot;</span>, <span class="string">&quot;./tmp/small/recon__iter_140000_new.caffemodel&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST</span>(cipher_test, test_cipher_api) &#123;</span><br><span class="line">	<span class="built_in">test_cipher_api</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(CRYPTOPP REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; CRYPTOPP_INCLUDE_DIRS = $&#123;CRYPTOPP_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; CRYPTOPP_LIBRARIES = $&#123;CRYPTOPP_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CRYPTOPP_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (demo  <span class="variable">$&#123;CRYPTOPP_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/weidai11/cryptopp/releases">cryptopp github</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181018: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cryptopp</tag>
      </tags>
  </entry>
  <entry>
    <title>python with-as statement</title>
    <url>//blog/python-with-as-statement/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="file-example"><a href="#file-example" class="headerlink" title="file example"></a>file example</h3><p>读取文件处理传统写法,需要确保文件正常打开之后，即使出现异常，也能够正常关闭。写法不够优雅。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;./12.txt&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;can not open file&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="comment"># ... do somethings</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;exception&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OK. close file&quot;</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<p>with语句时用于对try except finally 的优化，让代码更加美观。同时确保即使执行异常，finally中的语句也可以执行。</p>
<h3 id="with-as-重写"><a href="#with-as-重写" class="headerlink" title="with-as 重写"></a>with-as 重写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure>

<h3 id="with-as-原理"><a href="#with-as-原理" class="headerlink" title="with-as 原理"></a>with-as 原理</h3><p>基本思想是with所求值的对象必须有一个<code>__enter__()</code>方法，一个<code>__exit__()</code>方法。</p>
<p>原理：</p>
<ol>
<li>with后面的语句被求值后返回对象A; </li>
<li>调用对象A的<code>__enter__()</code>方法将返回值赋给as后面的变量B；</li>
<li>执行with后面的代码块;</li>
<li>当with后面的代码块全部被执行完之后（或者由于抛出异常没有正常习执行完毕），最终都会调用A对象的<code>__exit__()</code>方法进行清理工作。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;In __enter__()&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Foo&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, trace</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;In __exit__()&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sample</span>():</span><br><span class="line">    <span class="keyword">return</span> Sample()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> get_sample() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;sample:&quot;</span>, s</span><br></pre></td></tr></table></figure>
<p>output </p>
<pre><code>In __enter__()
sample: Foo
In __exit__()
</code></pre>
<p>steps:</p>
<ol>
<li>执行with后面的语句get_sample()返回对象sample</li>
<li>执行sample对象的<code>__enter__()</code>方法，返回string类型的”Foo”赋值给as后面的s变量</li>
<li>执行代码块，打印变量”sample”的值为 “Foo”</li>
<li>代码块执行完毕，调用sample对象的<code>__exit__()</code>方法进行清理工作</li>
</ol>
<h3 id="with-处理异常"><a href="#with-处理异常" class="headerlink" title="with 处理异常"></a>with 处理异常</h3><p>with除了可以进行清理工作之外，真正强大之处是可以处理异常。Sample类的<code>__exit__</code>方法有三个参数：<code>val</code>, <code>type</code> 和 <code>trace</code>。 这些参数在异常处理中相当有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, trace</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;type:&quot;</span>, <span class="built_in">type</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;value:&quot;</span>, value</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;trace:&quot;</span>, trace</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">self</span>):</span><br><span class="line">        bar = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> bar + <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> Sample() <span class="keyword">as</span> sample:</span><br><span class="line">    sample.do_something()</span><br></pre></td></tr></table></figure>
<p>output </p>
<pre><code>type: &lt;type &#39;exceptions.ZeroDivisionError&#39;&gt;
value: integer division or modulo by zero
trace: &lt;traceback object at 0x0000000004A5AA08&gt;

ZeroDivisionErrorTraceback (most recent call last)
&lt;ipython-input-9-282d3906c5ac&gt; in &lt;module&gt;()
     13 
     14 with Sample() as sample:
---&gt; 15     sample.do_something()

&lt;ipython-input-9-282d3906c5ac&gt; in do_something(self)
      9 
     10     def do_something(self):
---&gt; 11         bar = 1/0
     12         return bar + 10
     13 

ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p>在执行代码块<code>sample.do_something()</code>的时候由于异常抛出，与之关联的type，value和stack trace传给<code>__exit__()</code>方法，因此抛出的<code>ZeroDivisionError</code>异常被打印出来了。</p>
<h3 id="file-对象"><a href="#file-对象" class="headerlink" title="file 对象"></a>file 对象</h3><p>python中的file对象已经实现了<code>__enter__()</code>和<code>__exit__()</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.__enter__()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;open file &#39;./1.txt&#39;, mode &#39;r&#39; at 0x00000000049FF030&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.read(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.__exit__()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.read(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<pre><code>ValueErrorTraceback (most recent call last)

&lt;ipython-input-19-d0e1662399bb&gt; in &lt;module&gt;()
----&gt; 1 file.read(1)


ValueError: I/O operation on closed file
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/DswCnblog/p/6126588.html">python with as的用法</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181023: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>with-as</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow basic introduction</title>
    <url>//blog/tensorflow-introduction/</url>
    <content><![CDATA[<h2 id="Set-up"><a href="#Set-up" class="headerlink" title="Set up"></a>Set up</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>

<h2 id="Tensor-Values"><a href="#Tensor-Values" class="headerlink" title="Tensor Values"></a>Tensor Values</h2><p> <code>tensor</code>, <code>rank</code>, <code>shape</code>, <code>value</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="comment"># a rank 0 tensor; a scalar with shape [],</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>] <span class="comment"># a rank 1 tensor; a vector with shape [3]</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], </span><br><span class="line"> [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]] <span class="comment"># a rank 2 tensor; a matrix with shape [2, 3]</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    [[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]], </span><br><span class="line">     [[<span class="number">7.</span>, <span class="number">8.</span>, <span class="number">9.</span>]]</span><br><span class="line">] <span class="comment"># a rank 3 tensor with shape [2, 1, 3]</span></span><br></pre></td></tr></table></figure>




<pre><code>[[[1.0, 2.0, 3.0]], [[7.0, 8.0, 9.0]]]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="TensorFlow-Core-Walkthrough"><a href="#TensorFlow-Core-Walkthrough" class="headerlink" title="TensorFlow Core Walkthrough"></a>TensorFlow Core Walkthrough</h2><p>You might think of TensorFlow Core programs as consisting of two discrete sections:</p>
<ul>
<li>Building the computational graph (a <code>tf.Graph</code>).</li>
<li>Running the computational graph (using a <code>tf.Session</code>).</li>
</ul>
<h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><p>A <code>computational graph</code> is a series of TensorFlow operations arranged into a graph. The graph is composed of two types of objects.</p>
<ul>
<li><code>tf.Operation</code> (or “ops”): The nodes of the graph. Operations describe calculations that consume and produce tensors.</li>
<li><code>tf.Tensor</code>: The edges in the graph. These represent the values that will flow through the graph. Most TensorFlow functions return tf.Tensors.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tf.Tensors do not have values</span></span><br><span class="line"></span><br><span class="line">a = tf.constant(<span class="number">3.0</span>, dtype=tf.float32)</span><br><span class="line">b = tf.constant(<span class="number">4.0</span>) <span class="comment"># also tf.float32 implicitly</span></span><br><span class="line">total = a + b</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure>

<pre><code>Tensor(&quot;Const_4:0&quot;, shape=(), dtype=float32)
Tensor(&quot;Const_5:0&quot;, shape=(), dtype=float32)
Tensor(&quot;add_2:0&quot;, shape=(), dtype=float32)
</code></pre>
<h4 id="TensorBoard"><a href="#TensorBoard" class="headerlink" title="TensorBoard"></a>TensorBoard</h4><p>visualizing a computation graph.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = tf.summary.FileWriter(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">writer.add_graph(tf.get_default_graph()) <span class="comment"># events.out.tfevents.&#123;timestamp&#125;.&#123;hostname&#125;</span></span><br></pre></td></tr></table></figure>

<p>Now, in a new terminal, launch TensorBoard with the following shell command:</p>
<pre><code>tensorboard --logdir .
</code></pre>
<p>then access <code>http://localhost:6006/#graphs</code></p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>To evaluate tensors, instantiate a <code>tf.Session</code> object, informally known as a <code>session</code>. A session encapsulates the state of the TensorFlow runtime, and runs TensorFlow operations. If a <code>tf.Graph</code> is like a <code>.py</code> file, a <code>tf.Session</code> is like the <code>python executable</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line"><span class="built_in">print</span>(sess.run(total))</span><br></pre></td></tr></table></figure>

<pre><code>7.0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sess.run(&#123;<span class="string">&#x27;ab&#x27;</span>:(a, b), <span class="string">&#x27;total&#x27;</span>:total&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;total&#39;: 7.0, &#39;ab&#39;: (3.0, 4.0)&#125;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次，第二次run的vec结果都不一样；第三次先生成vec，然后得到out1和out2</span></span><br><span class="line">vec = tf.random_uniform(shape=(<span class="number">3</span>,))</span><br><span class="line">out1 = vec + <span class="number">1</span></span><br><span class="line">out2 = vec + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(sess.run(vec))</span><br><span class="line"><span class="built_in">print</span>(sess.run(vec))</span><br><span class="line"><span class="built_in">print</span>(sess.run((out1, out2)))</span><br></pre></td></tr></table></figure>

<pre><code>[0.3936273  0.7793083  0.46128905]
[0.9422312  0.03195083 0.4434662 ]
(array([1.9042395, 1.5705729, 1.4484392], dtype=float32), array([2.9042397, 2.5705729, 2.4484391], dtype=float32))
</code></pre>
<h3 id="Feeding"><a href="#Feeding" class="headerlink" title="Feeding"></a>Feeding</h3><p> A <code>placeholder</code> is a promise to provide a value later, like a function argument.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line">z = x + y</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure>

<pre><code>Tensor(&quot;Placeholder_2:0&quot;, dtype=float32)
Tensor(&quot;Placeholder_3:0&quot;, dtype=float32)
Tensor(&quot;add_6:0&quot;, dtype=float32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sess.run(z, feed_dict=&#123;x: <span class="number">3</span>, y: <span class="number">4.5</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(sess.run(z, feed_dict=&#123;x: [<span class="number">1</span>, <span class="number">3</span>], y: [<span class="number">2</span>, <span class="number">4</span>]&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>7.5
[3. 7.]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># placeholders throw an error if no value is fed to them.</span></span><br><span class="line"><span class="comment"># print(sess.run(z))</span></span><br></pre></td></tr></table></figure>

<h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_data = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>,],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>,],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>,],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>,],</span><br><span class="line">]</span><br><span class="line">slices = tf.data.Dataset.from_tensor_slices(my_data)</span><br><span class="line">next_item = slices.make_one_shot_iterator().get_next()</span><br></pre></td></tr></table></figure>

<p>Reaching the end of the data stream causes <code>Dataset</code> to throw an <code>tf.errors.OutOfRangeError</code>. For example, the following code reads the <code>next_item</code> until there is no more data to read:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(next_item))</span><br><span class="line">  <span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<pre><code>[0 1]
[2 3]
[4 5]
[6 7]
</code></pre>
<p>If the <code>Dataset</code> depends on stateful operations you may need to initialize the iterator before using it, as shown below:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = tf.random_normal([<span class="number">10</span>,<span class="number">3</span>])</span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices(r)</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line">next_row = iterator.get_next()</span><br><span class="line"></span><br><span class="line">sess.run(iterator.initializer) <span class="comment"># initialize iterator</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(next_row))</span><br><span class="line">  <span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<pre><code>[-0.27240568  0.41916385  0.8312674 ]
[-0.37411043  0.39321673  0.44852588]
[-2.502281   -0.35216704 -0.42525485]
[ 0.16175386  0.4726008  -0.02786499]
[-0.252643    0.47525632  1.3186764 ]
[ 0.2424109  1.3193169 -0.4673948]
[ 0.43207827  0.31257248 -0.609174  ]
[-0.80196303 -1.100821    2.44067   ]
[0.79778594 0.34206432 1.0677754 ]
[ 0.47419003 -0.7259666   0.8751686 ]
</code></pre>
<h2 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2><h3 id="Creating-Layers"><a href="#Creating-Layers" class="headerlink" title="Creating Layers"></a>Creating Layers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, <span class="number">3</span>])</span><br><span class="line">linear_model = tf.layers.Dense(units=<span class="number">1</span>) <span class="comment"># Layer</span></span><br><span class="line">y = linear_model(x)</span><br></pre></td></tr></table></figure>

<h3 id="Initializing-Layers"><a href="#Initializing-Layers" class="headerlink" title="Initializing Layers"></a>Initializing Layers</h3><p>The layer contains variables that must be initialized before they can be used. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>

<h3 id="Executing-Layers"><a href="#Executing-Layers" class="headerlink" title="Executing Layers"></a>Executing Layers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sess.run(y, &#123;x: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>[[ 4.5850883]
 [10.428741 ]]
</code></pre>
<h3 id="Layer-Function-shortcuts"><a href="#Layer-Function-shortcuts" class="headerlink" title="Layer Function shortcuts"></a>Layer Function shortcuts</h3><p>For each layer class (like <code>tf.layers.Dense</code>) TensorFlow also supplies a shortcut function (like <code>tf.layers.dense</code>). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, <span class="number">3</span>])</span><br><span class="line">y = tf.layers.dense(x, units=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sess.run(y, &#123;x: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>[[2.4798913]
 [6.7798343]]
</code></pre>
<h2 id="Feature-columns"><a href="#Feature-columns" class="headerlink" title="Feature columns"></a>Feature columns</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">features = &#123;</span><br><span class="line">    <span class="string">&#x27;sales&#x27;</span> : [[<span class="number">5</span>], [<span class="number">10</span>], [<span class="number">8</span>], [<span class="number">9</span>]],</span><br><span class="line">    <span class="string">&#x27;department&#x27;</span>: [<span class="string">&#x27;sports&#x27;</span>, <span class="string">&#x27;sports&#x27;</span>, <span class="string">&#x27;gardening&#x27;</span>, <span class="string">&#x27;gardening&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">department_column = tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">        <span class="string">&#x27;department&#x27;</span>, [<span class="string">&#x27;sports&#x27;</span>, <span class="string">&#x27;gardening&#x27;</span>])</span><br><span class="line">department_column = tf.feature_column.indicator_column(department_column)</span><br><span class="line"><span class="built_in">print</span>(department_column)</span><br><span class="line"></span><br><span class="line">columns = [</span><br><span class="line">    tf.feature_column.numeric_column(<span class="string">&#x27;sales&#x27;</span>),</span><br><span class="line">    department_column</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inputs = tf.feature_column.input_layer(features, columns)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure>

<pre><code>_IndicatorColumn(categorical_column=_VocabularyListCategoricalColumn(key=&#39;department&#39;, vocabulary_list=(&#39;sports&#39;, &#39;gardening&#39;), dtype=tf.string, default_value=-1, num_oov_buckets=0))
Tensor(&quot;input_layer/concat:0&quot;, shape=(4, 3), dtype=float32)
</code></pre>
<p>Running the inputs tensor will parse the features into a batch of vectors.</p>
<p>Feature columns can have internal state, like layers, so they often need to be initialized. Categorical columns use <code>tf.contrib.lookup</code> internally and these require a separate initialization op, <code>tf.tables_initializer</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_init = tf.global_variables_initializer()</span><br><span class="line">table_init = tf.tables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run((var_init, table_init))</span><br></pre></td></tr></table></figure>




<pre><code>(None, None)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sess.run(inputs))</span><br></pre></td></tr></table></figure>

<pre><code>[[ 1.  0.  5.]
 [ 1.  0. 10.]
 [ 0.  1.  8.]
 [ 0.  1.  9.]]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><h3 id="Define-the-data"><a href="#Define-the-data" class="headerlink" title="Define the data"></a>Define the data</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.constant([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]], dtype=tf.float32)</span><br><span class="line">y_true = tf.constant([[<span class="number">0</span>], [-<span class="number">1</span>], [-<span class="number">2</span>], [-<span class="number">3</span>]], dtype=tf.float32)</span><br></pre></td></tr></table></figure>

<h3 id="Define-the-model"><a href="#Define-the-model" class="headerlink" title="Define the model"></a>Define the model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">linear_model = tf.layers.Dense(units=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y_pred = linear_model(x)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The model hasn&#x27;t yet been trained, so the four &quot;predicted&quot; values aren&#x27;t very good. </span></span><br><span class="line"><span class="comment"># Here&#x27;s what we got; your own output will almost certainly differ:</span></span><br><span class="line"><span class="built_in">print</span>(sess.run(y_pred))</span><br></pre></td></tr></table></figure>

<pre><code>[[0.5062338]
 [1.0124676]
 [1.5187014]
 [2.0249352]]
</code></pre>
<h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h3><p>To optimize a model, you first need to define the loss. We’ll use the mean square error (<code>MSE</code>), a standard loss for regression problems.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.losses.mean_squared_error(labels=y_true, predictions=y_pred)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sess.run(loss))</span><br></pre></td></tr></table></figure>

<pre><code>10.484383
</code></pre>
<h3 id="Training-1"><a href="#Training-1" class="headerlink" title="Training"></a>Training</h3><p>TensorFlow provides optimizers implementing standard optimization algorithms. These are implemented as sub-classes of <code>tf.train.Optimizer</code>. They incrementally change each variable in order to minimize the loss. The simplest optimization algorithm is gradient descent, implemented by <code>tf.train.GradientDescentOptimizer</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train = optimizer.minimize(loss) <span class="comment"># training operation</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">  _, loss_value = sess.run((train, loss))</span><br><span class="line">  <span class="built_in">print</span>(loss_value)</span><br></pre></td></tr></table></figure>

<pre><code>10.484383
7.366995
5.2033534
3.7015016
2.6588542
1.9348423
1.4319282
1.0824323
0.83939326
0.67022556
0.5523189
0.46998408
0.41233516
0.37181824
0.34319195
0.32281947
0.30817705
0.29751378
0.28961438
0.2836359
0.27899322
0.2752804
0.27221578
0.26960373
0.26730868
0.2652365
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sess.run(y_pred))</span><br></pre></td></tr></table></figure>

<pre><code>[[-0.66274  ]
 [-1.3211429]
 [-1.9795457]
 [-2.6379485]]
</code></pre>
<h3 id="Complete-program"><a href="#Complete-program" class="headerlink" title="Complete program"></a>Complete program</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.constant([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]], dtype=tf.float32)</span><br><span class="line">y_true = tf.constant([[<span class="number">0</span>], [-<span class="number">1</span>], [-<span class="number">2</span>], [-<span class="number">3</span>]], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">linear_model = tf.layers.Dense(units=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y_pred = linear_model(x)</span><br><span class="line">loss = tf.losses.mean_squared_error(labels=y_true, predictions=y_pred)</span><br><span class="line"></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">  _, loss_value = sess.run((train, loss))</span><br><span class="line">  <span class="comment">#print(loss_value)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sess.run(y_pred))</span><br></pre></td></tr></table></figure>

<pre><code>[[-0.5594496]
 [-1.2710916]
 [-1.9827336]
 [-2.6943758]]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://tensorflow.google.cn/guide/low_level_intro">intro</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181026: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install protobuf-cpp on windows 10</title>
    <url>//blog/compile-protobuf-cpp-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/d60ff6fe/">Part 1: compile protobuf-cpp on ubuntu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/876d75f2/">Part 2: compile protobuf-cpp on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/ba8b6dea/">Part 3: protobuf usage</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/protocolbuffers/protobuf.git     </span><br><span class="line"><span class="built_in">cd</span> protobuf</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"><span class="comment"># third_party/benchmark third_party/googletest</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> cmake &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options</p>
<pre><code>CMAKE_INSTALL_PREFIX C:/Program Files/protobuf
protobuf_BUILD_SHARED_LIBS ON
</code></pre>
<p>Static Linking vs DLL</p>
<blockquote>
<p><code>Static linking</code> is now the default for the Protocol Buffer libraries. Due to issues with Win32’s use of a separate heap for each DLL, as well as binary compatibility issues between different versions of MSVC’s STL library, it is recommended that you use static linkage only.<br>However, it is possible to build libprotobuf and libprotoc as DLLs if you really want. To do this, do the following:</p>
</blockquote>
<ul>
<li>Add an additional flag <code>-Dprotobuf_BUILD_SHARED_LIBS=ON</code> when invoking cmake</li>
<li>Follow the same steps as described in the above section.</li>
<li>When compiling your project, make sure to <code>#define PROTOBUF_USE_DLLS</code>.</li>
</ul>
<p>compile <code>ALL_BUILD</code> with <code>VS 2015</code> and install to <code>C:/Program Files/protobuf</code> with dynamic libraries.</p>
<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --cpp_out=. ./point_cloud.proto </span><br><span class="line">protoc --java_out=./java/ ./proto/helloworld.proto</span><br><span class="line">protoc --go_out=./go/ ./proto/helloworld.proto</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED)</span><br><span class="line"><span class="keyword">add_definitions</span>( -DPROTOBUF_USE_DLLS ) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PROTOBUF_INCLUDE_DIRS = $&#123;PROTOBUF_INCLUDE_DIRS&#125;&quot;</span>)   </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PROTOBUF_LIBRARIES = $&#123;PROTOBUF_LIBRARIES&#125;&quot;</span>)  </span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md">protobuf on windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181029: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>nvidia gpu products</title>
    <url>//blog/nvidia-gpu-products/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><blockquote>
<p>from <a href="https://developer.nvidia.com/cuda-gpus">cuda-gpus</a></p>
</blockquote>
<h3 id="Tesla"><a href="#Tesla" class="headerlink" title="Tesla"></a>Tesla</h3><p><img src="https://kezunlin.me/images/posts/635233-20181029183548631-1057913795.png" alt="tesla"></p>
<h3 id="Quadro"><a href="#Quadro" class="headerlink" title="Quadro"></a>Quadro</h3><p><img src="https://kezunlin.me/images/posts/635233-20181029183552631-1761856836.png" alt="Quadro"></p>
<h3 id="NVS"><a href="#NVS" class="headerlink" title="NVS"></a>NVS</h3><p><img src="https://kezunlin.me/images/posts/635233-20181029183604602-1639202810.png" alt="NVS"></p>
<h3 id="GeForce"><a href="#GeForce" class="headerlink" title="GeForce"></a>GeForce</h3><p><img src="https://kezunlin.me/images/posts/635233-20181029183608854-55804981.png" alt="GeForce"></p>
<h3 id="TEGRA-Jetson"><a href="#TEGRA-Jetson" class="headerlink" title="TEGRA&#x2F;Jetson"></a>TEGRA&#x2F;Jetson</h3><p><img src="https://kezunlin.me/images/posts/635233-20190422151846066-500787709.png" alt="TEGRA/ Jetson"></p>
<h4 id="jetson-products"><a href="#jetson-products" class="headerlink" title="jetson products"></a>jetson products</h4><ul>
<li>Jetson TX1   (fp32,fp16)</li>
<li>Jetson TX2    (fp32,fp16)</li>
<li>Jetson AGX Xavier (fp32,fp16,int8,dla)</li>
<li>Jetson Nano (Jetbot)</li>
</ul>
<p>hardware precision support matrix<br><img src="https://kezunlin.me/images/posts/635233-20190422151849087-402485522.png" alt="hardware precision support matrix"></p>
<blockquote>
<p>see <a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-support-matrix/index.html#hardware-precision-matrix">tensorrt-support-matrix</a></p>
</blockquote>
<blockquote>
<p>Xaiver: 30W,性能和能效分别比前代产品 NVIDIA Jetson TX2 高出 20 倍和 10 倍</p>
</blockquote>
<h4 id="JetPack-SDK"><a href="#JetPack-SDK" class="headerlink" title="JetPack SDK"></a>JetPack SDK</h4><p><a href="https://developer.nvidia.com/embedded/jetpack">Jetson Development Pack (JetPack SDK)</a></p>
<p><a href="https://docs.nvidia.com/jetson/archives/jetpack-archived/jetpack-411/index.html#jetpack/4.1.1/introduction.htm%3FTocPath%3D_____1">JetPack 4.1.1 Developer Preview </a></p>
<p>JetPack Components</p>
<ul>
<li>OS Image: JetPack includes a sample file system derived from Ubuntu.</li>
<li>Libraries: CUDA&#x2F;CUDNN&#x2F;TensorRT&#x2F;MultiMedia API&#x2F;VisionWorks and OpenCV</li>
<li>Developer Tools: CUDA tools&#x2F;NVIDIA Nsight Systems&#x2F;NVIDIA Nsight Graphics</li>
<li>Samples </li>
<li>Documents</li>
</ul>
<p><a href="https://docs.nvidia.com/jetson/jetpack/index.html#jetpack/4.1.1/install.htm%3FTocPath%3D_____3">JetPack Installer</a></p>
<blockquote>
<p>JetPack 4.1.1<br>Now supports Host computer running Ubuntu 18.04 or Ubuntu 16.04.<br>JetPack installer can now share host computer’s internet connection to Jetson device via USB Type C cable during install.</p>
</blockquote>
<p>Jetson DeepStream SDK</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.nvidia.com/cuda-gpus">cuda gpus</a></li>
<li><a href="https://www.nvidia.com/drivers">drivers</a></li>
<li><a href="https://www.nvidia.com/zh-cn/autonomous-machines/embedded-systems-dev-kits-modules/">Jetson AGX Xavier</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181029: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>nvidia</tag>
        <tag>GeForce</tag>
        <tag>Jetson</tag>
        <tag>Tesla</tag>
        <tag>Xaiver</tag>
      </tags>
  </entry>
  <entry>
    <title>python iterator and generator</title>
    <url>//blog/python-iterator-and-generator/</url>
    <content><![CDATA[<h2 id="Iterable-Iterator"><a href="#Iterable-Iterator" class="headerlink" title="Iterable &amp;&amp; Iterator"></a>Iterable &amp;&amp; Iterator</h2><ul>
<li><p>可迭代对象（iterable），只定义了<code>__iter__</code>方法； 字符串、列表、元组、字典、文件；可以通过<code>iter(iterable)</code>方法获取iterator对象，也可以通过<code>list(iterable)</code> <code>for xxx in iterable</code>间接调用<code>__iter__</code>方法</p>
</li>
<li><p>迭代器（iterator）， Iteration Protocol: 定义了<code>__iter__</code>和<code>__next__</code>两个方法，<code>__iter__</code>返回迭代器本身(用于for loop)，<code>__next__</code>方法返回下一个元素，如果没有元素了，抛出StopIteration异常； for python2, use <code>next</code>; for python3, use <code>__next__</code></p>
<pre><code>iterator = iter(l) #
iterator2 = l.__iter__() 

list(l)
for xxx in l:
</code></pre>
</li>
</ul>
<h3 id="yrange"><a href="#yrange" class="headerlink" title="yrange"></a>yrange</h3><p>例子1：iterable和iterator是同一个对象。</p>
<pre><code>y = iterable()
list(y) 
list(y)
for i in y
</code></pre>
<blockquote>
<p>只有第一次输出所有值；后续输出未空。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">yrange</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="variable language_">self</span>.i = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__iter__1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.i &lt; <span class="variable language_">self</span>.n:</span><br><span class="line">            i = <span class="variable language_">self</span>.i</span><br><span class="line">            <span class="variable language_">self</span>.i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure>

<p>当使用<code>list(iterable)</code>的时候，会调用iterable的<code>__iter__</code>方法返回iterator</p>
<p>output </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line">StopIteration </span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(yrange(<span class="number">3</span>))</span><br><span class="line">__iter__1</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(yrange(<span class="number">3</span>))</span><br><span class="line">__iter__1</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(y)</span><br><span class="line">__iter__1</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(y)</span><br><span class="line">__iter__1</span><br><span class="line">    []</span><br><span class="line">    </span><br><span class="line">y = yrange(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(y.__iter__())</span><br><span class="line">__iter__1</span><br><span class="line">__iter__1</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(y.__iter__())</span><br><span class="line">__iter__1</span><br><span class="line">__iter__1</span><br><span class="line">    []</span><br></pre></td></tr></table></figure>

<h3 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h3><p>例子2：iterable和iterator是不同对象。</p>
<pre><code>z = iterable()
list(z)
list(z)
for i in z
</code></pre>
<p>调用N次，都会输出所有值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">zrange</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__iter__1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> zrange_iter(<span class="variable language_">self</span>.n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">zrange_iter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="variable language_">self</span>.i = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__iter__2&quot;</span>)</span><br><span class="line">        <span class="comment"># Iterators are iterables too.</span></span><br><span class="line">        <span class="comment"># Adding this functions to make them so.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.i &lt; <span class="variable language_">self</span>.n:</span><br><span class="line">            i = <span class="variable language_">self</span>.i</span><br><span class="line">            <span class="variable language_">self</span>.i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = zrange(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">list</span>(z)</span><br><span class="line">__iter__1</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(z)</span><br><span class="line">__iter__1</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">z = zrange(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">list</span>(z.__iter__())</span><br><span class="line">__iter__1</span><br><span class="line">__iter__2</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(z.__iter__())</span><br><span class="line">__iter__1</span><br><span class="line">__iter__2</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p><code>Generator functions</code> are ordinary functions defined using <code>yield</code> instead of <code>return</code>. When called, a <code>generator function</code> returns a <code>generator object</code>, which is a kind of <code>iterator</code> - it has a <code>next()</code> method. When you call <code>next()</code>, the next value yielded by the generator function is returned.</p>
<blockquote>
<p>use the word “generator” to mean the genearted object and “generator function” to mean the function that generates it.</p>
</blockquote>
<p>generator也是一个iterator。 <code>Generator functions</code>简化了<code>iterator</code>的创建。只需要yield就可以代替实现iterator的<code>__iter__</code>和<code>next</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yrange</span>(<span class="params">n</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>output </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = yrange(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">&lt;generator <span class="built_in">object</span> yrange at <span class="number">0x401f30</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.<span class="built_in">next</span>()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<h3 id="How-to-work"><a href="#How-to-work" class="headerlink" title="How to work"></a>How to work</h3><p>When a <code>generator function</code> is called, it returns a <code>generator object</code> without even beginning execution of the function.<br>When <code>next</code> method is called for the first time, the function starts executing until it reaches <code>yield</code> statement. The yielded value is returned by the <code>next</code> call.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">&quot;begin&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&quot;before yield&quot;</span>, i</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> i</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&quot;after yield&quot;</span>, i</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">&quot;end&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = foo() <span class="comment"># 不执行任何语句，返回generator object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.<span class="built_in">next</span>() <span class="comment"># 执行语句直到yield,返回结果</span></span><br><span class="line">begin</span><br><span class="line">before <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.<span class="built_in">next</span>() <span class="comment"># 从上一次yield语句的下一句开始执行语句直到再次到达yield,返回结果</span></span><br><span class="line">after <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line">before <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.<span class="built_in">next</span>() <span class="comment"># 从上一次yield语句的下一句开始执行语句直到再次到达yield,返回结果</span></span><br><span class="line">after <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">before <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.<span class="built_in">next</span>() <span class="comment"># 从上一次yield语句的下一句开始执行语句，由于没有再次到达yield所以抛出StopIteration异常</span></span><br><span class="line">after <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">end</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>再看一下例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">integers</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Infinite sequence of integers.&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squares</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> integers():</span><br><span class="line">        <span class="keyword">yield</span> i * i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">take</span>(<span class="params">n, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns first n values from the given sequence.&quot;&quot;&quot;</span></span><br><span class="line">    seq = <span class="built_in">iter</span>(seq)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            result.append(seq.<span class="built_in">next</span>())</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> take(<span class="number">5</span>, squares()) <span class="comment"># prints [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>

<h3 id="Generator-Expressions"><a href="#Generator-Expressions" class="headerlink" title="Generator Expressions"></a>Generator Expressions</h3><p>Generator Expressions are generator version of <code>list comprehensions</code>.<br>They look like list comprehensions, but returns a generator back instead of a list.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000000005232630</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(a)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>((x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line"><span class="comment">#如果只有一个参数，generator expression的()可以省略</span></span><br><span class="line"><span class="built_in">sum</span>(x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">pyt = ((x, y, z) <span class="keyword">for</span> z <span class="keyword">in</span> integers() </span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, z) </span><br><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, y) </span><br><span class="line">                                <span class="keyword">if</span> x*x + y*y == z*z)</span><br><span class="line"></span><br><span class="line">pyt</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000000005232828</span>&gt;</span><br><span class="line"></span><br><span class="line">take(<span class="number">5</span>,pyt)</span><br><span class="line">[(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>), (<span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>), (<span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>), (<span class="number">8</span>, <span class="number">15</span>, <span class="number">17</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="Example-Reading-multiple-files"><a href="#Example-Reading-multiple-files" class="headerlink" title="Example: Reading multiple files"></a>Example: Reading multiple files</h3><p>python提供的file对象就是一个iterator对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./1.txt&#x27;</span>)</span><br><span class="line">f.<span class="built_in">next</span>()</span><br><span class="line">f.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure>

<p>使用generator简化代码<br>old</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cat</span>(<span class="params">filenames</span>):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(f):</span><br><span class="line">            <span class="built_in">print</span> line,</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grep</span>(<span class="params">pattern, filenames</span>):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(f):</span><br><span class="line">            <span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line">                <span class="built_in">print</span> line,</span><br></pre></td></tr></table></figure>

<p>new with generator</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">readfiles</span>(<span class="params">filenames</span>):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(f):</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grep</span>(<span class="params">pattern, lines</span>):</span><br><span class="line">    <span class="keyword">return</span> (line <span class="keyword">for</span> line <span class="keyword">in</span> lines <span class="keyword">if</span> pattern <span class="keyword">in</span> line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printlines</span>(<span class="params">lines</span>):</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="built_in">print</span> line,</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">pattern, filenames</span>):</span><br><span class="line">    lines = readfiles(filenames)</span><br><span class="line">    lines = grep(pattern, lines)</span><br><span class="line">    printlines(lines)</span><br></pre></td></tr></table></figure>

<h2 id="Itertools"><a href="#Itertools" class="headerlink" title="Itertools"></a>Itertools</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">it1 = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">it2 = <span class="built_in">iter</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> itertools.chain(it1, it2):</span><br><span class="line">    <span class="built_in">print</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> itertools.izip([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="comment">#a 1</span></span><br><span class="line"><span class="comment">#b 2</span></span><br><span class="line"><span class="comment">#c 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://anandology.com/python-practice-book/iterators.html">iterators</a></li>
<li><a href="https://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators">difference-between-pythons-generators-and-iterators</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181029: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>iterator</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title>compile darknet on ubuntu 16.04</title>
    <url>//blog/compile-darknet-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/e8f8aadd/">Part 1: compile darknet on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/a5c428f1/">Part 2: compile darknet on windows 10</a></li>
<li><a href="https://kezunlin.me/post/cfeb28a4/">Part 3: compile caffe-yolov3 on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>Darknet is an open source neural network framework written in <code>C</code> and <code>CUDA</code>. It is fast, easy to install, and supports CPU and GPU computation.</p>
<p>optional dependencies:</p>
<ul>
<li>opencv</li>
<li>gpu (CUDA&#x2F;CUDNN)</li>
</ul>
<h3 id="repo-intro"><a href="#repo-intro" class="headerlink" title="repo intro"></a>repo intro</h3><p>see <a href="https://github.com/AlexeyAB/darknet.git">darknet</a><br>This repository supports:</p>
<ul>
<li>both Windows(VS 2015 (v140)) and Linux (GCC&gt;&#x3D;4.9)</li>
<li>CPU and GPU (with CC &gt;&#x3D; 3.0)</li>
<li>both OpenCV 2.x.x and OpenCV &lt;&#x3D; 3.4.0 (3.4.1 and higher isn’t supported)</li>
<li>both cuDNN v5-v7</li>
<li>CUDA &gt;&#x3D; 7.5</li>
<li>also create SO-library on Linux and DLL-library on Windows</li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>my system requirements (same as <a href="https://kezunlin.me/post/b90033a9/">caffe on ubuntu 16.04</a>)</p>
<ul>
<li>ubuntu 16.04</li>
<li>GeForce 1060 (6G)</li>
<li>cuda: 9.2 </li>
<li>cudnn: 7.1.4</li>
<li>opencv: 3.3.0 </li>
<li>openmp</li>
</ul>
<p>commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AlexeyAB/darknet.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> darknet</span><br><span class="line">vim Makefile </span><br></pre></td></tr></table></figure>

<p>options:</p>
<pre><code>GPU=1
CUDNN=1
CUDNN_HALF=0
OPENCV=0
AVX=0
OPENMP=1
LIBSO=1
</code></pre>
<p>now compile with </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<p> OK. now we have <code>darknet</code>, <code>darknet.so</code> and <code>uselib</code> which use <code>darknet.so</code></p>
<h4 id="fix-error"><a href="#fix-error" class="headerlink" title="fix error"></a>fix error</h4><p>CUDNN error:</p>
<pre><code>Try to load cfg: ./ped.cfg, weights: ./ped.weights, clear = 0 
   layer   filters  size/strd(dil)      input                output
   0 
 cuDNN status Error in: file: ./src/convolutional_layer.c : () : line: 301 : build time: Sep 24 2019 - 10:28:26 
cuDNN Error: CUDNN_STATUS_BAD_PARAM
</code></pre>
<p>fix </p>
<p>Makefile options:</p>
<pre><code>CUDNN=0
</code></pre>
<p>and compile again</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>see <a href="https://github.com/AlexeyAB/darknet/issues/2443">here</a></p>
</blockquote>
<h3 id="pretrained-models"><a href="#pretrained-models" class="headerlink" title="pretrained models"></a>pretrained models</h3><p>dataset</p>
<ul>
<li>coco: 80 classes</li>
<li>voc: 20 classes</li>
</ul>
<p>model</p>
<ul>
<li><p>yolov3: 0-106 layers</p>
</li>
<li><p>yolov2: 0-31 layers</p>
</li>
<li><p>yolov3.cfg (236 MB COCO Yolo v3) - requires 4 GB GPU-RAM: <a href="https://pjreddie.com/media/files/yolov3.weights">yolov3.weights</a></p>
</li>
<li><p>yolov2.cfg (194 MB COCO Yolo v2) - requires 4 GB GPU-RAM: <a href="https://pjreddie.com/media/files/yolov2.weights">yolov2.weights</a></p>
</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="yolov2"><a href="#yolov2" class="headerlink" title="yolov2"></a>yolov2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh ./image_yolov2.sh </span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector <span class="built_in">test</span> ./cfg/coco.data ./cfg/yolov2.cfg ./yolov2.weights data/dog.jpg -i 0 -thresh 0.2</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code> 29 conv   1024  3 x 3 / 1    13 x  13 x1280   -&gt;    13 x  13 x1024 3.987 BF
  30 conv    425  1 x 1 / 1    13 x  13 x1024   -&gt;    13 x  13 x 425 0.147 BF
  31 detection
mask_scale: Using default &#39;1.000000&#39;
Total BFLOPS 29.475 
Loading weights from ./yolov2.weights...
 seen 32 
Done!
data/dog.jpg: Predicted in 0.000000 milli-seconds.
dog: 79%
bicycle: 84%
truck: 77%
Not compiled with OpenCV, saving to predictions.png instead
</code></pre>
<p>view results</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eog prediction.png</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20181101092346394-624545348.png" alt="yolov2 result"></p>
<h4 id="yolov3"><a href="#yolov3" class="headerlink" title="yolov3"></a>yolov3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh ./image_yolov3.sh </span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector <span class="built_in">test</span> ./cfg/coco.data ./cfg/yolov3.cfg ./yolov3.weights data/dog.jpg -i 0 -thresh 0.25</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>104 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256 1.595 BF
 105 conv    255  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 255 0.353 BF
 106 yolo
Total BFLOPS 65.864 
Loading weights from ./yolov3.weights...
 seen 64 
Done!
data/dog.jpg: Predicted in 0.000000 milli-seconds.
bicycle: 99%
dog: 100%
truck: 93%
Not compiled with OpenCV, saving to predictions.png instead
</code></pre>
<p>view results</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eog prediction.png</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20181101092732467-1537995113.png" alt="yolov3 result"></p>
<h4 id="uselib"><a href="#uselib" class="headerlink" title="uselib"></a>uselib</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./uselib data/dog.jpg</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>100 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256 1.595 BF
 101 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128 0.177 BF
 102 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256 1.595 BF
 103 conv    128  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 128 0.177 BF
 104 conv    256  3 x 3 / 1    52 x  52 x 128   -&gt;    52 x  52 x 256 1.595 BF
 105 conv    255  1 x 1 / 1    52 x  52 x 256   -&gt;    52 x  52 x 255 0.353 BF
 106 yolo
Total BFLOPS 65.864 
Loading weights from yolov3.weights...
 seen 64 
Done!
object names loaded 
input image or video filename: dog - obj_id = 16,  x = 123, y = 223, w = 196, h = 319, prob = 0.998
truck - obj_id = 7,  x = 474, y = 87, w = 216, h = 78, prob = 0.931
bicycle - obj_id = 1,  x = 117, y = 124, w = 451, h = 308, prob = 0.99
</code></pre>
<h4 id="darknet-py"><a href="#darknet-py" class="headerlink" title="darknet.py"></a>darknet.py</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python darknet.py</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/pjreddie/darknet">pjreddie darknet yolo</a></li>
<li><a href="https://pjreddie.com/darknet/install/">darknet install</a></li>
<li><a href="https://github.com/AlexeyAB/darknet">darknet for linux and windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181031: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>object detect</tag>
        <tag>yolo</tag>
        <tag>darknet</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install darknet on windows 10</title>
    <url>//blog/compile-darknet-on-windows-10/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="http://kezunline.me/post/e8f8aadd/">Part 1: compile darknet on ubuntu 16.04</a></li>
<li><strong><a href="http://kezunline.me/post/a5c428f1/">Part 2: compile darknet on windows 10</a></strong></li>
<li><a href="https://kezunlin.me/post/cfeb28a4/">Part 3: compile caffe-yolov3 on ubuntu 16.04</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h3><p>my system requirements</p>
<ul>
<li>windows 10</li>
<li>GeForce 1060 (6G)  sm_61</li>
<li>VS: 2015 </li>
<li>cuda: 8.0</li>
<li>cudnn: 6.0.1</li>
<li>opencv: <a href="http://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.3.0/opencv-3.3.0.exe/download">opencv-3.3.0-vc14.exe</a></li>
</ul>
<blockquote>
<p>Tips:<br>Install Cuda after VS 2015. otherwise errors occur. (don’t know why)</p>
</blockquote>
<p>commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AlexeyAB/darknet.git</span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><ul>
<li>extract <code>opencv-3.3.0-vc14.exe</code> to <code>C:\opencv330\</code></li>
<li>find <code>CUDA 8.0.props</code> from <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\extras\visual_studio_integration\MSBuildExtensions\CUDA 8.0.props</code></li>
</ul>
<p>vim <code>build/darknet/darknet.vcxproj</code></p>
<ul>
<li>replace <code>C:\opencv_2.4.9\</code> with <code>C:\opencv330\</code></li>
<li>replace <code>CUDA 9.2.props</code> with <code>CUDA 8.0.props</code></li>
<li>replace <code>CUDA 9.2.targets</code> with <code>CUDA 8.0.targets</code></li>
<li>replace <code>compute_30,sm_30;</code> with <code>compute_61,sm_61;</code></li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>open <code>build/darknet/darknet.sln</code> with <code>VS 2015</code></p>
<p>include path</p>
<pre><code>C:\opencv330\opencv\build\include
..\..\3rdparty\include
$(CUDA_PATH)\include
</code></pre>
<p>library path</p>
<pre><code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64
$(CUDA_PATH)\lib\$(PlatformName)  
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64
</code></pre>
<p>linker input</p>
<pre><code>    ..\..\3rdparty\lib\x64\pthreadVC2.lib;cublas.lib;curand.lib;cudart.lib;
</code></pre>
<p>build with <code>x64 Release</code>.</p>
<h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><h4 id="darknet-exe"><a href="#darknet-exe" class="headerlink" title="darknet.exe"></a>darknet.exe</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet.exe detector <span class="built_in">test</span> data/coco.data yolov3.cfg yolov3.weights -i 0 -thresh 0.25 dog.jpg -ext_output</span><br></pre></td></tr></table></figure>

<h4 id="darknet-py"><a href="#darknet-py" class="headerlink" title="darknet.py"></a>darknet.py</h4><p>compile <code>yolo_cpp_dll.sln</code> and generate <code>yolo_cpp_dll.dll</code> for python usage.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python darknet.py</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="yolo-py"><a href="#yolo-py" class="headerlink" title="yolo.py"></a>yolo.py</h3><p>for linux and windows.<br>see <a href="https://gist.github.com/kezunlin/01adb3c752072f36954ad1bb4f935c14">yolo.py</a></p>
<h3 id="yolo-cpp-dll"><a href="#yolo-cpp-dll" class="headerlink" title="yolo_cpp_dll"></a>yolo_cpp_dll</h3><p>System Path</p>
<pre><code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\libnvvp
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\jre\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\jre\bin\plugin2
</code></pre>
<p>cuda80+cudnn6 </p>
<ul>
<li>cuda_8.0.61_win10.exe: <code>cublas64_80.dll,curand64_80.dll,cudart64_80.dll</code></li>
<li>cudnn-8.0-windows10-x64-v6.0.zip: <code>cudnn64_6.dll</code></li>
</ul>
<p>cuda90+cudnn7</p>
<ul>
<li>cuda_9.0.176_win10.exe: <code>cublas64_90.dll,curand64_90.dll,cudart64_90.dll</code></li>
<li>cudnn-9.0-windows10-x64-v7.1.zip: <code>cudnn64_7.dll</code></li>
</ul>
<p>yolo dll</p>
<ul>
<li>cuda80_yolo_cpp_dll: <code>pthreadvc2.dll, cublas64_80.dll,curand64_80.dll,cudart64_80.dll,cudnn64_6.dll</code></li>
<li>cuda90_yolo_cpp_dll: <code>pthreadvc2.dll, cublas64_90.dll,curand64_90.dll,cudart64_90.dll,cudnn64_7.dll</code><blockquote>
<p>Tips: use <code>Dependency Walker</code> to list dlls.</p>
</blockquote>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/pjreddie/darknet">pjreddie darknet yolo</a></li>
<li><a href="https://pjreddie.com/darknet/install/">darknet install</a></li>
<li><a href="https://github.com/AlexeyAB/darknet">darknet for linux and windows</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181101: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>object detect</tag>
        <tag>yolo</tag>
        <tag>darknet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux program address space and nm command tutorial</title>
    <url>//blog/linux-nm-command/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Linux-Unix-Address-Space"><a href="#Linux-Unix-Address-Space" class="headerlink" title="Linux&#x2F;Unix Address Space"></a>Linux&#x2F;Unix Address Space</h3><table>
<thead>
<tr>
<th align="center">memory area</th>
<th align="center">address space segment</th>
<th align="center">executable section</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Code</td>
<td align="center">Text</td>
<td align="center">.text</td>
</tr>
<tr>
<td align="center">Initialized data</td>
<td align="center">Data</td>
<td align="center">.data</td>
</tr>
<tr>
<td align="center">Zero-Initialized</td>
<td align="center">Data</td>
<td align="center">.bss</td>
</tr>
<tr>
<td align="center">Heap</td>
<td align="center">Data</td>
<td align="center">Heap</td>
</tr>
<tr>
<td align="center">Stack</td>
<td align="center">Stack</td>
<td align="center">Stack</td>
</tr>
</tbody></table>
<blockquote>
<p>BSS: Block Started by Symbol</p>
</blockquote>
<h4 id="program-memory-area"><a href="#program-memory-area" class="headerlink" title="program memory area"></a>program memory area</h4><p>program memory area: </p>
<ul>
<li>code: executable instructions （和 const 字符串常量？？？）</li>
<li>initialized-data:  static&#x2F;global 初始化不为０的</li>
<li>zero-initialized data(BSS): static&#x2F;global 初始化为０的</li>
<li>heap： malloc&#x2F;new 动态分配，大小不固定</li>
<li>stack：　非static的local variable; functin parameter; return value</li>
</ul>
<blockquote>
<p>bss它不占用程序文件的大小，但是占用程序运行时的内存空间。<br>zero-initialized data(BSS)区域的变量不占用exe的磁盘空间，其内容由操作系统初始化（清零），而initialized-data需要占用exe的磁盘空间，其内容由程序初始化<br>同一个program的N个不同process,在内存中共享同一个code&#x2F;text segment，同时都有自己的initialized-data,zero-initialized data(BSS)对应的data　segment<br>字符串常量</p>
</blockquote>
<h4 id="address-space-segment"><a href="#address-space-segment" class="headerlink" title="address space segment"></a>address space segment</h4><p>address space segment</p>
<ul>
<li>text </li>
<li>data</li>
<li>stack</li>
</ul>
<blockquote>
<ol>
<li>text,data,stack占用３块不同的地址空间。</li>
<li>initialized-data，zero-initialized data(BSS)，heap占用同一块连续的物理内存空间;</li>
<li>heap地址空间从小到大增长；stack的地址空间从大往小减小;</li>
</ol>
</blockquote>
<p>Heap，BSS，Data这三个段在物理内存中是连续存放的，可以这么理解：这三个是一体的。Text、Stack是独立存放的</p>
<h4 id="executable-file-section"><a href="#executable-file-section" class="headerlink" title="executable file section"></a>executable file section</h4><p>executable file section</p>
<ul>
<li>.text: 在进程最初被加载到内存中开始，该节的大小就被固定，只读readonly。</li>
<li>.data: 该节的大小在运行时固定的</li>
<li>.bss: 该节的大小在运行时固定的</li>
<li>heap: 从内存的低地址向高地址增长</li>
<li>stack: 从内存的高地址向低地址增长</li>
<li>.rodata: readonly data section</li>
</ul>
<p>eg</p>
<pre><code>size a.out 
   text	   data	    bss	    dec	    hex	filename
   1551	    600	     40	   2191	    88f	a.out
</code></pre>
<p>a.out加载到内存中的大小为2191 bytes.</p>
<h4 id="rodata"><a href="#rodata" class="headerlink" title="rodata"></a>rodata</h4><p>(1) const修饰的global放在.rodata, const修饰的local例外，没有放入常量区。<br>(３)对于global&#x2F;local字符串常量，编译器会去掉重复的常量，让程序的每个字符串常量只有一份，放在.rodata。（数组内容为字符串的除外）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">100</span>; <span class="comment">// .rodata </span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *str = <span class="string">&quot;123456789&quot;</span>; <span class="comment">// 123456789 ===&gt;.rodata LC0</span></span><br><span class="line"><span class="type">char</span> *str1 = <span class="string">&quot;helloworld&quot;</span>; <span class="comment">// helloworld===&gt;.rodata LC1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　 <span class="type">const</span> <span class="type">int</span> local_num = <span class="number">99</span>; <span class="comment">// 没有放入.rodata</span></span><br><span class="line">  <span class="type">char</span>* a = <span class="string">&quot;helloworld&quot;</span>;  <span class="comment">// helloworld===&gt;.rodata LC1</span></span><br><span class="line">  <span class="type">char</span> b[<span class="number">10</span>] = <span class="string">&quot;helloworld&quot;</span>;<span class="comment">// helloworld　没有放入.rodata</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="Example-code"><a href="#Example-code" class="headerlink" title="Example code"></a>Example code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x + y;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> aaa,bbb;  <span class="comment">// auto zero-intialized(.bss)</span></span><br><span class="line"><span class="type">int</span> ccc000 = <span class="number">0</span>; <span class="comment">// auto zero-initialized(.bss)</span></span><br><span class="line"><span class="type">int</span> ccc111 = <span class="number">1</span>;  <span class="comment">// initialized(.data)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *str1 = <span class="string">&quot;123&quot;</span>; <span class="comment">// str1---&gt;.data   123---&gt;.rodata A</span></span><br><span class="line"><span class="type">char</span> *str2 = <span class="string">&quot;xyz&quot;</span>; <span class="comment">//  str2---&gt;.data   xyz---&gt;.rodata B</span></span><br><span class="line"><span class="type">char</span> str3[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">// str3---&gt;.data  </span></span><br><span class="line"><span class="type">char</span> *str4; <span class="comment">// .bss</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> hhh; <span class="comment">// .bss</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> iii00 = <span class="number">0</span>; <span class="comment">// .bss</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> iii99 = <span class="number">99</span>; <span class="comment">// .data</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NUM99 = <span class="number">99</span>; <span class="comment">// .rodata</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NUM00 = <span class="number">0</span>; <span class="comment">// .rodata</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> jjj; <span class="comment">// .bss</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> kkk=<span class="number">1</span>; <span class="comment">// .data</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> local_const00 = <span class="number">0</span>; <span class="comment">// </span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> local_const99 = <span class="number">99</span>; <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *str5 = <span class="string">&quot;xyz&quot;</span>; <span class="comment">// str5===&gt; stack,  xyz===&gt; .rodata B</span></span><br><span class="line">    <span class="type">char</span> str6[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">// str6---&gt;stack,  abc ===&gt; stack</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> local = <span class="number">2</span>;  <span class="comment">// stack</span></span><br><span class="line">    <span class="type">int</span> *local_new = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>); <span class="comment">// heap</span></span><br><span class="line">    <span class="keyword">delete</span> local_new;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>g++ hello.cpp
nm a.out

0000000000601078 B aaa
000000000060107c B bbb
000000000060106c B __bss_start
0000000000601080 B ccc000
0000000000601048 D ccc111
0000000000601070 b completed.7594
0000000000601038 D __data_start
0000000000601038 W data_start
00000000004005e0 t deregister_tm_clones
0000000000400660 t __do_global_dtors_aux
0000000000600e08 t __do_global_dtors_aux_fini_array_entry
0000000000601040 D __dso_handle
0000000000600e18 d _DYNAMIC
000000000060106c D _edata
00000000006010a0 B _end
00000000004007a4 T _fini
0000000000400680 t frame_dummy
0000000000600e00 t __frame_dummy_init_array_entry
0000000000400910 r __FRAME_END__
0000000000601000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
00000000004007c4 r __GNU_EH_FRAME_HDR
0000000000400530 T _init
0000000000600e08 t __init_array_end
0000000000600e00 t __init_array_start
00000000004007b0 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000600e10 d __JCR_END__
0000000000600e10 d __JCR_LIST__
                 w _Jv_RegisterClasses
00000000004007a0 T __libc_csu_fini
0000000000400730 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
00000000004006ba T main
0000000000400620 t register_tm_clones
                 U __stack_chk_fail@@GLIBC_2.4
00000000004005b0 T _start
0000000000601050 D str1
0000000000601058 D str2
0000000000601060 D str3
0000000000601088 B str4
0000000000601070 D __TMC_END__
00000000004006a6 T _Z3addii
                 U _ZdlPv@@GLIBCXX_3.4
0000000000601090 b _ZL3hhh
0000000000601094 b _ZL5iii00
0000000000601064 d _ZL5iii99
00000000004007c0 r _ZL5NUM00
00000000004007bc r _ZL5NUM99
                 U _Znwm@@GLIBCXX_3.4
0000000000601098 b _ZZ4mainE3jjj
0000000000601068 d _ZZ4mainE3kkk
</code></pre>
<p>other commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings a.out</span><br><span class="line">readelf -s a.out</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.voidcn.com/article/p-wyahvgqg-qn.html">Linux段管理，BSS段，data段，.rodata段，text段</a></li>
<li><a href="https://www.sanfoundry.com/c-tutorials-different-segments-program-have/">c-tutorials-different-segments-program-have</a></li>
<li><a href="http://www.informit.com/articles/article.aspx?p=173438">Linux&#x2F;Unix process address space</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181031: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>address space</tag>
        <tag>nm</tag>
      </tags>
  </entry>
  <entry>
    <title>install apache httpd server 2.2 on windows 10</title>
    <url>//blog/install-apache-httpd-server-2-2-on-windows-10/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install-and-config"><a href="#install-and-config" class="headerlink" title="install and config"></a>install and config</h3><p>download <a href="https://www.apachelounge.com/download/win64/binaries/httpd-2.2.34-win64.zip">httpd-2.2.34-win64.zip</a><br>extract to <code>c:/Apache2</code><br>edit <code>conf/httpd.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerRoot &quot;c:/Apache2&quot;</span><br><span class="line">Listen 80</span><br><span class="line">ServerName 127.0.0.1</span><br><span class="line">DocumentRoot &quot;c:/Apache2/htdocs&quot;</span><br></pre></td></tr></table></figure>

<p>run <code>cmd.exe</code> as administrator and install <code>apache2.2 service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:/Apache2/bin</span><br><span class="line">httpd.exe -k install -n apache2.2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips: use <code>sc delete apache2.2</code> to delete service first if error occurs and then install again.</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20181114091911655-1258149903.png" alt="install service"></p>
<p>run <code>bin/ApacheMonitor.exe</code> to start <code>apache2.2 service</code></p>
<p><img src="https://kezunlin.me/images/posts/635233-20181114091916642-1053007383.png" alt="apache2.2 service running"></p>
<h3 id="access-from-local"><a href="#access-from-local" class="headerlink" title="access from local"></a>access from local</h3><p>test <code>localhost</code><br><img src="https://kezunlin.me/images/posts/635233-20181114092055122-1548918459.png" alt="works"></p>
<h3 id="access-from-remote"><a href="#access-from-remote" class="headerlink" title="access from remote"></a>access from remote</h3><p>edit <code>conf/httpd.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Directory &quot;c:/Apache2/htdocs&quot;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">#/Directory</span><br></pre></td></tr></table></figure>

<p>open <code>windows defender</code> and allow <code>Apache Http Server</code> packets in&#x2F;out<br><img src="https://kezunlin.me/images/posts/635233-20181114094200752-1237273524.png" alt="allow apache "></p>
<ul>
<li>server host ip: 192.168.6.149</li>
<li>access host ip: 192.168.6.100</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@192.168.6.100&gt;$  wget http://192.168.6.149/1.txt</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181114: created.</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>apache</tag>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title>how to use tensorrt int8 to do network calibration</title>
    <url>//blog/tensorrt-int8-inference/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/dacc4196/">Part 1: install and configure tensorrt 4 on ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/bcdfb73c/">Part 2: tensorrt fp32 fp16 tutorial</a></li>
<li><strong><a href="https://kezunlin.me/post/30e0cb19/">Part 3: tensorrt int8 tutorial</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="FP32-FP16-INT8-range"><a href="#FP32-FP16-INT8-range" class="headerlink" title="FP32&#x2F;FP16&#x2F;INT8 range"></a>FP32&#x2F;FP16&#x2F;INT8 range</h3><p>INT8 has significantly lower precision and dynamic range compared to FP32.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20181119142909032-2033014099.png" alt="png"></p>
<p>High-throughput INT8 math<br><img src="https://kezunlin.me/images/posts/635233-20181119150611865-1044627462.png" alt="png"></p>
<blockquote>
<p>DP4A: int8 dot product Requires <code>sm_61+</code> (Pascal TitanX, GTX 1080, Tesla P4, P40 and others).</p>
</blockquote>
<h3 id="Calibration-Dataset"><a href="#Calibration-Dataset" class="headerlink" title="Calibration Dataset"></a>Calibration Dataset</h3><blockquote>
<p>When preparing the calibration dataset, you should capture the expected distribution of data in typical inference scenarios. You want to make sure that the calibration dataset covers all the expected scenarios; for example, clear weather, rainy day, night scenes, etc. If you are creating your own dataset, we recommend creating a separate calibration dataset. The calibration dataset shouldn’t overlap with the training, validation or test datasets, in order to avoid a situation where the calibrated model only works well on the these datasets.<br>具有代表性，最好是val set的子集。</p>
</blockquote>
<h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p>caffe &#x2F; tensorrt FP32 &#x2F; tensorrt INT8</p>
<p><img src="https://kezunlin.me/images/posts/635233-20181119145909461-564925193.png" alt="png"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="fp32"><a href="#fp32" class="headerlink" title="fp32"></a>fp32</h3><p>by default.</p>
<h3 id="fp16"><a href="#fp16" class="headerlink" title="fp16"></a>fp16</h3><ul>
<li><p>cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">builder-&gt;<span class="built_in">setFp16Mode</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">builder.set_fp16_mode(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="int8"><a href="#int8" class="headerlink" title="int8"></a>int8</h3><ul>
<li><p>cpp usage</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">builder-&gt;<span class="built_in">setInt8Mode</span>(<span class="literal">true</span>);</span><br><span class="line">builder-&gt;<span class="built_in">setInt8Calibrator</span>(calibrator);</span><br></pre></td></tr></table></figure>
</li>
<li><p>python usage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorrt <span class="keyword">as</span> trt</span><br><span class="line"></span><br><span class="line">NUM_IMAGES_PER_BATCH = <span class="number">5</span></span><br><span class="line">batchstream = ImageBatchStream(NUM_IMAGES_PER_BATCH，calibration_files)</span><br><span class="line"></span><br><span class="line">Int8_calibrator = trt.infer.EntropyCalibrator([“input_node_name”]，batchstream)</span><br><span class="line"></span><br><span class="line">trt_builder = trt.infer.create_infer_builder(G_LOGGER)</span><br><span class="line">trt_builder.set_int8_mode(<span class="literal">True</span>)</span><br><span class="line">trt_builder.set_int8_calibrator(Int8_calibrator)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Int8-Calibrator"><a href="#Int8-Calibrator" class="headerlink" title="Int8 Calibrator"></a>Int8 Calibrator</h2><p>see <a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-developer-guide/index.html">5.1.3.2. INT8 Calibration Using C++</a></p>
<p>Calibration can be slow, therefore, the <code>IInt8Calibrator</code> interface provides methods for caching intermediate data. Using these methods effectively requires a more detailed understanding of calibration.</p>
<p>When building an INT8 engine, the builder performs the following steps:</p>
<ol>
<li>Builds a 32-bit engine, runs it on the calibration set, and records a histogram for each tensor of the distribution of activation values.</li>
<li>Builds a calibration table from the histograms.</li>
<li>Builds the INT8 engine from the calibration table and the network definition.</li>
</ol>
<p>The calibration table can be cached. Caching is useful when building the same network multiple times, for example, on multiple platforms. It captures data derived from the network and the calibration set. The parameters are recorded in the table. If the network or calibration set changes, it is the application’s responsibility to invalidate the cache.</p>
<p>The cache is used as follows:</p>
<ol>
<li>if a calibration table is found, calibration is skipped, otherwise:<br>the calibration table is built from the histograms and parameters</li>
<li>then the INT8 network is built from the network definition and the calibration table.</li>
</ol>
<p>Cached data is passed as a pointer and length.<br>After you have implemented the calibrator, you can configure the builder to use it:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">builder-&gt;<span class="built_in">setInt8Calibrator</span>(calibrator);</span><br></pre></td></tr></table></figure>

<p>The <code>make_plan</code> program must run on the target system in order for the TensorRT engine to be optimized correctly for that system. However, if an INT8 calibration cache was produced on the host, the cache may be re-used by the builder on the target when generating the engine (in other words, there is no need to do INT8 calibration on the target system itself).</p>
<blockquote>
<p>INT8 calibration cache can be re-used, while engine can not.</p>
</blockquote>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h4><p>cpp:  </p>
<ul>
<li><p>see <a href="https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps/blob/master/sources/lib/calibrator.h">calibrator.h</a></p>
</li>
<li><p>and <a href="https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps/blob/master/sources/lib/calibrator.cpp">calibrator.cpp</a></p>
</li>
</ul>
<p>calibrator.h </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CALIBRATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CALIBRATOR_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NvInfer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ds_image.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;trt_utils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Int8EntropyCalibrator</span> : <span class="keyword">public</span> nvinfer1::IInt8EntropyCalibrator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Int8EntropyCalibrator</span>(<span class="type">const</span> uint&amp; batchSize, <span class="type">const</span> std::string&amp; calibrationSetPath,</span><br><span class="line">                          <span class="type">const</span> std::string&amp; calibTableFilePath, <span class="type">const</span> <span class="type">uint64_t</span>&amp; inputSize,</span><br><span class="line">                          <span class="type">const</span> uint&amp; inputH, <span class="type">const</span> uint&amp; inputW, <span class="type">const</span> std::string&amp; inputBlobName);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Int8EntropyCalibrator</span>() &#123; <span class="built_in">NV_CUDA_CHECK</span>(<span class="built_in">cudaFree</span>(m_DeviceInput)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getBatchSize</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> m_BatchSize; &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getBatch</span><span class="params">(<span class="type">void</span>* bindings[], <span class="type">const</span> <span class="type">char</span>* names[], <span class="type">int</span> nbBindings)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">void</span>* <span class="title">readCalibrationCache</span><span class="params">(<span class="type">size_t</span>&amp; length)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeCalibrationCache</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* cache, <span class="type">size_t</span> length)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> uint m_BatchSize;</span><br><span class="line">    <span class="type">const</span> uint m_InputH;</span><br><span class="line">    <span class="type">const</span> uint m_InputW;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> m_InputSize;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> m_InputCount;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* m_InputBlobName;</span><br><span class="line">    <span class="type">const</span> std::string m_CalibTableFilePath&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    uint m_ImageIndex;</span><br><span class="line">    <span class="type">bool</span> m_ReadCache&#123;<span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="type">void</span>* m_DeviceInput&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    std::vector&lt;std::string&gt; m_ImageList;</span><br><span class="line">    std::vector&lt;<span class="type">char</span>&gt; m_CalibrationCache;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>calibrator.cpp </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;calibrator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line">Int8EntropyCalibrator::<span class="built_in">Int8EntropyCalibrator</span>(<span class="type">const</span> uint&amp; batchSize,</span><br><span class="line">                                             <span class="type">const</span> std::string&amp; calibrationSetPath,</span><br><span class="line">                                             <span class="type">const</span> std::string&amp; calibTableFilePath,</span><br><span class="line">                                             <span class="type">const</span> <span class="type">uint64_t</span>&amp; inputSize, <span class="type">const</span> uint&amp; inputH,</span><br><span class="line">                                             <span class="type">const</span> uint&amp; inputW, <span class="type">const</span> std::string&amp; inputBlobName) :</span><br><span class="line">    <span class="built_in">m_BatchSize</span>(batchSize),</span><br><span class="line">    <span class="built_in">m_InputH</span>(inputH),</span><br><span class="line">    <span class="built_in">m_InputW</span>(inputW),</span><br><span class="line">    <span class="built_in">m_InputSize</span>(inputSize),</span><br><span class="line">    <span class="built_in">m_InputCount</span>(batchSize * inputSize),</span><br><span class="line">    <span class="built_in">m_InputBlobName</span>(inputBlobName.<span class="built_in">c_str</span>()),</span><br><span class="line">    <span class="built_in">m_CalibTableFilePath</span>(calibTableFilePath),</span><br><span class="line">    <span class="built_in">m_ImageIndex</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_ImageList = <span class="built_in">loadListFromTextFile</span>(calibrationSetPath);</span><br><span class="line">    m_ImageList.<span class="built_in">resize</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m_ImageList.<span class="built_in">size</span>() / m_BatchSize) * m_BatchSize);</span><br><span class="line">    std::<span class="built_in">random_shuffle</span>(m_ImageList.<span class="built_in">begin</span>(), m_ImageList.<span class="built_in">end</span>(), [](<span class="type">int</span> i) &#123; <span class="keyword">return</span> <span class="built_in">rand</span>() % i; &#125;);</span><br><span class="line">    <span class="built_in">NV_CUDA_CHECK</span>(<span class="built_in">cudaMalloc</span>(&amp;m_DeviceInput, m_InputCount * <span class="built_in">sizeof</span>(<span class="type">float</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Int8EntropyCalibrator::getBatch</span><span class="params">(<span class="type">void</span>* bindings[], <span class="type">const</span> <span class="type">char</span>* names[], <span class="type">int</span> nbBindings)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_ImageIndex + m_BatchSize &gt;= m_ImageList.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load next batch</span></span><br><span class="line">    <span class="function">std::vector&lt;DsImage&gt; <span class="title">dsImages</span><span class="params">(m_BatchSize)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (uint j = m_ImageIndex; j &lt; m_ImageIndex + m_BatchSize; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        dsImages.<span class="built_in">at</span>(j - m_ImageIndex) = <span class="built_in">DsImage</span>(m_ImageList.<span class="built_in">at</span>(j), m_InputH, m_InputW);</span><br><span class="line">    &#125;</span><br><span class="line">    m_ImageIndex += m_BatchSize;</span><br><span class="line"></span><br><span class="line">    cv::Mat trtInput = <span class="built_in">blobFromDsImages</span>(dsImages, m_InputH, m_InputW);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NV_CUDA_CHECK</span>(<span class="built_in">cudaMemcpy</span>(m_DeviceInput, trtInput.<span class="built_in">ptr</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>), m_InputCount * <span class="built_in">sizeof</span>(<span class="type">float</span>),</span><br><span class="line">                             cudaMemcpyHostToDevice));</span><br><span class="line">    <span class="built_in">assert</span>(!<span class="built_in">strcmp</span>(names[<span class="number">0</span>], m_InputBlobName));</span><br><span class="line">    bindings[<span class="number">0</span>] = m_DeviceInput;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">void</span>* <span class="title">Int8EntropyCalibrator::readCalibrationCache</span><span class="params">(<span class="type">size_t</span>&amp; length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* output;</span><br><span class="line">    m_CalibrationCache.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">assert</span>(!m_CalibTableFilePath.<span class="built_in">empty</span>());</span><br><span class="line">    <span class="function">std::ifstream <span class="title">input</span><span class="params">(m_CalibTableFilePath, std::ios::binary)</span></span>;</span><br><span class="line">    input &gt;&gt; std::noskipws;</span><br><span class="line">    <span class="keyword">if</span> (m_ReadCache &amp;&amp; input.<span class="built_in">good</span>())</span><br><span class="line">        std::<span class="built_in">copy</span>(std::<span class="built_in">istream_iterator</span>&lt;<span class="type">char</span>&gt;(input), std::<span class="built_in">istream_iterator</span>&lt;<span class="type">char</span>&gt;(),</span><br><span class="line">                  std::<span class="built_in">back_inserter</span>(m_CalibrationCache));</span><br><span class="line"></span><br><span class="line">    length = m_CalibrationCache.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (length)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Using cached calibration table to build the engine&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        output = &amp;m_CalibrationCache[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;New calibration table will be created to build the engine&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        output = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Int8EntropyCalibrator::writeCalibrationCache</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* cache, <span class="type">size_t</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(!m_CalibTableFilePath.<span class="built_in">empty</span>());</span><br><span class="line">    <span class="function">std::ofstream <span class="title">output</span><span class="params">(m_CalibTableFilePath, std::ios::binary)</span></span>;</span><br><span class="line">    output.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(cache), length);</span><br><span class="line">    output.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="c-v2"><a href="#c-v2" class="headerlink" title="c++ v2"></a>c++ v2</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Int8CacheCalibrator</span> : <span class="keyword">public</span> IInt8EntropyCalibrator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Int8CacheCalibrator</span>(std::string cacheFile)</span><br><span class="line">    : <span class="built_in">mCacheFile</span>(cacheFile) &#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Int8CacheCalibrator</span>() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getBatchSize</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">getBatch</span><span class="params">(<span class="type">void</span>* bindings[], <span class="type">const</span> <span class="type">char</span>* names[], <span class="type">int</span> nbBindings)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="type">void</span>* <span class="title">readCalibrationCache</span><span class="params">(<span class="type">size_t</span>&amp; length)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    mCalibrationCache.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="function">std::ifstream <span class="title">input</span><span class="params">(mCacheFile, std::ios::binary)</span></span>;</span><br><span class="line">    input &gt;&gt; std::noskipws;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="built_in">good</span>()) &#123;</span><br><span class="line">      std::<span class="built_in">copy</span>(std::<span class="built_in">istream_iterator</span>(input),</span><br><span class="line">      std::<span class="built_in">istream_iterator</span>&lt;<span class="type">char</span>&gt;(),</span><br><span class="line">      std::<span class="built_in">back_inserter</span>&lt;<span class="type">char</span>&gt;(mCalibrationCache));</span><br><span class="line">    &#125;</span><br><span class="line">    length = mCalibrationCache.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> length ? &amp;mCalibrationCache[<span class="number">0</span>] : <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::string mCacheFile;</span><br><span class="line">  std::vector&lt;<span class="type">char</span>&gt; mCalibrationCache;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><ul>
<li>see <a href="https://devblogs.nvidia.com/int8-inference-autonomous-vehicles-tensorrt/">calibrator.py</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pycuda.driver <span class="keyword">as</span> cuda</span><br><span class="line"><span class="keyword">import</span> pycuda.autoinit</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> tensorrt <span class="keyword">as</span> trt</span><br><span class="line"></span><br><span class="line">CHANNEL = <span class="number">3</span></span><br><span class="line">HEIGHT = <span class="number">512</span></span><br><span class="line">WIDTH = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PythonEntropyCalibrator</span>(trt.infer.EntropyCalibrator):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_layers, stream</span>):</span><br><span class="line">    trt.infer.EntropyCalibrator.__init__(<span class="variable language_">self</span>)       </span><br><span class="line">    <span class="variable language_">self</span>.input_layers = input_layers</span><br><span class="line">    <span class="variable language_">self</span>.stream = stream</span><br><span class="line">  <span class="variable language_">self</span>.d_input = cuda.mem_alloc(<span class="variable language_">self</span>.stream.calibration_data.nbytes)</span><br><span class="line">    stream.reset()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_batch_size</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.stream.batch_size</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_batch</span>(<span class="params">self, bindings, names</span>):</span><br><span class="line">    batch = <span class="variable language_">self</span>.stream.next_batch()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> batch.size:   </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">      </span><br><span class="line">    cuda.memcpy_htod(<span class="variable language_">self</span>.d_input, batch)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable language_">self</span>.input_layers[<span class="number">0</span>]:</span><br><span class="line">      <span class="keyword">assert</span> names[<span class="number">0</span>] != i</span><br><span class="line"></span><br><span class="line">    bindings[<span class="number">0</span>] = <span class="built_in">int</span>(<span class="variable language_">self</span>.d_input)</span><br><span class="line">    <span class="keyword">return</span> bindings</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">read_calibration_cache</span>(<span class="params">self, length</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">write_calibration_cache</span>(<span class="params">self, ptr, size</span>):</span><br><span class="line">    cache = ctypes.c_char_p(<span class="built_in">int</span>(ptr))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;calibration_cache.bin&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(cache.value)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://devblogs.nvidia.com/int8-inference-autonomous-vehicles-tensorrt/">int8-inference-autonomous-vehicles-tensorrt</a></li>
<li><a href="http://on-demand.gputechconf.com/gtc/2017/presentation/s7310-8-bit-inference-with-tensorrt.pdf">8-bit-inference-with-tensorrt</a></li>
<li><a href="https://blog.csdn.net/qq_32043199/article/details/81119357">8-bit-inference-with-tensorrt 中文翻译版</a></li>
<li><a href="https://note.youdao.com/share/?id=829ba6cabfde990e2832b048a4f492b3&type=note#/">基于tensorRT方案的INT8量化实现</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181119: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>inference framework</tag>
        <tag>tensorrt</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to cuda programming with C++</title>
    <url>//blog/c-cuda-programming-tutorial/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/7d7131f4/">Part 1:cpp cuda programming tutorial</a></strong></li>
<li><a href="https://kezunlin.me/post/ee123cac/">Part 2: cuda activation kernels</a></li>
<li><a href="https://kezunlin.me/post/ad5c5bd9/">Part 3: cublasSgemm for large matrix multiplication on gpu</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>在异构计算架构中，GPU与CPU通过PCIe总线连接在一起来协同工作，CPU所在位置称为为主机端（host），而GPU所在位置称为设备端（device），如下图所示。<br><img src="https://kezunlin.me/images/posts/635233-20181121153034561-963659165.png" alt="host device"></p>
<p>基于CPU+GPU的异构计算平台可以优势互补，CPU负责处理逻辑复杂的串行程序，而GPU重点处理数据密集型的并行计算程序，从而发挥最大功效。<br><img src="https://kezunlin.me/images/posts/635233-20181121153038252-126700564.png" alt="workflow"></p>
<h3 id="CUDA编程模型基础"><a href="#CUDA编程模型基础" class="headerlink" title="CUDA编程模型基础"></a>CUDA编程模型基础</h3><ul>
<li>host: CPU,Memory</li>
<li>device:  GPU,Memory</li>
</ul>
<p>CUDA程序中既包含host程序，又包含device程序，它们分别在CPU和GPU上运行。同时，host与device之间可以进行通信，这样它们之间可以进行数据拷贝。典型的CUDA程序的执行流程如下：</p>
<ol>
<li>分配host内存，并进行数据初始化；</li>
<li>分配device内存，并从host将数据拷贝到device上；</li>
<li>调用CUDA的核函数(kernel function)在device上完成指定的运算；</li>
<li>将device上的运算结果拷贝到host上；</li>
<li>释放device和host上分配的内存。</li>
</ol>
<h4 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h4><p>kernel是CUDA中一个重要的概念，kernel是在device上线程中并行执行的函数，核函数用<code>__global__</code>符号声明，在调用时需要用<code>&lt;&lt;&lt;grid, block&gt;&gt;&gt;</code>来指定kernel要执行的线程数量，在CUDA中，每一个线程都要执行核函数，并且每个线程会分配一个唯一的线程号thread ID，这个ID值可以通过核函数的内置变量<code>threadIdx</code>来获得。</p>
<p>由于GPU实际上是异构模型，所以需要区分host和device上的代码，在CUDA中是通过函数类型限定词开区别host和device上的函数，主要的三个函数类型限定词如下：</p>
<ul>
<li><code>__global__</code>：在device上执行，从host中调用（一些特定的GPU也可以从device上调用），返回类型必须是void，不支持可变参数，不能成为类成员函数。注意用<code>__global__</code>定义的kernel是异步的，这意味着host不会等待kernel执行完就执行下一步。</li>
<li><code>__device__</code>：在device上执行，单仅可以从device中调用，不可以和<code>__global__</code>同时用。</li>
<li><code>__host__</code>：在host上执行，仅可以从host上调用，一般省略不写，不可以和<code>__global__</code>同时用，但可和<code>__device__</code>同时用，此时函数会在device和host都编译。</li>
</ul>
<h4 id="grid-block-thread"><a href="#grid-block-thread" class="headerlink" title="grid&#x2F;block&#x2F;thread"></a>grid&#x2F;block&#x2F;thread</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">dim3 <span class="title">grid</span><span class="params">(<span class="number">3</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">5</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">kernel_fun&lt;&lt;&lt; grid, block &gt;&gt;&gt;(prams...);</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20181121154406313-63648281.png" alt="grid block thread"></p>
<blockquote>
<p>The key is in CUDA’s <code>&lt;&lt;&lt;1, 1&gt;&gt;&gt;</code>syntax. This is called the execution configuration, and it tells the CUDA runtime how many parallel threads to use for the launch on the GPU. </p>
</blockquote>
<h4 id="builtin-variables"><a href="#builtin-variables" class="headerlink" title="builtin variables"></a>builtin variables</h4><ul>
<li>threadIdx</li>
<li>blockIdx</li>
<li>blockDim</li>
<li>gridDim</li>
</ul>
<p>对于一个2-dim的<code>block(Dx,Dy)</code>，线程<code>(x,y)</code>的ID值为<code>(x+y∗Dx)</code>，<br>如果是3-dim的<code>block(Dx,Dy,Dz)</code>，线程<code>(x,y,z)</code>的ID值为<code>(x+y∗Dx+z∗Dx∗Dy)</code>。</p>
<h4 id="matrix-add"><a href="#matrix-add" class="headerlink" title="matrix add"></a>matrix add</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kernel function</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatAdd</span><span class="params">(<span class="type">float</span> A[N][N], <span class="type">float</span> B[N][N], <span class="type">float</span> C[N][N])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">int</span> col = blockIdx.x * blockDim.x + threadIdx.x; </span><br><span class="line">    <span class="type">int</span> row = blockIdx.y * blockDim.y + threadIdx.y; </span><br><span class="line">    <span class="keyword">if</span> (col &lt; N &amp;&amp; row &lt; N) </span><br><span class="line">        C[row][col] = A[row][col] + B[row][col]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Kernel config</span></span><br><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(<span class="number">16</span>, <span class="number">16</span>)</span></span>; </span><br><span class="line">    <span class="function">dim3 <span class="title">numBlocks</span><span class="params">(N / threadsPerBlock.x, N / threadsPerBlock.y)</span></span>;</span><br><span class="line">    <span class="comment">// kernel call</span></span><br><span class="line">    MatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C); </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CUDA内存模型"><a href="#CUDA内存模型" class="headerlink" title="CUDA内存模型"></a>CUDA内存模型</h3><h4 id="gpu-memory"><a href="#gpu-memory" class="headerlink" title="gpu memory"></a>gpu memory</h4><p><img src="https://kezunlin.me/images/posts/635233-20181121160102636-1427071747.png" alt="gpu memory"></p>
<h4 id="logical-physical-layer"><a href="#logical-physical-layer" class="headerlink" title="logical&#x2F;physical layer"></a>logical&#x2F;physical layer</h4><p><img src="https://kezunlin.me/images/posts/635233-20181121161156616-1647932316.png" alt="logical physical"></p>
<ul>
<li><p><code>SP</code>最基本的处理单元，<code>Streaming Processor</code>，也称为CUDA core。</p>
</li>
<li><p><code>SM</code>是英文名是 <code>Streaming Multiprocessor</code>，翻译过来就是流式多处理器。</p>
</li>
<li><p>一个kernel的各个线程块有可能被分配多个<code>SM</code>，所以grid只是逻辑层，而SM才是执行的物理层。<code>SM</code>采用的是<code>SIMT</code> (<code>Single-Instruction, Multiple-Thread</code>，单指令多线程)架构，基本的执行单元是线程束（<code>wraps</code>)，线程束包含32个线程，这些线程同时执行相同的指令，但是每个线程都包含自己的指令地址计数器和寄存器状态，也有自己独立的执行路径。</p>
</li>
<li><p>由于<code>SM</code>的基本执行单元是包含32个线程的线程束，所以block大小一般要设置为32的倍数。</p>
</li>
<li><p>每个thread由每个SP执行</p>
</li>
<li><p>每个thread block由SM执行</p>
</li>
<li><p>一个kernel其实由一个grid来执行，一个kernel一次只能在一个GPU上执行</p>
</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>see <a href="https://gist.github.com/kezunlin/73a82cad86e920bb300b042c1f7002d1">cuda-demo</a></p>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 2.8.7)</span><br><span class="line"></span><br><span class="line">project (CudaExample)</span><br><span class="line">enable_language(C)</span><br><span class="line">enable_language(CXX)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output folder where your program will be created</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BINARY_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line">find_package(CUDA REQUIRED) <span class="comment"># user-defined</span></span><br><span class="line"></span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; CUDA_LIBRARIES = <span class="variable">$&#123;CUDA_LIBRARIES&#125;</span>&quot;</span>)</span><br><span class="line">MESSAGE( [Main] <span class="string">&quot; CUDA_INCLUDE_DIRS = <span class="variable">$&#123;CUDA_INCLUDE_DIRS&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following folder will be included</span></span><br><span class="line">include_directories(</span><br><span class="line">	<span class="variable">$&#123;CUDA_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CUDA_NVCC_FLAGS <span class="string">&quot;-g -G&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>(GENCODE -gencode=<span class="built_in">arch</span>=compute_61,code=sm_61)</span><br><span class="line"></span><br><span class="line">cuda_add_executable(demo src/demo.cu OPTIONS <span class="variable">$&#123;GENCODE&#125;</span>)</span><br><span class="line">target_link_libraries(demo <span class="variable">$&#123;CUDA_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#cuda_add_library(gpu SHARED $&#123;CURRENT_HEADERS&#125; $&#123;CURRENT_SOURCES&#125;)</span></span><br><span class="line"><span class="comment">#cuda_add_library(gpu STATIC $&#123;CURRENT_HEADERS&#125; $&#123;CURRENT_SOURCES&#125;)</span></span><br></pre></td></tr></table></figure>



<h3 id="vector-add"><a href="#vector-add" class="headerlink" title="vector add"></a>vector add</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">https://blog.csdn.net/fb_help/article/details/79330815</span></span><br><span class="line"><span class="comment">foo.cuh + foo.cu</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function to add the elements of two arrays</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> n, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">float</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">kernel_add</span><span class="params">(<span class="type">int</span> n, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">float</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// thread id</span></span><br><span class="line">    <span class="type">int</span> i = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">    c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">kernel_add2</span><span class="params">(<span class="type">int</span> n, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">float</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// thread id</span></span><br><span class="line">	<span class="type">int</span> index = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// grid-stride loop</span></span><br><span class="line">	<span class="type">int</span> grid_stride = blockDim.x * gridDim.x; <span class="comment">// 256*4096 </span></span><br><span class="line">	<span class="comment">// in this case; only 1 loop</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; n; i += grid_stride)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i] = a[i] + b[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">device_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> deviceCount;</span><br><span class="line">	<span class="built_in">cudaGetDeviceCount</span>(&amp;deviceCount);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;deviceCount;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cudaDeviceProp devProp;</span><br><span class="line">		<span class="built_in">cudaGetDeviceProperties</span>(&amp;devProp, i);</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;使用GPU device &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; devProp.name &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;设备全局内存总量： &quot;</span> &lt;&lt; devProp.totalGlobalMem / <span class="number">1024</span> / <span class="number">1024</span> &lt;&lt; <span class="string">&quot;MB&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;SM的数量：&quot;</span> &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;每个SM的最大线程数：&quot;</span> &lt;&lt; devProp.maxThreadsPerMultiProcessor &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;每个SM的最大线程束数(warps)：&quot;</span> &lt;&lt; devProp.maxThreadsPerMultiProcessor / <span class="number">32</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;每个线程块(Block)的共享内存大小：&quot;</span> &lt;&lt; devProp.sharedMemPerBlock / <span class="number">1024.0</span> &lt;&lt; <span class="string">&quot; KB&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;每个线程块(Block)的最大线程数：&quot;</span> &lt;&lt; devProp.maxThreadsPerBlock &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;每个线程块(Block)可用的32位寄存器数量： &quot;</span> &lt;&lt; devProp.regsPerBlock &lt;&lt; std::endl;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;======================================================&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_cpu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">float</span> *A, *B, *C;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">	<span class="type">int</span> size = n * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// CPU端分配内存</span></span><br><span class="line">	A = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">	B = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">	C = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		A[i] = <span class="number">90.0</span>;</span><br><span class="line">		B[i] = <span class="number">10.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Run kernel on 1M elements on the CPU</span></span><br><span class="line">	<span class="built_in">add</span>(n, A, B, C);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 校验误差</span></span><br><span class="line">	<span class="type">float</span> max_error = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		max_error += <span class="built_in">fabs</span>(<span class="number">100.0</span> - C[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;max error is &quot;</span> &lt;&lt; max_error &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放CPU端的内存</span></span><br><span class="line">	<span class="built_in">free</span>(A);</span><br><span class="line">	<span class="built_in">free</span>(B);</span><br><span class="line">	<span class="built_in">free</span>(C);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cudaMalloc+cudaMemcpy+cudaFree</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test_gpu_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span>*A, *Ad, *B, *Bd, *C, *Cd;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="type">int</span> size = n * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CPU端分配内存</span></span><br><span class="line">    A = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">    B = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">    C = (<span class="type">float</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = <span class="number">90.0</span>;</span><br><span class="line">        B[i] = <span class="number">10.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GPU端分配内存</span></span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;Ad, size);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;Bd, size);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;Cd, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CPU的数据拷贝到GPU端</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Ad, A, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Bd, B, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Bd, B, size, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1-dim</span></span><br><span class="line">    <span class="comment">// 定义kernel执行配置，（1024*1024/512）个block，每个block里面有512个线程</span></span><br><span class="line">	<span class="type">int</span> block_size = <span class="number">512</span>;</span><br><span class="line">	<span class="type">int</span> num_of_blocks = (n + block_size - <span class="number">1</span>) / block_size; </span><br><span class="line">    <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(block_size)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(num_of_blocks)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    kernel_add&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(n, Ad, Bd, Cd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将在GPU端计算好的结果拷贝回CPU端</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(C, Cd, size, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验误差</span></span><br><span class="line">    <span class="type">float</span> max_error = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max_error += <span class="built_in">fabs</span>(<span class="number">100.0</span> - C[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max error is &quot;</span> &lt;&lt; max_error &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放CPU端、GPU端的内存</span></span><br><span class="line">    <span class="built_in">free</span>(A);</span><br><span class="line">    <span class="built_in">free</span>(B);</span><br><span class="line">    <span class="built_in">free</span>(C);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Ad);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Bd);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Cd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cudaMallocManaged+cudaDeviceSynchronize+cudaFree</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_gpu_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">float</span>*A, *B, *C;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">	<span class="type">int</span> size = n * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allocate Unified Memory – accessible from CPU or GPU</span></span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A, size);</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B, size);</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C, size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		A[i] = <span class="number">90.0</span>;</span><br><span class="line">		B[i] = <span class="number">10.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1-dim</span></span><br><span class="line">	<span class="comment">// 定义kernel执行配置，（1024*1024/512）个block，每个block里面有512个线程</span></span><br><span class="line">	<span class="type">int</span> block_size = <span class="number">512</span>;</span><br><span class="line">	<span class="type">int</span> num_of_blocks = (n + block_size - <span class="number">1</span>) / block_size;</span><br><span class="line">	<span class="function">dim3 <span class="title">dimBlock</span><span class="params">(block_size)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">dimGrid</span><span class="params">(num_of_blocks)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 执行kernel</span></span><br><span class="line">	kernel_add2 &lt;&lt; &lt;dimGrid, dimBlock &gt;&gt; &gt;(n, A, B, C);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wait for GPU to finish before accessing on host</span></span><br><span class="line">	<span class="built_in">cudaDeviceSynchronize</span>(); <span class="comment">// block until the GPU has finished all tasks</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 校验误差</span></span><br><span class="line">	<span class="type">float</span> max_error = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		max_error += <span class="built_in">fabs</span>(<span class="number">100.0</span> - C[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;max error is &quot;</span> &lt;&lt; max_error &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Free Unified Memory</span></span><br><span class="line">	<span class="built_in">cudaFree</span>(A);</span><br><span class="line">	<span class="built_in">cudaFree</span>(B);</span><br><span class="line">	<span class="built_in">cudaFree</span>(C);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">device_info</span>();</span><br><span class="line">	<span class="built_in">test_cpu</span>();</span><br><span class="line">	<span class="built_in">test_gpu_1</span>();</span><br><span class="line">	<span class="built_in">test_gpu_2</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>notes for <code>block_size</code> and <code>num_of_blocks</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> block_size = <span class="number">512</span>;</span><br><span class="line"><span class="type">int</span> num_of_blocks = (n + block_size - <span class="number">1</span>) / block_size; <span class="comment">// 4096</span></span><br><span class="line"><span class="function">dim3 <span class="title">dimBlock</span><span class="params">(block_size)</span></span>;</span><br><span class="line"><span class="function">dim3 <span class="title">dimGrid</span><span class="params">(num_of_blocks)</span></span>;</span><br></pre></td></tr></table></figure>

<p>notes for <code>grid-stride loop</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">kernel_add2</span><span class="params">(<span class="type">int</span> n, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">float</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// thread id</span></span><br><span class="line">	<span class="type">int</span> index = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// grid-stride loop</span></span><br><span class="line">	<span class="type">int</span> grid_stride = blockDim.x * gridDim.x; <span class="comment">// 256*4096 </span></span><br><span class="line">	<span class="comment">// in this case; only 1 loop</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; n; i += grid_stride)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i] = a[i] + b[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20181122094641728-827239450.png" alt="thread block and grid size"></p>
<h3 id="nvprof"><a href="#nvprof" class="headerlink" title="nvprof"></a>nvprof</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvprof.exe demo.exe </span><br></pre></td></tr></table></figure>

<pre><code>==8748== Profiling application: .\demo.exe
==8748== Profiling result:
Time(%)      Time     Calls       Avg       Min       Max  Name
 43.63%  1.6413ms         3  547.10us  517.71us  591.41us  [CUDA memcpy HtoD]
 30.11%  1.1327ms         1  1.1327ms  1.1327ms  1.1327ms  [CUDA memcpy DtoH]
 26.26%  987.80us         2  493.90us  243.43us  744.37us  kernel_add(int, float*, float*, float*)
</code></pre>
<blockquote>
<p>at <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin\nvprof.exe</code></p>
</blockquote>
<h3 id="matrix-multiply"><a href="#matrix-multiply" class="headerlink" title="matrix multiply"></a>matrix multiply</h3><ul>
<li>for 1-dim vector add, we use 1-dim grid and block</li>
<li>for 2-dim matrix multiply, we use 2-dim grid and block.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"><span class="comment">// 2-dim</span></span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"><span class="comment">// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> width;</span><br><span class="line">	<span class="type">int</span> height;</span><br><span class="line">	<span class="type">float</span> *elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取矩阵A的(row, col)元素</span></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">getElement</span><span class="params">(Matrix *A, <span class="type">int</span> row, <span class="type">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A-&gt;elements[row * A-&gt;width + col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为矩阵A的(row, col)元素赋值</span></span><br><span class="line"><span class="function">__device__ <span class="type">void</span> <span class="title">setElement</span><span class="params">(Matrix *A, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">float</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A-&gt;elements[row * A-&gt;width + col] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵相乘kernel，2-D，每个线程计算一个元素</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">matMulKernel</span><span class="params">(Matrix *A, Matrix *B, Matrix *C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">int</span> row = threadIdx.y + blockIdx.y * blockDim.y;</span><br><span class="line">	<span class="type">int</span> col = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A-&gt;width; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += <span class="built_in">getElement</span>(A, row, i) * <span class="built_in">getElement</span>(B, i, col);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">setElement</span>(C, row, col, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_gpu_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> width = <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line">	<span class="type">int</span> height = <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">	Matrix *A, *B, *C;</span><br><span class="line">	<span class="comment">// 申请托管内存</span></span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> nBytes = width * height * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A-&gt;elements, nBytes);</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B-&gt;elements, nBytes);</span><br><span class="line">	<span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C-&gt;elements, nBytes);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化数据</span></span><br><span class="line">	A-&gt;height = height;</span><br><span class="line">	A-&gt;width = width;</span><br><span class="line">	B-&gt;height = height;</span><br><span class="line">	B-&gt;width = width;</span><br><span class="line">	C-&gt;height = height;</span><br><span class="line">	C-&gt;width = width;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		A-&gt;elements[i] = <span class="number">1.0</span>;</span><br><span class="line">		B-&gt;elements[i] = <span class="number">2.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">	<span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">gridSize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		(width + blockSize.x - <span class="number">1</span>) / blockSize.x,</span></span></span><br><span class="line"><span class="params"><span class="function">		(height + blockSize.y - <span class="number">1</span>) / blockSize.y</span></span></span><br><span class="line"><span class="params"><span class="function">	)</span></span>;</span><br><span class="line">	<span class="comment">// 执行kernel</span></span><br><span class="line">	matMulKernel&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(A, B, C);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步device 保证结果能正确访问</span></span><br><span class="line">	<span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查执行结果</span></span><br><span class="line">	<span class="type">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">		maxError += <span class="built_in">fabs</span>(C-&gt;elements[i] - <span class="number">2</span> * width);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;max error is &quot;</span> &lt;&lt; maxError &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放托管内存</span></span><br><span class="line">	<span class="built_in">cudaFree</span>(A-&gt;elements);</span><br><span class="line">	<span class="built_in">cudaFree</span>(B-&gt;elements);</span><br><span class="line">	<span class="built_in">cudaFree</span>(C-&gt;elements);</span><br><span class="line">	<span class="built_in">cudaFree</span>(A);</span><br><span class="line">	<span class="built_in">cudaFree</span>(B);</span><br><span class="line">	<span class="built_in">cudaFree</span>(C);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test_gpu_3</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>notes for </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="function">dim3 <span class="title">gridSize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	(width + blockSize.x - <span class="number">1</span>) / blockSize.x,</span></span></span><br><span class="line"><span class="params"><span class="function">	(height + blockSize.y - <span class="number">1</span>) / blockSize.y</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.cnblogs.com/skyfsm/p/9673960.html">CUDA编程之快速入门</a></li>
<li><a href="https://blog.csdn.net/xiaohu2022/article/details/79599947">CUDA编程入门极简教程</a></li>
<li><a href="https://github.com/RyanWangZf/CUDA_Tutorial">CUDA_Tutorial</a></li>
<li><a href="https://devblogs.nvidia.com/even-easier-introduction-cuda/">even-easier-introduction-cuda</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181121: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>//blog/yolov1-network-predict-output-data/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>yolov1 pascal label data</title>
    <url>//blog/yolov1-pascal-label-data/</url>
    <content><![CDATA[<h2 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> yolo.config <span class="keyword">as</span> cfg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1234</span>)  <span class="comment"># for np.random.shuffle(gt_labels)</span></span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&#x27;aeroplane&#x27;</span>, <span class="string">&#x27;bicycle&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;bottle&#x27;</span>, <span class="string">&#x27;bus&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;chair&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>, <span class="string">&#x27;diningtable&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;motorbike&#x27;</span>, <span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;pottedplant&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;sofa&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;tvmonitor&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pascal_voc</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, phase, rebuild=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.devkil_path = os.path.join(cfg.PASCAL_PATH, <span class="string">&#x27;VOCdevkit&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.data_path = os.path.join(<span class="variable language_">self</span>.devkil_path, <span class="string">&#x27;VOC2007&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cache_path = cfg.CACHE_PATH</span><br><span class="line">        <span class="variable language_">self</span>.batch_size = cfg.BATCH_SIZE</span><br><span class="line">        <span class="variable language_">self</span>.image_size = cfg.IMAGE_SIZE</span><br><span class="line">        <span class="variable language_">self</span>.cell_size = cfg.CELL_SIZE</span><br><span class="line">        <span class="variable language_">self</span>.classes = cfg.CLASSES</span><br><span class="line">        <span class="variable language_">self</span>.class_to_ind = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="variable language_">self</span>.classes, <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.classes))))</span><br><span class="line">        <span class="variable language_">self</span>.flipped = <span class="literal">False</span>  <span class="comment"># cfg.FLIPPED</span></span><br><span class="line">        <span class="variable language_">self</span>.phase = phase</span><br><span class="line">        <span class="variable language_">self</span>.rebuild = rebuild</span><br><span class="line">        <span class="variable language_">self</span>.cursor = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.epoch = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.gt_labels = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.prepare()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        images = np.zeros(</span><br><span class="line">            (<span class="variable language_">self</span>.batch_size, <span class="variable language_">self</span>.image_size, <span class="variable language_">self</span>.image_size, <span class="number">3</span>))</span><br><span class="line">        labels = np.zeros(</span><br><span class="line">            (<span class="variable language_">self</span>.batch_size, <span class="variable language_">self</span>.cell_size, <span class="variable language_">self</span>.cell_size, <span class="number">25</span>))</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="variable language_">self</span>.batch_size:</span><br><span class="line">            imname = <span class="variable language_">self</span>.gt_labels[<span class="variable language_">self</span>.cursor][<span class="string">&#x27;imname&#x27;</span>]</span><br><span class="line">            flipped = <span class="variable language_">self</span>.gt_labels[<span class="variable language_">self</span>.cursor][<span class="string">&#x27;flipped&#x27;</span>]</span><br><span class="line">            images[count, :, :, :] = <span class="variable language_">self</span>.image_read(imname, flipped)</span><br><span class="line">            labels[count, :, :, :] = <span class="variable language_">self</span>.gt_labels[<span class="variable language_">self</span>.cursor][<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="variable language_">self</span>.cursor += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.cursor &gt;= <span class="built_in">len</span>(<span class="variable language_">self</span>.gt_labels):</span><br><span class="line">                np.random.shuffle(<span class="variable language_">self</span>.gt_labels)</span><br><span class="line">                <span class="variable language_">self</span>.cursor = <span class="number">0</span></span><br><span class="line">                <span class="variable language_">self</span>.epoch += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> images, labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">image_read</span>(<span class="params">self, imname, flipped=<span class="literal">False</span></span>):</span><br><span class="line">        image = cv2.imread(imname)</span><br><span class="line">        image = cv2.resize(image, (<span class="variable language_">self</span>.image_size, <span class="variable language_">self</span>.image_size))</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)</span><br><span class="line">        image = (image / <span class="number">255.0</span>) * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">if</span> flipped:</span><br><span class="line">            image = image[:, ::-<span class="number">1</span>, :]</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepare</span>(<span class="params">self</span>):</span><br><span class="line">        gt_labels = <span class="variable language_">self</span>.load_labels()</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.flipped:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Appending horizontally-flipped training examples ...&#x27;</span>)</span><br><span class="line">            <span class="comment"># keep y; flip x;</span></span><br><span class="line">            gt_labels_cp = copy.deepcopy(gt_labels)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gt_labels_cp)):</span><br><span class="line">                gt_labels_cp[idx][<span class="string">&#x27;flipped&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">                gt_labels_cp[idx][<span class="string">&#x27;label&#x27;</span>] = \</span><br><span class="line">                    gt_labels_cp[idx][<span class="string">&#x27;label&#x27;</span>][:, ::-<span class="number">1</span>, :]  <span class="comment"># flip x grid index  [0,1,2,3,4,5,6] ===&gt;[6,5,4,3,2,1,0]</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.cell_size):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.cell_size):</span><br><span class="line">                        <span class="keyword">if</span> gt_labels_cp[idx][<span class="string">&#x27;label&#x27;</span>][i, j, <span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                            gt_labels_cp[idx][<span class="string">&#x27;label&#x27;</span>][i, j, <span class="number">1</span>] = \</span><br><span class="line">                                <span class="variable language_">self</span>.image_size - <span class="number">1</span> - \</span><br><span class="line">                                gt_labels_cp[idx][<span class="string">&#x27;label&#x27;</span>][i, j, <span class="number">1</span>]  <span class="comment"># cx = 448 -1 - cx  flipped cx</span></span><br><span class="line">            gt_labels += gt_labels_cp</span><br><span class="line">        np.random.shuffle(gt_labels)  <span class="comment"># shuffle labels</span></span><br><span class="line">        <span class="variable language_">self</span>.gt_labels = gt_labels</span><br><span class="line">        <span class="keyword">return</span> gt_labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_labels</span>(<span class="params">self</span>):</span><br><span class="line">        cache_file = os.path.join(</span><br><span class="line">            <span class="variable language_">self</span>.cache_path, <span class="string">&#x27;pascal_&#x27;</span> + <span class="variable language_">self</span>.phase + <span class="string">&#x27;_gt_labels.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(cache_file) <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.rebuild:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Loading gt_labels from: &#x27;</span> + cache_file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(cache_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                gt_labels = pickle.load(f)</span><br><span class="line">            <span class="keyword">return</span> gt_labels</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Processing gt_labels from: &#x27;</span> + <span class="variable language_">self</span>.data_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="variable language_">self</span>.cache_path):</span><br><span class="line">            os.makedirs(<span class="variable language_">self</span>.cache_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            txtname = os.path.join(</span><br><span class="line">                <span class="variable language_">self</span>.data_path, <span class="string">&#x27;ImageSets&#x27;</span>, <span class="string">&#x27;Main&#x27;</span>, <span class="string">&#x27;trainval.txt&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            txtname = os.path.join(</span><br><span class="line">                <span class="variable language_">self</span>.data_path, <span class="string">&#x27;ImageSets&#x27;</span>, <span class="string">&#x27;Main&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(txtname, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="variable language_">self</span>.image_index = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> f.readlines()]  <span class="comment"># 5011 lines</span></span><br><span class="line"></span><br><span class="line">        gt_labels = []</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable language_">self</span>.image_index:</span><br><span class="line">            label, num = <span class="variable language_">self</span>.load_pascal_annotation(index)</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            imname = os.path.join(<span class="variable language_">self</span>.data_path, <span class="string">&#x27;JPEGImages&#x27;</span>, index + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">            gt_labels.append(&#123;<span class="string">&#x27;imname&#x27;</span>: imname,</span><br><span class="line">                              <span class="string">&#x27;label&#x27;</span>: label,</span><br><span class="line">                              <span class="string">&#x27;flipped&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Saving gt_labels to: &#x27;</span> + cache_file)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(cache_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(gt_labels, f)</span><br><span class="line">        <span class="keyword">return</span> gt_labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_pascal_annotation</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Load image and bounding boxes info from XML file in the PASCAL VOC</span></span><br><span class="line"><span class="string">        format.   002939</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        imname = os.path.join(<span class="variable language_">self</span>.data_path, <span class="string">&#x27;JPEGImages&#x27;</span>, index + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">        im = cv2.imread(imname)</span><br><span class="line">        h_ratio = <span class="number">1.0</span> * <span class="variable language_">self</span>.image_size / im.shape[<span class="number">0</span>]</span><br><span class="line">        w_ratio = <span class="number">1.0</span> * <span class="variable language_">self</span>.image_size / im.shape[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># im = cv2.resize(im, [self.image_size, self.image_size])</span></span><br><span class="line"></span><br><span class="line">        label = np.zeros((<span class="variable language_">self</span>.cell_size, <span class="variable language_">self</span>.cell_size, <span class="number">25</span>))  <span class="comment"># 7,7,25</span></span><br><span class="line">        filename = os.path.join(<span class="variable language_">self</span>.data_path, <span class="string">&#x27;Annotations&#x27;</span>, index + <span class="string">&#x27;.xml&#x27;</span>)</span><br><span class="line">        tree = ET.parse(filename)</span><br><span class="line">        objs = tree.findall(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> objs:</span><br><span class="line">            bbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)  <span class="comment"># xmin,ymin,xmax,ymax  1-based ===&gt; 0-based</span></span><br><span class="line">            <span class="comment"># Make pixel indexes 0-based</span></span><br><span class="line">            x1 = <span class="built_in">max</span>(<span class="built_in">min</span>((<span class="built_in">float</span>(bbox.find(<span class="string">&#x27;xmin&#x27;</span>).text) - <span class="number">1</span>) * w_ratio, <span class="variable language_">self</span>.image_size - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">            y1 = <span class="built_in">max</span>(<span class="built_in">min</span>((<span class="built_in">float</span>(bbox.find(<span class="string">&#x27;ymin&#x27;</span>).text) - <span class="number">1</span>) * h_ratio, <span class="variable language_">self</span>.image_size - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">            x2 = <span class="built_in">max</span>(<span class="built_in">min</span>((<span class="built_in">float</span>(bbox.find(<span class="string">&#x27;xmax&#x27;</span>).text) - <span class="number">1</span>) * w_ratio, <span class="variable language_">self</span>.image_size - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">            y2 = <span class="built_in">max</span>(<span class="built_in">min</span>((<span class="built_in">float</span>(bbox.find(<span class="string">&#x27;ymax&#x27;</span>).text) - <span class="number">1</span>) * h_ratio, <span class="variable language_">self</span>.image_size - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">            cls_ind = <span class="variable language_">self</span>.class_to_ind[obj.find(<span class="string">&#x27;name&#x27;</span>).text.lower().strip()]</span><br><span class="line">            boxes = [(x2 + x1) / <span class="number">2.0</span>, (y2 + y1) / <span class="number">2.0</span>, x2 - x1, y2 - y1]  <span class="comment"># cx,cy,w,h   [0-447]</span></span><br><span class="line">            x_ind = <span class="built_in">int</span>(boxes[<span class="number">0</span>] * <span class="variable language_">self</span>.cell_size / <span class="variable language_">self</span>.image_size)  <span class="comment"># grid x,y index  [0-6]</span></span><br><span class="line">            y_ind = <span class="built_in">int</span>(boxes[<span class="number">1</span>] * <span class="variable language_">self</span>.cell_size / <span class="variable language_">self</span>.image_size)</span><br><span class="line">            <span class="keyword">if</span> label[y_ind, x_ind, <span class="number">0</span>] == <span class="number">1</span>:  <span class="comment"># if multiple objects fall in same grid, we only use the first one</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            label[y_ind, x_ind, <span class="number">0</span>] = <span class="number">1</span>  <span class="comment"># has object  1 or 0</span></span><br><span class="line">            label[y_ind, x_ind, <span class="number">1</span>:<span class="number">5</span>] = boxes  <span class="comment"># boxs (cx,cy,w,h)  [0-447]</span></span><br><span class="line">            label[y_ind, x_ind, <span class="number">5</span> + cls_ind] = <span class="number">1</span>  <span class="comment"># class   20-one-hot-vector</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> label, <span class="built_in">len</span>(objs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3 , 4 =  [0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">3 , 5 =  [  1.    325.248 229.6   111.104 228.48 ]</span></span><br><span class="line"><span class="string">    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">    class_index =  8</span></span><br><span class="line"><span class="string">    class_name =  chair</span></span><br><span class="line"><span class="string">3 , 6 =  [0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">4 , 0 =  [0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">4 , 1 =  [0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">4 , 2 =  [  1.    132.16  288.4   172.928 316.96 ]</span></span><br><span class="line"><span class="string">    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string">    class_index =  8</span></span><br><span class="line"><span class="string">    class_name =  chair</span></span><br><span class="line"><span class="string">4 , 3 =  [0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data[&#x27;label&#x27;].shape # 7,7,25  (confidence+ (x,y,w,h) + 20-classes)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">confidence: 1 if gt_box center falls in this grid, otherwise 0</span></span><br><span class="line"><span class="string">box(x,y,w,h): gt_box center x,y,w,h; otherwize [0,0,0,0]</span></span><br><span class="line"><span class="string">class: 20-one-hot-vector if gt_box; othersize [0]*20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">how flip works: flip x dim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(1) flip grid x-dim:  data[&#x27;label&#x27;] = data[&#x27;label&#x27;][:, ::-1, :]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">y-grid = y-grid  [0,1,2,3,4,5,6]</span></span><br><span class="line"><span class="string">x-grid flip      [0,1,2,3,4,5,6] ===&gt;[6,5,4,3,2,1,0]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2) flip data[&#x27;label&#x27;]</span></span><br><span class="line"><span class="string">confidence = confidence</span></span><br><span class="line"><span class="string">cx:  flip cx = 417-cx:   data[&#x27;label&#x27;][i, j, 1] = 448 - 1 - data[&#x27;label&#x27;][i, j, 1]</span></span><br><span class="line"><span class="string">cy = cy</span></span><br><span class="line"><span class="string">w = w</span></span><br><span class="line"><span class="string">h = h</span></span><br><span class="line"><span class="string">class = class</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_data</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># grid y,x</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="built_in">print</span>(y, <span class="string">&quot;,&quot;</span>, x, <span class="string">&quot;= &quot;</span>, data[<span class="string">&#x27;label&#x27;</span>][y, x, :<span class="number">5</span>])</span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">&#x27;label&#x27;</span>][y, x, <span class="number">0</span>] &gt; <span class="number">0</span>:  <span class="comment"># confidence &gt;0</span></span><br><span class="line">                class_one_hot = data[<span class="string">&#x27;label&#x27;</span>][y, x, <span class="number">5</span>:]  <span class="comment"># (20)</span></span><br><span class="line">                class_index = np.argmax(class_one_hot)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;    class_one_hot = &quot;</span>, class_one_hot)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;    class_index = &quot;</span>, class_index)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;    class_name = &quot;</span>, classes[class_index])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flip_data</span>(<span class="params">data</span>):</span><br><span class="line">    data[<span class="string">&#x27;flipped&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">    data[<span class="string">&#x27;label&#x27;</span>] = data[<span class="string">&#x27;label&#x27;</span>][:, ::-<span class="number">1</span>, :]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">&#x27;label&#x27;</span>][y, x, <span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                data[<span class="string">&#x27;label&#x27;</span>][y, x, <span class="number">1</span>] = <span class="number">448</span> - <span class="number">1</span> - data[<span class="string">&#x27;label&#x27;</span>][y, x, <span class="number">1</span>]  <span class="comment"># cx = 448 -1 - cx  flipped cx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_image</span>(<span class="params">filename</span>):</span><br><span class="line">    image = cv2.imread(filename)</span><br><span class="line">    <span class="comment"># convert from BGR to RGB</span></span><br><span class="line">    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.imshow(rgb_image)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;========================PASCAL=================================&quot;</span>)</span><br><span class="line">pascal = pascal_voc(<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pascal.class_to_ind)  <span class="comment"># dict 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pascal.gt_labels))  <span class="comment"># list: default 5011; flipped 10022</span></span><br><span class="line">data = pascal.gt_labels[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(data.keys())  <span class="comment"># dict_keys([&#x27;flipped&#x27;, &#x27;imname&#x27;, &#x27;label&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;imname&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;label&#x27;</span>].shape)  <span class="comment"># 7,7,25  (confidence+ (x,y,w,h) + 20-classes)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(classes)</span><br><span class="line">show_image(data[<span class="string">&#x27;imname&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;========================DATA=================================&quot;</span>)</span><br><span class="line">print_data(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=========================FLIPPED================================&quot;</span>)</span><br><span class="line"><span class="comment"># flip data</span></span><br><span class="line">flipped = copy.deepcopy(data)</span><br><span class="line">flip_data(flipped)</span><br><span class="line">print_data(flipped)</span><br></pre></td></tr></table></figure>

<pre><code>Loading gt_labels from: data\pascal_voc\cache\pascal_train_gt_labels.pkl
&#123;&#39;dog&#39;: 11, &#39;train&#39;: 18, &#39;bus&#39;: 5, &#39;motorbike&#39;: 13, &#39;aeroplane&#39;: 0, &#39;bicycle&#39;: 1, &#39;person&#39;: 14, &#39;horse&#39;: 12, &#39;bird&#39;: 2, &#39;tvmonitor&#39;: 19, &#39;sheep&#39;: 16, &#39;boat&#39;: 3, &#39;car&#39;: 6, &#39;diningtable&#39;: 10, &#39;pottedplant&#39;: 15, &#39;sofa&#39;: 17, &#39;bottle&#39;: 4, &#39;chair&#39;: 8, &#39;cat&#39;: 7, &#39;cow&#39;: 9&#125;
5011
dict_keys([&#39;flipped&#39;, &#39;label&#39;, &#39;imname&#39;])
data\pascal_voc\VOCdevkit\VOC2007\JPEGImages\002939.jpg
(7, 7, 25)
[&#39;aeroplane&#39;, &#39;bicycle&#39;, &#39;bird&#39;, &#39;boat&#39;, &#39;bottle&#39;, &#39;bus&#39;, &#39;car&#39;, &#39;cat&#39;, &#39;chair&#39;, &#39;cow&#39;, &#39;diningtable&#39;, &#39;dog&#39;, &#39;horse&#39;, &#39;motorbike&#39;, &#39;person&#39;, &#39;pottedplant&#39;, &#39;sheep&#39;, &#39;sofa&#39;, &#39;train&#39;, &#39;tvmonitor&#39;]
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20181126095114817-1975881555.png" alt="png"></p>
<pre><code>========================DATA=================================
0 , 0 =  [0. 0. 0. 0. 0.]
0 , 1 =  [0. 0. 0. 0. 0.]
0 , 2 =  [0. 0. 0. 0. 0.]
0 , 3 =  [0. 0. 0. 0. 0.]
0 , 4 =  [0. 0. 0. 0. 0.]
0 , 5 =  [0. 0. 0. 0. 0.]
0 , 6 =  [0. 0. 0. 0. 0.]
1 , 0 =  [0. 0. 0. 0. 0.]
1 , 1 =  [0. 0. 0. 0. 0.]
1 , 2 =  [0. 0. 0. 0. 0.]
1 , 3 =  [0. 0. 0. 0. 0.]
1 , 4 =  [0. 0. 0. 0. 0.]
1 , 5 =  [0. 0. 0. 0. 0.]
1 , 6 =  [0. 0. 0. 0. 0.]
2 , 0 =  [0. 0. 0. 0. 0.]
2 , 1 =  [0. 0. 0. 0. 0.]
2 , 2 =  [0. 0. 0. 0. 0.]
2 , 3 =  [0. 0. 0. 0. 0.]
2 , 4 =  [0. 0. 0. 0. 0.]
2 , 5 =  [0. 0. 0. 0. 0.]
2 , 6 =  [0. 0. 0. 0. 0.]
3 , 0 =  [0. 0. 0. 0. 0.]
3 , 1 =  [  1.          70.336      202.496       74.368      149.33333333]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
    class_index =  19
    class_name =  tvmonitor
3 , 2 =  [0. 0. 0. 0. 0.]
3 , 3 =  [0. 0. 0. 0. 0.]
3 , 4 =  [  1.         267.456      229.97333333  29.568       77.65333333]
    class_one_hot =  [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
    class_index =  4
    class_name =  bottle
3 , 5 =  [0. 0. 0. 0. 0.]
3 , 6 =  [0. 0. 0. 0. 0.]
4 , 0 =  [0. 0. 0. 0. 0.]
4 , 1 =  [0. 0. 0. 0. 0.]
4 , 2 =  [0. 0. 0. 0. 0.]
4 , 3 =  [  1.         220.864      283.136      158.592      327.33866667]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
    class_index =  14
    class_name =  person
4 , 4 =  [0. 0. 0. 0. 0.]
4 , 5 =  [0. 0. 0. 0. 0.]
4 , 6 =  [0. 0. 0. 0. 0.]
5 , 0 =  [0. 0. 0. 0. 0.]
5 , 1 =  [0. 0. 0. 0. 0.]
5 , 2 =  [0. 0. 0. 0. 0.]
5 , 3 =  [0. 0. 0. 0. 0.]
5 , 4 =  [  1.         283.584      337.49333333  92.288      185.17333333]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
    class_index =  8
    class_name =  chair
5 , 5 =  [0. 0. 0. 0. 0.]
5 , 6 =  [0. 0. 0. 0. 0.]
6 , 0 =  [0. 0. 0. 0. 0.]
6 , 1 =  [0. 0. 0. 0. 0.]
6 , 2 =  [0. 0. 0. 0. 0.]
6 , 3 =  [0. 0. 0. 0. 0.]
6 , 4 =  [0. 0. 0. 0. 0.]
6 , 5 =  [0. 0. 0. 0. 0.]
6 , 6 =  [0. 0. 0. 0. 0.]
=========================FLIPPED================================
0 , 0 =  [0. 0. 0. 0. 0.]
0 , 1 =  [0. 0. 0. 0. 0.]
0 , 2 =  [0. 0. 0. 0. 0.]
0 , 3 =  [0. 0. 0. 0. 0.]
0 , 4 =  [0. 0. 0. 0. 0.]
0 , 5 =  [0. 0. 0. 0. 0.]
0 , 6 =  [0. 0. 0. 0. 0.]
1 , 0 =  [0. 0. 0. 0. 0.]
1 , 1 =  [0. 0. 0. 0. 0.]
1 , 2 =  [0. 0. 0. 0. 0.]
1 , 3 =  [0. 0. 0. 0. 0.]
1 , 4 =  [0. 0. 0. 0. 0.]
1 , 5 =  [0. 0. 0. 0. 0.]
1 , 6 =  [0. 0. 0. 0. 0.]
2 , 0 =  [0. 0. 0. 0. 0.]
2 , 1 =  [0. 0. 0. 0. 0.]
2 , 2 =  [0. 0. 0. 0. 0.]
2 , 3 =  [0. 0. 0. 0. 0.]
2 , 4 =  [0. 0. 0. 0. 0.]
2 , 5 =  [0. 0. 0. 0. 0.]
2 , 6 =  [0. 0. 0. 0. 0.]
3 , 0 =  [0. 0. 0. 0. 0.]
3 , 1 =  [0. 0. 0. 0. 0.]
3 , 2 =  [  1.         179.544      229.97333333  29.568       77.65333333]
    class_one_hot =  [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
    class_index =  4
    class_name =  bottle
3 , 3 =  [0. 0. 0. 0. 0.]
3 , 4 =  [0. 0. 0. 0. 0.]
3 , 5 =  [  1.         376.664      202.496       74.368      149.33333333]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
    class_index =  19
    class_name =  tvmonitor
3 , 6 =  [0. 0. 0. 0. 0.]
4 , 0 =  [0. 0. 0. 0. 0.]
4 , 1 =  [0. 0. 0. 0. 0.]
4 , 2 =  [0. 0. 0. 0. 0.]
4 , 3 =  [  1.         226.136      283.136      158.592      327.33866667]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
    class_index =  14
    class_name =  person
4 , 4 =  [0. 0. 0. 0. 0.]
4 , 5 =  [0. 0. 0. 0. 0.]
4 , 6 =  [0. 0. 0. 0. 0.]
5 , 0 =  [0. 0. 0. 0. 0.]
5 , 1 =  [0. 0. 0. 0. 0.]
5 , 2 =  [  1.         163.416      337.49333333  92.288      185.17333333]
    class_one_hot =  [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
    class_index =  8
    class_name =  chair
5 , 3 =  [0. 0. 0. 0. 0.]
5 , 4 =  [0. 0. 0. 0. 0.]
5 , 5 =  [0. 0. 0. 0. 0.]
5 , 6 =  [0. 0. 0. 0. 0.]
6 , 0 =  [0. 0. 0. 0. 0.]
6 , 1 =  [0. 0. 0. 0. 0.]
6 , 2 =  [0. 0. 0. 0. 0.]
6 , 3 =  [0. 0. 0. 0. 0.]
6 , 4 =  [0. 0. 0. 0. 0.]
6 , 5 =  [0. 0. 0. 0. 0.]
6 , 6 =  [0. 0. 0. 0. 0.]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181126: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>object detect</tag>
        <tag>yolov1</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install dlib on ubuntu 16.04</title>
    <url>//blog/compile-dlib-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/654a6d04/">Part 1: compile dlib on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/c6ead512/">Part 2: compile dlib on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/davisking/dlib.git</span><br><span class="line"><span class="built_in">cd</span> dlib &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>CMAKE_INSTALL_PREFIX /usr/local
CUDA 9.2 + cuDNN 7.1.4
</code></pre>
<p>generate</p>
<pre><code>Found CUDA: /usr/local/cuda (found suitable version &quot;9.2&quot;, minimum required is &quot;7.5&quot;) 
Looking for cuDNN install...
Found cuDNN: /usr/local/cuda/lib64/libcudnn.so
Building a CUDA test project to see if your compiler is compatible with CUDA...
Checking if you have the right version of cuDNN installed.
Enabling CUDA support for dlib.  DLIB WILL USE CUDA
C++11 activated.
</code></pre>
<h3 id="make-and-install"><a href="#make-and-install" class="headerlink" title="make and install"></a>make and install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8 </span><br><span class="line">  <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>[100%] Linking CXX static library libdlib.a
[100%] Built target dlib
</code></pre>
<blockquote>
<p>generate static library <code>libdlib.a</code> </p>
</blockquote>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(dlib REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MSVC)</span><br><span class="line">	<span class="keyword">set</span>(dlib_LIBRARIES <span class="string">&quot;C:/Program Files/dlib/lib/dlib.lib&quot;</span>) <span class="comment"># replace dlib::dlib</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">endif</span>(MSVC)</span><br><span class="line"><span class="comment"># $&#123;dlib_INCLUDE_DIRS&#125; and $&#123;dlib_LIBRARIES&#125; are deprecated, simply use target_link_libraries(your_app dlib::dlib)</span></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; dlib_INCLUDE_DIRS = $&#123;dlib_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; dlib_LIBRARIES = $&#123;dlib_LIBRARIES&#125;&quot;</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo demo.cpp)</span><br><span class="line"><span class="comment">#target_link_libraries(demo $&#123;dlib_LIBRARIES&#125;)</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo dlib::dlib)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/654a6d04/">Part 1: compile dlib on windows 10</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181127: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>dlib</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install refinedet on ubuntu 16.04</title>
    <url>//blog/compile-refinedet-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>RefineDet is based on Caffe.</p>
<p>See <a href="https://kezunlin.me/post/b90033a9/">Install and Configure Caffe on ubuntu 16.04</a></p>
<ul>
<li>ubuntu 16.04 </li>
<li>CUDA 9.2 + cudnn 7.1.4  (for caffe&#x2F;tensorrt&#x2F;anakin)</li>
<li>opencv 3.3.0</li>
<li>python 2.7</li>
<li>caffe (from refinedet)</li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sfzhang15/RefineDet.git</span><br><span class="line"><span class="built_in">cd</span> RefineDet </span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line"></span><br><span class="line">make -j8 &amp;&amp; make pycaffe</span><br></pre></td></tr></table></figure>

<p>options </p>
<pre><code>USE_CUDNN True
USE_OPENCV True
WITH_PYTHON_LAYER True
BLAS atlas

CMAKE_INSTALL_PREFIX /home/kezunlin/program/refinedet/build/install
</code></pre>
<blockquote>
<p>tips: vim CMakeLists.txt and comment out examples and docs</p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#add_subdirectory(examples)</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(python)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(matlab)</span><br><span class="line"><span class="comment">#add_subdirectory(docs)</span></span><br></pre></td></tr></table></figure>

<h4 id="fix-gflags-error"><a href="#fix-gflags-error" class="headerlink" title="fix gflags error"></a>fix gflags error</h4><ul>
<li>caffe&#x2F;include&#x2F;caffe&#x2F;common.hpp</li>
<li>caffe&#x2F;examples&#x2F;mnist&#x2F;convert_mnist_data.cpp</li>
</ul>
<p>Comment out the ifndef</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifndef GFLAGS_GFLAGS_H_</span></span><br><span class="line"><span class="keyword">namespace</span> gflags = google;</span><br><span class="line"><span class="comment">// #endif  // GFLAGS_GFLAGS_H_</span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>two version:</p>
<ul>
<li>single version</li>
<li>batch version</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">In this example, we will load a RefineDet model and use it to detect objects.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> skimage.io <span class="keyword">as</span> io</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># Make sure that caffe is on the python path:</span></span><br><span class="line">caffe_root = <span class="string">&#x27;./&#x27;</span></span><br><span class="line">os.chdir(caffe_root)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(caffe_root, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;person&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_boxs</span>(<span class="params">boxs, threshold=<span class="number">0.4</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    boxs: 500*6  (xmin,ymin,xmax,ymax,confidence,class_index) </span></span><br><span class="line"><span class="string">                class_index: 0 background, 1 person</span></span><br><span class="line"><span class="string">                confidence: 0-1</span></span><br><span class="line"><span class="string">    return: </span></span><br><span class="line"><span class="string">            new_boxs  `list`  [b1,b2,b3,...]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    new_boxs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, boxs.shape[<span class="number">0</span>]):</span><br><span class="line">        xmin,ymin,xmax,ymax,confidence,class_index = boxs[i]</span><br><span class="line">        <span class="comment">#print(type(class_index)) # float32</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(class_index)&gt;<span class="number">0</span> <span class="keyword">and</span> confidence &gt;= threshold:</span><br><span class="line">            box = [<span class="built_in">int</span>(xmin),<span class="built_in">int</span>(ymin),<span class="built_in">int</span>(xmax),<span class="built_in">int</span>(ymax),confidence, <span class="built_in">int</span>(class_index)]</span><br><span class="line">            new_boxs.append(box)</span><br><span class="line">    <span class="keyword">return</span> new_boxs <span class="comment"># list [b1,b2,b3,...]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_results</span>(<span class="params">counter, image_file, boxs, save_fig=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(image_file)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(boxs)):</span><br><span class="line">        xmin,ymin,xmax,ymax,confidence,class_index = boxs[i]</span><br><span class="line"></span><br><span class="line">        name = classes[class_index]</span><br><span class="line">        coords = (xmin, ymin), xmax - xmin, ymax - ymin</span><br><span class="line"></span><br><span class="line">        cv2.rectangle(img, (xmin, ymin), (xmax, ymax), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>) <span class="comment"># bgr</span></span><br><span class="line">        <span class="comment">#display_text = &#x27;%s: %.2f&#x27; % (name, confidence)</span></span><br><span class="line">        display_text = <span class="string">&#x27;%.2f&#x27;</span> % (confidence)</span><br><span class="line">        cv2.putText(img, display_text, (xmin, ymin-<span class="number">5</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), thickness=<span class="number">2</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> save_fig:</span><br><span class="line">        image_filepath = <span class="string">&#x27;output/&#123;0&#125;_results.jpg&#x27;</span>.<span class="built_in">format</span>(counter)</span><br><span class="line">        cv2.imwrite(image_filepath, img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Saved: &#x27;</span> + image_filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single</span>():</span><br><span class="line">    caffe.set_device(<span class="number">0</span>)</span><br><span class="line">    caffe.set_mode_gpu()</span><br><span class="line"></span><br><span class="line">    save_dir = <span class="string">&quot;./output&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_dir):</span><br><span class="line">        os.mkdir(save_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model_def = <span class="string">&#x27;models/ResNet/coco/refinedet_resnet101_512x512/deploy.prototxt&#x27;</span></span><br><span class="line">    model_weights = <span class="string">&#x27;models/ResNet/coco/refinedet_resnet101_512x512/coco_refinedet_resnet101_512x512_iter_75000.caffemodel&#x27;</span></span><br><span class="line">    net = caffe.Net(model_def, model_weights, caffe.TEST)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># image preprocessing</span></span><br><span class="line">    img_resize = <span class="number">512</span></span><br><span class="line">    net.blobs[<span class="string">&#x27;data&#x27;</span>].reshape(<span class="number">1</span>, <span class="number">3</span>, img_resize, img_resize)</span><br><span class="line">    data_shape = net.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_shape=&quot;</span>, data_shape) <span class="comment"># 1, 3, 512, 512</span></span><br><span class="line">    <span class="comment"># by default, caffe use chw, bgr, 0-255, image-[104, 117, 123] </span></span><br><span class="line">    transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>:data_shape&#125;)</span><br><span class="line">    transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)) <span class="comment"># hwc ===&gt; chw</span></span><br><span class="line">    transformer.set_channel_swap(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># rgb===&gt;bgr</span></span><br><span class="line">    transformer.set_raw_scale(<span class="string">&#x27;data&#x27;</span>, <span class="number">255</span>)  <span class="comment"># [0-1]===&gt; [0,255]</span></span><br><span class="line">    transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, np.array([<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>]))  <span class="comment"># bgr mean pixel</span></span><br><span class="line">    </span><br><span class="line">    files = [<span class="string">&quot;./images/1.png&quot;</span>, <span class="string">&quot;./images/2.png&quot;</span>]<span class="comment"># 500,7  + 384,7 === 500,7 + 500,7 </span></span><br><span class="line">    <span class="keyword">for</span> index,image_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(files):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image_file=&quot;</span>, image_file)</span><br><span class="line">        image = caffe.io.load_image(image_file) <span class="comment"># hwc, rgb, 0-1 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image.shape=&quot;</span>, image.shape)</span><br><span class="line"></span><br><span class="line">        transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;transformed_image.shape=&quot;</span>, transformed_image.shape)</span><br><span class="line"></span><br><span class="line">        net.blobs[<span class="string">&#x27;data&#x27;</span>].data[...] = transformed_image</span><br><span class="line"></span><br><span class="line">        detections = net.forward()[<span class="string">&#x27;detection_out&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;detections.shape = &quot;</span>,detections.shape) <span class="comment"># 1, 1, 500, 7</span></span><br><span class="line">        det_label = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">1</span>] <span class="comment"># 0 back, 1 -person (now only ==1)</span></span><br><span class="line">        det_conf = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">2</span>] <span class="comment"># 0-1 </span></span><br><span class="line">        det_xmin = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">3</span>] * image.shape[<span class="number">1</span>]</span><br><span class="line">        det_ymin = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">4</span>] * image.shape[<span class="number">0</span>]</span><br><span class="line">        det_xmax = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">5</span>] * image.shape[<span class="number">1</span>]</span><br><span class="line">        det_ymax = detections[<span class="number">0</span>, <span class="number">0</span>, :, <span class="number">6</span>] * image.shape[<span class="number">0</span>]</span><br><span class="line">        boxs = np.column_stack([det_xmin, det_ymin, det_xmax, det_ymax, det_conf, det_label])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;boxs = &quot;</span>, boxs.shape) <span class="comment"># 500,6</span></span><br><span class="line"></span><br><span class="line">        new_boxs = filter_boxs(boxs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;new_boxs = &quot;</span>, <span class="built_in">len</span>(new_boxs)) <span class="comment"># 3 boxs</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># show result</span></span><br><span class="line">        save_results(index, image_file, new_boxs, save_fig=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch</span>():</span><br><span class="line">    caffe.set_device(<span class="number">0</span>)</span><br><span class="line">    caffe.set_mode_gpu()</span><br><span class="line"></span><br><span class="line">    save_dir = <span class="string">&quot;./output&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_dir):</span><br><span class="line">        os.mkdir(save_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model_def = <span class="string">&#x27;models/ResNet/coco/refinedet_resnet101_512x512/deploy.prototxt&#x27;</span></span><br><span class="line">    model_weights = <span class="string">&#x27;models/ResNet/coco/refinedet_resnet101_512x512/coco_refinedet_resnet101_512x512_iter_75000.caffemodel&#x27;</span></span><br><span class="line">    net = caffe.Net(model_def, model_weights, caffe.TEST)</span><br><span class="line"></span><br><span class="line">    box_count_per_image = <span class="number">500</span> </span><br><span class="line">    <span class="comment">#files = [&quot;./images/2.png&quot;]</span></span><br><span class="line">    files = [<span class="string">&quot;./images/1.png&quot;</span>, <span class="string">&quot;./images/2.png&quot;</span>]<span class="comment"># 500,7  + 384,7 === 500,7 + 500,7 </span></span><br><span class="line">    <span class="comment"># update detection_output_layer.cpp and cu to keep 500 box results</span></span><br><span class="line">    batch_size = <span class="built_in">len</span>(files) </span><br><span class="line">    <span class="comment"># image preprocessing</span></span><br><span class="line">    img_resize = <span class="number">512</span></span><br><span class="line">    net.blobs[<span class="string">&#x27;data&#x27;</span>].reshape(batch_size, <span class="number">3</span>, img_resize, img_resize)</span><br><span class="line">    data_shape = net.blobs[<span class="string">&#x27;data&#x27;</span>].data.shape</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_shape=&quot;</span>, data_shape) <span class="comment"># 1, 3, 512, 512</span></span><br><span class="line">    <span class="comment"># by default, caffe use chw, bgr, 0-255, image-[104, 117, 123] </span></span><br><span class="line">    transformer = caffe.io.Transformer(&#123;<span class="string">&#x27;data&#x27;</span>:data_shape&#125;)</span><br><span class="line">    transformer.set_transpose(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)) <span class="comment"># hwc ===&gt; chw</span></span><br><span class="line">    transformer.set_channel_swap(<span class="string">&#x27;data&#x27;</span>, (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># rgb===&gt;bgr</span></span><br><span class="line">    transformer.set_raw_scale(<span class="string">&#x27;data&#x27;</span>, <span class="number">255</span>)  <span class="comment"># [0-1]===&gt; [0,255]</span></span><br><span class="line">    transformer.set_mean(<span class="string">&#x27;data&#x27;</span>, np.array([<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>]))  <span class="comment"># bgr mean pixel</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        <span class="comment">#image_file = &quot;./images/1.png&quot;</span></span><br><span class="line">        image_file = files[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image_file=&quot;</span>, image_file)</span><br><span class="line">        image = caffe.io.load_image(image_file) <span class="comment"># hwc, rgb, 0-1 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image.shape=&quot;</span>, image.shape)</span><br><span class="line"></span><br><span class="line">        transformed_image = transformer.preprocess(<span class="string">&#x27;data&#x27;</span>, image)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;transformed_image.shape=&quot;</span>, transformed_image.shape)</span><br><span class="line"></span><br><span class="line">        net.blobs[<span class="string">&#x27;data&#x27;</span>].data[i,:,:,:] = transformed_image</span><br><span class="line"></span><br><span class="line">    detections = net.forward()[<span class="string">&#x27;detection_out&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;detections.shape = &quot;</span>,detections.shape) <span class="comment"># 1, 1, 500+384, 7 ===&gt; 1,1, 1000,7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">        start = i * box_count_per_image</span><br><span class="line">        end = (i+<span class="number">1</span>) * box_count_per_image</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start-end: &quot;</span>,start, end)</span><br><span class="line">    </span><br><span class="line">        det_label = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">1</span>] <span class="comment"># 0 back, 1 -person (now only ==1)</span></span><br><span class="line">        <span class="built_in">print</span>(det_label[:<span class="number">10</span>])</span><br><span class="line">        det_conf = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">2</span>] <span class="comment"># 0-1 </span></span><br><span class="line">        det_xmin = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">3</span>] * image.shape[<span class="number">1</span>]</span><br><span class="line">        det_ymin = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">4</span>] * image.shape[<span class="number">0</span>]</span><br><span class="line">        det_xmax = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">5</span>] * image.shape[<span class="number">1</span>]</span><br><span class="line">        det_ymax = detections[<span class="number">0</span>, <span class="number">0</span>, start:end, <span class="number">6</span>] * image.shape[<span class="number">0</span>]</span><br><span class="line">        boxs = np.column_stack([det_xmin, det_ymin, det_xmax, det_ymax, det_conf, det_label])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;boxs = &quot;</span>, boxs.shape) <span class="comment"># 500,6</span></span><br><span class="line"></span><br><span class="line">        new_boxs = filter_boxs(boxs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;new_boxs = &quot;</span>, <span class="built_in">len</span>(new_boxs)) <span class="comment"># 3 boxs</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># show result</span></span><br><span class="line">        save_results(i, image_file, new_boxs, save_fig=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   <span class="comment">#single()</span></span><br><span class="line">   batch()</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>(&#39;data_shape=&#39;, (2, 3, 512, 512))
(&#39;image_file=&#39;, &#39;./images/1.png&#39;)
(&#39;image.shape=&#39;, (1080, 1920, 3))
(&#39;transformed_image.shape=&#39;, (3, 512, 512))
(&#39;image_file=&#39;, &#39;./images/2.png&#39;)
(&#39;image.shape=&#39;, (1080, 1920, 3))
(&#39;transformed_image.shape=&#39;, (3, 512, 512))
(&#39;detections.shape = &#39;, (1, 1, 1000, 7))
(&#39;start-end: &#39;, 0, 500)
[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
(&#39;boxs = &#39;, (500, 6))
(&#39;new_boxs = &#39;, 3)
Saved: output/0_results.jpg
(&#39;start-end: &#39;, 500, 1000)
[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
(&#39;boxs = &#39;, (500, 6))
(&#39;new_boxs = &#39;, 6)
Saved: output/1_results.jpg
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/sfzhang15/RefineDet">RefineDet offical</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181127: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>object detect</tag>
        <tag>refinedet</tag>
      </tags>
  </entry>
  <entry>
    <title>Interfacing C++ and Python with pybind11 on ubuntu 16.04</title>
    <url>//blog/install-pybind11-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/8b9c051d/">Part 1: Interfacing C++ and Python with pybind11 on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/a41adc1/">Part 2: Interfacing C++ and Python with pybind11 on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>requirements:</p>
<ul>
<li>pybind11 v2.3.dev0</li>
<li>python 3.5</li>
</ul>
<h3 id="install-pytest"><a href="#install-pytest" class="headerlink" title="install pytest"></a>install pytest</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pytest </span><br></pre></td></tr></table></figure>

<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pybind/pybind11.git</span><br><span class="line"><span class="built_in">cd</span> pybind11</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options</p>
<pre><code>PYBIND11_CPP_STANDARD /std:c++11 # default c++14
PYTHON_EXECUTABLE /usr/bin/python3.5
CMAKE_INSTALL_PREFIX /usr/local
</code></pre>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>make and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>/usr/local/include/pybind11</code> with only <code>include</code> and <code>/usr/local/share/cmake/pybind11</code></p>
</blockquote>
<p>output </p>
<pre><code>Install the project...
-- Install configuration: &quot;MinSizeRel&quot;
-- Installing: /usr/local/include/pybind11
-- Installing: /usr/local/include/pybind11/chrono.h
-- Installing: /usr/local/include/pybind11/eigen.h
-- Installing: /usr/local/include/pybind11/stl.h
-- Installing: /usr/local/include/pybind11/complex.h
-- Installing: /usr/local/include/pybind11/detail
-- Installing: /usr/local/include/pybind11/detail/internals.h
-- Installing: /usr/local/include/pybind11/detail/common.h
-- Installing: /usr/local/include/pybind11/detail/descr.h
-- Installing: /usr/local/include/pybind11/detail/init.h
-- Installing: /usr/local/include/pybind11/detail/class.h
-- Installing: /usr/local/include/pybind11/detail/typeid.h
-- Installing: /usr/local/include/pybind11/common.h
-- Installing: /usr/local/include/pybind11/iostream.h
-- Installing: /usr/local/include/pybind11/buffer_info.h
-- Installing: /usr/local/include/pybind11/attr.h
-- Installing: /usr/local/include/pybind11/numpy.h
-- Installing: /usr/local/include/pybind11/pybind11.h
-- Installing: /usr/local/include/pybind11/operators.h
-- Installing: /usr/local/include/pybind11/options.h
-- Installing: /usr/local/include/pybind11/cast.h
-- Installing: /usr/local/include/pybind11/eval.h
-- Installing: /usr/local/include/pybind11/embed.h
-- Installing: /usr/local/include/pybind11/pytypes.h
-- Installing: /usr/local/include/pybind11/functional.h
-- Installing: /usr/local/include/pybind11/stl_bind.h
-- Installing: /usr/local/share/cmake/pybind11/pybind11Config.cmake
-- Installing: /usr/local/share/cmake/pybind11/pybind11ConfigVersion.cmake
-- Installing: /usr/local/share/cmake/pybind11/FindPythonLibsNew.cmake
-- Installing: /usr/local/share/cmake/pybind11/pybind11Tools.cmake
-- Installing: /usr/local/share/cmake/pybind11/pybind11Targets.cmake
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="pybind11"><a href="#pybind11" class="headerlink" title="pybind11"></a>pybind11</h3><h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(pybind11 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;pybind11_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [MAIN] <span class="string">&quot;Found pybind11 v$&#123;pybind11_VERSION&#125;: $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_INCLUDE_DIRS = $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_LIBRARIES = $&#123;pybind11_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(examplelib </span><br><span class="line">	<span class="variable">$&#123;HEADER_FILES&#125;</span></span><br><span class="line">	<span class="variable">$&#123;SOURCE_FILES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (examplelib  </span><br><span class="line">	pybind11::module</span><br><span class="line">	<span class="variable">$&#123;xxx_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h3><h4 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(pybind11 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;pybind11_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>( [MAIN] <span class="string">&quot;Found pybind11 v$&#123;pybind11_VERSION&#125;: $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_INCLUDE_DIRS = $&#123;pybind11_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; pybind11_LIBRARIES = $&#123;pybind11_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(cpp_use_python cpp_use_python.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(cpp_use_python PRIVATE pybind11::embed)</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://kezunlin.me/post/8b9c051d/">Part 1: Interfacing C++ and Python with pybind11 on windows 10</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181127: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>pybind11</tag>
      </tags>
  </entry>
  <entry>
    <title>linux command ref</title>
    <url>//blog/linux-command-ref/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s src dest</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s $(<span class="built_in">pwd</span>)/yolo /home/kezunlin/program/darknet/kzl-yolo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips: use absolute path to link folder</p>
</blockquote>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>case1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/old/new/g&quot;</span> 1.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace “old” with “new”</p>
</blockquote>
<p>case2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;7,7s/neat_enable\: false/neat_enable\: true/g&quot;</span> _config.yml</span><br></pre></td></tr></table></figure>
<blockquote>
<p>replace <code>neat_enale: false</code> to <code>neat_enale: true</code></p>
</blockquote>
<p>case3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/http:\/\/kezunlin.me/https:\/\/kezunlin.me/g&quot;</span> posts/post1.md</span><br></pre></td></tr></table></figure>
<blockquote>
<p>replace “<a href="http://kezunlin.me/">http://kezunlin.me</a>“ with “<a href="https://kezunlin.me/">https://kezunlin.me</a>“</p>
</blockquote>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>case1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep UpsampleParameter . -r --include *.h </span><br><span class="line"></span><br><span class="line">grep UpsampleParameter . -r --include *.proto</span><br><span class="line">./src/caffe/proto/caffe.proto:  optional UpsampleParameter upsample_param = 150;</span><br><span class="line">./src/caffe/proto/caffe.proto:message UpsampleParameter &#123;</span><br></pre></td></tr></table></figure>

<p>case2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r <span class="string">&quot;http://kezunlin.me&quot;</span> posts/ </span><br><span class="line">posts/post1.md:[here](http://kezunlin.me/post/book)</span><br><span class="line">posts/post2.md:-[here](http://kezunlin.me/post/book)</span><br><span class="line">posts/post2.md:- [img](http://kezunlin.me/post/book)</span><br></pre></td></tr></table></figure>

<p>case3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -rl <span class="string">&quot;http://kezunlin.me&quot;</span> posts </span><br><span class="line">posts/post1.md</span><br><span class="line">posts/post2.md</span><br></pre></td></tr></table></figure>

<p>case4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/http:\/\/kezunlin.me/https:\/\/kezunlin.me/g&quot;</span> `grep -rl <span class="string">&quot;http://kezunlin.me&quot;</span> posts`  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace <code>http://kezunlin.me</code> with <code>https://kezunlin.me</code> in all posts files.</p>
</blockquote>
<p>case5</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/comments\: false/comments\: true/g&quot;</span> _posts/*</span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace <code>comments: false</code> with <code>comments: true</code> in all posts files.</p>
</blockquote>
<p>case6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep --include=*.py -lr OKUtil .  | xargs </span><br><span class="line"></span><br><span class="line">grep -r -l &lt;old&gt; * | xargs sed -i <span class="string">&#x27;s/&lt;old&gt;/&lt;new&gt;/g&#x27;</span></span><br><span class="line">grep -r -l &lt;OKUtil&gt; * | xargs sed -i <span class="string">&#x27;s/&lt;OKUtil&gt;/&lt;OkoooUtil&gt;/g&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h3><h4 id="for-so"><a href="#for-so" class="headerlink" title="for so"></a>for so</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd test_opencv | awk <span class="string">&#x27;/ =&gt; / &#123; print $3 &#125;&#x27;</span></span><br><span class="line">(0x00007fff309d4000)</span><br><span class="line">/usr/local/lib/libopencv_imgcodecs.so.3.1</span><br><span class="line">/usr/local/lib/libopencv_core.so.3.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libstdc++.so.6</span><br><span class="line">/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">/usr/local/lib/libopencv_imgproc.so.3.1</span><br><span class="line">/usr/local/lib/libjpeg.so.8</span><br><span class="line">/lib/x86_64-linux-gnu/libpng12.so.0</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libtiff.so.5</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libjasper.so.1</span><br><span class="line">/lib/x86_64-linux-gnu/libz.so.1</span><br><span class="line">/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">/lib/x86_64-linux-gnu/libpthread.so.0</span><br><span class="line">/lib/x86_64-linux-gnu/libdl.so.2</span><br><span class="line">/lib/x86_64-linux-gnu/librt.so.1</span><br><span class="line">/lib/x86_64-linux-gnu/liblzma.so.5</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libjbig.so.0</span><br></pre></td></tr></table></figure>

<h4 id="for-not-found"><a href="#for-not-found" class="headerlink" title="for not found"></a>for not found</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd test_opencv | awk <span class="string">&#x27;NF==1 &#123;file=$1&#125; /not found/ &#123; print file, $1 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="useful"><a href="#useful" class="headerlink" title="useful"></a>useful</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd example_opencv | awk  <span class="string">&#x27;&#123;if (match($3,&quot;/&quot;))&#123; printf(&quot;%s \n&quot;),$3 &#125; &#125;&#x27;</span></span><br><span class="line">/usr/local/lib/libopencv_imgcodecs.so.3.1 </span><br><span class="line">/usr/local/lib/libopencv_core.so.3.1 </span><br><span class="line">/usr/lib/x86_64-linux-gnu/libstdc++.so.6 </span><br><span class="line">/lib/x86_64-linux-gnu/libgcc_s.so.1 </span><br><span class="line">/lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line">/usr/local/lib/libopencv_imgproc.so.3.1 </span><br><span class="line">/usr/local/lib/libjpeg.so.8 </span><br><span class="line">/lib/x86_64-linux-gnu/libpng12.so.0 </span><br><span class="line">/usr/lib/x86_64-linux-gnu/libtiff.so.5 </span><br><span class="line">/usr/lib/x86_64-linux-gnu/libjasper.so.1 </span><br><span class="line">/lib/x86_64-linux-gnu/libz.so.1 </span><br><span class="line">/lib/x86_64-linux-gnu/libm.so.6 </span><br><span class="line">/lib/x86_64-linux-gnu/libpthread.so.0 </span><br><span class="line">/lib/x86_64-linux-gnu/libdl.so.2 </span><br><span class="line">/lib/x86_64-linux-gnu/librt.so.1 </span><br><span class="line">/lib/x86_64-linux-gnu/liblzma.so.5 </span><br><span class="line">/usr/lib/x86_64-linux-gnu/libjbig.so.0 </span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>login website with json data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">    -H <span class="string">&quot;Accept: application/json&quot;</span> -H <span class="string">&quot;Content-type: application/json&quot;</span> \</span><br><span class="line">    --data <span class="string">&#x27;&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;21232f297a57a5a743894a0e4a801fc3&quot;&#125;&#x27;</span> \</span><br><span class="line">    http://192.168.0.12:8888/api/login </span><br></pre></td></tr></table></figure>

<blockquote>
<p>md5(admin) &#x3D; 21232f297a57a5a743894a0e4a801fc3</p>
</blockquote>
<p>output </p>
<pre><code>&#123;&quot;rtn&quot;:0,&quot;message&quot;:&quot;OK&quot;,&quot;session_id&quot;:&quot;1406699300@kezunlin.me&quot;&#125;
</code></pre>
<p>query results with <code>session_id</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">    -H <span class="string">&quot;session_id: 1406699300@kezunlin.me&quot;</span> \</span><br><span class="line">    http://192.168.0.12:8888/api/book</span><br></pre></td></tr></table></figure>

<p>download file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure>

<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="check-cpu"><a href="#check-cpu" class="headerlink" title="check cpu"></a>check cpu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep name | <span class="built_in">cut</span> -f2 -d: | <span class="built_in">uniq</span> -c </span><br><span class="line">        8  Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep physical | <span class="built_in">uniq</span> -c </span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br><span class="line">        1 physical <span class="built_in">id</span>	: 0</span><br><span class="line">        1 address sizes	: 39 bits physical, 48 bits virtual</span><br></pre></td></tr></table></figure>

<h3 id="check-gpu"><a href="#check-gpu" class="headerlink" title="check gpu"></a>check gpu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lspci | grep -i vga</span><br><span class="line">    00:02.0 VGA compatible controller: Intel Corporation Device 591b (rev 04)</span><br><span class="line">    01:00.0 VGA compatible controller: NVIDIA Corporation Device 1c20 (rev a1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lspci -v -s 01:00.0</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation Device 1c20 (rev a1) (prog-if 00 [VGA controller])</span><br><span class="line">    Subsystem: CLEVO/KAPOK Computer Device 65a1</span><br><span class="line">    Flags: bus master, fast devsel, latency 0, IRQ 130</span><br><span class="line">    Memory at db000000 (32-bit, non-prefetchable) [size=16M]</span><br><span class="line">    Memory at 90000000 (64-bit, prefetchable) [size=256M]</span><br><span class="line">    Memory at a0000000 (64-bit, prefetchable) [size=32M]</span><br><span class="line">    I/O ports at e000 [size=128]</span><br><span class="line">    [virtual] Expansion ROM at dc000000 [disabled] [size=512K]</span><br><span class="line">    Capabilities: &lt;access denied&gt;</span><br><span class="line">    Kernel driver <span class="keyword">in</span> use: nvidia</span><br><span class="line">    Kernel modules: nvidiafb, nouveau, nvidia_396, nvidia_396_drm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nvidia-smi</span><br><span class="line">Tue Feb 12 10:09:14 2019       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 396.54                 Driver Version: 396.54                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1060    Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| N/A   56C    P8     8W /  N/A |    601MiB /  6078MiB |      3%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">watch -n 1 nvidia-smi</span><br><span class="line"></span><br><span class="line">pip install gpustat</span><br><span class="line">watch --color -n1 gpustat -cpu </span><br></pre></td></tr></table></figure>

<h3 id="multiple-terminal"><a href="#multiple-terminal" class="headerlink" title="multiple terminal"></a>multiple terminal</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnome-terminal --working-directory=/home --tab --tab --tab</span><br></pre></td></tr></table></figure>

<h3 id="stop-lightdm"><a href="#stop-lightdm" class="headerlink" title="stop lightdm"></a>stop lightdm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install xserver-org</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop desktop</span></span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/lightdm stop</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> fbterm</span><br></pre></td></tr></table></figure>

<h3 id="changedir-no-effect"><a href="#changedir-no-effect" class="headerlink" title="changedir no effect"></a>changedir no effect</h3><p>changedir.sh </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /home/firefox  </span><br><span class="line"><span class="built_in">pwd</span>  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行的时候是<code>./changedir.sh</code>来执行的，这样执行的话终端会产生一个subshell，subshell去执行脚本，在subshell中已经切换了目录了，但是subshell一旦执行完，马上退出，subshell中的变量和操作全部都收回。回到终端根本就看不到这个过程的变化。</p>
</blockquote>
<p>solution</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./changedir.sh</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">. changedir.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>source changedir.sh</code>执行，这时候就是直接在终端的shell执行脚本了，没有生成子shell，所以当前终端切换了目录。</p>
</blockquote>
<h3 id="kill-process"><a href="#kill-process" class="headerlink" title="kill process"></a>kill process</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:4000</span><br><span class="line">netstat -tunlp | grep 4000</span><br><span class="line"><span class="built_in">kill</span> -9 1234</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/6048474/how-to-remember-multiple-tabs-session-in-terminal-alike-ff-session-manager">how-to-remember-multiple-tabs-session-in-terminal-alike-ff-session-manager</a></li>
<li><a href="https://github.com/probonopd/linuxdeployqt">linuxdeployqt git</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181130: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sed</tag>
        <tag>grep</tag>
        <tag>ldd</tag>
        <tag>curl</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install doxygen on ubuntu 16.04</title>
    <url>//blog/install-doxygen-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="how-to-install-doxygen"><a href="#how-to-install-doxygen" class="headerlink" title="how to install doxygen"></a>how to install doxygen</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install doxygen</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install graphviz</span><br></pre></td></tr></table></figure>

<h3 id="how-to-use-doxygen"><a href="#how-to-use-doxygen" class="headerlink" title="how to use doxygen"></a>how to use doxygen</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> path/to/yourproject</span><br></pre></td></tr></table></figure>

<p>generate a <code>Doxyfile</code> with </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ doxygen -g </span><br><span class="line"></span><br><span class="line">$ ll Doxyfile</span><br></pre></td></tr></table></figure>

<p>generate doc <code>html</code> and <code>latex</code> with </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">doxygen Doxyfile</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>Searching for include files...
Searching for example files...
Searching for images...
Searching for dot files...
Searching for msc files...
Searching for dia files...
Searching for files to exclude
Searching INPUT for files to process...
...
</code></pre>
<h3 id="view-doxygen-result"><a href="#view-doxygen-result" class="headerlink" title="view doxygen result"></a>view doxygen result</h3><p>open <code>html/index.html</code> and view results</p>
<p><img src="https://kezunlin.me/images/posts/1864218-20191213113432558-864665208.png" alt="doxygen index.html"></p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181204: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>doxygen</tag>
      </tags>
  </entry>
  <entry>
    <title>how to use opencv dnn module</title>
    <url>//blog/opencv-dnn-module/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>support framework</p>
<blockquote>
<p><code>cv2.dnn.readNetFromCaffe</code>:  deploy.prototxt + iter_140000.caffemodel<br><code>cv2.dnn.readNetFromTensorflow</code>: model.pbtxt + model.pb.<br><code>cv2.dnn.readNetFromDarknet</code>: yolov3.cfg　+ yolov3.weights<br><code>cv2.dnn.readNetFromTorch</code>:  model.t7</p>
</blockquote>
<h3 id="readNetFromCaffe"><a href="#readNetFromCaffe" class="headerlink" title="readNetFromCaffe"></a>readNetFromCaffe</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load our serialized face detector from disk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading face detector...&quot;</span>)</span><br><span class="line">protoPath = os.path.sep.join([args[<span class="string">&quot;detector&quot;</span>], <span class="string">&quot;deploy.prototxt&quot;</span>])</span><br><span class="line">modelPath = os.path.sep.join([args[<span class="string">&quot;detector&quot;</span>],</span><br><span class="line">    <span class="string">&quot;res10_300x300_ssd_iter_140000.caffemodel&quot;</span>])</span><br><span class="line">net = cv2.dnn.readNetFromCaffe(protoPath, modelPath)</span><br></pre></td></tr></table></figure>

<h3 id="readNetFromTensorflow"><a href="#readNetFromTensorflow" class="headerlink" title="readNetFromTensorflow"></a>readNetFromTensorflow</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># derive the paths to the Mask R-CNN weights and model configuration</span></span><br><span class="line">weightsPath = os.path.sep.join([args[<span class="string">&quot;mask_rcnn&quot;</span>],</span><br><span class="line">    <span class="string">&quot;frozen_inference_graph.pb&quot;</span>])</span><br><span class="line">configPath = os.path.sep.join([args[<span class="string">&quot;mask_rcnn&quot;</span>],</span><br><span class="line">    <span class="string">&quot;mask_rcnn_inception_v2_coco_2018_01_28.pbtxt&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># load our Mask R-CNN trained on the COCO dataset (90 classes)</span></span><br><span class="line"><span class="comment"># from disk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading Mask R-CNN from disk...&quot;</span>)</span><br><span class="line">net = cv2.dnn.readNetFromTensorflow(weightsPath, configPath)</span><br></pre></td></tr></table></figure>

<h3 id="readNetFromDarknet"><a href="#readNetFromDarknet" class="headerlink" title="readNetFromDarknet"></a>readNetFromDarknet</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># derive the paths to the YOLO weights and model configuration</span></span><br><span class="line">weightsPath = os.path.sep.join([args[<span class="string">&quot;yolo&quot;</span>], <span class="string">&quot;yolov3.weights&quot;</span>])</span><br><span class="line">configPath = os.path.sep.join([args[<span class="string">&quot;yolo&quot;</span>], <span class="string">&quot;yolov3.cfg&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># load our YOLO object detector trained on COCO dataset (80 classes)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading YOLO from disk...&quot;</span>)</span><br><span class="line">net = cv2.dnn.readNetFromDarknet(configPath, weightsPath)</span><br></pre></td></tr></table></figure>

<h3 id="readNetFromTorch"><a href="#readNetFromTorch" class="headerlink" title="readNetFromTorch"></a>readNetFromTorch</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load our serialized face embedding model from disk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading face recognizer...&quot;</span>)</span><br><span class="line">net = cv2.dnn.readNetFromTorch(args[<span class="string">&quot;embedding_model&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># load the neural style transfer model from disk</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading style transfer model...&quot;</span>)</span><br><span class="line">net = cv2.dnn.readNetFromTorch(args[<span class="string">&quot;model&quot;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.pyimagesearch.com/2018/09/24/opencv-face-recognition/">ssd caffe</a></li>
<li><a href="https://www.pyimagesearch.com/2018/11/26/instance-segmentation-with-opencv/">maskrcnn tensorflow</a></li>
<li><a href="https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/">yolov3 darknet</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/27/neural-style-transfer-with-opencv/">torch</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181207: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>opencv</tag>
        <tag>tensorflow</tag>
        <tag>darknet</tag>
        <tag>dnn</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install caffe-yolov3 on ubuntu 16.04</title>
    <url>//blog/compile-caffe-yolov3-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/e8f8aadd/">Part 1: compile darknet on ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/a5c428f1/">Part 2: compile darknet on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/cfeb28a4/">Part 3: compile caffe-yolov3 on ubuntu 16.04</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h3><p>my system requirements (same as <a href="https://kezunlin.me/post/b90033a9/">caffe on ubuntu 16.04</a>)</p>
<ul>
<li>ubuntu 16.04</li>
<li>GeForce 1060 (6G)  sm_61</li>
<li>cuda: 9.2 </li>
<li>cudnn: 7.1.4</li>
<li>opencv: 3.3.0 </li>
<li>caffe: latest</li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kezunlin/caffe-yolov3.git</span><br><span class="line"><span class="built_in">cd</span> caffe-yolov3</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>caffe-yolov3</code> is based on caffe with <code>UpsampleLayer</code> and darknet.<br>tips: edit CMakeLists.txt for <code>caffe</code>.<br>see <a href="https://github.com/kezunlin/caffe-yolov3/blob/master/CMakeLists.txt">CMakeLists.txt</a></p>
</blockquote>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">tree install</span><br><span class="line">install</span><br><span class="line">├── bin</span><br><span class="line">│   ├── demo</span><br><span class="line">│   ├── dog.jpg</span><br><span class="line">│   └── libcaffeyolo.so</span><br><span class="line">├── include</span><br><span class="line">│   └── caffeyolo</span><br><span class="line">│       ├── activations.h</span><br><span class="line">│       ├── blas.h</span><br><span class="line">│       ├── box.h</span><br><span class="line">│       ├── cuda.h</span><br><span class="line">│       ├── image.h</span><br><span class="line">│       └── yolo_layer.h</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcaffeyolo.so</span><br><span class="line">└── share</span><br><span class="line">    └── cmake</span><br><span class="line">        └── caffeyolo</span><br><span class="line">            ├── caffeyolo-config.cmake</span><br><span class="line">            └── caffeyolo-config-noconfig.cmake</span><br><span class="line"></span><br><span class="line">7 directories, 12 files</span><br></pre></td></tr></table></figure>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> install/bin</span><br><span class="line">./demo</span><br></pre></td></tr></table></figure>
<p>output </p>
<pre><code>num_inputs is 1
num_outputs is 3
I1211 17:13:30.259755 10384 detectnet.cpp:74] Input data layer channels is  3
I1211 17:13:30.259785 10384 detectnet.cpp:75] Input data layer width is  416
I1211 17:13:30.259806 10384 detectnet.cpp:76] Input data layer height is  416
output blob1 shape c= 255, h = 13, w = 13
output blob2 shape c= 255, h = 26, w = 26
output blob3 shape c= 255, h = 52, w = 52
object-detection:  finished processing data operation  (392)ms
object-detection:  finished processing yolov3 network  (135)ms
16: 99%
x = 0.288428,y =  0.660513,w = 0.243282,h =  0.543122
left = 128,right =  314,top = 224,bot =  536
7: 93%
x = 0.756588,y =  0.222789,w = 0.280549,h =  0.147772
left = 473,right =  688,top = 85,bot =  170
1: 99%
x = 0.473371,y =  0.483899,w = 0.517509,h =  0.575438
left = 164,right =  562,top = 112,bot =  444
detectnet-camera:  video device has been un-initialized.
detectnet-camera:  this concludes the test of the video device.
</code></pre>
<p>image<br><img src="https://kezunlin.me/images/posts/635233-20181211172011480-60199252.png" alt="dog.jpg"></p>
<h3 id="net"><a href="#net" class="headerlink" title="net"></a>net</h3><h4 id="input-output"><a href="#input-output" class="headerlink" title="input &amp;&amp; output"></a>input &amp;&amp; output</h4><p>input: </p>
<ul>
<li>data 1,3,416,416</li>
</ul>
<p>output</p>
<ul>
<li>layer82-conv 1,255,13,13</li>
<li>layer94-conv 1,255,26,26</li>
<li>layer106-conv 1,255,52,52</li>
</ul>
<h4 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Input: the model&#x27;s output dict</span></span><br><span class="line"><span class="comment">### Output: list of tuples in ((cx1, cy1), (cx2, cy2), cls, prob)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rects_prepare</span>(<span class="params">output, inp_dim=<span class="number">416</span>, num_classes=<span class="number">80</span></span>):</span><br><span class="line">    prediction = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># transform prediction coordinates to correspond to pixel location</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> output.items():</span><br><span class="line">        <span class="comment"># anchor sizes are borrowed from YOLOv3 config file</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;layer82-conv&#x27;</span>: </span><br><span class="line">            anchors = [(<span class="number">116</span>, <span class="number">90</span>), (<span class="number">156</span>, <span class="number">198</span>), (<span class="number">373</span>, <span class="number">326</span>)] </span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">&#x27;layer94-conv&#x27;</span>:</span><br><span class="line">            anchors = [(<span class="number">30</span>, <span class="number">61</span>), (<span class="number">62</span>, <span class="number">45</span>), (<span class="number">59</span>, <span class="number">119</span>)]</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">&#x27;layer106-conv&#x27;</span>: </span><br><span class="line">            anchors = [(<span class="number">10</span>, <span class="number">13</span>), (<span class="number">16</span>, <span class="number">30</span>), (<span class="number">33</span>, <span class="number">23</span>)]</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="yolov3-model"><a href="#yolov3-model" class="headerlink" title="yolov3 model"></a>yolov3 model</h2><h3 id="darknet"><a href="#darknet" class="headerlink" title="darknet"></a>darknet</h3><p>files</p>
<ul>
<li>yolov3.weights</li>
<li>yolov3.cfg</li>
<li>coco.names</li>
</ul>
<h3 id="caffe-yolov3"><a href="#caffe-yolov3" class="headerlink" title="caffe-yolov3"></a>caffe-yolov3</h3><p>files</p>
<ul>
<li>yolov3.caffemodel</li>
<li>yolov3.prototxt</li>
<li>coco.names</li>
<li><strong>yolov3-cpp.prototxt</strong></li>
<li><strong>yolov3-trt.prototxt</strong></li>
</ul>
<h4 id="yolov3-cpp-prototxt"><a href="#yolov3-cpp-prototxt" class="headerlink" title="yolov3-cpp.prototxt"></a>yolov3-cpp.prototxt</h4><p>compared with <code>yolov3.prototxt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;layer82-conv&quot;</span><br><span class="line">    bottom: &quot;layer94-conv&quot;</span><br><span class="line">    bottom: &quot;layer106-conv&quot;</span><br><span class="line">    type: &quot;Yolov3DetectionOutput&quot;</span><br><span class="line">    top: &quot;detection_out&quot;</span><br><span class="line">    name: &quot;detection_out&quot;</span><br><span class="line">    yolov3_detection_output_param &#123;</span><br><span class="line">        nms_threshold: 0.45</span><br><span class="line">        num_classes: 80</span><br><span class="line">        biases: 10</span><br><span class="line">        biases: 13</span><br><span class="line">        biases: 16</span><br><span class="line">        biases: 30</span><br><span class="line">        biases: 33</span><br><span class="line">        biases: 23</span><br><span class="line">        biases: 30</span><br><span class="line">        biases: 61</span><br><span class="line">        biases: 62</span><br><span class="line">        biases: 45</span><br><span class="line">        biases: 59</span><br><span class="line">        biases: 119</span><br><span class="line">        biases: 116</span><br><span class="line">        biases: 90</span><br><span class="line">        biases: 156</span><br><span class="line">        biases: 198</span><br><span class="line">        biases: 373</span><br><span class="line">        biases: 326</span><br><span class="line">        mask: 6</span><br><span class="line">        mask: 7</span><br><span class="line">        mask: 8</span><br><span class="line">        mask: 3</span><br><span class="line">        mask: 4</span><br><span class="line">        mask: 5</span><br><span class="line">        mask: 0</span><br><span class="line">        mask: 1</span><br><span class="line">        mask: 2</span><br><span class="line">        mask_group_num: 3</span><br><span class="line">        anchors_scale: 32</span><br><span class="line">        anchors_scale: 16</span><br><span class="line">        anchors_scale: 8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Use <code>Yolov3DetectionOutput</code> layer with <code>caffe</code> (<code>Upsample</code>+<code>Yolov3DetectionOutput</code>)</p>
</blockquote>
<h4 id="yolov3-trt-prototxt"><a href="#yolov3-trt-prototxt" class="headerlink" title="yolov3-trt.prototxt"></a>yolov3-trt.prototxt</h4><p>see <a href="https://github.com/lewes6369/TensorRT-Yolov3">yolov3-trt.prototxt</a><br>compared with <code>yolov3-cpp.prototxt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;layer85-conv&quot;</span><br><span class="line">    top: &quot;layer86-upsample&quot;</span><br><span class="line">    name: &quot;layer86-upsample&quot;</span><br><span class="line">    type: &quot;Upsample&quot;</span><br><span class="line">    #upsample_param &#123;</span><br><span class="line">    #    scale: 2</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;layer97-conv&quot;</span><br><span class="line">    top: &quot;layer98-upsample&quot;</span><br><span class="line">    name: &quot;layer98-upsample&quot;</span><br><span class="line">    type: &quot;Upsample&quot;</span><br><span class="line">    #upsample_param &#123;</span><br><span class="line">    #    scale: 2</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;layer82-conv&quot;</span><br><span class="line">    bottom: &quot;layer94-conv&quot;</span><br><span class="line">    bottom: &quot;layer106-conv&quot;</span><br><span class="line">    top: &quot;yolo-det&quot;</span><br><span class="line">    name: &quot;yolo-det&quot;</span><br><span class="line">    type: &quot;Yolo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Use <code>YoloLayerPlugin</code> plugin with <code>TensorRT</code></p>
</blockquote>
<h2 id="caffe-extension-layer"><a href="#caffe-extension-layer" class="headerlink" title="caffe extension layer"></a>caffe extension layer</h2><h3 id="UpsampleLayer"><a href="#UpsampleLayer" class="headerlink" title="UpsampleLayer"></a>UpsampleLayer</h3><p>see <a href="https://github.com/BVLC/caffe/pull/6384/commits/4d2400e7ae692b25f034f02ff8e8cd3621725f5c">caffe UpsampleLayer</a></p>
<p><img src="https://kezunlin.me/images/posts/635233-20181211161856766-524598750.png" alt="upsample"></p>
<h3 id="Yolov3DetectionOutputLayer"><a href="#Yolov3DetectionOutputLayer" class="headerlink" title="Yolov3DetectionOutputLayer"></a>Yolov3DetectionOutputLayer</h3><ul>
<li>proto: <a href="https://github.com/eric612/Caffe-YOLOv3-Windows/blob/3fb79ed65f/src/caffe/proto/caffe.proto">caffe.proto</a></li>
<li>yolov3_detection_output_layer.hpp: <a href="https://github.com/eric612/Caffe-YOLOv3-Windows/blob/3fb79ed65f/include/caffe/layers/yolov3_detection_output_layer.hpp">header</a></li>
<li>yolov3_detection_output_layer.cpp: <a href="https://github.com/eric612/Caffe-YOLOv3-Windows/blob/3fb79ed65fb1e9f94a10636158b740b52f02058b/src/caffe/layers/yolov3_detection_output_layer.cpp">cpp</a></li>
</ul>
<h2 id="yolov3-with-tensorrt"><a href="#yolov3-with-tensorrt" class="headerlink" title="yolov3 with tensorrt"></a>yolov3 with tensorrt</h2><ul>
<li><a href="https://github.com/lewes6369/TensorRT-Yolov3">TensorRT-Yolov3</a></li>
<li><a href="https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps/tree/master/yolo">trt-yolov3</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/ChenYingpeng/caffe-yolov3">ChenYingpengcaffe-yolov3</a></li>
<li><a href="https://github.com/kezunlin/caffe-yolov3">my version</a></li>
<li><a href="https://github.com/BVLC/caffe/pull/6384/commits/4d2400e7ae692b25f034f02ff8e8cd3621725f5c">caffe UpsampleLayer</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181211: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>tensorrt</tag>
        <tag>object detect</tag>
        <tag>yolov3</tag>
      </tags>
  </entry>
  <entry>
    <title>use pyinstaller to package executable on windows 10</title>
    <url>//blog/pyinstaller-tutorial-on-windows-10/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pywin32 pyinstaller</span><br><span class="line">pip3 install --upgrade setuptools</span><br></pre></td></tr></table></figure>

<p><code>pyinstall -F demo.py</code> error</p>
<pre><code>pyinstaller AttributeError: &#39;str&#39; object has no attribute &#39;items&#39;
</code></pre>
<p>solution:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade setuptools</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -h </span><br></pre></td></tr></table></figure>

<p>params:</p>
<ul>
<li><p>General Options</p>
<p>  -y, –noconfirm<br>  Replace output directory (default: SPECPATH&#x2F;dist&#x2F;SPECNAME)<br>  without asking for confirmation<br>  –upx-dir UPX_DIR<br>  Path to UPX utility (default: search the execution path)<br><br>  –clean	<br>  Clean PyInstaller cache and remove temporary files before building.<br><br>  –log-level LEVEL<br>  Amount of detail in build-time console messages. LEVEL may be one of<br>  TRACE, DEBUG, INFO, WARN, ERROR, CRITICAL (default: INFO).</p>
</li>
<li><p>What to generate</p>
<pre><code>-D, --onedir	
    Create a one-folder bundle containing an executable (default)

-F, --onefile	
    Create a one-file bundled executable.
</code></pre>
</li>
<li><p>What to bundle, where to search</p>
<pre><code>--add-data &lt;SRC;DEST or SRC:DEST&gt;  
    This option can be used multiple times.

--add-binary &lt;SRC;DEST or SRC:DEST&gt; 
    This option can be used multiple times.

-p DIR, --paths DIR 
    A path to search for imports (like using PYTHONPATH). 
    Multiple paths are allowed, separated by ‘:’, or use 
    this option multiple times

--hidden-import MODULENAME, --hiddenimport MODULENAME 
    Name an import not visible in the code of the script(s). 
    This option can be used multiple times.
</code></pre>
</li>
<li><p>Windows and Mac OS X specific options</p>
<pre><code>-c, --console, --nowindowed
    Open a console window for standard i/o (default)
-w, --windowed, --noconsole
    Windows and Mac OS X: do not provide a console window 
    for standard i/o
</code></pre>
</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="use-pyd"><a href="#use-pyd" class="headerlink" title="use pyd"></a>use pyd</h3><p>path related source code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.append(<span class="string">&#x27;./sdk/superdog/&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> superdog <span class="comment"># superdog.pyd</span></span><br></pre></td></tr></table></figure>

<p>pyinstaller commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -y -D --path=<span class="string">&quot;sdk/superdog&quot;</span> demo.py</span><br><span class="line"><span class="comment"># pyinstaller -y -D --add-binary &#x27;./sdk/superdog/superdog.pyd;.&#x27; </span></span><br><span class="line"><span class="comment"># --add-binary &#x27;./sdk/superdog/dog_windows_x64.dll;.&#x27; demo.py</span></span><br></pre></td></tr></table></figure>

<p>generate <code>build</code> and <code>dist</code> folder, plus <code>demo.spec</code></p>
<p>output </p>
<pre><code>78 INFO: Extending PYTHONPATH with paths
[&#39;E:\\git\\python\\helloworld&#39;,
 &#39;E:\\git\\python\\helloworld\\sdk\\superdog&#39;,
 &#39;E:\\git\\python\\helloworld&#39;]
</code></pre>
<p>demo.spec</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python -*-</span></span><br><span class="line"></span><br><span class="line">block_cipher = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Analysis([<span class="string">&#x27;demo.py&#x27;</span>],</span><br><span class="line">             pathex=[<span class="string">&#x27;sdk/superdog&#x27;</span>, <span class="string">&#x27;E:\\git\\python\\helloworld&#x27;</span>],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[],</span><br><span class="line">             hiddenimports=[],</span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">             cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz,</span><br><span class="line">          a.scripts,</span><br><span class="line">          [],</span><br><span class="line">          exclude_binaries=<span class="literal">True</span>,</span><br><span class="line">          name=<span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">          debug=<span class="literal">False</span>,</span><br><span class="line">          bootloader_ignore_signals=<span class="literal">False</span>,</span><br><span class="line">          strip=<span class="literal">False</span>,</span><br><span class="line">          upx=<span class="literal">True</span>,</span><br><span class="line">          console=<span class="literal">True</span> )</span><br><span class="line">coll = COLLECT(exe,</span><br><span class="line">               a.binaries,</span><br><span class="line">               a.zipfiles,</span><br><span class="line">               a.datas,</span><br><span class="line">               strip=<span class="literal">False</span>,</span><br><span class="line">               upx=<span class="literal">True</span>,</span><br><span class="line">               name=<span class="string">&#x27;demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>view <code>build/demo/xref-demo.html</code></p>
<p>superdog found.</p>
<blockquote>
<p>Tips:<br>if we use <code>pyinstaller -y -D demo.py</code> don’t include <code>--path=&quot;sdk/superdog&quot;</code>,<br>package will be missing, and error occur when we run executable.</p>
</blockquote>
<p>run executable </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> dist/demo</span><br><span class="line">./demo.exe</span><br><span class="line"><span class="comment"># OK</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>all related dlls have been copied to <code>dist/demo/</code> folder,<br>eg. <code>cublas64_80.dll,curand64_80.dll,cudart64_80.dll,cudnn64_6.dll</code></p>
</blockquote>
<h3 id="use-ctype-DLLs"><a href="#use-ctype-DLLs" class="headerlink" title="use ctype DLLs"></a>use ctype DLLs</h3><p>path related source code </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.append(<span class="string">&#x27;./sdk/superdog/&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./sdk/detect/&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> superdog <span class="comment"># superdog.pyd</span></span><br><span class="line"><span class="keyword">import</span> detect <span class="comment"># detect.py cuda80_detect.dll cuda90_detect.dll</span></span><br></pre></td></tr></table></figure>

<p>CDLL related source code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lib = CDLL(<span class="string">&quot;./sdk/detect/cuda80_detect_cpp_dll.dll&quot;</span>, RTLD_GLOBAL)</span><br></pre></td></tr></table></figure>

<p>pyinstaller commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -y -D --path=<span class="string">&quot;sdk/superdog;sdk/detect&quot;</span> demo.py</span><br></pre></td></tr></table></figure>

<p>warning</p>
<pre><code>93 INFO: Extending PYTHONPATH with paths
[&#39;E:\\git\\python\\helloworld&#39;,
 &#39;E:\\git\\python\\helloworld\\sdk\\superdog&#39;,
 &#39;E:\\git\\python\\helloworld\\sdk\\detect&#39;,
 &#39;E:\\git\\python\\helloworld&#39;]
  ...
WARNING: Ignoring ./sdk/detect/cuda80_detect_cpp_dll.dll imported
    from E:\git\python\helloworld\sdk\detect\detect.py -
    ctypes imports are only supported using bare filenames
</code></pre>
<p>fix </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#lib = CDLL(&quot;./sdk/detect/cuda80_detect_cpp_dll.dll&quot;, RTLD_GLOBAL)</span></span><br><span class="line">lib = CDLL(<span class="string">&quot;cuda80_detect_cpp_dll.dll&quot;</span>, RTLD_GLOBAL)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: <strong>for CDLL with pyinstaller, we must use bare filenames in python source</strong>.<br>see <a href="https://pyinstaller.readthedocs.io/en/v3.3.1/feature-notes.html">here</a></p>
</blockquote>
<p>now we run pyintaller again</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -y -D --path=<span class="string">&quot;sdk/superdog;sdk/detect&quot;</span> demo.py</span><br></pre></td></tr></table></figure>

<p>view <code>build/demo/xref-demo.html</code></p>
<p>superdog and detect.</p>
<p>run executable </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd dist/demo</span><br><span class="line">./demo.exe</span><br><span class="line"><span class="comment"># OK</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>all related dlls have been copied to <code>dist/demo/</code> folder,<br>eg. <code>cublas64_80.dll,curand64_80.dll,cudart64_80.dll,cudnn64_6.dll</code><br>and <code>cuda80_detect_cpp_dll.dll</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><h3 id="get-version"><a href="#get-version" class="headerlink" title="get version"></a>get version</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python grab_version.py <span class="string">&quot;/path/to/xxx.exe&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>C:\Users\zunli\AppData\Local\Programs\Python\Python35\Lib\site-packages<br>PyInstaller\utils\cliutils\grab_version.py</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20190305155532641-1365664774.png" alt="qq version info"></p>
<p>file_version_info.txt</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># UTF-8</span><br><span class="line">#</span><br><span class="line"># For more details about fixed file info &#x27;ffi&#x27; see:</span><br><span class="line"># http://msdn.microsoft.com/en-us/library/ms646997.aspx</span><br><span class="line">VSVersionInfo(</span><br><span class="line">  ffi=FixedFileInfo(</span><br><span class="line">    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)</span><br><span class="line">    # Set not needed items to zero 0.</span><br><span class="line">    filevers=(9, 0, 4, 23780),</span><br><span class="line">    prodvers=(9, 0, 4, 23780),</span><br><span class="line">    # Contains a bitmask that specifies the valid bits &#x27;flags&#x27;r</span><br><span class="line">    mask=0x3f,</span><br><span class="line">    # Contains a bitmask that specifies the Boolean attributes of the file.</span><br><span class="line">    flags=0x0,</span><br><span class="line">    # The operating system for which this file was designed.</span><br><span class="line">    # 0x4 - NT and there is no need to change it.</span><br><span class="line">    OS=0x40004,</span><br><span class="line">    # The general type of file.</span><br><span class="line">    # 0x1 - the file is an application.</span><br><span class="line">    fileType=0x1,</span><br><span class="line">    # The function of the file.</span><br><span class="line">    # 0x0 - the function is not defined for this fileType</span><br><span class="line">    subtype=0x0,</span><br><span class="line">    # Creation date and time stamp.</span><br><span class="line">    date=(0, 0)</span><br><span class="line">    ),</span><br><span class="line">  kids=[</span><br><span class="line">    StringFileInfo(</span><br><span class="line">      [</span><br><span class="line">      StringTable(</span><br><span class="line">        u&#x27;080404b0&#x27;,</span><br><span class="line">        [StringStruct(u&#x27;CompanyName&#x27;, u&#x27;Tencent&#x27;),</span><br><span class="line">        StringStruct(u&#x27;FileDescription&#x27;, u&#x27;腾讯QQ&#x27;),</span><br><span class="line">        StringStruct(u&#x27;FileVersion&#x27;, u&#x27;9.0.4.23780&#x27;),</span><br><span class="line">        StringStruct(u&#x27;LegalCopyright&#x27;, u&#x27;Copyright (C) 1999-2018 Tencent. All Rights Reserved&#x27;),</span><br><span class="line">        StringStruct(u&#x27;ProductName&#x27;, u&#x27;腾讯QQ&#x27;),</span><br><span class="line">        StringStruct(u&#x27;ProductVersion&#x27;, u&#x27;9.0.4.23780&#x27;)])</span><br><span class="line">      ]), </span><br><span class="line">    VarFileInfo([VarStruct(u&#x27;Translation&#x27;, [2052, 1200])])</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="set-version"><a href="#set-version" class="headerlink" title="set version"></a>set version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pyinstaller.py \</span><br><span class="line">--version-file=file_version_info.txt \</span><br><span class="line">--icon=ico.ico \</span><br><span class="line">-y -D \</span><br><span class="line">--path=<span class="string">&quot;sdk/superdog;sdk/detect&quot;</span> \</span><br><span class="line">demo.py</span><br></pre></td></tr></table></figure>

<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Running-PyInstaller-with-Python-optimizations"><a href="#Running-PyInstaller-with-Python-optimizations" class="headerlink" title="Running PyInstaller with Python optimizations"></a>Running PyInstaller with Python optimizations</h3><blockquote>
<p>Tips: be carefull with optimizations.</p>
</blockquote>
<p>PyInstaller can be run with Python optimization flags (<code>-O</code> or <code>-OO</code>)<br>by executing it as a Python module, rather than using the <code>pyinstaller</code> command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -O -m PyInstaller -y -D --path=<span class="string">&quot;sdk/superdog&quot;</span> demo.py</span><br></pre></td></tr></table></figure>

<p>Or, by explicitly setting the <code>PYTHONOPTIMIZE</code> environment variable to a non-zero value:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Unix</span></span><br><span class="line">PYTHONOPTIMIZE=1 pyinstaller myscript.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">set</span> PYTHONOPTIMIZE=1 &amp;&amp; pyinstaller myscript.py</span><br></pre></td></tr></table></figure>

<h3 id="only-import-what-you-need"><a href="#only-import-what-you-need" class="headerlink" title="only import what you need"></a>only import what you need</h3><p>replace <code>import os</code> with <code>from os import path</code> to reduce final executable size.</p>
<h3 id="Using-UPX"><a href="#Using-UPX" class="headerlink" title="Using UPX"></a>Using UPX</h3><p>see <a href="https://upx.github.io/">upx</a></p>
<h3 id="Encrypting-Python-Bytecode"><a href="#Encrypting-Python-Bytecode" class="headerlink" title="Encrypting Python Bytecode"></a>Encrypting Python Bytecode</h3><p>To encrypt the Python bytecode modules stored in the bundle, pass the <code>--key=key-string</code> argument on the command line.</p>
<p>For this to work, you must have the <code>PyCrypto</code> module installed. The key-string is a string of 16 characters which is used to encrypt each file of Python byte-code before it is stored in the archive inside the executable file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure>

<h3 id="Other-similar-tools"><a href="#Other-similar-tools" class="headerlink" title="Other similar tools"></a>Other similar tools</h3><ul>
<li><a href="http://www.py2exe.org/">py2exe</a>: pip install py2exe</li>
<li><a href="https://cx-freeze.readthedocs.io/en/latest/">cx_freeze</a>: pip install cx_freeze</li>
<li><a href="https://bitbucket.org/ronaldoussoren/py2app">py2app</a>: pip install py2app</li>
<li><a href="http://nuitka.net/">nuitka</a> from <a href="http://nuitka.net/pages/download.html">here</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pyinstaller.readthedocs.io/en/stable/usage.html">pyinstaller usage</a></li>
<li><a href="https://pyinstaller.readthedocs.io/en/stable/spec-files.html#adding-data-files">pyinstaller add data binary</a></li>
<li><a href="https://pyinstaller.readthedocs.io/en/v3.3.1/feature-notes.html">pyinstaller feature notes</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181213: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>ros publisher and subscriber tutorial</title>
    <url>//blog/ros-publisher-and-subscriber-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="create-workspace"><a href="#create-workspace" class="headerlink" title="create workspace"></a>create workspace</h3><p>Let’s create and build a catkin workspace:</p>
<pre><code>mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/
catkin_make
source devel/setup.bash 
env | grep ROS
</code></pre>
<h3 id="create-package"><a href="#create-package" class="headerlink" title="create package"></a>create package</h3><pre><code>cd ~/catkin_ws/src
catkin_create_pkg beginner_tutorials roscpp rospy std_msgs

tree .
.
├── beginner_tutorials
│   ├── CMakeLists.txt
│   ├── include
│   │   └── beginner_tutorials
│   ├── package.xml
│   └── src
└── CMakeLists.txt -&gt; /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake

4 directories, 3 files
</code></pre>
<h3 id="create-msg"><a href="#create-msg" class="headerlink" title="create msg"></a>create msg</h3><pre><code>roscd beginner_tutorials
mkdir msg
echo &quot;int64 num&quot; &gt; msg/Num.msg
</code></pre>
<p>vim package.xml</p>
<pre><code>&lt;build_depend&gt;message_generation&lt;/build_depend&gt;
&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;
</code></pre>
<p>vim CMakeLists.txt</p>
<pre><code>find_package(catkin REQUIRED COMPONENTS
   roscpp
   rospy
   std_msgs
   message_generation
)

catkin_package(
  ...
  CATKIN_DEPENDS message_runtime ...
  ...)


add_message_files(
  FILES
  Num.msg
)
</code></pre>
<h3 id="create-srv"><a href="#create-srv" class="headerlink" title="create srv"></a>create srv</h3><pre><code>roscd beginner_tutorials
mkdir srv
roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv
</code></pre>
<blockquote>
<p>roscp [package_name] [file_to_copy_path] [copy_path]<br>roscp rospy_tutorials AddTwoInts.srv srv&#x2F;AddTwoInts.srv</p>
</blockquote>
<p>vim CMakeLists.txt</p>
<pre><code>add_service_files(
  FILES
  AddTwoInts.srv
)
</code></pre>
<h3 id="show-msg"><a href="#show-msg" class="headerlink" title="show msg"></a>show msg</h3><pre><code>rosmsg show beginner_tutorials/Num
int64 num

rosmsg show Num
[beginner_tutorials/Num]:
int64 num
</code></pre>
<h3 id="show-srv"><a href="#show-srv" class="headerlink" title="show srv"></a>show srv</h3><blockquote>
<p>rossrv show <service type></p>
</blockquote>
<pre><code>rossrv show beginner_tutorials/AddTwoInts 

int64 a
int64 b
---
int64 sum


rossrv show AddTwoInts

[beginner_tutorials/AddTwoInts]:
int64 a
int64 b
---
int64 sum

[rospy_tutorials/AddTwoInts]:
int64 a
int64 b
---
int64 sum
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><h3 id="talker-cpp"><a href="#talker-cpp" class="headerlink" title="talker.cpp"></a>talker.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This tutorial demonstrates simple sending of messages over the ROS system.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The ros::init() function needs to see argc and argv so that it can perform</span></span><br><span class="line"><span class="comment">   * any ROS arguments and name remapping that were provided at the command line.</span></span><br><span class="line"><span class="comment">   * For programmatic remappings you can use a different version of init() which takes</span></span><br><span class="line"><span class="comment">   * remappings directly, but for most command-line programs, passing argc and argv is</span></span><br><span class="line"><span class="comment">   * the easiest way to do it.  The third argument to init() is the name of the node.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You must call one of the versions of ros::init() before using any other</span></span><br><span class="line"><span class="comment">   * part of the ROS system.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;talker&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * NodeHandle is the main access point to communications with the ROS system.</span></span><br><span class="line"><span class="comment">   * The first NodeHandle constructed will fully initialize this node, and the last</span></span><br><span class="line"><span class="comment">   * NodeHandle destructed will close down the node.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The advertise() function is how you tell ROS that you want to</span></span><br><span class="line"><span class="comment">   * publish on a given topic name. This invokes a call to the ROS</span></span><br><span class="line"><span class="comment">   * master node, which keeps a registry of who is publishing and who</span></span><br><span class="line"><span class="comment">   * is subscribing. After this advertise() call is made, the master</span></span><br><span class="line"><span class="comment">   * node will notify anyone who is trying to subscribe to this topic name,</span></span><br><span class="line"><span class="comment">   * and they will in turn negotiate a peer-to-peer connection with this</span></span><br><span class="line"><span class="comment">   * node.  advertise() returns a Publisher object which allows you to</span></span><br><span class="line"><span class="comment">   * publish messages on that topic through a call to publish().  Once</span></span><br><span class="line"><span class="comment">   * all copies of the returned Publisher object are destroyed, the topic</span></span><br><span class="line"><span class="comment">   * will be automatically unadvertised.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The second parameter to advertise() is the size of the message queue</span></span><br><span class="line"><span class="comment">   * used for publishing messages.  If messages are published more quickly</span></span><br><span class="line"><span class="comment">   * than we can send them, the number here specifies how many messages to</span></span><br><span class="line"><span class="comment">   * buffer up before throwing some away.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::Publisher chatter_pub = n.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A count of how many messages we have sent. This is used to create</span></span><br><span class="line"><span class="comment">   * a unique string for each message.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This is a message object. You stuff it with data, and then publish it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line"></span><br><span class="line">    std::stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;hello world &quot;</span> &lt;&lt; count;</span><br><span class="line">    msg.data = ss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>, msg.data.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The publish() function is how you send messages. The parameter</span></span><br><span class="line"><span class="comment">     * is the message object. The type of this object must agree with the type</span></span><br><span class="line"><span class="comment">     * given as a template parameter to the advertise&lt;&gt;() call, as was done</span></span><br><span class="line"><span class="comment">     * in the constructor above.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    chatter_pub.<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spinOnce</span>();</span><br><span class="line"></span><br><span class="line">    loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">    ++count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="listener-cpp"><a href="#listener-cpp" class="headerlink" title="listener.cpp"></a>listener.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This tutorial demonstrates simple receipt of messages over the ROS system.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="type">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;I heard: [%s]&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The ros::init() function needs to see argc and argv so that it can perform</span></span><br><span class="line"><span class="comment">   * any ROS arguments and name remapping that were provided at the command line.</span></span><br><span class="line"><span class="comment">   * For programmatic remappings you can use a different version of init() which takes</span></span><br><span class="line"><span class="comment">   * remappings directly, but for most command-line programs, passing argc and argv is</span></span><br><span class="line"><span class="comment">   * the easiest way to do it.  The third argument to init() is the name of the node.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You must call one of the versions of ros::init() before using any other</span></span><br><span class="line"><span class="comment">   * part of the ROS system.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;listener&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * NodeHandle is the main access point to communications with the ROS system.</span></span><br><span class="line"><span class="comment">   * The first NodeHandle constructed will fully initialize this node, and the last</span></span><br><span class="line"><span class="comment">   * NodeHandle destructed will close down the node.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The subscribe() call is how you tell ROS that you want to receive messages</span></span><br><span class="line"><span class="comment">   * on a given topic.  This invokes a call to the ROS</span></span><br><span class="line"><span class="comment">   * master node, which keeps a registry of who is publishing and who</span></span><br><span class="line"><span class="comment">   * is subscribing.  Messages are passed to a callback function, here</span></span><br><span class="line"><span class="comment">   * called chatterCallback.  subscribe() returns a Subscriber object that you</span></span><br><span class="line"><span class="comment">   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber</span></span><br><span class="line"><span class="comment">   * object go out of scope, this callback will automatically be unsubscribed from</span></span><br><span class="line"><span class="comment">   * this topic.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The second parameter to the subscribe() function is the size of the message</span></span><br><span class="line"><span class="comment">   * queue.  If messages are arriving faster than they are being processed, this</span></span><br><span class="line"><span class="comment">   * is the number of messages that will be buffered up before beginning to throw</span></span><br><span class="line"><span class="comment">   * away the oldest ones.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::Subscriber sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ros::spin() will enter a loop, pumping callbacks.  With this version, all</span></span><br><span class="line"><span class="comment">   * callbacks will be called from within this thread (the main one).  ros::spin()</span></span><br><span class="line"><span class="comment">   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br><span class="line"><span class="keyword">project</span>(beginner_tutorials)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Compile as C++11, supported in ROS Kinetic and newer</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Find catkin macros and libraries</span></span><br><span class="line"><span class="comment">## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)</span></span><br><span class="line"><span class="comment">## is used, also find other catkin packages</span></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## System dependencies are found with CMake&#x27;s conventions</span></span><br><span class="line"><span class="comment"># find_package(Boost REQUIRED COMPONENTS system)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Generate messages in the &#x27;msg&#x27; folder</span></span><br><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Num.msg</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Generate services in the &#x27;srv&#x27; folder</span></span><br><span class="line">add_service_files(</span><br><span class="line">   FILES</span><br><span class="line">   AddTwoInts.srv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Generate actions in the &#x27;action&#x27; folder</span></span><br><span class="line"><span class="comment"># add_action_files(</span></span><br><span class="line"><span class="comment">#   FILES</span></span><br><span class="line"><span class="comment">#   Action1.action</span></span><br><span class="line"><span class="comment">#   Action2.action</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Generate added messages and services with any dependencies listed here</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">catkin_package(</span><br><span class="line">  INCLUDE_DIRS <span class="keyword">include</span></span><br><span class="line">  LIBRARIES beginner_tutorials</span><br><span class="line">  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span><br><span class="line"><span class="comment">#  DEPENDS system_lib</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment">## Build ##</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify additional locations of header files</span></span><br><span class="line"><span class="comment">## Your package locations should be listed before other locations</span></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">  <span class="keyword">include</span></span><br><span class="line">  <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(talker src/talker.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(talker <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(talker beginner_tutorials_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(listener src/listener.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(listener beginner_tutorials_generate_messages_cpp)</span><br></pre></td></tr></table></figure>

<h2 id="catkin-make"><a href="#catkin-make" class="headerlink" title="catkin_make"></a>catkin_make</h2><pre><code>cd ~/catkin_ws
catkin_make 

Base path: /home/kezunlin/workspace/ros/catkin_ws
Source space: /home/kezunlin/workspace/ros/catkin_ws/src
Build space: /home/kezunlin/workspace/ros/catkin_ws/build
Devel space: /home/kezunlin/workspace/ros/catkin_ws/devel
Install space: /home/kezunlin/workspace/ros/catkin_ws/install
####
#### Running command: &quot;make cmake_check_build_system&quot; in &quot;/home/kezunlin/workspace/ros/catkin_ws/build&quot;
####
-- Using CATKIN_DEVEL_PREFIX: /home/kezunlin/workspace/ros/catkin_ws/devel
-- Using CMAKE_PREFIX_PATH: /home/kezunlin/workspace/ros/catkin_ws/devel;/home/kezunlin/catkin_ws/devel;/opt/ros/kinetic
-- This workspace overlays: /home/kezunlin/workspace/ros/catkin_ws/devel;/home/kezunlin/catkin_ws/devel;/opt/ros/kinetic
-- Using PYTHON_EXECUTABLE: /usr/bin/python
-- Using Debian Python package layout
-- Using empy: /usr/bin/empy
-- Using CATKIN_ENABLE_TESTING: ON
-- Call enable_testing()
-- Using CATKIN_TEST_RESULTS_DIR: /home/kezunlin/workspace/ros/catkin_ws/build/test_results
-- Found gtest: gtests will be built
-- Using Python nosetests: /usr/local/bin/nosetests-2.7
-- catkin 0.7.14
-- BUILD_SHARED_LIBS is on
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ~~  traversing 1 packages in topological order:
-- ~~  - beginner_tutorials
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- +++ processing catkin package: &#39;beginner_tutorials&#39;
-- ==&gt; add_subdirectory(beginner_tutorials)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- beginner_tutorials: 1 messages, 1 services
-- Configuring done
-- Generating done
-- Build files have been written to: /home/kezunlin/workspace/ros/catkin_ws/build
####
#### Running command: &quot;make -j8 -l8&quot; in &quot;/home/kezunlin/workspace/ros/catkin_ws/build&quot;
####
[  0%] [  0%] [  0%] [  0%] Built target std_msgs_generate_messages_cpp
Built target std_msgs_generate_messages_py
[  0%] Built target std_msgs_generate_messages_nodejs
Built target std_msgs_generate_messages_lisp
Built target std_msgs_generate_messages_eus
[  0%] [  0%] Built target _beginner_tutorials_generate_messages_check_deps_AddTwoInts
Built target _beginner_tutorials_generate_messages_check_deps_Num
[ 20%] [ 20%] [ 20%] [ 26%] [ 33%] [ 40%] [ 46%] Generating Lisp code from beginner_tutorials/Num.msg
Generating EusLisp code from beginner_tutorials/AddTwoInts.srv
Generating EusLisp code from beginner_tutorials/Num.msg
Generating Javascript code from beginner_tutorials/Num.msg
Generating Javascript code from beginner_tutorials/AddTwoInts.srv
Generating C++ code from beginner_tutorials/Num.msg
[ 53%] Generating C++ code from beginner_tutorials/AddTwoInts.srv
Generating Python from MSG beginner_tutorials/Num
[ 60%] Generating Lisp code from beginner_tutorials/AddTwoInts.srv
[ 66%] Generating Python code from SRV beginner_tutorials/AddTwoInts
[ 66%] Built target beginner_tutorials_generate_messages_nodejs
[ 73%] Built target beginner_tutorials_generate_messages_eus
[ 73%] Built target beginner_tutorials_generate_messages_lisp
[ 80%] [ 86%] Generating Python srv __init__.py for beginner_tutorials
Generating Python msg __init__.py for beginner_tutorials
[ 86%] Built target beginner_tutorials_generate_messages_cpp
Scanning dependencies of target listener
Scanning dependencies of target talker
[ 93%] [100%] Building CXX object beginner_tutorials/CMakeFiles/listener.dir/src/listener.cpp.o
Building CXX object beginner_tutorials/CMakeFiles/talker.dir/src/talker.cpp.o
[100%] Built target beginner_tutorials_generate_messages_py
[100%] Built target beginner_tutorials_generate_messages
Linking CXX executable /home/kezunlin/workspace/ros/catkin_ws/devel/lib/beginner_tutorials/talker
[100%] Built target talker
Linking CXX executable /home/kezunlin/workspace/ros/catkin_ws/devel/lib/beginner_tutorials/listener
[100%] Built target listener
</code></pre>
<h3 id="play-with-talker-and-listener"><a href="#play-with-talker-and-listener" class="headerlink" title="play with talker and listener"></a>play with talker and listener</h3><pre><code>roscore 

cd ~/catkin_ws
./devel/lib/beginner_tutorials/talker
./devel/lib/beginner_tutorials/listener
</code></pre>
<p><code>rosrun beginner_tutorials talker</code></p>
<pre><code>[ INFO] [1545039519.457624559]: hello world 803
[ INFO] [1545039519.557624500]: hello world 804
[ INFO] [1545039519.657595852]: hello world 805
[ INFO] [1545039519.757538635]: hello world 806
</code></pre>
<p><code>rosrun beginner_tutorials listener</code></p>
<pre><code>[ INFO] [1545039519.458099942]: I heard: [hello world 803]
[ INFO] [1545039519.558116295]: I heard: [hello world 804]
[ INFO] [1545039519.658085716]: I heard: [hello world 805]
[ INFO] [1545039519.757998160]: I heard: [hello world 806]
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Quick-Ref"><a href="#Quick-Ref" class="headerlink" title="Quick Ref"></a>Quick Ref</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install and configure ros environment</span></span><br><span class="line"><span class="comment">## install</span></span><br><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb [arch=amd64] http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ros-kinetic-desktop-full</span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">env</span> | grep ROS</span><br><span class="line"></span><br><span class="line"><span class="comment">## test </span></span><br><span class="line">roscore</span><br><span class="line"></span><br><span class="line"><span class="comment">## create workspace</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash </span><br><span class="line"><span class="built_in">env</span> | grep ROS</span><br></pre></td></tr></table></figure>

<h2 id="Navigating-the-ROS-Filesystem"><a href="#Navigating-the-ROS-Filesystem" class="headerlink" title="Navigating the ROS Filesystem"></a>Navigating the ROS Filesystem</h2><p>commands</p>
<ul>
<li>rospack &#x3D; ros + pack(age)</li>
<li>roscd &#x3D; ros + cd</li>
<li>rosls &#x3D; ros + ls</li>
</ul>
<p>sudo apt-get install ros-kinetic-ros-tutorials</p>
<p>rosls roscpp_tutorials</p>
<p>rospack find roscpp</p>
<p>&#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;share&#x2F;roscpp</p>
<p>roscd roscpp<br>pwd<br>&#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;share&#x2F;roscpp</p>
<blockquote>
<p>Note that <code>roscd</code>, like other ROS tools, will only find ROS packages that are within the directories listed in your <code>ROS_PACKAGE_PATH</code>.<br><code>echo $ROS_PACKAGE_PATH</code></p>
</blockquote>
<p>roscd roscpp&#x2F;cmake<br>pwd<br>&#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;share&#x2F;roscpp&#x2F;cmake</p>
<p>roscd log<br>pwd<br>&#x2F;home&#x2F;kezunlin&#x2F;.ros&#x2F;log&#x2F;42e6e804-0199-11e9-93c2-80fa5b47928a</p>
<p>rosls roscpp<br>cmake  msg  package.xml  rosbuild  srv</p>
<h2 id="Creating-a-ROS-Package"><a href="#Creating-a-ROS-Package" class="headerlink" title="Creating a ROS Package"></a>Creating a ROS Package</h2><h3 id="package-structure"><a href="#package-structure" class="headerlink" title="package structure"></a>package structure</h3><p>workspace_folder&#x2F;        – WORKSPACE<br>  src&#x2F;                   – SOURCE SPACE<br>    CMakeLists.txt       – ‘Toplevel’ CMake file, provided by catkin<br>    package_1&#x2F;<br>      CMakeLists.txt     – CMakeLists.txt file for package_1<br>      package.xml        – Package manifest for package_1<br>    …<br>    package_n&#x2F;<br>      CMakeLists.txt     – CMakeLists.txt file for package_n<br>      package.xml        – Package manifest for package_n</p>
<h3 id="create-a-catkin-package"><a href="#create-a-catkin-package" class="headerlink" title="create a catkin package"></a>create a catkin package</h3><blockquote>
<p>catkin_create_pkg <package_name> [depend1] [depend2] [depend3]</p>
</blockquote>
<p>cd ~&#x2F;catkin_ws&#x2F;src<br>catkin_create_pkg beginner_tutorials roscpp rospy std_msgs</p>
<pre><code>Created file beginner_tutorials/CMakeLists.txt
Created file beginner_tutorials/package.xml
Created folder beginner_tutorials/include/beginner_tutorials
Created folder beginner_tutorials/src
</code></pre>
<h3 id="build-a-catkin-workspace-and-source-setup-file"><a href="#build-a-catkin-workspace-and-source-setup-file" class="headerlink" title="build a catkin workspace and source setup file"></a>build a catkin workspace and source setup file</h3><p>cd ~&#x2F;catkin_ws&#x2F;<br>catkin_make</p>
<p>. ~&#x2F;catkin_ws&#x2F;devel&#x2F;setup.bash</p>
<h3 id="package-dependencies"><a href="#package-dependencies" class="headerlink" title="package dependencies"></a>package dependencies</h3><h4 id="first-order-dependencies"><a href="#first-order-dependencies" class="headerlink" title="first-order dependencies"></a>first-order dependencies</h4><p>rospack depends1 beginner_tutorials<br>roscpp<br>rospy<br>std_msgs</p>
<p>roscd beginner_tutorials<br>cat package.xml</p>
<pre><code>&lt;package format=&quot;2&quot;&gt;
...
  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;
  &lt;build_depend&gt;roscpp&lt;/build_depend&gt;
  &lt;build_depend&gt;rospy&lt;/build_depend&gt;
  &lt;build_depend&gt;std_msgs&lt;/build_depend&gt;
...
&lt;/package&gt;
</code></pre>
<h4 id="Indirect-dependencies"><a href="#Indirect-dependencies" class="headerlink" title="Indirect dependencies"></a>Indirect dependencies</h4><p>rospack depends1 rospy<br>genpy<br>roscpp<br>rosgraph<br>rosgraph_msgs<br>roslib<br>std_msgs</p>
<h4 id="list-all-dependencies"><a href="#list-all-dependencies" class="headerlink" title="list all dependencies"></a>list all dependencies</h4><p>rospack depends beginner_tutorials</p>
<h3 id="Customizing-Your-Package"><a href="#Customizing-Your-Package" class="headerlink" title="Customizing Your Package"></a>Customizing Your Package</h3><p>vim package.xml</p>
<h2 id="Building-a-ROS-Package"><a href="#Building-a-ROS-Package" class="headerlink" title="Building a ROS Package"></a>Building a ROS Package</h2><h3 id="catkin-make-1"><a href="#catkin-make-1" class="headerlink" title="catkin_make"></a>catkin_make</h3><pre><code># In a CMake project
$ mkdir build
$ cd build
$ cmake ..
$ make
$ make install  # (optionally)

# In a catkin workspace
$ catkin_make
$ catkin_make install  # (optionally)
</code></pre>
<h2 id="Understanding-ROS-Nodes"><a href="#Understanding-ROS-Nodes" class="headerlink" title="Understanding ROS Nodes"></a>Understanding ROS Nodes</h2><p>commands</p>
<ul>
<li>roscore &#x3D; ros+core : master (provides name service for ROS) + rosout (stdout&#x2F;stderr) + parameter server (parameter server will be introduced later)</li>
<li>rosnode &#x3D; ros+node : ROS tool to get information about a node.</li>
<li>rosrun &#x3D; ros+run : runs a node from a given package.</li>
</ul>
<h3 id="concepts"><a href="#concepts" class="headerlink" title="concepts"></a>concepts</h3><p>Quick Overview of Graph Concepts</p>
<ul>
<li>Nodes: A node is an executable that uses ROS to communicate with other nodes.</li>
<li>Messages: ROS data type used when subscribing or publishing to a topic.</li>
<li>Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.</li>
<li>Master: Name service for ROS (i.e. helps nodes find each other)</li>
<li>rosout: ROS equivalent of stdout&#x2F;stderr</li>
<li>roscore: Master + rosout + parameter server (parameter server will be introduced later)</li>
</ul>
<p>Client Libraries</p>
<ul>
<li>rospy &#x3D; python client library</li>
<li>roscpp &#x3D; c++ client library</li>
</ul>
<h3 id="play-with-nodes"><a href="#play-with-nodes" class="headerlink" title="play with nodes"></a>play with nodes</h3><p>roscore</p>
<p>rosnode list<br>&#x2F;rosout</p>
<p>rosnode info &#x2F;rosout</p>
<pre><code>--------------------------------------------------------------------------------
Node [/rosout]
Publications: 
 * /rosout_agg [rosgraph_msgs/Log]

Subscriptions: 
 * /rosout [unknown type]

Services: 
 * /rosout/get_loggers
 * /rosout/set_logger_level


contacting node http://ke:40803/ ...
Pid: 31049
</code></pre>
<h3 id="run-new-nodes"><a href="#run-new-nodes" class="headerlink" title="run new nodes"></a>run new nodes</h3><blockquote>
<p>rosrun [package_name] [node_name]</p>
</blockquote>
<p>rosrun turtlesim turtlesim_node</p>
<p>rosnode list<br>&#x2F;rosout<br>&#x2F;turtlesim</p>
<p>rosnode info &#x2F;turtlesim</p>
<h3 id="rename-node-name"><a href="#rename-node-name" class="headerlink" title="rename node name"></a>rename node name</h3><p>rosrun turtlesim turtlesim_node __name:&#x3D;my_turtle</p>
<p>rosnode list<br>&#x2F;my_turtle<br>&#x2F;rosout</p>
<blockquote>
<p>Note: If you still see <code>/turtlesim</code> in the list, it might mean that you stopped the node in the terminal using <code>ctrl-C</code> instead of <code>closing the window</code></p>
</blockquote>
<h3 id="ping-node"><a href="#ping-node" class="headerlink" title="ping node"></a>ping node</h3><p>rosnode ping my_turtle<br>rosnode: node is [&#x2F;my_turtle]<br>pinging &#x2F;my_turtle with a timeout of 3.0s<br>xmlrpc reply from <a href="http://ke:33523/">http://ke:33523/</a>	time&#x3D;0.274181ms<br>xmlrpc reply from <a href="http://ke:33523/">http://ke:33523/</a>	time&#x3D;1.040220ms<br>xmlrpc reply from <a href="http://ke:33523/">http://ke:33523/</a>	time&#x3D;1.013041ms<br>^Cping average: 0.775814ms</p>
<h2 id="Understanding-ROS-Topics"><a href="#Understanding-ROS-Topics" class="headerlink" title="Understanding ROS Topics"></a>Understanding ROS Topics</h2><p>roscore<br>rosrun turtlesim turtlesim_node<br>rosrun turtlesim turtle_teleop_key</p>
<p>rosrun rqt_graph rqt_graph</p>
<p>rostopic echo &#x2F;turtle1&#x2F;cmd_vel</p>
<h2 id="linear-x-2-0-y-0-0-z-0-0angular-x-0-0-y-0-0-z-0-0"><a href="#linear-x-2-0-y-0-0-z-0-0angular-x-0-0-y-0-0-z-0-0" class="headerlink" title="linear:  x: 2.0  y: 0.0  z: 0.0angular:  x: 0.0  y: 0.0  z: 0.0"></a>linear:<br>  x: 2.0<br>  y: 0.0<br>  z: 0.0<br>angular:<br>  x: 0.0<br>  y: 0.0<br>  z: 0.0</h2><p>rostopic list -v</p>
<pre><code>Published topics:
 * /turtle1/color_sensor [turtlesim/Color] 1 publisher
 * /turtle1/cmd_vel [geometry_msgs/Twist] 1 publisher
 * /rosout [rosgraph_msgs/Log] 3 publishers
 * /rosout_agg [rosgraph_msgs/Log] 1 publisher
 * /turtle1/pose [turtlesim/Pose] 1 publisher

Subscribed topics:
 * /turtle1/cmd_vel [geometry_msgs/Twist] 1 subscriber
 * /rosout [rosgraph_msgs/Log] 1 subscriber
 * /statistics [rosgraph_msgs/TopicStatistics] 1 subscriber
</code></pre>
<p>rostopic type &#x2F;turtle1&#x2F;cmd_vel<br>geometry_msgs&#x2F;Twist</p>
<p>rosmsg show geometry_msgs&#x2F;Twist<br>geometry_msgs&#x2F;Vector3 linear<br>  float64 x<br>  float64 y<br>  float64 z<br>geometry_msgs&#x2F;Vector3 angular<br>  float64 x<br>  float64 y<br>  float64 z</p>
<p>rostopic type &#x2F;turtle1&#x2F;cmd_vel | rosmsg show</p>
<h3 id="publish-messages"><a href="#publish-messages" class="headerlink" title="publish messages"></a>publish messages</h3><blockquote>
<p>rostopic pub [topic] [msg_type] [args]</p>
</blockquote>
<p>rostopic pub &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist “linear:<br>  x: 2.0<br>  y: 0.0<br>  z: 0.0<br>angular:<br>  x: 0.0<br>  y: 0.0<br>  z: 1.8” </p>
<p>rostopic pub -1 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist – ‘[2.0, 0.0, 0.0]’ ‘[0.0, 0.0, 1.8]’</p>
<p>rostopic pub &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -r 1 – ‘[2.0, 0.0, 0.0]’ ‘[0.0, 0.0, -1.8]’</p>
<blockquote>
<p>YAML syntax</p>
</blockquote>
<p>rostopic hz &#x2F;turtle1&#x2F;pose<br>$ 60 HZ</p>
<p>rosrun rqt_plot rqt_plot</p>
<h2 id="Understanding-ROS-Services-and-Parameters"><a href="#Understanding-ROS-Services-and-Parameters" class="headerlink" title="Understanding ROS Services and Parameters"></a>Understanding ROS Services and Parameters</h2><h3 id="rosservice"><a href="#rosservice" class="headerlink" title="rosservice"></a>rosservice</h3><p>Services are another way that nodes can communicate with each other. Services allow nodes to send a <code>request</code> and <code>receive</code> a response.</p>
<p>rosnode list<br>&#x2F;rosout<br>&#x2F;rqt_gui_py_node_1614<br>&#x2F;teleop_turtle<br>&#x2F;turtlesim</p>
<p>rosservice list<br>&#x2F;clear<br>&#x2F;kill<br>&#x2F;reset<br>&#x2F;rosout&#x2F;get_loggers<br>&#x2F;rosout&#x2F;set_logger_level<br>&#x2F;rqt_gui_py_node_1614&#x2F;get_loggers<br>&#x2F;rqt_gui_py_node_1614&#x2F;set_logger_level<br>&#x2F;spawn<br>&#x2F;teleop_turtle&#x2F;get_loggers<br>&#x2F;teleop_turtle&#x2F;set_logger_level<br>&#x2F;turtle1&#x2F;set_pen<br>&#x2F;turtle1&#x2F;teleport_absolute<br>&#x2F;turtle1&#x2F;teleport_relative<br>&#x2F;turtlesim&#x2F;get_loggers<br>&#x2F;turtlesim&#x2F;set_logger_level</p>
<blockquote>
<p>rosservice type [service]<br>rosservice call [service] [args]</p>
</blockquote>
<p>rosservice type &#x2F;clear<br>std_srvs&#x2F;Empty</p>
<p>rosservice call &#x2F;clear</p>
<blockquote>
<p>clear the background of turtlesim_node</p>
</blockquote>
<h2 id="rosservice-type-spawn-rossrv-showfloat32-xfloat32-yfloat32-thetastring-name"><a href="#rosservice-type-spawn-rossrv-showfloat32-xfloat32-yfloat32-thetastring-name" class="headerlink" title="rosservice type &#x2F;spawn | rossrv showfloat32 xfloat32 yfloat32 thetastring name"></a>rosservice type &#x2F;spawn | rossrv show<br>float32 x<br>float32 y<br>float32 theta<br>string name</h2><p>string name</p>
<p>rosservice call &#x2F;spawn 2 2 0.2 “”</p>
<blockquote>
<p>This service lets us spawn a new turtle at a given location and orientation. The name field is optional.</p>
</blockquote>
<h3 id="rosparam"><a href="#rosparam" class="headerlink" title="rosparam"></a>rosparam</h3><p> rosparam list<br>&#x2F;background_b<br>&#x2F;background_g<br>&#x2F;background_r<br>&#x2F;rosdistro<br>&#x2F;roslaunch&#x2F;uris&#x2F;host_ke__35701<br>&#x2F;rosversion<br>&#x2F;run_id</p>
<blockquote>
<p>rosparam set [param_name]<br>rosparam get [param_name]</p>
</blockquote>
<p>rosparam set &#x2F;background_r 150<br>rosservice call &#x2F;clear</p>
<p>rosparam get &#x2F;<br>background_b: 255<br>background_g: 86<br>background_r: 150<br>rosdistro: ‘kinetic</p>
<p>  ‘<br>roslaunch:<br>  uris: {host_ke__35701: ‘<a href="http://ke:35701/'%7D">http://ke:35701/&#39;}</a><br>rosversion: ‘1.12.14</p>
<p>  ‘<br>run_id: eb9e9f1e-01a3-11e9-93c2-80fa5b47928a</p>
<p>rosparam get &#x2F;background_b<br>255</p>
<blockquote>
<p>rosparam dump [file_name] [namespace]<br>rosparam load [file_name] [namespace]</p>
</blockquote>
<p>rosparam dump params.yaml</p>
<p>rosparam load params.yaml copy<br>rosparam get &#x2F;copy&#x2F;background_b</p>
<h2 id="Using-rqt-console-and-roslaunch"><a href="#Using-rqt-console-and-roslaunch" class="headerlink" title="Using rqt_console and roslaunch"></a>Using rqt_console and roslaunch</h2><p>rosrun rqt_console rqt_console<br>rosrun rqt_logger_level rqt_logger_level</p>
<blockquote>
<p>2 windows pop up.</p>
</blockquote>
<p>logger levels</p>
<p>Fatal<br>Error<br>Warn<br>Info<br>Debug</p>
<blockquote>
<p>roslaunch starts nodes as defined in a launch file.<br>roslaunch [package] [filename.launch]</p>
</blockquote>
<p>cd ~&#x2F;catkin_ws<br>source devel&#x2F;setup.bash<br>roscd beginner_tutorials</p>
<p>mkdir launch<br>cd launch</p>
<p>vim turtle.launch</p>
<launch>

  <group ns="turtlesim1">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>

  <group ns="turtlesim2">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>

  <node pkg="turtlesim" name="mimic" type="mimic">
    <remap from="input" to="turtlesim1/turtle1"/>
    <remap from="output" to="turtlesim2/turtle1"/>
  </node>

</launch>


<p>rosnode list<br>&#x2F;mimic<br>&#x2F;rosout<br>&#x2F;turtlesim1&#x2F;sim<br>&#x2F;turtlesim2&#x2F;sim</p>
<p>rostopic list<br>&#x2F;rosout<br>&#x2F;rosout_agg<br>&#x2F;turtlesim1&#x2F;turtle1&#x2F;cmd_vel<br>&#x2F;turtlesim1&#x2F;turtle1&#x2F;color_sensor<br>&#x2F;turtlesim1&#x2F;turtle1&#x2F;pose<br>&#x2F;turtlesim2&#x2F;turtle1&#x2F;cmd_vel<br>&#x2F;turtlesim2&#x2F;turtle1&#x2F;color_sensor<br>&#x2F;turtlesim2&#x2F;turtle1&#x2F;pose</p>
<p>rostopic pub &#x2F;turtlesim1&#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -r 1 – ‘[2.0, 0.0, 0.0]’ ‘[0.0, 0.0, -1.8]’</p>
<blockquote>
<p>You will see the two turtlesims start moving even though the publish command is only being sent to turtlesim1.</p>
</blockquote>
<h2 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h2><p>rosed roscpp <tab><tab></p>
<p>rosed roscpp Logger.msg</p>
<h2 id="Creating-a-ROS-msg-and-srv"><a href="#Creating-a-ROS-msg-and-srv" class="headerlink" title="Creating a ROS msg and srv"></a>Creating a ROS msg and srv</h2><ul>
<li>msg: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.</li>
<li>srv: an srv file describes a service. It is composed of two parts: a request and a response.</li>
</ul>
<h3 id="msg"><a href="#msg" class="headerlink" title="msg"></a>msg</h3><p>msgs are just simple text files with a field type and field name per line. The field types you can use are:</p>
<p>int8, int16, int32, int64 (plus uint*)<br>float32, float64<br>string<br>time, duration<br>other msg files<br>variable-length array[] and fixed-length array[C]</p>
<blockquote>
<p>There is also a special type in ROS: Header, the header contains a timestamp and coordinate frame information that are commonly used in ROS.</p>
</blockquote>
<p>Header header<br>string child_frame_id<br>geometry_msgs&#x2F;PoseWithCovariance pose<br>geometry_msgs&#x2F;TwistWithCovariance twist</p>
<h3 id="srv"><a href="#srv" class="headerlink" title="srv"></a>srv</h3><h2 id="int64-Aint64-B"><a href="#int64-Aint64-B" class="headerlink" title="int64 Aint64 B"></a>int64 A<br>int64 B</h2><p>int64 Sum</p>
<blockquote>
<p>A and B are the request, and Sum is the response.</p>
</blockquote>
<h3 id="create-msg-1"><a href="#create-msg-1" class="headerlink" title="create msg"></a>create msg</h3><p>roscd beginner_tutorials<br>mkdir msg<br>echo “int64 num” &gt; msg&#x2F;Num.msg</p>
<p>vim package.xml</p>
<p><build_depend>message_generation</build_depend><br><exec_depend>message_runtime</exec_depend></p>
<p>vim CMakeLists.txt</p>
<p>find_package(catkin REQUIRED COMPONENTS<br>   roscpp<br>   rospy<br>   std_msgs<br>   message_generation<br>)</p>
<p>catkin_package(<br>  …<br>  CATKIN_DEPENDS message_runtime …<br>  …)</p>
<p>add_message_files(<br>  FILES<br>  Num.msg<br>)</p>
<h3 id="create-srv-1"><a href="#create-srv-1" class="headerlink" title="create srv"></a>create srv</h3><p>roscd beginner_tutorials<br>mkdir srv</p>
<blockquote>
<p>roscp [package_name] [file_to_copy_path] [copy_path]<br>roscp rospy_tutorials AddTwoInts.srv srv&#x2F;AddTwoInts.srv</p>
</blockquote>
<p>vim CMakeLists.txt</p>
<p>add_service_files(<br>  FILES<br>  AddTwoInts.srv<br>)</p>
<h3 id="show-msg-1"><a href="#show-msg-1" class="headerlink" title="show msg"></a>show msg</h3><p>rosmsg show beginner_tutorials&#x2F;Num<br>int64 num</p>
<p>rosmsg show Num<br>[beginner_tutorials&#x2F;Num]:<br>int64 num</p>
<h3 id="show-srv-1"><a href="#show-srv-1" class="headerlink" title="show srv"></a>show srv</h3><blockquote>
<p>rossrv show <service type><br>rossrv show beginner_tutorials&#x2F;AddTwoInts </p>
</blockquote>
<pre><code>int64 a
int64 b
---
int64 sum
</code></pre>
<p>rossrv show AddTwoInts</p>
<pre><code>[beginner_tutorials/AddTwoInts]:
int64 a
int64 b
---
int64 sum

[rospy_tutorials/AddTwoInts]:
int64 a
int64 b
---
int64 sum
</code></pre>
<h3 id="catkin-make-2"><a href="#catkin-make-2" class="headerlink" title="catkin_make"></a>catkin_make</h3><p>roscd beginner_tutorials<br>cd ..&#x2F;..<br>catkin_make install</p>
<h3 id="review"><a href="#review" class="headerlink" title="review"></a>review</h3><p>rospack &#x3D; ros+pack(age) : provides information related to ROS packages<br>roscd &#x3D; ros+cd : changes directory to a ROS package or stack<br>rosls &#x3D; ros+ls : lists files in a ROS package<br>roscp &#x3D; ros+cp : copies files from&#x2F;to a ROS package<br>rosmsg &#x3D; ros+msg : provides information related to ROS message definitions<br>rossrv &#x3D; ros+srv : provides information related to ROS service definitions<br>catkin_make : makes (compiles) a ROS package<br>rosmake &#x3D; ros+make : makes (compiles) a ROS package (if you’re not using a catkin workspace)</p>
<h2 id="Writing-a-Simple-Publisher-and-Subscriber"><a href="#Writing-a-Simple-Publisher-and-Subscriber" class="headerlink" title="Writing a Simple Publisher and Subscriber"></a>Writing a Simple Publisher and Subscriber</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>roscd beginner_tutorials<br>vim src&#x2F;talker.cpp<br>vim src&#x2F;listener.cpp</p>
<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>cd ~&#x2F;catkin_ws<br>catkin_make</p>
<h3 id="play-with-talker-and-listener-1"><a href="#play-with-talker-and-listener-1" class="headerlink" title="play with talker and listener"></a>play with talker and listener</h3><p>roscore </p>
<p>rosrun beginner_tutorials talker</p>
<pre><code>[ INFO] [1545039519.457624559]: hello world 803
[ INFO] [1545039519.557624500]: hello world 804
[ INFO] [1545039519.657595852]: hello world 805
[ INFO] [1545039519.757538635]: hello world 806
</code></pre>
<p>rosrun beginner_tutorials listener</p>
<pre><code>[ INFO] [1545039519.458099942]: I heard: [hello world 803]
[ INFO] [1545039519.558116295]: I heard: [hello world 804]
[ INFO] [1545039519.658085716]: I heard: [hello world 805]
[ INFO] [1545039519.757998160]: I heard: [hello world 806]
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29">ros WritingPublisherSubscriber</a></li>
<li><a href="http://www.cnblogs.com/lizhongpingchn/p/5543013.html">ros publisher subscriber</a></li>
<li><a href="http://www.cnblogs.com/xuanxiaochen/p/6013886.html">ros publisher subscriber</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181214: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux tutorial on ubuntu 16.04</title>
    <url>//blog/tmux-tutorial-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install tmux</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) 默认创建一个会话，以数字命名。（不推荐）</span><br><span class="line">[root@Centos6 ~]# tmux</span><br><span class="line"></span><br><span class="line">2）新建会话，比如新创建一个会话以<span class="string">&quot;ccc&quot;</span>命名</span><br><span class="line">[root@Centos6 ~]# tmux new -s ccc</span><br><span class="line"></span><br><span class="line">1) 加上参数-d，表示在后台新建会话</span><br><span class="line">root@bobo:~# tmux new -s shibo -d</span><br><span class="line">root@bobo:~# tmux <span class="built_in">ls</span></span><br><span class="line">shibo: 1 windows (created Tue Oct  2 19:22:32 2018) [135x35]</span><br><span class="line"></span><br><span class="line">4）查看创建得所有会话</span><br><span class="line">[root@Centos6 ~]# tmux <span class="built_in">ls</span></span><br><span class="line">0: 1 windows (created Wed Aug 30 17:58:20 2017) [112x22](attached)    <span class="comment">#attached表示该会话是当前会话</span></span><br><span class="line">aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]</span><br><span class="line">ccc: 1 windows (created Wed Aug 30 17:01:05 2017) [112x22]</span><br><span class="line"></span><br><span class="line">5）从终端环境进入会话</span><br><span class="line">[root@Centos6 ~]# tmux attach -t aaa </span><br><span class="line"></span><br><span class="line">6）快捷键退出会话：</span><br><span class="line">登到某一个会话后，依次按键ctrl-b + d，这样就会退化该会话，但不会关闭会话；</span><br><span class="line">按键ctrl + d，就会在退出会话的通话也关闭了该会话。</span><br><span class="line"></span><br><span class="line">7）关闭会话（销毁会话）</span><br><span class="line">[root@Centos6 ~]# tmux <span class="built_in">ls</span></span><br><span class="line">aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]</span><br><span class="line">bbb: 1 windows (created Wed Aug 30 19:02:09 2017) [112x22]</span><br><span class="line"></span><br><span class="line">[root@Centos6 ~]# tmux kill-session -t bbb</span><br><span class="line"></span><br><span class="line">[root@Centos6 ~]# tmux <span class="built_in">ls</span></span><br><span class="line">aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]</span><br><span class="line"></span><br><span class="line">8）重命名会话</span><br><span class="line">[root@Centos6 ~]# tmux <span class="built_in">ls</span>  </span><br><span class="line">wangshibo: 1 windows (created Sun Sep 30 10:17:00 2018) [136x29] (attached)</span><br><span class="line"></span><br><span class="line">[root@Centos6 ~]# tmux rename -t wangshibo kevin</span><br><span class="line"></span><br><span class="line">[root@Centos6 ~]# tmux <span class="built_in">ls</span></span><br><span class="line">kevin: 1 windows (created Sun Sep 30 10:17:00 2018) [136x29] (attached)</span><br><span class="line"></span><br><span class="line">９）发送命令到回话并执行</span><br><span class="line">[root@Centos6 ~]# tmux send -t session_name <span class="string">&quot;command&quot;</span> ENTER</span><br></pre></td></tr></table></figure>

<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><pre><code>nohup &lt;command&gt; [argument…] &amp;
</code></pre>
<p>使用tmux打开一个终端窗口，可以在窗口里执行一个长时间运行的交互式命令操作，令其一直在后台跑着，并且在按键ctrl-b-d后，可以无感知的退出窗口，<br>而退出后窗口不会关闭，即窗口里执行的交互命令也不会结束。这比起传统的”nohup command &amp; （然后按ctrl+c）”的方式要好用很多。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s aaa</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y update </span><br><span class="line">ctrl+b + d</span><br></pre></td></tr></table></figure>

<h3 id="similar-tools"><a href="#similar-tools" class="headerlink" title="similar tools"></a>similar tools</h3><ul>
<li>screen</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.cnblogs.com/kevingrace/p/6496899.html">tmux tutorials</a></li>
<li><a href="http://mingxinglai.com/cn/2012/09/tmux/">tmux configure</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181214: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tmux</tag>
        <tag>nohup</tag>
      </tags>
  </entry>
  <entry>
    <title>compile protobuf-cpp on ubuntu 16.04</title>
    <url>//blog/compile-protobuf-cpp-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/d60ff6fe/">Part 1: compile protobuf-cpp on ubuntu 16.04</a></strong></li>
<li><a href="https://kezunlin.me/post/876d75f2/">Part 2: compile protobuf-cpp on windows 10</a></li>
<li><a href="https://kezunlin.me/post/ba8b6dea/">Part 3: protobuf usage</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>protobuf 2.6.1</li>
<li>protobuf 3.6.1 latest</li>
</ul>
<h3 id="old-version"><a href="#old-version" class="headerlink" title="old version"></a>old version</h3><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libprotobuf-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> protoc</span><br><span class="line">/usr/bin/protoc </span><br><span class="line"></span><br><span class="line">protoc --version</span><br><span class="line">2.6.1</span><br></pre></td></tr></table></figure>

<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remove exist `protobuf 2.6.1`</span></span><br><span class="line">	</span><br><span class="line"><span class="built_in">sudo</span> apt-get remove libprotobuf-dev</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">### compile</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf protobuf-cpp-3.6.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.6.1 </span><br><span class="line">./configure --disable-shared CXXFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips: we compile static library with <code>--disable-shared CXXFLAGS=&quot;-fPIC&quot;</code>. 编译动态库dll&#x2F;so的时候，如果依赖static library(比如profobuf)，那么static library编译的时候需要加上<code>-fPIC</code>,否则动态库编译出错。<br>对于CMake,使用<code>cmake CMAKE_CXX_FLGAS=&quot;-fPIC&quot; ..</code></p>
</blockquote>
<p>otherwise, error occurs </p>
<pre><code>Linking CXX shared library ../../../../bin/libcommon.so
/usr/bin/ld: /usr/local/lib/libprotobuf.a(common.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when makinga shared object; recompile with -fPIC
/usr/local/lib/libprotobuf.a: error adding symbols: Bad value
</code></pre>
<h3 id="install-1"><a href="#install-1" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make uninstall</span><br></pre></td></tr></table></figure>

<p>install path:</p>
<ul>
<li>header: <code>/usr/local/include/google/protobuf</code></li>
<li>lib: <code>/usr/local/lib</code></li>
<li>executable: <code>/usr/local/bin</code></li>
</ul>
<p>static libs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /usr/local/lib/libproto</span><br><span class="line">libprotobuf.a        libprotobuf-lite.a   libprotoc.a          </span><br><span class="line">libprotobuf.la       libprotobuf-lite.la  libprotoc.la  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>By default, <code>make install&#39; will install all the files in </code>&#x2F;usr&#x2F;local&#x2F;bin’, <code>/usr/local/lib&#39; etc.  You can specify an installation prefix other than </code>&#x2F;usr&#x2F;local’ using <code>--prefix&#39;, for instance </code>–prefix&#x3D;$HOME’.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure -h</span><br><span class="line"></span><br><span class="line">--enable-shared[=PKGS]  build shared libraries [default=<span class="built_in">yes</span>]</span><br><span class="line">--enable-static[=PKGS]  build static libraries [default=<span class="built_in">yes</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Static-Linking-vs-DLL"><a href="#Static-Linking-vs-DLL" class="headerlink" title="Static Linking vs DLL"></a>Static Linking vs DLL</h3><blockquote>
<p><code>Static linking</code> is now the default for the Protocol Buffer libraries. Due to issues with Win32’s use of a separate heap for each DLL, as well as binary compatibility issues between different versions of MSVC’s STL library, it is recommended that you use static linkage only.<br>However, it is possible to build libprotobuf and libprotoc as DLLs if you really want. To do this, do the following:</p>
</blockquote>
<ul>
<li>Add an additional flag <code>-Dprotobuf_BUILD_SHARED_LIBS=ON</code> when invoking cmake</li>
<li>Follow the same steps as described in the above section.</li>
<li>When compiling your project, make sure to <code>#define PROTOBUF_USE_DLLS</code>.</li>
</ul>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> protoc</span><br><span class="line">/usr/local/bin/protoc</span><br><span class="line"></span><br><span class="line">protoc --version</span><br><span class="line">libprotoc 3.6.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips install openmpi</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y  libiomp-dev libopenmpi-dev </span><br></pre></td></tr></table></figure>

<h3 id="multiple-protoc"><a href="#multiple-protoc" class="headerlink" title="multiple protoc"></a>multiple protoc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis protoc </span><br><span class="line">protoc: /usr/bin/protoc  <span class="comment"># 2.6.0</span></span><br><span class="line">/usr/local/bin/protoc    <span class="comment"># 3.6.1</span></span><br><span class="line">/usr/share/man/man1/protoc.1.gz</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --cpp_out=. ./point_cloud.proto </span><br><span class="line">protoc --java_out=./java/ ./proto/helloworld.proto</span><br><span class="line">protoc --go_out=./go/ ./proto/helloworld.proto</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED)</span><br><span class="line"><span class="comment">#add_definitions( -DPROTOBUF_USE_DLLS )  # KEY STEPS</span></span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PROTOBUF_INCLUDE_DIRS = $&#123;PROTOBUF_INCLUDE_DIRS&#125;&quot;</span>)   </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PROTOBUF_LIBRARIES = $&#123;PROTOBUF_LIBRARIES&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./node_perception </span><br><span class="line"></span><br><span class="line">[libprotobuf ERROR google/protobuf/descriptor_database.cc:58] File already exists <span class="keyword">in</span> database: adapter_config.proto</span><br><span class="line">[libprotobuf FATAL google/protobuf/descriptor.cc:1315] CHECK failed: generated_database_-&gt;Add(encoded_file_descriptor, size): </span><br><span class="line">terminate called after throwing an instance of <span class="string">&#x27;google::protobuf::FatalException&#x27;</span></span><br><span class="line">    what():  CHECK failed: generated_database_-&gt;Add(encoded_file_descriptor, size): </span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure>

<p>reasons</p>
<pre><code>The problem happens when you have multiple compiled copies of the same .pb.cc file sharing a single copy of libprotobuf.so. 

`common`模块编译了`adapter_config.pb.cc`,`node_perception`依赖于`common`，同时也要编译`adapter_config.pb.cc`。运行`node_perception`就会报错。
</code></pre>
<p>solutions</p>
<pre><code>同一份`adapter_config.pb.cc`只编译到`node_perception`等executable,不要编译到所依赖的`common`模块。
</code></pre>
<blockquote>
<p>common和node_perception使用static或者dynamic的protobuf，都会遇到同样的问题。</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md">protobuf on windows</a></li>
<li><a href="https://stackoverflow.com/questions/37051635/several-shared-object-using-same-proto-leading-the-the-error-file-already-exist">several-shared-object-using-same-proto</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181219: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>extern c </title>
    <url>//blog/extern-c/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="extern-c"><a href="#extern-c" class="headerlink" title="extern c"></a>extern c</h3><p>相比C语言，C++支持函数重载、类、模版等各种特性，如果C++的符号修饰仍按照C那样直接使用对应名称，虽然可读性很好，却不可避免的会出现各种错乱，于是C++符号修饰别名(mangled name)被设计出来， 用来解决上述问题，然而修饰规则取决于编译器实现，没有统一标准，比如gcc、msvc就各有一套，但好在都提供了相应接口进行解析(demangle)，这里有个网站<a href="http://demangler.com/">demangler</a>可以在线解析</p>
<blockquote>
<p>c++ function: managled names<br>c function: unmangled names<br><code>extern c</code>告诉c++编译器将<code>f_int,f_float</code>视为c函数，使用 unmangled names(修饰名称)</p>
</blockquote>
<h3 id="managled-unmangled-names"><a href="#managled-unmangled-names" class="headerlink" title="managled&#x2F;unmangled names"></a>managled&#x2F;unmangled names</h3><p>a.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ef</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Prevent g and eg from being optimized away. */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">g</span>(); <span class="built_in">eg</span>(); &#125;</span><br></pre></td></tr></table></figure>

<p>Compile with GCC 4.8 Linux ELF output:</p>
<pre><code>g++ -c a.cpp
</code></pre>
<p>Decompile the symbol table:</p>
<pre><code>readelf -s a.o
</code></pre>
<p>output </p>
<pre><code>Num:    Value          Size Type    Bind   Vis      Ndx Name
  8: 0000000000000000     6 FUNC    GLOBAL DEFAULT    1 _Z1fv
  9: 0000000000000006     6 FUNC    GLOBAL DEFAULT    1 ef
 10: 000000000000000c    16 FUNC    GLOBAL DEFAULT    1 _Z1hv
 11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z1gv
 12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND eg
</code></pre>
<blockquote>
<p>managled names: <code>_Z1fv,_Z1hv,_Z1gv</code> for <code>f,g,h</code><br>unmangled names: <code>ef,eg</code></p>
</blockquote>
<p>unmanagle them </p>
<pre><code>c++filt _Z1fv
f()

c++filt _Z1hv
h()

c++filt _Z1gv
g()
</code></pre>
<h3 id="extern-C中错误用法"><a href="#extern-C中错误用法" class="headerlink" title="extern C中错误用法"></a>extern C中错误用法</h3><p>It becomes obvious that any C++ feature that requires name mangling will not work inside extern C:</p>
<p>error.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="comment">// Overloading.</span></span><br><span class="line">    <span class="comment">// error: declaration of C function ‘void f(int)’ conflicts with</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Templates.</span></span><br><span class="line">    <span class="comment">// error: template with C linkage</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">C</span>&gt; <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(C i)</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compile and generate errors</p>
<pre><code>g++ -c error.cpp 
error.cpp:5:17: error: conflicting declaration of C function ‘void f(int)’
     void f(int i);
                 ^
error.cpp:4:10: note: previous declaration ‘void f()’
     void f();
          ^
error.cpp:9:5: error: template with C linkage
     template &lt;class C&gt; void f(C i) &#123; &#125;
     ^
</code></pre>
<p>So you will need <code>extern &quot;C&quot;</code> both when calling:</p>
<ul>
<li>C from C++: tell <code>g++</code> to expect unmangled symbols produced by <code>gcc</code></li>
<li>C++ from C: tell <code>gcc</code> to use unmangled symbols produced by <code>g++</code></li>
</ul>
<h3 id="cpp中使用c方法"><a href="#cpp中使用c方法" class="headerlink" title="cpp中使用c方法"></a>cpp中使用c方法</h3><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">f</span>() == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> C_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This ifdef allows the header to be used from both C and C++. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>c.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">void</span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h4><p>compile main.cpp</p>
<pre><code>g++ -c -o main.o -std=c++98 main.cpp

readelf -s main.o
10: 0000000000000000    46 FUNC    GLOBAL DEFAULT    1 main
11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f
12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND __assert_fail
</code></pre>
<blockquote>
<p>使用c++编译器，extern c告诉c++编译器<code>f</code>是一个c函数，使用unmanagled name <code>f</code></p>
</blockquote>
<p>compile c.c</p>
<pre><code>gcc -c -o c.o -std=c89 c.c

readelf -s c.o 
8: 0000000000000000    11 FUNC    GLOBAL DEFAULT    1 f
</code></pre>
<blockquote>
<p>使用c编译器，对于c函数生成unmanagled name <code>f</code></p>
</blockquote>
<p>link main.o and c.o</p>
<pre><code>g++ -o main.out main.o c.o
./main.out
</code></pre>
<blockquote>
<p>OK.</p>
</blockquote>
<h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>Without <code>extern &quot;C&quot;</code> the link fails with:</p>
<pre><code>main.cpp:6: undefined reference to `f()&#39;
</code></pre>
<p>compile main.cpp</p>
<pre><code>g++ -c -o main.o -std=c++98 main.cpp

readelf -s main.o
10: 0000000000000000    46 FUNC    GLOBAL DEFAULT    1 main
11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z1fv
12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND __assert_fail
</code></pre>
<blockquote>
<p>因为没有extern c，所以g++编译器将f看做是c++函数，使用managled name <code>_Z1fv</code></p>
</blockquote>
<p>compile c.c</p>
<pre><code>gcc -c -o c.o -std=c89 c.c

readelf -s c.o 
8: 0000000000000000    11 FUNC    GLOBAL DEFAULT    1 f
</code></pre>
<blockquote>
<p>使用c编译器，对于c函数生成unmanagled name <code>f</code></p>
</blockquote>
<p>link main.o and c.o</p>
<pre><code>g++ -o main.out main.o c.o

main.o: In function `main&#39;:
main.cpp:(.text+0x5): undefined reference to `f()&#39;
collect2: error: ld returned 1 exit status
</code></pre>
<blockquote>
<p>link失败，因为c++编译器需要managled name <code>_Z1fv</code>，然而c编译器生成了unmanagled name <code>f</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="c中使用cpp方法"><a href="#c中使用cpp方法" class="headerlink" title="c中使用cpp方法"></a>c中使用cpp方法</h3><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><p>main.c </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cpp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    assert(f_int(<span class="number">1</span>) == <span class="number">2</span>);</span><br><span class="line">    assert(f_float(<span class="number">1.0</span>) == <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cpp.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CPP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CPP_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="comment">// C cannot see these overloaded prototypes, or else it would get confused.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">float</span> i)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_int</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_float</span><span class="params">(<span class="type">float</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>cpp.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cpp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">float</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_int</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_float</span><span class="params">(<span class="type">float</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="OK-1"><a href="#OK-1" class="headerlink" title="OK"></a>OK</h4><p>compile main.c</p>
<pre><code>gcc -c -o main.o -std=c89 -Wextra main.c

readelf -s main.o
10: 0000000000000000    94 FUNC    GLOBAL DEFAULT    1 main
11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_int
12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND __assert_fail
13: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_float
</code></pre>
<blockquote>
<p>使用c编译器，将<code>f_int,f_float</code>视作c函数，使用unmanagled name <code>f_int,f_float</code></p>
</blockquote>
<p>compile cpp.cpp</p>
<pre><code>g++ -c -o cpp.o -std=c++98 cpp.cpp

readelf -s cpp.o
 9: 0000000000000000    15 FUNC    GLOBAL DEFAULT    1 _Z1fi
10: 000000000000000f    32 FUNC    GLOBAL DEFAULT    1 _Z1ff
11: 000000000000002f    23 FUNC    GLOBAL DEFAULT    1 f_int
12: 0000000000000046    31 FUNC    GLOBAL DEFAULT    1 f_float
</code></pre>
<blockquote>
<p>使用c++编译器，<code>extern c</code>告诉c++编译器将<code>f_int,f_float</code>视作c函数，使用unmanagled name <code>f_int,f_float</code></p>
</blockquote>
<p>link main.o and cpp.o</p>
<pre><code>g++ -o main.out main.o cpp.o
./main.out
</code></pre>
<blockquote>
<p>OK.</p>
</blockquote>
<h4 id="Error-1"><a href="#Error-1" class="headerlink" title="Error"></a>Error</h4><p>Without extern “C” it fails with:</p>
<pre><code>main.c:6: undefined reference to `f_int&#39;
main.c:7: undefined reference to `f_float&#39;
</code></pre>
<p>compile main.c</p>
<pre><code>gcc -c -o main.o -std=c89 -Wextra main.c

readelf -s main.o
10: 0000000000000000    94 FUNC    GLOBAL DEFAULT    1 main
11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_int
12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND __assert_fail
13: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_float
</code></pre>
<blockquote>
<p>使用c编译器，将<code>f_int,f_float</code>视作c函数，使用unmanagled name <code>f_int,f_float</code></p>
</blockquote>
<p>compile cpp.cpp</p>
<pre><code>g++ -c -o cpp.o -std=c++98 cpp.cpp

readelf -s cpp.o
 9: 0000000000000000    15 FUNC    GLOBAL DEFAULT    1 _Z1fi
10: 000000000000000f    32 FUNC    GLOBAL DEFAULT    1 _Z1ff
11: 000000000000002f    23 FUNC    GLOBAL DEFAULT    1 _Z5f_inti
12: 0000000000000046    31 FUNC    GLOBAL DEFAULT    1 _Z5f_floatf
</code></pre>
<blockquote>
<p>使用c++编译器，因为没有<code>extern c</code>，c++编译器将<code>f_int,f_float</code>视作c++函数，使用managled name <code>_Z5f_inti,_Z5f_floatf</code></p>
</blockquote>
<p>link main.o and cpp.o</p>
<pre><code>g++ -o main.out main.o cpp.o
</code></pre>
<blockquote>
<p>link失败，因为c编译器需要unmanagled name <code>f_int,f_float</code>，然而c++编译器生成了managled name <code>_Z5f_inti,_Z5f_floatf</code></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c">extern c</a></li>
<li><a href="https://github.com/cirosantilli/cpp-cheat/tree/bf5f48628d0b01ba6a3fcea6f1162b28539654c9/cpp-from-c">cpp-from-c</a></li>
<li><a href="https://github.com/cirosantilli/cpp-cheat/tree/bf5f48628d0b01ba6a3fcea6f1162b28539654c9/c-from-cpp">c-from-cpp</a></li>
<li><a href="http://www.cnblogs.com/HappyXie/archive/2011/01/07/1929369.html">#ifdef cplusplus extern C { #endif的定义</a></li>
<li><a href="https://www.cnblogs.com/nx520zj/p/5920782.html">extern “C”</a></li>
<li><a href="https://blog.csdn.net/rrrfff/article/details/7228704">managled name</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181226: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>extern</tag>
      </tags>
  </entry>
  <entry>
    <title>use pcap on ubuntu 16.04</title>
    <url>//blog/use-pcap-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>pcap: 1.7.4</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install libpcap-dev</span><br><span class="line"></span><br><span class="line">locate pcap.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libpcap.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libpcap.so.0.8</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libpcap.so.1.7.4</span><br><span class="line"></span><br><span class="line">locate pcap.h</span><br><span class="line">/usr/include/pcap.h</span><br><span class="line">/usr/include/pcap/pcap.h</span><br></pre></td></tr></table></figure>

<h3 id="pcap-config-cmake"><a href="#pcap-config-cmake" class="headerlink" title="pcap-config.cmake"></a>pcap-config.cmake</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - Try to find libpcap include dirs and libraries</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Usage of this module as follows:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     find_package(PCAP)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Variables used by this module, they can change the default behaviour and need</span></span><br><span class="line"><span class="comment"># to be set before calling find_package:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  PCAP_ROOT_DIR             Set this variable to the root installation of</span></span><br><span class="line"><span class="comment">#                            libpcap if the module has problems finding the</span></span><br><span class="line"><span class="comment">#                            proper installation path.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Variables defined by this module:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  PCAP_FOUND                System has libpcap, include and library dirs found</span></span><br><span class="line"><span class="comment">#  PCAP_INCLUDE_DIR          The libpcap include directories.</span></span><br><span class="line"><span class="comment">#  PCAP_LIBRARY              The libpcap library (possibly includes a thread</span></span><br><span class="line"><span class="comment">#                            library e.g. required by pf_ring&#x27;s libpcap)</span></span><br><span class="line"><span class="comment">#  HAVE_PF_RING              If a found version of libpcap supports PF_RING</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(PCAP_ROOT_DIR</span><br><span class="line">    NAMES <span class="keyword">include</span>/pcap.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(PCAP_INCLUDE_DIR</span><br><span class="line">    NAMES pcap.h</span><br><span class="line">    HINTS <span class="variable">$&#123;PCAP_ROOT_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(PCAP_LIBRARY</span><br><span class="line">    NAMES pcap</span><br><span class="line">    HINTS <span class="variable">$&#123;PCAP_ROOT_DIR&#125;</span>/lib</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(FindPackageHandleStandardArgs)</span><br><span class="line">find_package_handle_standard_args(PCAP DEFAULT_MSG</span><br><span class="line">    PCAP_LIBRARY</span><br><span class="line">    PCAP_INCLUDE_DIR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CheckCSourceCompiles)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES <span class="variable">$&#123;PCAP_LIBRARY&#125;</span>)</span><br><span class="line">check_c_source_compiles(<span class="string">&quot;int main() &#123; return 0; &#125;&quot;</span> PCAP_LINKS_SOLO)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if linking against libpcap also needs to link against a thread library</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> PCAP_LINKS_SOLO)</span><br><span class="line">    <span class="keyword">find_package</span>(Threads)</span><br><span class="line">    <span class="keyword">if</span> (THREADS_FOUND)</span><br><span class="line">        <span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES <span class="variable">$&#123;PCAP_LIBRARY&#125;</span> <span class="variable">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span>)</span><br><span class="line">        check_c_source_compiles(<span class="string">&quot;int main() &#123; return 0; &#125;&quot;</span> PCAP_NEEDS_THREADS)</span><br><span class="line">        <span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line">    <span class="keyword">if</span> (THREADS_FOUND <span class="keyword">AND</span> PCAP_NEEDS_THREADS)</span><br><span class="line">        <span class="keyword">set</span>(_tmp <span class="variable">$&#123;PCAP_LIBRARY&#125;</span> <span class="variable">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span>)</span><br><span class="line">        <span class="keyword">list</span>(REMOVE_DUPLICATES _tmp)</span><br><span class="line">        <span class="keyword">set</span>(PCAP_LIBRARY <span class="variable">$&#123;_tmp&#125;</span></span><br><span class="line">            CACHE <span class="keyword">STRING</span> <span class="string">&quot;Libraries needed to link against libpcap&quot;</span> FORCE)</span><br><span class="line">    <span class="keyword">else</span> ()</span><br><span class="line">        <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Couldn&#x27;t determine how to link against libpcap&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CheckFunctionExists)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES <span class="variable">$&#123;PCAP_LIBRARY&#125;</span>)</span><br><span class="line">check_function_exists(pcap_get_pfring_id HAVE_PF_RING)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_REQUIRED_LIBRARIES)</span><br><span class="line"></span><br><span class="line"><span class="keyword">mark_as_advanced</span>(</span><br><span class="line">    PCAP_ROOT_DIR</span><br><span class="line">    PCAP_INCLUDE_DIR</span><br><span class="line">    PCAP_LIBRARY</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(PCAP REQUIRED) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PCAP_INCLUDE_DIR = $&#123;PCAP_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; PCAP_LIBRARY = $&#123;PCAP_LIBRARY&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[Main] PCAP_INCLUDE_DIR = /usr/include</span></span><br><span class="line"><span class="comment">#[Main] PCAP_LIBRARY = /usr/lib/x86_64-linux-gnu/libpcap.so</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/bro/cmake/blob/master/FindPCAP.cmake">FindPCAP.cmake</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20181229: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>pcap</tag>
      </tags>
  </entry>
  <entry>
    <title>opendrive and baidu apollo guide</title>
    <url>//blog/baidu-apollo-guide/</url>
    <content><![CDATA[<h2 id="opendrive"><a href="#opendrive" class="headerlink" title="opendrive"></a>opendrive</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>features</p>
<ul>
<li>xml</li>
<li>.xodr</li>
</ul>
<p>version </p>
<ul>
<li>v0.7 2005</li>
<li>v1.1 2007-04-11</li>
<li>v1.2 2008-01-06</li>
<li>v1.3 2010-08-07</li>
<li>v1.4 2015-11-04</li>
</ul>
<h3 id="viewer"><a href="#viewer" class="headerlink" title="viewer"></a>viewer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.opendrive.org/tools/odrViewer64.zip</span><br><span class="line">wget http://www.opendrive.org/tools/CulDeSac.xodr</span><br></pre></td></tr></table></figure>

<h3 id="apollo-opendrive"><a href="#apollo-opendrive" class="headerlink" title="apollo opendrive"></a>apollo opendrive</h3><p>The <code>Apollo OpenDrive Format</code> has modified and extended the standard <code>OpenDrive specification</code>, so if necessary, you can email us，or you can leave your email address，we will send the the Apollo OpenDrive specification to you.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Baidu-Apollo"><a href="#Baidu-Apollo" class="headerlink" title="Baidu Apollo"></a>Baidu Apollo</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><ul>
<li>去中心化</li>
</ul>
<p>ROS 在安全性上的一个不足是 ROS 需要有一个节点作为主服务器，用于建立各节点之间的通信连接。这一机制使得ROS节点的容错性增强，各模块的隔离程度增高，但也带来了单点失效（single-point failure）的风险。由于 ROS 本身缺乏针对这种状况的异常恢复机制，当服务器宕机时，整个系统会崩溃。这种情况如果发生在自动驾驶行驶过程中，无疑会造成车毁人忙的后果。针对于此，Apollo 采用了FAST RTPS (real-time Publish&#x2F;Subscribe）来实现去中心化。</p>
<ul>
<li>共享内存</li>
</ul>
<p>ROS节点之间的通信是通过 socket 完成的，在进行数据广播的时候，底层使用的是多个点对点的传送。这种方式速度比较缓慢，且使用了较多的资源。Apollo 使用共享内存的方式对其进行改进，加快了通信速率，减少了CPU损耗。</p>
<ul>
<li>支持Protobuf</li>
</ul>
<p>Apollo 将 google 的 Protobuf 与 ROS 深度集成，用于提高数据的版本兼容性。其优势在于当模块接口升级以后，通讯的数据也可以相互兼容。另一个好处是宝贵的自动驾驶的历史数据在模块升级后也可以一直被使用。</p>
<h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ApolloAuto/apollo.git</span><br></pre></td></tr></table></figure>

<p>Apollo源码主要是c++实现的，也有少量python，主要程序在<code>apollo/modules</code>目录中</p>
<p>其中每个模块的作用如下：</p>
<ul>
<li>apollo&#x2F;modules&#x2F;calibration ： 校准模块，使用前必须对系统进行校准和标定，包括激光雷达与摄像头、毫米波雷达与摄像头等。所谓校准就是要对齐激光雷达、摄像头以及毫米波雷达获得的信息，我们知道激光雷达可以获得详细的3D信息，但是不能获得颜色信息，摄像头可以获得颜色信息，但是无法获得深度等3D信息，毫米波雷达不能获得颜色信息，但是可以获得3D信息，三者获得的信息对齐后，就可以同时获得实际环境中的3D信息和颜色信息。</li>
</ul>
<p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/csdn/273d4d4b-0514-49e9-be27-a0c6f224f525" alt="camera+lidar"></p>
<p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/csdn/3876d155-5bce-40a4-9632-d201bb34b528" alt="lidar+radar"></p>
<ul>
<li>apollo&#x2F;modules&#x2F;canbus：汽车can总线控制模块。接收控制指令，同时给控制模块control发送车身状态信息。</li>
<li>apollo&#x2F;modules&#x2F;common：公共源码模块。包括如日志，工厂模式的实现，日志系统，监控模块，数学算法等。</li>
<li>apollo&#x2F;modules&#x2F;control：控制模块。基于决策规划的输出路径及车身的状态使用不同的控制算法来输出控制命令，如转向刹车，控制等。</li>
<li>apollo&#x2F;modules&#x2F;data：数据模块。收集、存储、处理收集到的各种数据的。</li>
<li>apollo&#x2F;modules&#x2F;dreamview：可视化模块。查看规划的轨迹及实时的转向刹车油门信息</li>
<li>apollo&#x2F;modules&#x2F;drivers：驱动模块。各种传感器驱动。</li>
<li>apollo&#x2F;modules&#x2F;e2e：end to end，端到端强化学习。所谓e2e指的是由传感器的输入，直接决定车的行为，例如油门，刹车，方向等。也就是机器学习的算法直接学习人类司机的驾驶行为。这部分在代码中需要另外下载，学习的数据主要来源于传感器的原始数据，包括图像、激光雷达、雷达等。end-to-end输入以图像为主。 输出是车辆的控制决策指令，如方向盘角度、加速、刹车。 连接输入输出的是深度神经网络，即通过神经网络直接生成车辆控制指令对车辆进行横向控制和纵向控制，中间没有人工参与的逻辑程序。横向控制，主要是指通过方向盘控制车身横向移动，即方向盘角度。纵向控制，是指通过油门和刹车控制车身纵向的移动，即加速、刹车等。横向模型的输出没有采用方向盘角度，而是使用要行驶的曲率（即拐弯半径的倒数)。</li>
<li>apollo&#x2F;modules&#x2F;elo：利用高精地图的自定位模块。这部分的代码也是另外下载。前向的摄像头会采集车道数据以实现更精确的定位，输出的位置信息包括车辆的x y z坐标，还有就是在百度高精度地图中的ID。</li>
<li>apollo&#x2F;modules&#x2F;localization：定位模块。输入GPS和IMU信息输出自车定位信息</li>
<li>apollo&#x2F;modules&#x2F;map：高精地图模块。输出结构化地图信息，如车道线，十字路口等。</li>
<li>apollo&#x2F;modules&#x2F;monitor：监控模块。监控硬件状态，同时把状态发给交互界面。</li>
<li>apollo&#x2F;modules&#x2F;perception：感知模块。输入激光点云，高精地图，变换坐标，输出3D障碍物包括速度大小和方向。</li>
<li>apollo&#x2F;modules&#x2F;planning：局部决策规划模块。</li>
<li>apollo&#x2F;modules&#x2F;prediction：预测模块。输出感知的障碍物信息及自定位信息输出障碍物未来的轨迹。</li>
<li>apollo&#x2F;modules&#x2F;routing：全局规划模块。输入包括地图信息各起点终点地址，输出一个全局的导航信息。</li>
<li>apollo&#x2F;modules&#x2F;third_party_perception：第三方感知模块。</li>
<li>apollo&#x2F;modules&#x2F;tools：通用监控与可视化模块。</li>
</ul>
<blockquote>
<p>感知模块也只是使用了激光雷达，没有和camera或者雷达做融合，也没有单独使用到camera和雷达。</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h4 id="AdapterManager"><a href="#AdapterManager" class="headerlink" title="AdapterManager"></a>AdapterManager</h4><ul>
<li><a href="https://blog.csdn.net/davidhopper/article/details/79183557">AdapterManager解析</a></li>
</ul>
<h4 id="perception"><a href="#perception" class="headerlink" title="perception"></a>perception</h4><ul>
<li><a href="https://blog.csdn.net/qq_33801763/article/details/79092240">百度Apollo(二)：障碍物感知模块</a></li>
<li><a href="https://github.com/ApolloAuto/apollo/blob/master/docs/specs/3d_obstacle_perception_cn.md">3d_obstacle_perception</a></li>
</ul>
<h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><p><img src="https://img-blog.csdn.net/20180416100106333?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rpbm5lckhvd2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="workflow"></p>
<p>在实时系统中一个任务的调度方式通常可大致分为两类：时间驱动(timer-triggered) 和 事件驱动(event-triggered)。</p>
<h3 id="coordinate"><a href="#coordinate" class="headerlink" title="coordinate"></a>coordinate</h3><ul>
<li><a href="https://github.com/ApolloAuto/apollo/blob/master/docs/specs/coordination_cn.md">coordination_cn</a></li>
</ul>
<h3 id="lidar-calibration"><a href="#lidar-calibration" class="headerlink" title="lidar calibration"></a>lidar calibration</h3><ul>
<li><a href="https://github.com/ApolloAuto/apollo/blob/master/docs/specs/lidar_calibration_cn.pdf">lidar_calibration_cn</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.opendrive.org/download.html">opendrive</a></li>
<li><a href="https://en.wikipedia.org/wiki/OpenDRIVE_(specification)">OpenDRIVE_(specification)</a></li>
<li><a href="https://github.com/ApolloAuto/apollo/issues/603">Apollo HDMap</a></li>
<li><a href="https://github.com/ApolloAuto/apollo">baidu apollo</a></li>
<li><strong><a href="https://apolloauto.github.io/doxygen/apollo/namespaces.html">apollo doxygen</a></strong></li>
<li><a href="https://blog.csdn.net/DinnerHowe/article/details/79936038">apollo简介</a></li>
<li><a href="https://blog.csdn.net/dinnerhowe/article/details/79957589">apollo源码解析</a></li>
<li><a href="https://yq.aliyun.com/ziliao/303177">apollo 2.0源码解析</a></li>
<li><strong><a href="https://zhuanlan.zhihu.com/p/28708170">Apollo 1.0 源码分析</a></strong></li>
<li><strong><a href="https://www.zhihu.com/people/is_yuanji/posts">Apollo 2.0 框架及源码分析</a></strong></li>
<li><a href="https://blog.csdn.net/davidhopper/article/details/79183557">AdapterManager解析</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190109: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>baidu</tag>
        <tag>apollo</tag>
        <tag>opendrive</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install and use zsh command on linux</title>
    <url>//blog/zsh-for-linux/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install zsh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br><span class="line"></span><br><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>

<p>reboot system</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span> </span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure>

<h3 id="install-2-better"><a href="#install-2-better" class="headerlink" title="install 2(better)"></a>install 2(better)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line"><span class="comment">### config </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### themes </span></span><br><span class="line">```bash</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git </span><br><span class="line"><span class="built_in">cd</span> oh-my-zsh-agnoster-fcamblor</span><br><span class="line">./install </span><br></pre></td></tr></table></figure>

<h4 id="zshrc"><a href="#zshrc" class="headerlink" title=".zshrc"></a>.zshrc</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span> <span class="comment"># ys avit agnoster</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>use <code>avit</code>.</p>
</blockquote>
<h4 id="zshrc-vs-bashrc"><a href="#zshrc-vs-bashrc" class="headerlink" title=".zshrc vs .bashrc"></a>.zshrc vs .bashrc</h4><blockquote>
<p>zsh uses env profile <code>~/.zshrc</code>, not <code>~/.bashrc</code>.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://ohmyz.sh/">omyzsh</a></li>
<li><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search">zsh</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190109: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>protobuf tutorial</title>
    <url>//blog/protobuf-usage/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/d60ff6fe/">Part 1: compile protobuf-cpp on ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/876d75f2/">Part 2: compile protobuf-cpp on windows 10</a></li>
<li><strong><a href="https://kezunlin.me/post/ba8b6dea/">Part 3: protobuf usage</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><p>如果proto结构体的变量是基础变量，比如int、string等等，那么set的时候直接调用<code>set_xxx</code>即可。<br>如果变量是自定义类型，那么C++的生成代码中，就没有set_xxx函数名，取而代之的是三个函数名：</p>
<ul>
<li><code>set_allocated_xxx()</code> 传入参数必须是new出来的指针,protobuf内部会自动释放</li>
<li><code>release_xxx()</code></li>
<li><code>mutable_xxx()</code> 在<code>mutable_xxx()</code>函数内部new一个对象并返回对象地址，后续可以赋值</li>
</ul>
<h3 id="user-defined-field"><a href="#user-defined-field" class="headerlink" title="user-defined field"></a>user-defined field</h3><h4 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h4><figure class="highlight cc"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line">package kezunlin.proto;</span><br><span class="line"></span><br><span class="line">message Vector3D&#123;</span><br><span class="line">  optional <span class="type">float</span> x = <span class="number">1</span>;</span><br><span class="line">  optional <span class="type">float</span> y = <span class="number">2</span>;</span><br><span class="line">  optional <span class="type">float</span> z = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message PlayerPos&#123;</span><br><span class="line">  optional uint32 id = <span class="number">1</span>;</span><br><span class="line">  optional Vector3D pos = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="demo-pb-h"><a href="#demo-pb-h" class="headerlink" title="demo.pb.h"></a>demo.pb.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// optional uint32 id = 1;</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">has_id</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear_id</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kIdFieldNumber = <span class="number">1</span>;</span><br><span class="line">  ::google::<span class="function">protobuf::uint32 <span class="title">id</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">set_id</span><span class="params">(::google::protobuf::uint32 value)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// optional .kezunlin.proto.Vector3D pos = 2;</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">has_pos</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear_pos</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kPosFieldNumber = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">const</span> ::kezunlin::<span class="function">proto::Vector3D&amp; <span class="title">pos</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  ::kezunlin::<span class="function">proto::Vector3D* <span class="title">release_pos</span><span class="params">()</span></span>;</span><br><span class="line">  ::kezunlin::<span class="function">proto::Vector3D* <span class="title">mutable_pos</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">set_allocated_pos</span><span class="params">(::kezunlin::proto::Vector3D* pos)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基础类型字段id通过<code>id()</code>和<code>set_id()</code>操作;<br>自定义类型字段pos通过<code>pos()</code>,<code>set_allocated_pos（）</code>,<code>release_pos（）</code>,<code>mutable_pos()</code>操作；</p>
</blockquote>
<h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">PlayerPos player;</span><br><span class="line">player.<span class="built_in">set_id</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// method 1</span></span><br><span class="line">Vector3D *pos = <span class="keyword">new</span> <span class="built_in">Vector3D</span>();</span><br><span class="line">pos-&gt;x = <span class="number">1</span>;</span><br><span class="line">pos-&gt;y = <span class="number">2</span>;</span><br><span class="line">pos-&gt;z = <span class="number">3</span>;</span><br><span class="line">player.<span class="built_in">set_allocated_pos</span>(pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// method 2 </span></span><br><span class="line">Vector3D *pos = player.<span class="built_in">mutable_pos</span>();</span><br><span class="line">pos-&gt;x = <span class="number">1</span>;</span><br><span class="line">pos-&gt;y = <span class="number">2</span>;</span><br><span class="line">pos-&gt;z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>总结：对于自定义类型</p>
<ul>
<li>使用<code>set_allocated_xxx</code>，赋值的对象需要new出来，不能用局部的，这里保存的是对象的指针。 </li>
<li>使用<code>mutable_xxx</code>，赋值时候，可以使用局部变量，因为在调用的时，内部做了new操作。</li>
</ul>
<h3 id="repeated-field"><a href="#repeated-field" class="headerlink" title="repeated field"></a>repeated field</h3><h4 id="protobuf-1"><a href="#protobuf-1" class="headerlink" title="protobuf"></a>protobuf</h4><figure class="highlight cc"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line">package kezunlin.proto;</span><br><span class="line"></span><br><span class="line">message LidarPoint &#123;</span><br><span class="line">  optional <span class="type">double</span> x = <span class="number">1</span>;  <span class="comment">// in meters.</span></span><br><span class="line">  optional <span class="type">double</span> y = <span class="number">2</span>;  <span class="comment">// in meters.</span></span><br><span class="line">  optional <span class="type">double</span> z = <span class="number">3</span>;  <span class="comment">// height in meters.</span></span><br><span class="line">  optional <span class="type">double</span> intensity = <span class="number">4</span>; <span class="comment">// lidar intensity</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message PointCloud &#123;</span><br><span class="line">  optional uint64 timestamp_msec = <span class="number">1</span>;  <span class="comment">// Header</span></span><br><span class="line">  repeated LidarPoint points = <span class="number">2</span>; <span class="comment">// lidar point cloud</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="point-cloud-pb-h"><a href="#point-cloud-pb-h" class="headerlink" title="point_cloud.pb.h"></a>point_cloud.pb.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// repeated .kezunlin.proto.LidarPoint points = 2;</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">points_size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear_points</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kPointsFieldNumber = <span class="number">2</span>;</span><br><span class="line">  ::kezunlin::<span class="function">proto::LidarPoint* <span class="title">mutable_points</span><span class="params">(<span class="type">int</span> index)</span></span>;</span><br><span class="line">  ::google::<span class="function">protobuf::RepeatedPtrField&lt; ::kezunlin::proto::LidarPoint &gt;*</span></span><br><span class="line"><span class="function">      <span class="title">mutable_points</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="type">const</span> ::kezunlin::<span class="function">proto::LidarPoint&amp; <span class="title">points</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span></span>;</span><br><span class="line">  ::kezunlin::<span class="function">proto::LidarPoint* <span class="title">add_points</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="type">const</span> ::google::<span class="function">protobuf::RepeatedPtrField&lt; ::kezunlin::proto::LidarPoint &gt;&amp;</span></span><br><span class="line"><span class="function">      <span class="title">points</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="usage-1"><a href="#usage-1" class="headerlink" title="usage"></a>usage</h4><p>使用<code>add_xxx</code>来新建对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">kezunlin::proto::PointCloud pc;</span><br><span class="line"></span><br><span class="line">LidarPoint* pt = pc.<span class="built_in">add_points</span>();</span><br><span class="line">pt-&gt;<span class="built_in">set_x</span>(<span class="number">1</span>);</span><br><span class="line">pt-&gt;<span class="built_in">set_y</span>(<span class="number">2</span>);</span><br><span class="line">pt-&gt;<span class="built_in">set_z</span>(<span class="number">3</span>);</span><br><span class="line">pt-&gt;<span class="built_in">set_intensity</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/wujunokay/article/details/51287312">protobuf 中的嵌套消息的使用 主要对set_allocated_和mutable_的使用</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190117: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>how to cross compile opencv on nvidia xaiver arm platform</title>
    <url>//blog/arm-cross-compiling/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>systems:</p>
<ul>
<li>ubuntu 16.04</li>
<li>gnu gcc&#x2F;g++ 5.4.0</li>
<li>cmake</li>
<li>cmake-gui </li>
<li>opencv 3.1.0</li>
</ul>
<p>arm toolchain for cross-compiling</p>
<ul>
<li>arm-linux-gnueabi-gcc 5.4.0</li>
<li>arm-linux-gnueabi-g++ 5.4.0</li>
</ul>
<p>check</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> arm-linux-gnueabi-gcc</span><br><span class="line">/usr/bin/arm-linux-gnueabi-gcc</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> arm-linux-gnueabi-g++</span><br><span class="line">/usr/bin/arm-linux-gnueabi-g++</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> gcc</span><br><span class="line">/usr/bin/gcc</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> g++</span><br><span class="line">/usr/bin/g++</span><br></pre></td></tr></table></figure>

<h3 id="compiling"><a href="#compiling" class="headerlink" title="compiling"></a>compiling</h3><p>Difference between Native and Cross compiler</p>
<ul>
<li>A native compiler is one that compiles programs for the same architecture or operating system that it is running on. For instance, a compiler running on an x86 processor and creating x86 binaries.</li>
<li>A cross-compiler is one that compiles binaries for architectures other than its own, such as compiling ARM binaries on a Intel’s x86 processor.A “cross compiler” executes in one environment and generates code for another. A “native compiler” generates code for its own execution environment.</li>
</ul>
<p>2 types:</p>
<ul>
<li>native compiling: compile on x86 for x86 binaries, run on x86</li>
<li>cross compiliing: compile on x86 for arm binaries, run on arm</li>
</ul>
<h3 id="install-gnu-tools"><a href="#install-gnu-tools" class="headerlink" title="install gnu tools"></a>install gnu tools</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gcc g++ </span><br></pre></td></tr></table></figure>

<h3 id="install-arm-toolchain"><a href="#install-arm-toolchain" class="headerlink" title="install arm toolchain"></a>install arm toolchain</h3><h4 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h4><p>Toolchains have a loose name convention like  <code>[arch] – [vendor] – [os] – [abi]</code></p>
<ul>
<li><code>arch</code> is for architecture: arm, mips, x86, i686…</li>
<li><code>vendor</code> is tool chain supplier: apple,</li>
<li><code>os</code> is for operating system: linux, none (bare metal)</li>
<li><code>abi</code> is for application binary interface convention: eabi, gnueabi, gnueabihf</li>
</ul>
<p>install toolchains</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi</span><br></pre></td></tr></table></figure>

<p>install 32-bit libraries</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install lib32ncurses5 lib32z1</span><br></pre></td></tr></table></figure>

<p>compile like gnu gcc&#x2F;g++</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabi-gcc -o hello hello.c</span><br><span class="line">arm-linux-gnueabi-g++ -o hello hello.c</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hello only run on arm</p>
</blockquote>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><ul>
<li>arm-linux-gnueabi-4.5.1.tar.bz2</li>
</ul>
<h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-3.1.0</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20190118095159058-1876545079.png" alt="opencv cross compiling"></p>
<p>config<br>page 1</p>
<ul>
<li>Unix Makefiles </li>
<li>Specify options for cross-compiling</li>
</ul>
<p>page 2 </p>
<ul>
<li>operating system: <code>arm-linux</code></li>
<li>c compiler: <code>/usr/bin/arm-linux-gnueabi-gcc</code></li>
<li>c++ compiler:<code>/usr/bin/arm-linux-gnueabi-g++</code></li>
<li>Target ROot: <code>/usr/bin</code></li>
</ul>
<p>common cmake options:</p>
<pre><code>CMAKE_INSTALL_PREFIX /usr/local/arm/opencv-arm
</code></pre>
<p>Generate and Configure. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<h3 id="view-file"><a href="#view-file" class="headerlink" title="view file"></a>view file</h3><p>x86-64</p>
<pre><code>file /usr/local/lib/libgtest.so     
/usr/local/lib/libgtest.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=3d9e1f42d0584435a3e6aadb11eabfe620a8d52a, not stripped
</code></pre>
<p>arm </p>
<pre><code>file libopencv_core.so 
libopencv_core.so: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=ce2523820bc6a80972c49e465436d8220abf632c, not stripped
</code></pre>
<h3 id="install-to-arm"><a href="#install-to-arm" class="headerlink" title="install to arm"></a>install to arm</h3><p>copy libs and executables to arm</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm">gnu arm</a></li>
<li><a href="https://blog.csdn.net/qq_30155503/article/details/79983630">ubuntu 交叉编译opencv并移植到arm</a></li>
<li><a href="https://stackoverflow.com/questions/14564978/compiling-a-linux-program-for-arm-architecture-running-on-a-host-os">compiling-a-linux-program-for-arm-architecture-running-on-a-host-os</a></li>
<li><a href="http://www.firmcodes.com/how-to-cross-compile-for-arm/">how-to-cross-compile-for-arm</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190119: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>how to configure deep learning environment on nvidia xaiver arm platform</title>
    <url>//blog/xaiver-guide/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>device: JETSON AGX XAVIER</li>
<li>ubuntu 18.04 aarch64</li>
<li>cmake: 3.10.2—&gt;3.13.3(手动升级)</li>
<li>cmake-gui: 3.10.2</li>
<li>nvidia driver: </li>
<li>GPU arch(s): sm_72 </li>
<li>cuda 10.0</li>
<li>cudnn 7.3.1</li>
<li>glog 0.35    (0.35)</li>
<li>gflags 2.2.1 (2.2.1)</li>
<li>gtest 1.8    (1.8)</li>
<li>boost 1.66 (1.65.1)</li>
<li>protobuf(编译为static库)  (3.6.1)</li>
<li>opencv 3.4.0</li>
</ul>
<blockquote>
<p>升级默认的<code>cmake 3.10.2</code>到最新版<code>3.13.3</code>解决<code>CUDA_cublas_device_LIBRARY</code>问题。<br><code>protobuf 3.0.0</code>会导致<code>trainpilot</code>编译出错，所以需要源码编译安装<code>protobuf 3.6.1</code>。</p>
</blockquote>
<h3 id="jetson-products"><a href="#jetson-products" class="headerlink" title="jetson products"></a>jetson products</h3><ul>
<li>Jetson TX1   (fp32,fp16)</li>
<li>Jetson TX2    (fp32,fp16)</li>
<li>Jetson AGX Xavier (fp32,fp16,int8,dla)</li>
<li>Jetson Nano (Jetbot)</li>
</ul>
<blockquote>
<p>see <a href="https://developer.nvidia.com/cuda-gpus">cuda-gpus</a></p>
</blockquote>
<h3 id="xaiver-device"><a href="#xaiver-device" class="headerlink" title="xaiver device"></a>xaiver device</h3><p>see <a href="https://blog.csdn.net/haoqimao_hard/article/details/83447597">xaiver</a><br>开机： 按下power键（3个按键依次为power,force recovery和reset建），板子后面的一个指示灯亮，发白光。系统启动。</p>
<blockquote>
<p>xaiver磁盘只有28G,在编译的过程中可以增加移动硬盘，在移动硬盘上编译opencv,caffe,sdklite,trainpilot等代码,安装到xaiver系统。</p>
</blockquote>
<h3 id="check-system"><a href="#check-system" class="headerlink" title="check system"></a>check system</h3><ul>
<li><p>for desktop ubuntu</p>
<pre><code>uname -a 
Linux ke 4.13.0-36-generic #40~16.04.1-Ubuntu SMP Fri Feb 16 23:25:58 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

uname -p
x86_64
</code></pre>
</li>
<li><p>for xaiver</p>
<pre><code>uname -a 
Linux l4t 4.9.108-tegra #1 SMP PREEMPT Wed Oct 31 15:17:21 PDT 2018 aarch64 aarch64 aarch64 GNU/Linux

uname -p
aarch64
</code></pre>
</li>
</ul>
<blockquote>
<p>AArch64是ARMv8 架构的一种执行状态。<br>xaiver默认安装 ubuntu 18.04 版本号为<code>bionic</code>, ubuntu 16.04的版本号为<code>xenial</code></p>
</blockquote>
<h3 id="install-packages"><a href="#install-packages" class="headerlink" title="install packages"></a>install packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install git cmake cmake-gui</span><br></pre></td></tr></table></figure>

<h4 id="cuda"><a href="#cuda" class="headerlink" title="cuda"></a>cuda</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libleveldb-dev liblmdb-dev libsnappy-dev libhdf5-serial-dev </span><br><span class="line"><span class="built_in">sudo</span> apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br></pre></td></tr></table></figure>

<h3 id="upgrade-cmake"><a href="#upgrade-cmake" class="headerlink" title="upgrade cmake"></a>upgrade cmake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y purge cmake</span><br><span class="line"></span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v3.13.3/cmake-3.13.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.13.3</span><br><span class="line">./configure</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>aarch64</code>架构默认安装到<code>/usr/local/lib</code>和<code>/usr/local/bin/cmake</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Compile-Package"><a href="#Compile-Package" class="headerlink" title="Compile Package"></a>Compile Package</h2><h3 id="gflags-glog"><a href="#gflags-glog" class="headerlink" title="gflags &amp;&amp; glog"></a>gflags &amp;&amp; glog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#wget https://github.com/schuhschuh/gflags/archive/v2.2.1.tar.gz</span></span><br><span class="line"><span class="comment">#wget https://github.com/google/glog/archive/v0.3.5.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgflags-dev libgoogle-glog-dev </span><br></pre></td></tr></table></figure>

<blockquote>
<p>gflags: 2.2.1; glog: 0.3.5<br><code>aarch64</code>架构默认安装到<code>/usr/include</code>和<code>/usr/lib/aarch64-linux-gnu/libgflags.so</code><br>对应<code>x86_64</code>架构是默认安装到<code>/usr/include</code>和<code>/usr/lib/x86_64-linux-gnu/libgflags.so</code></p>
</blockquote>
<h3 id="gtest"><a href="#gtest" class="headerlink" title="gtest"></a>gtest</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgtest-dev</span><br><span class="line"><span class="built_in">cd</span> /usr/src/gtest <span class="comment"># only source files</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake -DBUILD_SHARED_LIBS=ON ..</span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>gtest只是下载了源码1.8.0，需要compile,默认是static<br><code>aarch64</code>架构默认安装到<code>/usr/local/include/gtest</code>和<code>/usr/local/lib/libgtest.so</code>,<code>/usr/local/lib/libgtest_main.so</code></p>
</blockquote>
<h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends libboost-all-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.65.1<br><code>aarch64</code>架构默认安装到<code>/usr/include</code>和<code>/usr/lib/aarch64-linux-gnu/libboost_date_time.so</code>,<code>/usr/lib/aarch64-linux-gnu/libboost_filesystem.so</code></p>
</blockquote>
<h3 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libprotobuf-dev protobuf-compiler </span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.0.0<br><code>aarch64</code>架构默认安装到<code>/usr/include</code>和<code>/usr/lib/aarch64-linux-gnu/libprotobuf.so</code>,<code>/usr/lib/aarch64-linux-gnu/libprotobuf-lite.so</code><br><code>protoc</code>默认安装到<code>/usr/bin/protoc</code></p>
</blockquote>
<p>notice</p>
<blockquote>
<p><code>protobuf 3.0.0</code>会导致<code>trainpilot</code>编译出错，所以需要源码编译安装<code>protobuf 3.6.1</code>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf protobuf-cpp-3.6.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.6.1 </span><br><span class="line">./configure --disable-shared CXXFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">./configure --disable-static CXXFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 </span><br><span class="line"></span><br><span class="line">/usr/local/bin/protoc --version</span><br><span class="line">3.6.1</span><br></pre></td></tr></table></figure>

<h3 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/opencv/opencv/archive/3.4.0.zip</span><br></pre></td></tr></table></figure>
<h4 id="ssl-error"><a href="#ssl-error" class="headerlink" title="ssl error"></a>ssl error</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">Cloning into <span class="string">&#x27;opencv&#x27;</span>...</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/opencv/opencv.git/&#x27;</span>: server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</span><br></pre></td></tr></table></figure>
<p>solution </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="cmake-gui-display-error"><a href="#cmake-gui-display-error" class="headerlink" title="cmake-gui display error"></a>cmake-gui display error</h4> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake-gui ..</span><br><span class="line">qt.qpa.screen: QXcbConnection: Could not connect to display </span><br><span class="line">Could not connect to any X display.</span><br></pre></td></tr></table></figure>
<p>solution: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=<span class="string">&#x27;:0.0&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h4><blockquote>
<p>see <a href="https://www.cnblogs.com/jiu0821/p/6768473.html">here</a></p>
</blockquote>
<pre><code>make: warning: Clock skew detected. Your build may be incomplete
</code></pre>
<p>fix </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">date</span> -s 1/18/2019</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">date</span> -s 1/18/2019</span><br></pre></td></tr></table></figure>

<blockquote>
<p>系统时间有问题。</p>
</blockquote>
<h3 id="caffe"><a href="#caffe" class="headerlink" title="caffe"></a>caffe</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; cmake ..</span><br></pre></td></tr></table></figure>

<h4 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h4><pre><code>CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
CUDA_cublas_device_LIBRARY (ADVANCED)
    linked by target &quot;caffe&quot; in directory /home/nvidia/workspace/caffe/src/caffe
</code></pre>
<blockquote>
<p><code>CUDA_cublas_device_LIBRARY</code> error</p>
</blockquote>
<h4 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h4><p>see <a href="https://github.com/clab/dynet/issues/1457">here</a></p>
<blockquote>
<p>I also got the problem when I compiled caffe with the latest CUDA 10.0, and after upgrading CMake from 3.12.1 to 3.12.2 it’s done @harumo11</p>
</blockquote>
<blockquote>
<p>Confirmed: I had the same problem (Ubuntu 18.04, CUDA 10.0) and installing CMake 3.12.2 (instead of the distro’s 3.10.2) fixed it.</p>
</blockquote>
<blockquote>
<p>升级默认的<code>cmake 3.10.2</code>到最新版<code>3.13.3</code>解决<code>CUDA_cublas_device_LIBRARY</code>问题。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br><span class="line">3.13.3</span><br><span class="line"></span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ ..</span><br></pre></td></tr></table></figure>

<h2 id="nvpmodel"><a href="#nvpmodel" class="headerlink" title="nvpmodel"></a>nvpmodel</h2><h3 id="TX2-nvpmodel"><a href="#TX2-nvpmodel" class="headerlink" title="TX2 nvpmodel"></a>TX2 nvpmodel</h3><p><a href="https://cloud.tencent.com/developer/article/1081166">Jetson TX2 nvpmodel</a></p>
<p>Jetson Tegra系统的应用涵盖越来越广，相应用户对性能和功耗的要求也呈现多样化。为此NVIDIA提供一种新的命令行工具，可以方便地让用户配置CPU状态，以最大限度地提高不同场景下的性能和能耗。</p>
<p>Jetson TX2由一个GPU和一个CPU集群组成。 CPU集群由双核丹佛2处理器和四核ARM Cortex-A57组成，通过高性能互连架构连接。 拥有6个CPU核心和一个GPU，您可以不必自行运行所有性能&#x2F;功耗来测试最佳的运行状态，因为NVIDIA的新的命令工具Nvpmodel，提供了5种模式。在Jetson TX2上。 下表列出了CPU内核的模式以及正在使用的CPU和GPU的最大频率。 </p>
<p><img src="https://kezunlin.me/images/posts/635233-20181211175146173-1373012531.png" alt="6 cpu mode"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nvpmodel</span></span><br><span class="line"><span class="comment"># /etc/nvpmodel.conf</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -q –-verbose <span class="comment"># 查看当前的模式</span></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -p –-verbose <span class="comment"># 打印支持的所有模式及其配置</span></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -m 0 <span class="comment"># 启动最高性能，此时所有CPU均已启动，但对应的主频还不是最高的</span></span><br><span class="line"><span class="built_in">sudo</span> ~/jetson_clocks.sh <span class="comment"># 开启最大频率</span></span><br></pre></td></tr></table></figure>

<h3 id="jetson-clocks"><a href="#jetson-clocks" class="headerlink" title="jetson_clocks"></a>jetson_clocks</h3><p>see <a href="https://blog.csdn.net/xingdou520/article/details/84402638">here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jetson_clocks.sh --<span class="built_in">help</span>  </span><br><span class="line"><span class="built_in">sudo</span> ~/jetson_clocks.sh --show <span class="comment"># 查看当前System配置</span></span><br><span class="line"><span class="built_in">sudo</span> ~/jetson_clocks.sh <span class="comment"># 开启最大频率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Checking GPU/DLA utilization/stats </span></span><br><span class="line"><span class="built_in">sudo</span> ~/tegrastats</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/21181231/server-certificate-verification-failed-cafile-etc-ssl-certs-ca-certificates-c">server-certificate-verification-failed</a></li>
<li><a href="https://developer.nvidia.com/cuda-gpus">cuda-gpus</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190118: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>xaiver</tag>
      </tags>
  </entry>
  <entry>
    <title>how to load python numpy table with C++</title>
    <url>//blog/numpy-table-save-and-load-with-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">table = np.float32(np.zeros((<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">array_0 = np.array([-<span class="number">1.5</span>,-<span class="number">1.5</span>,-<span class="number">1.5</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>])</span><br><span class="line">table[:,:,<span class="number">0</span>] = np.array([array_0,array_0,array_0,array_0])</span><br><span class="line"></span><br><span class="line">array_1 = np.array([<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>])</span><br><span class="line">table[:,:,<span class="number">1</span>] = np.array([array_1,array_1,array_1,array_1])</span><br><span class="line"></span><br><span class="line">table</span><br></pre></td></tr></table></figure>




<pre><code>array([[[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]]], dtype=float32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># imwrite/imread can only handle 8/16/24/32bit integral data, not floats</span></span><br><span class="line"><span class="comment"># opencv image: hwc, bgr, value range =  x: [-5,5], y= [10,45], z = 0; 255  float</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_table</span>(<span class="params">table, row, col, filename</span>):</span><br><span class="line"></span><br><span class="line">    table_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">                x = table[i][j][<span class="number">0</span>] </span><br><span class="line">                y = table[i][j][<span class="number">1</span>] </span><br><span class="line">                table_list.append(x)</span><br><span class="line">                table_list.append(y)</span><br><span class="line">    <span class="comment">#print(&quot;table_list = &quot;,table_list)</span></span><br><span class="line"></span><br><span class="line">    output_file = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    float_array = array(<span class="string">&#x27;f&#x27;</span>, table_list) <span class="comment"># f,d</span></span><br><span class="line">    float_array.tofile(output_file)</span><br><span class="line">    output_file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_table</span>(<span class="params">filename, row, col</span>):</span><br><span class="line"></span><br><span class="line">    input_file = <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    float_array = array(<span class="string">&#x27;f&#x27;</span>)  <span class="comment"># f,d</span></span><br><span class="line">    float_array.fromstring(input_file.read())</span><br><span class="line"></span><br><span class="line">    channel = <span class="number">2</span> <span class="comment"># default 2</span></span><br><span class="line">    table = np.float32(np.zeros((row, col, <span class="number">2</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">                table[i][j][<span class="number">0</span>] = float_array[<span class="number">2</span>*(i*col+j) +<span class="number">0</span>]</span><br><span class="line">                table[i][j][<span class="number">1</span>] = float_array[<span class="number">2</span>*(i*col+j) +<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> table</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = <span class="number">4</span>  <span class="comment"># height</span></span><br><span class="line">col = <span class="number">5</span>  <span class="comment"># width</span></span><br><span class="line"><span class="comment"># table size</span></span><br><span class="line"><span class="comment"># double: （4*5*2）×8 = 320 bytes</span></span><br><span class="line"><span class="comment"># float:  （4*5*2）×4 = 160 bytes</span></span><br><span class="line">save_table(table, row, col, <span class="string">&quot;table_f.bin&quot;</span>)</span><br><span class="line">table2 = load_table(<span class="string">&quot;table_f.bin&quot;</span>, row, col)</span><br><span class="line">table2 </span><br></pre></td></tr></table></figure>




<pre><code>array([[[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]],

       [[-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002],
        [-1.5       ,  1.10000002]]], dtype=float32)
</code></pre>
<blockquote>
<p>Tips, use <code>d</code> or <code>f</code> to store number as <code>double</code> or <code>float</code></p>
</blockquote>
<p> table size</p>
<ul>
<li>double: （4<em>5</em>2）×8 &#x3D; 320 bytes</li>
<li>float:  （4<em>5</em>2）×4 &#x3D; 160 bytes</li>
</ul>
<h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string table_filepath = <span class="string">&quot;./table_f.bin&quot;</span>;</span><br><span class="line"><span class="function">std::ifstream <span class="title">ifs</span><span class="params">(table_filepath, std::ifstream::binary)</span></span>;</span><br><span class="line"><span class="type">int</span> rows = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> cols = <span class="number">5</span>; <span class="comment">// xy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>; y&lt;rows; ++y)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;cols;++x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">float</span> distance_x;</span><br><span class="line">		ifs.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;distance_x), <span class="built_in">sizeof</span>(<span class="type">float</span>)); </span><br><span class="line">		std::cout&lt;&lt; distance_x &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">		<span class="type">float</span> distance_y;</span><br><span class="line">		ifs.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;distance_y), <span class="built_in">sizeof</span>(<span class="type">float</span>)); </span><br><span class="line">		std::cout&lt;&lt; distance_y &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: read <code>double</code></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190228: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>linux bash tutorial</title>
    <url>//blog/linux-bash-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="copy-and-zip"><a href="#copy-and-zip" class="headerlink" title="copy and zip"></a>copy and zip</h3><p>copy_and_zip.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">folder_name=v1.2</span><br><span class="line">folder_zip_name=<span class="variable">$folder_name</span>.zip </span><br><span class="line">folder_path=dist/<span class="variable">$folder_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$folder_path</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$folder_path</span></span><br><span class="line"><span class="built_in">cp</span> -r model static templates <span class="variable">$folder_path</span></span><br><span class="line"><span class="built_in">cp</span> db.py util.py demo.py README.md CHANGELOG.md <span class="variable">$folder_path</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Copying to <span class="variable">$folder_path</span> OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> dist </span><br><span class="line">zip -r <span class="variable">$folder_zip_name</span> <span class="variable">$folder_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Zip to <span class="variable">$folder_zip_name</span> OK&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="copy-libs-to-dist"><a href="#copy-libs-to-dist" class="headerlink" title="copy libs to dist"></a>copy libs to dist</h3><p>copylib.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># usage:  ./copylib.sh ./example_opencv</span></span><br><span class="line"></span><br><span class="line">bin=<span class="variable">$1</span>         </span><br><span class="line">dest=<span class="string">&quot;./lib&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$dest</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;makedir <span class="variable">$dest</span>&quot;</span></span><br><span class="line">    <span class="built_in">mkdir</span> <span class="variable">$dest</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line">libs=$(ldd <span class="variable">$bin</span> | awk  <span class="string">&#x27;&#123;if (match($3,&quot;/&quot;))&#123; printf(&quot;%s &quot;),$3 &#125; &#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#echo $libs</span></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$libs</span> <span class="variable">$dest</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Done&quot;</span></span><br></pre></td></tr></table></figure>

<p>run scripts to copy libs to <code>lib</code> folder.</p>
<pre><code>./copylib.sh ./example_opencv

tree lib
lib
├── libc.so.6
├── libdl.so.2
├── libgcc_s.so.1
├── libjasper.so.1
├── libjbig.so.0
├── libjpeg.so.8
├── liblzma.so.5
├── libm.so.6
├── libopencv_core.so.3.1
├── libopencv_imgcodecs.so.3.1
├── libopencv_imgproc.so.3.1
├── libpng12.so.0
├── libpthread.so.0
├── librt.so.1
├── libstdc++.so.6
├── libtiff.so.5
└── libz.so.1

0 directories, 17 files
</code></pre>
<blockquote>
<p><code>linuxdeployqt</code> Makes Linux applications self-contained by copying in the libraries and plugins that the application uses, and optionally generates an AppImage. Can be used for Qt and other applications.</p>
</blockquote>
<h2 id="array-demo"><a href="#array-demo" class="headerlink" title="array demo"></a>array demo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">content=$(sed -n <span class="string">&#x27;4p&#x27;</span> 1.csv)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$content</span></span><br><span class="line"></span><br><span class="line">row=`<span class="built_in">wc</span> -l &lt; 2.csv`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$row</span></span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span>  `<span class="built_in">cat</span> 2.csv`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$id</span> == <span class="variable">$content</span> ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$id</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&#x27;not equal&#x27;</span></span><br><span class="line">		((i=i+<span class="number">1</span>))</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------------------------------&#x27;</span></span><br><span class="line">arr=(Hello World)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"></span><br><span class="line">arr[0]=<span class="string">&quot;xxx&quot;</span></span><br><span class="line">arr[1]=<span class="string">&quot;yyy&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------------------------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array2</span></span><br><span class="line">array=(one two three four [5]=five)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Array size: <span class="variable">$&#123;#array[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Array items:&quot;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$&#123;array[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %s\n&quot;</span> <span class="variable">$item</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Array indexes:&quot;</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable">$&#123;!array[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %d\n&quot;</span> <span class="variable">$index</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Array items and indexes:&quot;</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable">$&#123;!array[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;%4d: %s\n&quot;</span> <span class="variable">$index</span> <span class="variable">$&#123;array[$index]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------------------------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array3</span></span><br><span class="line">array=(<span class="string">&quot;first item&quot;</span> <span class="string">&quot;second item&quot;</span> <span class="string">&quot;third&quot;</span> <span class="string">&quot;item&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Number of items in original array: <span class="variable">$&#123;#array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> ix <span class="keyword">in</span> <span class="variable">$&#123;!array[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %s\n&quot;</span> <span class="string">&quot;<span class="variable">$&#123;array[$ix]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$&#123;arr[*]&#125;&quot; returns all the items as a single word, whereas &quot;$&#123;arr[@]&#125;&quot; returns each item as a separate word.</span></span><br><span class="line"></span><br><span class="line">arr=(<span class="variable">$&#123;array[*]&#125;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;After unquoted expansion: <span class="variable">$&#123;#arr[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> ix <span class="keyword">in</span> <span class="variable">$&#123;!arr[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %s\n&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arr[$ix]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">arr=(<span class="string">&quot;<span class="variable">$&#123;array[*]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;After * quoted expansion: <span class="variable">$&#123;#arr[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> ix <span class="keyword">in</span> <span class="variable">$&#123;!arr[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %s\n&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arr[$ix]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">arr=(<span class="string">&quot;<span class="variable">$&#123;array[@]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;After @ quoted expansion: <span class="variable">$&#123;#arr[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> ix <span class="keyword">in</span> <span class="variable">$&#123;!arr[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;   %s\n&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arr[$ix]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190308: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>use python ctypes to load and use functions from C C++ DLL</title>
    <url>//blog/python-ctypes-use-c-dll/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="ctypes-intro"><a href="#ctypes-intro" class="headerlink" title="ctypes intro"></a>ctypes intro</h3><p>python only support c api. </p>
<p><img src="https://kezunlin.me/images/posts/429727-20151024205048099-526137943.png" alt="ctypes types, C type, Python type"></p>
<h3 id="ctype-usage"><a href="#ctype-usage" class="headerlink" title="ctype usage"></a>ctype usage</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (1) get and set value for c_int</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">i = c_int(<span class="number">45</span>)</span><br><span class="line">i.value</span><br></pre></td></tr></table></figure>

<pre><code>45
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i.value = <span class="number">55</span></span><br><span class="line">i.value</span><br></pre></td></tr></table></figure>

<pre><code>55
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (2) set and get value for c_char_Array_10  (c array)</span></span><br><span class="line">p = create_string_buffer(<span class="number">10</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<pre><code>&lt;ctypes.c_char_Array_10 at 0x7fe008061170&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.raw</span><br></pre></td></tr></table></figure>

<pre><code>&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.value = <span class="string">&quot;Student&quot;</span></span><br><span class="line">p.raw</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Student\x00\x00\x00&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.value = <span class="string">&quot;Big&quot;</span> <span class="comment"># set 3 chars &quot;Big&quot; and 4-th char &quot;\0&quot;</span></span><br><span class="line">p.raw</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Big\x00ent\x00\x00\x00&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (3) get and set value by pointer </span></span><br><span class="line">i = c_int(<span class="number">999</span>)     </span><br><span class="line">pi = pointer(i) <span class="comment"># pointer to c_int</span></span><br><span class="line">pi.contents</span><br></pre></td></tr></table></figure>

<pre><code>c_int(999)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pi.contents = c_int(<span class="number">1000</span>)</span><br><span class="line">pi.contents</span><br></pre></td></tr></table></figure>

<pre><code>c_int(1000)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (4) use struct</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">Structure</span>):                </span><br><span class="line">    _fields_ = [(<span class="string">&quot;x&quot;</span>, c_int), (<span class="string">&quot;y&quot;</span>, c_int)] </span><br><span class="line">pt = Point(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(pt.x, pt.y)</span><br><span class="line"></span><br><span class="line">pt2 = Point(y=<span class="number">5</span>) <span class="comment"># x default value = 0</span></span><br><span class="line"><span class="built_in">print</span>(pt2.x, pt2.y)</span><br></pre></td></tr></table></figure>

<pre><code>(2, 5)
(0, 5)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (5.1) use c array  c_int_Array_10</span></span><br><span class="line">INT_ARRAY_10 = c_int *<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(c_int)</span><br><span class="line"><span class="built_in">print</span>(INT_ARRAY_10)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;ctypes.c_int&#39;&gt;
&lt;class &#39;__main__.c_int_Array_10&#39;&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i_array = INT_ARRAY_10() <span class="comment"># by default all 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    i_array[i] = i</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> i_array:</span><br><span class="line">    <span class="built_in">print</span>(value)    </span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
3
4
5
6
7
8
9
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (5.2) use c array  c_char_Array_10</span></span><br><span class="line">CHAR_ARRAY_10 = c_char * <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(c_char)</span><br><span class="line"><span class="built_in">print</span>(CHAR_ARRAY_10)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;ctypes.c_char&#39;&gt;
&lt;class &#39;ctypes.c_char_Array_10&#39;&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_array = CHAR_ARRAY_10() <span class="comment"># by default all 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    c_array[i] = <span class="string">&quot;a&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> c_array:</span><br><span class="line">    <span class="built_in">print</span>(value) </span><br><span class="line"></span><br><span class="line"><span class="comment"># value and raw field for c_char_Array_10</span></span><br><span class="line"><span class="built_in">print</span>(c_array.value)</span><br><span class="line"><span class="built_in">print</span>(c_array.raw)</span><br><span class="line"></span><br><span class="line">c_array.value = <span class="string">&quot;Student&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c_array.value)</span><br><span class="line"><span class="built_in">print</span>(c_array.raw)</span><br></pre></td></tr></table></figure>

<pre><code>a
a
a
a
a
a
a
a
a
a
aaaaaaaaaa
aaaaaaaaaa
Student
Student\00aa
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (6) pointer</span></span><br><span class="line"><span class="comment"># byref(x [, offset])   ---&gt; get address of x                                    `&amp;num` </span></span><br><span class="line"><span class="comment"># pointer(x)            ---&gt; create a pointer which points to x                  `int* p = &amp;num;`</span></span><br><span class="line"><span class="comment"># POINTER(type)         ---&gt; return a `new type` which points to type instance    `Point*`</span></span><br><span class="line">a = Point(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">b = pointer(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.x, a.y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b.contents) <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(b.contents.x, b.contents.y)</span><br><span class="line"></span><br><span class="line">c = POINTER(Point)(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(c.contents) </span><br><span class="line"><span class="built_in">print</span>(c.contents.x, c.contents.y)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.Point object at 0x7fe00805d3b0&gt;
(2, 5)


&lt;__main__.LP_Point object at 0x7fe00805d710&gt;
&lt;__main__.Point object at 0x7fe00805d5f0&gt;
(2, 5)


&lt;__main__.LP_Point object at 0x7fe00805d5f0&gt;
&lt;__main__.Point object at 0x7fe00805d440&gt;
(2, 5)
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="c-c-code"><a href="#c-c-code" class="headerlink" title="c++&#x2F;c code"></a>c++&#x2F;c code</h3><p>api.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm_shared_export.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span>  <span class="comment">// Mat</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SHARED_EXPORT</span> Point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> H;</span><br><span class="line">	<span class="type">int</span> W;</span><br><span class="line">    <span class="type">int</span> C;</span><br><span class="line">    <span class="type">float</span> *data;</span><br><span class="line">&#125; <span class="type">image_float_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> H;</span><br><span class="line">	<span class="type">int</span> W;</span><br><span class="line">    <span class="type">int</span> C;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *data;</span><br><span class="line">&#125; <span class="type">image_char_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHARED_EXPORT</span> MyClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MyClass</span>(<span class="type">int</span> id);</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">float</span> <span class="title">addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print_point</span><span class="params">(Point* p)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> id_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pure C API (can not overload)</span></span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">float</span> <span class="title">addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">print_point</span><span class="params">(Point* p)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// warpper for c++ class</span></span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">wrapper_init_class</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">wrapper_free_class</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">int</span> <span class="title">wrapper_add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">float</span> <span class="title">wrapper_addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">wrapper_print_point</span><span class="params">(Point* p)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">process_image_float</span><span class="params">(<span class="type">image_float_t</span> im)</span></span>;</span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">process_image_char</span><span class="params">(<span class="type">image_char_t</span> im)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure>

<p>api.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// c++ class impl</span></span><br><span class="line"></span><br><span class="line">MyClass::<span class="built_in">MyClass</span>(<span class="type">int</span> id)</span><br><span class="line">	:<span class="built_in">id_</span>(id)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyClass::add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">MyClass::addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::print_point</span><span class="params">(Point* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;position x %f y %f \n&quot;</span>, p-&gt;x, p-&gt;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;myclass id = %d \n&quot;</span>, id_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// pure C API impl</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_point</span><span class="params">(Point* p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;position x %f y %f \n&quot;</span>, p-&gt;x, p-&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// warpper for c++ class</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wrapper_init_class</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		my = <span class="keyword">new</span> <span class="built_in">MyClass</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wrapper_free_class</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (my)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> my;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wrapper_add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> my-&gt;<span class="built_in">add</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">wrapper_addf</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> my-&gt;<span class="built_in">addf</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wrapper_print_point</span><span class="params">(Point* p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> my-&gt;<span class="built_in">print_point</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) bgr, hwc, 0-255    h*W*C+w*C+c     int index = h*im.W*im.C + (w*im.C + c); </span></span><br><span class="line">	<span class="comment">//(2) bgr, chw, 0-255    c*H*W+h*W+w     int index = c*im.H*im.W + (h*im.W + w);</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">float</span> <span class="title">get_image_pixel_hwc</span><span class="params">(<span class="type">const</span> <span class="type">image_float_t</span>&amp; im, <span class="type">int</span> h, <span class="type">int</span> w, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//(1) bgr, hwc, 0-255    h*W*C+w*C+c     int index = h*im.W*im.C + (w*im.C + c); </span></span><br><span class="line">		<span class="type">int</span> index = h*im.W*im.C + (w*im.C + c); </span><br><span class="line">		<span class="keyword">return</span> im.data[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">float</span> <span class="title">get_image_pixel_chw</span><span class="params">(<span class="type">const</span> <span class="type">image_float_t</span>&amp; im, <span class="type">int</span> h, <span class="type">int</span> w, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//(2) bgr, chw, 0-255    c*H*W+h*W+w     int index = c*im.H*im.W + (h*im.W + w);</span></span><br><span class="line">		<span class="type">int</span> index = c*im.H*im.W + (h*im.W + w);</span><br><span class="line">		<span class="keyword">return</span> im.data[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">cv::Mat <span class="title">image_float_to_mat</span><span class="params">(<span class="type">const</span> <span class="type">image_float_t</span>&amp; im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// bgr,hwc, 0-255</span></span><br><span class="line">		<span class="function">cv::Mat <span class="title">mat</span><span class="params">(im.H, im.W, CV_8UC3)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">0</span>; h&lt; im.H; ++h)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Vec3b *p = mat.<span class="built_in">ptr</span>&lt;cv::Vec3b&gt;(h);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>; w &lt; im.W; ++w)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>; c&lt; im.C; ++c)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">// b,g,r</span></span><br><span class="line">					(*p)[c] = (<span class="type">unsigned</span> <span class="type">char</span>)<span class="built_in">get_image_pixel_hwc</span>(im, h, w, c); </span><br><span class="line">				&#125;</span><br><span class="line">				p++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mat;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// same as image_float_to_mat, but faster</span></span><br><span class="line">	<span class="function">cv::Mat <span class="title">image_float_to_mat2</span><span class="params">(<span class="type">const</span> <span class="type">image_float_t</span>&amp; im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// bgr,hwc, 0-255</span></span><br><span class="line">		<span class="function">cv::Mat <span class="title">mat</span><span class="params">(im.H, im.W, CV_8UC3)</span></span>;</span><br><span class="line">		<span class="type">const</span> <span class="type">float</span>* p_data = im.data;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> h=<span class="number">0</span>; h&lt; im.H; ++h)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Vec3b *p = mat.<span class="built_in">ptr</span>&lt;cv::Vec3b&gt;(h);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>; w &lt; im.W; ++w)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>; c&lt; im.C; ++c)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">// b,g,r</span></span><br><span class="line">					(*p)[c] = (<span class="type">unsigned</span> <span class="type">char</span>)(*p_data++); </span><br><span class="line">				&#125;</span><br><span class="line">				p++; <span class="comment">// for width</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mat;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function">cv::Mat <span class="title">image_char_to_mat</span><span class="params">(<span class="type">const</span> <span class="type">image_char_t</span>&amp; im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// bgr,hwc, 0-255</span></span><br><span class="line">		<span class="function">cv::Mat <span class="title">mat</span><span class="params">(im.H, im.W, CV_8UC3, im.data)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> mat; <span class="comment">// data in python</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process_image_float</span><span class="params">(<span class="type">image_float_t</span> im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cv::Mat mat = <span class="built_in">image_float_to_mat2</span>(im);</span><br><span class="line"></span><br><span class="line">		cv::<span class="built_in">imwrite</span>(<span class="string">&quot;result2.jpg&quot;</span>, mat);</span><br><span class="line">		std::cout&lt;&lt;<span class="string">&quot; saved image to result.jpg&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">process_image_char</span><span class="params">(<span class="type">image_char_t</span> im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cv::Mat mat = <span class="built_in">image_char_to_mat</span>(im);</span><br><span class="line"></span><br><span class="line">		cv::<span class="built_in">imwrite</span>(<span class="string">&quot;result3.jpg&quot;</span>, mat);</span><br><span class="line">		std::cout&lt;&lt;<span class="string">&quot; saved image to result.jpg&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure>

<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line"><span class="comment"># os.name   &quot;posix&quot; for linux, &quot;nt&quot; for windows</span></span><br><span class="line">lib = CDLL(<span class="string">&quot;./libcapi.so&quot;</span>, RTLD_GLOBAL)</span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    // struct</span></span><br><span class="line"><span class="string">    struct Point&#123;</span></span><br><span class="line"><span class="string">        float x, y;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // pure C API</span></span><br><span class="line"><span class="string">    SHARED_EXPORT int add(int a, int b);</span></span><br><span class="line"><span class="string">    SHARED_EXPORT float addf(float a, float b);</span></span><br><span class="line"><span class="string">    SHARED_EXPORT void print_point(Point* p);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // warpper for c++ class</span></span><br><span class="line"><span class="string">    SHARED_EXPORT void wrapper_init_class(int id);</span></span><br><span class="line"><span class="string">    SHARED_EXPORT void wrapper_free_class();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    SHARED_EXPORT int wrapper_add(int a, int b);</span></span><br><span class="line"><span class="string">    SHARED_EXPORT float wrapper_addf(float a, float b);</span></span><br><span class="line"><span class="string">    SHARED_EXPORT void wrapper_print_point(Point* p);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># struct</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">POINT</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;x&quot;</span>, c_float),</span><br><span class="line">                (<span class="string">&quot;y&quot;</span>, c_float)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pure C API</span></span><br><span class="line">lib.add.argtypes = [c_int, c_int]</span><br><span class="line">lib.add.restype = c_int</span><br><span class="line"></span><br><span class="line">lib.addf.argtypes = [c_float, c_float]</span><br><span class="line">lib.addf.restype = c_float</span><br><span class="line"></span><br><span class="line">lib.print_point.argtypes = [POINTER(POINT)]</span><br><span class="line">lib.print_point.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># warpper for c++ class</span></span><br><span class="line">lib.wrapper_init_class.argtypes = [c_int]</span><br><span class="line">lib.wrapper_init_class.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">lib.wrapper_free_class.argtypes = <span class="literal">None</span></span><br><span class="line">lib.wrapper_free_class.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">lib.wrapper_add.argtypes = [c_int, c_int]</span><br><span class="line">lib.wrapper_add.restype = c_int</span><br><span class="line"></span><br><span class="line">lib.wrapper_addf.argtypes = [c_float, c_float]</span><br><span class="line">lib.wrapper_addf.restype = c_float</span><br><span class="line"></span><br><span class="line">lib.wrapper_print_point.argtypes = [POINTER(POINT)]</span><br><span class="line">lib.wrapper_print_point.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_capi</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_capi&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(lib.add(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment"># 8</span></span><br><span class="line">    <span class="built_in">print</span>(lib.addf(<span class="number">3.3</span>,<span class="number">5.5</span>)) <span class="comment"># 8.8</span></span><br><span class="line"></span><br><span class="line">    p = POINT(<span class="number">9.1</span>,<span class="number">9.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p)  <span class="comment"># POINT</span></span><br><span class="line">    <span class="built_in">print</span>(p.x, p.y) <span class="comment"># 9.1,9.2</span></span><br><span class="line">    lib.print_point(byref(p)) <span class="comment"># faster</span></span><br><span class="line">    lib.print_point(pointer(p))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_wrapper_capi</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_wrapper_capi&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># init class wrapper </span></span><br><span class="line">    lib.wrapper_init_class(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(lib.wrapper_add(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment"># 8</span></span><br><span class="line">    <span class="built_in">print</span>(lib.wrapper_addf(<span class="number">3.3</span>,<span class="number">5.5</span>)) <span class="comment"># 8.8</span></span><br><span class="line"></span><br><span class="line">    p = POINT(<span class="number">9.1</span>,<span class="number">9.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p)  <span class="comment"># POINT</span></span><br><span class="line">    <span class="built_in">print</span>(p.x, p.y) <span class="comment"># 9.1,9.2</span></span><br><span class="line">    lib.wrapper_print_point(byref(p)) <span class="comment"># faster</span></span><br><span class="line">    lib.wrapper_print_point(pointer(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># free class wrapper</span></span><br><span class="line">    lib.wrapper_free_class()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unsigned char* ===&gt; c_ubyte ===&gt; np.uint8</span></span><br><span class="line"><span class="comment"># float*         ===&gt; c_float ===&gt; np.float32</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IMAGE_FLOAT</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;h&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;w&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;c&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;data&quot;</span>, POINTER(c_float))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IMAGE_CHAR</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;h&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;w&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;c&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;data&quot;</span>, POINTER(c_ubyte))]</span><br><span class="line"></span><br><span class="line">lib.process_image_float.argtypes = [IMAGE_FLOAT]</span><br><span class="line">lib.process_image_float.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">lib.process_image_char.argtypes = [IMAGE_CHAR]</span><br><span class="line">lib.process_image_char.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_to_darknet_image_float</span>(<span class="params">bgr</span>):</span><br><span class="line">    <span class="comment"># BGR,hwc,[0,255] === &gt; RGB,chw,[0,1]</span></span><br><span class="line">    rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB)</span><br><span class="line">    rgb = rgb.transpose(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment"># hwc ===&gt; chw</span></span><br><span class="line">    c = rgb.shape[<span class="number">0</span>]</span><br><span class="line">    h = rgb.shape[<span class="number">1</span>]</span><br><span class="line">    w = rgb.shape[<span class="number">2</span>]</span><br><span class="line">    arr = np.ascontiguousarray(rgb.flat, dtype=np.float32) / <span class="number">255.0</span> <span class="comment"># [0-1]</span></span><br><span class="line"></span><br><span class="line">    data = arr.ctypes.data_as(POINTER(c_float))</span><br><span class="line">    im = IMAGE_FLOAT(w, h, c, data)</span><br><span class="line">    <span class="keyword">return</span> im, arr <span class="comment">#  return `arr` to avoid python freeing memory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_to_image_float</span>(<span class="params">bgr</span>):</span><br><span class="line">    <span class="comment"># BGR,hwc,[0,255]</span></span><br><span class="line">    <span class="built_in">print</span>(bgr.shape) <span class="comment"># height, width ,channel</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#bgr = bgr.transpose(2, 0, 1) # hwc ===&gt; chw</span></span><br><span class="line">    <span class="comment">#c = bgr.shape[0]</span></span><br><span class="line">    <span class="comment">#h = bgr.shape[1]</span></span><br><span class="line">    <span class="comment">#w = bgr.shape[2]</span></span><br><span class="line"></span><br><span class="line">    (h,w,c) = bgr.shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#factor = 1.0 </span></span><br><span class="line">    arr = np.ascontiguousarray(bgr.flat, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    data = arr.ctypes.data_as(POINTER(c_float))</span><br><span class="line">    im = IMAGE_FLOAT(h, w, c, data) <span class="comment"># bgr,hwc,0-255</span></span><br><span class="line">    <span class="keyword">return</span> im, arr <span class="comment">#  return `arr` to avoid python freeing memory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_to_image_char</span>(<span class="params">bgr</span>):</span><br><span class="line">    <span class="comment"># BGR,hwc,[0,255]</span></span><br><span class="line">    <span class="built_in">print</span>(bgr.shape) <span class="comment"># height, width ,channel</span></span><br><span class="line"></span><br><span class="line">    (h,w,c) = bgr.shape</span><br><span class="line">    arr = np.ascontiguousarray(bgr.flat, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    data = arr.ctypes.data_as(POINTER(c_ubyte))</span><br><span class="line">    im = IMAGE_CHAR(h, w, c, data) <span class="comment"># bgr,hwc,0-255</span></span><br><span class="line">    <span class="keyword">return</span> im, arr <span class="comment">#  return `arr` to avoid python freeing memory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_process_image_float</span>():</span><br><span class="line">    image_filepath = <span class="string">&quot;dog.jpg&quot;</span></span><br><span class="line">    bgr = cv2.imread(image_filepath)</span><br><span class="line">    im, arr = mat_to_image_float(bgr)</span><br><span class="line">    <span class="comment"># image memory allocated in Python with `arr`, `im` only point to `arr`</span></span><br><span class="line">    <span class="comment"># so there is no need to free_image(im), because python will free `arr` automatically</span></span><br><span class="line">    lib.process_image_float(im)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_process_image_char</span>():</span><br><span class="line">    image_filepath = <span class="string">&quot;dog.jpg&quot;</span></span><br><span class="line">    bgr = cv2.imread(image_filepath)</span><br><span class="line">    im, arr = mat_to_image_char(bgr) </span><br><span class="line">    <span class="comment"># image memory allocated in Python with `arr`, `im` only point to `arr`</span></span><br><span class="line">    <span class="comment"># so there is no need to free_image(im), because python will free `arr` automatically</span></span><br><span class="line">    lib.process_image_char(im)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#test_capi()</span></span><br><span class="line">    <span class="comment">#test_wrapper_capi()</span></span><br><span class="line">    test_process_image_float()</span><br><span class="line">    test_process_image_char()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="Python-OpenCV-Mat-to-CAPI"><a href="#Python-OpenCV-Mat-to-CAPI" class="headerlink" title="Python OpenCV Mat to CAPI"></a>Python OpenCV Mat to CAPI</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="api-h"><a href="#api-h" class="headerlink" title="api.h"></a>api.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> H;</span><br><span class="line">    <span class="type">int</span> W;</span><br><span class="line">    <span class="type">int</span> C;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *data;</span><br><span class="line">&#125; <span class="type">image_char_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">SHARED_EXPORT <span class="type">void</span> <span class="title">process_image_char</span><span class="params">(<span class="type">image_char_t</span> im)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure>

<h4 id="api-cpp"><a href="#api-cpp" class="headerlink" title="api.cpp"></a>api.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span>  <span class="comment">// Mat</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span> <span class="comment">// cvtColor</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span> <span class="comment">// imdecode imshow</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">process_image_char</span><span class="params">(<span class="type">image_char_t</span> im)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="function">cv::Mat <span class="title">mat</span><span class="params">(im.H, im.W, CV_8UC3, im.data)</span></span>;</span><br><span class="line"></span><br><span class="line">		cv::<span class="built_in">imwrite</span>(<span class="string">&quot;result.jpg&quot;</span>, mat);</span><br><span class="line">		std::cout&lt;&lt;<span class="string">&quot; saved image to result.jpg&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure>

<h3 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line"><span class="comment"># os.name   &quot;posix&quot; for linux, &quot;nt&quot; for windows</span></span><br><span class="line">lib = CDLL(<span class="string">&quot;./libcapi.so&quot;</span>, RTLD_GLOBAL)</span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># unsigned char* ===&gt; c_ubyte ===&gt; np.uint8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IMAGE_CHAR</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;h&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;w&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;c&quot;</span>, c_int),</span><br><span class="line">                (<span class="string">&quot;data&quot;</span>, POINTER(c_ubyte))]</span><br><span class="line"></span><br><span class="line">lib.process_image_char.argtypes = [IMAGE_CHAR]</span><br><span class="line">lib.process_image_char.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_to_image_char</span>(<span class="params">bgr</span>):</span><br><span class="line">    <span class="comment"># BGR,hwc,[0,255]</span></span><br><span class="line">    <span class="built_in">print</span>(bgr.shape) <span class="comment"># height, width ,channel</span></span><br><span class="line"></span><br><span class="line">    (h,w,c) = bgr.shape</span><br><span class="line">    arr = np.ascontiguousarray(bgr.flat, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    data = arr.ctypes.data_as(POINTER(c_ubyte))</span><br><span class="line">    im = IMAGE_CHAR(h, w, c, data) <span class="comment"># bgr,hwc,0-255</span></span><br><span class="line">    <span class="keyword">return</span> im, arr <span class="comment">#  return `arr` to avoid python freeing memory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_process_image_char</span>():</span><br><span class="line">    image_filepath = <span class="string">&quot;dog.jpg&quot;</span></span><br><span class="line">    bgr = cv2.imread(image_filepath)</span><br><span class="line">    im, arr = mat_to_image_char(bgr) </span><br><span class="line">    <span class="comment"># image memory allocated in Python with `arr`, `im` only point to `arr`</span></span><br><span class="line">    <span class="comment"># so there is no need to free_image(im), because python will free `arr` automatically</span></span><br><span class="line">    lib.process_image_char(im)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test_process_image_char()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>


<h2 id="Boost-python-extension"><a href="#Boost-python-extension" class="headerlink" title="Boost-python extension"></a>Boost-python extension</h2><ul>
<li><a href="https://github.com/spillai/numpy-opencv-converter">numpy-opencv-converter</a></li>
<li><a href="https://github.com/Algomorph/pyboostcvconverter">pyboostcvconverter</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/night-ride-depart/p/4907613.html">ctypes usage</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-pythonandc/">ctypes tutorial</a></li>
<li><a href="https://blog.csdn.net/taiyang1987912/article/details/44779719">python call c++ and executable</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190308: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>ctypes</tag>
      </tags>
  </entry>
  <entry>
    <title>install plugin for vim editor</title>
    <url>//blog/vim-plugin/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="vim-pathogen"><a href="#vim-pathogen" class="headerlink" title="vim-pathogen"></a>vim-pathogen</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.vim/autoload ~/.vim/bundle</span><br><span class="line">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure>

<p>vim ~&#x2F;.vimrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">execute pathogen#infect()</span><br><span class="line">syntax on</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure>

<blockquote>
<p>how to auto install vim plugin<br>download plugin to <code>~/.vim/bundle</code>, and auto reload by <code>vim-pathogen</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ervandew/supertab.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/plasticboy/vim-markdown.git</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### pydiction</span></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">cd</span> ~/.vim/bundle</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rkulla/pydiction.git</span><br></pre></td></tr></table></figure>

<p>vim ~&#x2F;.vimrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filetype plugin on</span><br><span class="line"><span class="built_in">let</span> g:pydiction_location = <span class="string">&#x27;~/.vim/bundle/pydiction/complete-dict&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:pydiction_menu_height = 3</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/vim-scripts/Pydiction">Pydiction</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190312: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>git tutorial</title>
    <url>//blog/git-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><p>配置<code>user.name</code> <code>user.email</code></p>
<blockquote>
<p>代码提交时，如果不希望使用global的用户，可以为每个项目单独配置用户名和提交邮箱</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;user@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取消全局</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部配置</span></span><br><span class="line">git config  user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config  user.email <span class="string">&quot;user@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取消局部</span></span><br><span class="line">git config --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看全局所有配置</span></span><br><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看全局user email</span></span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看局部所有配置</span></span><br><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看局部user email</span></span><br><span class="line">git config  user.name</span><br><span class="line">git config  user.email</span><br></pre></td></tr></table></figure>

<h3 id="git-basic-workflow"><a href="#git-basic-workflow" class="headerlink" title="git basic workflow"></a>git basic workflow</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#克隆新仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/kezunlin/demo.git</span><br><span class="line">git remote -v </span><br><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">&quot;init repo&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者提交已有仓库</span></span><br><span class="line">git init .</span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin https://github.com/kezunlin/demo.git</span><br><span class="line">git remote -v </span><br><span class="line">git pull origin master </span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">&quot;init repo&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="git-branch-workflow"><a href="#git-branch-workflow" class="headerlink" title="git branch workflow"></a>git branch workflow</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如，我需要开发一个newfeature分支进行开发，具体流程如下</span></span><br><span class="line"><span class="comment">#1)添加分支</span></span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">git checkout -b newfeature</span><br><span class="line"></span><br><span class="line"><span class="comment">#2)现在已经从master分支切换到newfeature分支，在newfeature分支添加若干代码和文件</span></span><br><span class="line"><span class="built_in">touch</span> main.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment">#3)提交到本地</span></span><br><span class="line">git ls-files <span class="comment"># check which files are included in git </span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">&#x27;update in newfeature branch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4)同步gitlab的最新master分支到本地</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; 可以看到，同步master分支之后，gitlab上的最新文件和代码会同步到本地的master分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5)合并master分支到自己的newfeature分支</span></span><br><span class="line">git checkout newfeature</span><br><span class="line">git merge master</span><br><span class="line"></span><br><span class="line">    output</span><br><span class="line">    Already up-to-date!</span><br><span class="line">    Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"></span><br><span class="line">    <span class="comment">#&gt;可以看到master分支被成功合并进了newfeature分支。</span></span><br><span class="line">    <span class="comment">#&gt;合并过程可能会有冲突，根据提示需要先修复冲突文件，然后在本地提交之后，推送到gitlab的newfeature分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.1) 合并之后没有冲突，对自己的newfeature分支进行再次测试，确保没有问题之后推送到gitlab。</span></span><br><span class="line"><span class="comment">#5.2) 合并之后有冲突，请按照提示逐个修复冲突文件，冲突修复完毕，对自己的newfeature分支进行再次测试，确保没有问题之后推送到gitlab。</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">&#x27;fix some conflicts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6)推送newfeature分支到gitlab</span></span><br><span class="line"><span class="comment">#&gt;现在gitlab上的最新代码已经同步到本地master并且合并进了newfeature分支，并且解决了冲突，通过了测试，现在需要将newfeature分支推送到gitlab</span></span><br><span class="line"></span><br><span class="line">git push -u origin newfeature</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; 推送成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7)在gitlab上合并newfeature分支到master</span></span><br><span class="line"><span class="comment">#7.1)打开demo git可以看到新建的分支newfeature,点击merge request</span></span><br><span class="line"><span class="comment">#7.2)发起submit merge request请求</span></span><br><span class="line"><span class="comment">#7.3)进入到merge页面,等待merge请求通过。</span></span><br><span class="line"><span class="comment">#7.4)maintainer通过了merge请求，自己的分支newfeature成功合并到master分支.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; 如果此处合并失败，请回到(4),(5),(6)步骤重试。</span></span><br></pre></td></tr></table></figure>

<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a V1.2 -m <span class="string">&#x27;release 1.2&#x27;</span></span><br><span class="line"></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line">git show V1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># push local tags to remote</span></span><br><span class="line">git push origin V1.2</span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete local and remote tag</span></span><br><span class="line">git tag -d V1.2</span><br><span class="line">git push origin :refs/tags/V1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># fetch remote tag</span></span><br><span class="line">git fetch origin tag V1.2</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### multiple github workflow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### ssh-keygen</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#为git配置多个用户和key</span></span><br><span class="line"><span class="comment">#账号1 </span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;kezunlin1@gmail.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/kezunlin/.ssh/id_rsa): id_rsa_kezunlin1</span><br><span class="line"></span><br><span class="line"><span class="comment">#账号2</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;kezunlin2@gmail.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/kezunlin/.ssh/id_rsa): id_rsa_kezunlin2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加这些key到SSH agent中</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_kezunlin1</span><br><span class="line">ssh-add ~/.ssh/id_rsa_kezunlin2</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;因为默认只读取id_rsa</span></span><br></pre></td></tr></table></figure>

<h4 id="edit-config"><a href="#edit-config" class="headerlink" title="edit config"></a>edit config</h4><p>edit <code>~/.ssh/config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置多个github账号</span></span><br><span class="line"><span class="comment">#默认</span></span><br><span class="line">Host github.com</span><br><span class="line">   User git</span><br><span class="line">   Hostname github.com</span><br><span class="line">   IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户kezunlin1</span></span><br><span class="line">Host kezunlin1.github.com</span><br><span class="line">   User kezunlin1</span><br><span class="line">   Hostname github.com</span><br><span class="line">   IdentityFile ~/.ssh/id_rsa_kezunlin1</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户kezunlin2</span></span><br><span class="line">Host kezunlin2.github.com</span><br><span class="line">   User kezunlin2</span><br><span class="line">   Hostname github.com</span><br><span class="line">   IdentityFile ~/.ssh/id_rsa_kezunlin2</span><br></pre></td></tr></table></figure>

<h4 id="upload-public-keys"><a href="#upload-public-keys" class="headerlink" title="upload public keys"></a>upload public keys</h4><ol>
<li>将id_rsa_kezunlin1.pub添加到kezunlin1的github账号中</li>
<li>将id_rsa_kezunlin2.pub添加到kezunlin2的github账号中</li>
</ol>
<h4 id="test-ssh"><a href="#test-ssh" class="headerlink" title="test ssh"></a>test ssh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi kezunlin! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ssh -T git@kezunlin1.github.com</span></span><br><span class="line"><span class="string">ssh -T git@kezunlin2.github.com</span></span><br></pre></td></tr></table></figure>

<h4 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#错误方法</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:kezunlin1/demo.git</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:kezunlin2/demo.git</span><br><span class="line"></span><br><span class="line">Cloning into <span class="string">&#x27;demo&#x27;</span>...</span><br><span class="line">ERROR: Repository not found.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>when clone repos we must specify<br><code>git@kezunlin1.github.com:kezunlin1/demo.git</code> or<br><code>git@kezunlin2.github.com:kezunlin2/demo.git</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正确方法</span></span><br><span class="line">git <span class="built_in">clone</span> git@kezunlin1.github.com:kezunlin1/demo.git</span><br><span class="line">git <span class="built_in">clone</span> git@kezunlin2.github.com:kezunlin2/demo.git</span><br></pre></td></tr></table></figure>

<h2 id="Git-LFS"><a href="#Git-LFS" class="headerlink" title="Git LFS"></a>Git LFS</h2><p>Git LFS lets you store files up to 2 GB in size instead of normal 50 MB.</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>download <code>git-lfs-linux-amd64-v2.7.2.tar.gz</code> from <a href="https://git-lfs.github.com/">git lfs</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf git-lfs-linux-amd64-v2.7.2.tar.gz</span><br><span class="line"><span class="built_in">chmod</span> +x install.sh</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"><span class="comment">#Git LFS initialized.</span></span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p>To get started with Git LFS, the following commands can be used.</p>
<ol>
<li><p>Setup Git LFS on your system. You only have to do this once per repository per machine:</p>
<p>  git lfs install</p>
</li>
<li><p>Choose the type of files you want to track, for examples all ISO images, with git lfs track:</p>
<p>  git lfs track “*.iso”</p>
</li>
<li><p>The above stores this information in gitattributes(5) files, so<br> that file need to be added to the repository:</p>
<p>  git add .gitattributes</p>
</li>
<li><p>Commit, push and work with the files normally:</p>
<p>  git add file.iso<br>  git commit -m “Add disk image”<br>  git push</p>
</li>
</ol>
<p>issue the commands </p>
<pre><code>&gt;git lfs install
Updated git hooks.
Git LFS initialized.

&gt;git lfs track &quot;*.pdf&quot; 
# generate .gitattributes file

&gt;cat .gitattributes
*.pdf filter=lfs diff=lfs merge=lfs -text

&gt;git add .gitattributes

&gt;git add file.pdf
&gt;git commit -m &quot;Add pdf file&quot;
&gt;git push
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">git tag</a></li>
<li><a href="https://git-lfs.github.com/">git lfs</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190313: created.</li>
<li>20191127: add multiple workflow</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>lfs</tag>
      </tags>
  </entry>
  <entry>
    <title>install and use eigen3 on ubuntu 16.04</title>
    <url>//blog/use-eigen3-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>install to <code>/usr/include/eigen3/</code> and <code>/usr/lib/cmake/eigen3</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /usr/lib/cmake/eigen3</span><br></pre></td></tr></table></figure>

<h4 id="Eigen3Config-cmake"><a href="#Eigen3Config-cmake" class="headerlink" title="Eigen3Config.cmake"></a>Eigen3Config.cmake</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#                                               -*- cmake -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Eigen3Config.cmake(.in)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following variables to compile and link against Eigen:</span></span><br><span class="line"><span class="comment">#  EIGEN3_FOUND              - True if Eigen was found on your system</span></span><br><span class="line"><span class="comment">#  EIGEN3_USE_FILE           - The file making Eigen usable</span></span><br><span class="line"><span class="comment">#  EIGEN3_DEFINITIONS        - Definitions needed to build with Eigen</span></span><br><span class="line"><span class="comment">#  EIGEN3_INCLUDE_DIR        - Directory where signature_of_eigen3_matrix_library can be found</span></span><br><span class="line"><span class="comment">#  EIGEN3_INCLUDE_DIRS       - List of directories of Eigen and it&#x27;s dependencies</span></span><br><span class="line"><span class="comment">#  EIGEN3_ROOT_DIR           - The base directory of Eigen</span></span><br><span class="line"><span class="comment">#  EIGEN3_VERSION_STRING     - A human-readable string containing the version</span></span><br><span class="line"><span class="comment">#  EIGEN3_VERSION_MAJOR      - The major version of Eigen</span></span><br><span class="line"><span class="comment">#  EIGEN3_VERSION_MINOR      - The minor version of Eigen</span></span><br><span class="line"><span class="comment">#  EIGEN3_VERSION_PATCH      - The patch version of Eigen</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_FOUND <span class="number">1</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_USE_FILE     <span class="string">&quot;$&#123;CMAKE_CURRENT_LIST_DIR&#125;/UseEigen3.cmake&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_DEFINITIONS  <span class="string">&quot;&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_INCLUDE_DIR  <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_INCLUDE_DIRS <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_ROOT_DIR     <span class="string">&quot;/usr&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_VERSION_STRING <span class="string">&quot;3.2.92&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_VERSION_MAJOR  <span class="string">&quot;3&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_VERSION_MINOR  <span class="string">&quot;2&quot;</span> )</span><br><span class="line"><span class="keyword">set</span> ( EIGEN3_VERSION_PATCH  <span class="string">&quot;92&quot;</span> )</span><br></pre></td></tr></table></figure>

<h4 id="UseEigen3-cmake"><a href="#UseEigen3-cmake" class="headerlink" title="UseEigen3.cmake"></a>UseEigen3.cmake</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- cmake -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  UseEigen3.cmake</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_definitions</span>     ( <span class="variable">$&#123;EIGEN3_DEFINITIONS&#125;</span> )</span><br><span class="line"><span class="keyword">include_directories</span> ( <span class="variable">$&#123;EIGEN3_INCLUDE_DIRS&#125;</span> )</span><br></pre></td></tr></table></figure>

<h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Matrix&lt; std::complex&lt;<span class="type">double</span>&gt; , <span class="number">2</span> , <span class="number">2</span> &gt; Eigen::Matrix2cd</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; std::complex&lt;<span class="type">float</span>&gt; , <span class="number">2</span> , <span class="number">2</span> &gt; Eigen::Matrix2cf</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">double</span> , <span class="number">2</span> , <span class="number">2</span> &gt; Eigen::Matrix2d</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">float</span> , <span class="number">2</span> , <span class="number">2</span> &gt; Eigen::Matrix2f</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">int</span> , <span class="number">2</span> , <span class="number">2</span> &gt; Eigen::Matrix2i</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; std::complex&lt;<span class="type">double</span>&gt; , <span class="number">2</span> , Dynamic&gt; Eigen::Matrix2Xcd</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; std::complex&lt;<span class="type">float</span>&gt; , <span class="number">2</span> , Dynamic&gt; Eigen::Matrix2Xcf</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">double</span> , <span class="number">2</span> , Dynamic&gt; Eigen::Matrix2Xd</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">float</span> , <span class="number">2</span> , Dynamic&gt; Eigen::Matrix2Xf</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; <span class="type">int</span> , <span class="number">2</span> , Dynamic&gt; Eigen::Matrix2Xi</span><br><span class="line"><span class="keyword">typedef</span> Matrix&lt; std::complex&lt;<span class="type">double</span>&gt; , <span class="number">3</span> , <span class="number">3</span> &gt; Eigen::Matrix3cd</span><br><span class="line">#######<span class="meta">#</span></span><br><span class="line"><span class="meta">transpose  转置</span></span><br><span class="line">conjugate  共轭</span><br><span class="line">adjoint    伴随</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">Test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; EIGEN3_INCLUDE_DIRS = $&#123;EIGEN3_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="comment"># EIGEN3_INCLUDE_DIRS = /usr/include/eigen3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;EIGEN3_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="keyword">test</span>.cpp)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>No need to link libraries for eigen3.</p>
</blockquote>
<h3 id="c-code"><a href="#c-code" class="headerlink" title="c++ code"></a>c++ code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//------------------------</span></span><br><span class="line">	<span class="function">MatrixXd <span class="title">m</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="built_in">m</span>(<span class="number">0</span>,<span class="number">0</span>) = <span class="number">3</span>;</span><br><span class="line">	<span class="built_in">m</span>(<span class="number">1</span>,<span class="number">0</span>) = <span class="number">2.5</span>;</span><br><span class="line">	<span class="built_in">m</span>(<span class="number">0</span>,<span class="number">1</span>) = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">m</span>(<span class="number">1</span>,<span class="number">1</span>) = <span class="built_in">m</span>(<span class="number">1</span>,<span class="number">0</span>) + <span class="built_in">m</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is the matrix m:\n&quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="function">VectorXd <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="built_in">v</span>(<span class="number">0</span>) = <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">v</span>(<span class="number">1</span>) = <span class="built_in">v</span>(<span class="number">0</span>) - <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is the vector v:\n&quot;</span> &lt;&lt; v &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------------------</span></span><br><span class="line">	Matrix3f m2;</span><br><span class="line">	m2 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">		<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">		<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>;</span><br><span class="line">	cout &lt;&lt; m2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// stats</span></span><br><span class="line">	Eigen::Matrix2d mat;</span><br><span class="line">	mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">			<span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.sum():       &quot;</span> &lt;&lt; mat.<span class="built_in">sum</span>()       &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.prod():      &quot;</span> &lt;&lt; mat.<span class="built_in">prod</span>()      &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.mean():      &quot;</span> &lt;&lt; mat.<span class="built_in">mean</span>()      &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.minCoeff():  &quot;</span> &lt;&lt; mat.<span class="built_in">minCoeff</span>()  &lt;&lt; endl; <span class="comment">// min value = 1</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.maxCoeff():  &quot;</span> &lt;&lt; mat.<span class="built_in">maxCoeff</span>()  &lt;&lt; endl; <span class="comment">// max value = 4</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is mat.trace():     &quot;</span> &lt;&lt; mat.<span class="built_in">trace</span>()     &lt;&lt; endl; <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Here is mat.sum():       10</span></span><br><span class="line"><span class="comment">Here is mat.prod():      24</span></span><br><span class="line"><span class="comment">Here is mat.mean():      2.5</span></span><br><span class="line"><span class="comment">Here is mat.minCoeff():  1</span></span><br><span class="line"><span class="comment">Here is mat.maxCoeff():  4</span></span><br><span class="line"><span class="comment">Here is mat.trace():     5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="comment">// l1-norm = |v1|+|v2|+...|vn|</span></span><br><span class="line">	<span class="comment">// l2-norm = v1*v1 + v2*v2+...vn*vn     squareNorm(), Norm()</span></span><br><span class="line">	<span class="comment">//  lpNorm&lt; p &gt;():  lpNorm&lt; 1 &gt;()   lpNorm&lt; 2 &gt;()</span></span><br><span class="line"></span><br><span class="line">	<span class="function">VectorXf <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">MatrixXf <span class="title">m</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span>, <span class="title">n</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	v &lt;&lt; <span class="number">-1</span>,</span><br><span class="line">		<span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">	m &lt;&lt; <span class="number">1</span>,<span class="number">-2</span>,</span><br><span class="line">		<span class="number">-3</span>,<span class="number">4</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v.squaredNorm() = &quot;</span> &lt;&lt; v.<span class="built_in">squaredNorm</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v.norm() = &quot;</span> &lt;&lt; v.<span class="built_in">norm</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v.lpNorm&lt;1&gt;() = &quot;</span> &lt;&lt; v.<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v.lpNorm&lt;Infinity&gt;() = &quot;</span> &lt;&lt; v.<span class="built_in">lpNorm</span>&lt;Infinity&gt;() &lt;&lt; endl; <span class="comment">// max value</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;m.squaredNorm() = &quot;</span> &lt;&lt; m.<span class="built_in">squaredNorm</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;m.norm() = &quot;</span> &lt;&lt; m.<span class="built_in">norm</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;m.lpNorm&lt;1&gt;() = &quot;</span> &lt;&lt; m.<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;m.lpNorm&lt;Infinity&gt;() = &quot;</span> &lt;&lt; m.<span class="built_in">lpNorm</span>&lt;Infinity&gt;() &lt;&lt; endl;  <span class="comment">// max value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	n &lt;&lt; <span class="number">1</span>,<span class="number">-2</span>,</span><br><span class="line">		<span class="number">-3</span>,<span class="number">4</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1-norm(n)     = &quot;</span> &lt;&lt; n.<span class="built_in">cwiseAbs</span>().<span class="built_in">colwise</span>().<span class="built_in">sum</span>().<span class="built_in">maxCoeff</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot; == &quot;</span>             &lt;&lt; n.<span class="built_in">colwise</span>().<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;().<span class="built_in">maxCoeff</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;infty-norm(n) = &quot;</span> &lt;&lt; n.<span class="built_in">cwiseAbs</span>().<span class="built_in">rowwise</span>().<span class="built_in">sum</span>().<span class="built_in">maxCoeff</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot; == &quot;</span>             &lt;&lt; n.<span class="built_in">rowwise</span>().<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;().<span class="built_in">maxCoeff</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v.squaredNorm() = 5</span></span><br><span class="line"><span class="comment">v.norm() = 2.23607</span></span><br><span class="line"><span class="comment">v.lpNorm&lt;1&gt;() = 3</span></span><br><span class="line"><span class="comment">v.lpNorm&lt;Infinity&gt;() = 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m.squaredNorm() = 30</span></span><br><span class="line"><span class="comment">m.norm() = 5.47723</span></span><br><span class="line"><span class="comment">m.lpNorm&lt;1&gt;() = 10</span></span><br><span class="line"><span class="comment">m.lpNorm&lt;Infinity&gt;() = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1-norm(n)     = 6 == 6</span></span><br><span class="line"><span class="comment">infty-norm(n) = 7 == 7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// bool</span></span><br><span class="line">	<span class="function">ArrayXXf <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	a &lt;&lt; <span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">		<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 0).all()   = &quot;</span> &lt;&lt; (a &gt; <span class="number">0</span>).<span class="built_in">all</span>() &lt;&lt; endl; <span class="comment">// bool </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 0).any()   = &quot;</span> &lt;&lt; (a &gt; <span class="number">0</span>).<span class="built_in">any</span>() &lt;&lt; endl; <span class="comment">// bool</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 0).count() = &quot;</span> &lt;&lt; (a &gt; <span class="number">0</span>).<span class="built_in">count</span>() &lt;&lt; endl; <span class="comment">// int</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 2).all()   = &quot;</span> &lt;&lt; (a &gt; <span class="number">2</span>).<span class="built_in">all</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 2).any()   = &quot;</span> &lt;&lt; (a &gt; <span class="number">2</span>).<span class="built_in">any</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(a &gt; 2).count() = &quot;</span> &lt;&lt; (a &gt; <span class="number">2</span>).<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(a &gt; 0).all()   = 1</span></span><br><span class="line"><span class="comment">(a &gt; 0).any()   = 1</span></span><br><span class="line"><span class="comment">(a &gt; 0).count() = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(a &gt; 2).all()   = 0</span></span><br><span class="line"><span class="comment">(a &gt; 2).any()   = 1</span></span><br><span class="line"><span class="comment">(a &gt; 2).count() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// get min/max index</span></span><br><span class="line">	<span class="function">Eigen::MatrixXf <span class="title">m</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	m &lt;&lt; <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">		<span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get location of maximum</span></span><br><span class="line">	MatrixXf::Index maxRow, maxCol;</span><br><span class="line">	<span class="type">float</span> max = m.<span class="built_in">maxCoeff</span>(&amp;maxRow, &amp;maxCol);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get location of minimum</span></span><br><span class="line">	MatrixXf::Index minRow, minCol;</span><br><span class="line">	<span class="type">float</span> min = m.<span class="built_in">minCoeff</span>(&amp;minRow, &amp;minCol);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Max: &quot;</span> &lt;&lt; max &lt;&lt;  <span class="string">&quot;, at: &quot;</span> &lt;&lt; maxRow &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; maxCol &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Min: &quot;</span> &lt;&lt; min &lt;&lt;  <span class="string">&quot;, at: &quot;</span> &lt;&lt; minRow &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; minCol &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Max: 4, at: 1,1</span></span><br><span class="line"><span class="comment">Min: 1, at: 0,0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// colwise rowwise</span></span><br><span class="line">	<span class="function">Eigen::MatrixXf <span class="title">mat</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">	mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">			<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Column&#x27;s maximum: &quot;</span> &lt;&lt; std::endl</span><br><span class="line">	&lt;&lt; mat.<span class="built_in">colwise</span>().<span class="built_in">maxCoeff</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Row&#x27;s maximum: &quot;</span> &lt;&lt; std::endl</span><br><span class="line">	&lt;&lt; mat.<span class="built_in">rowwise</span>().<span class="built_in">maxCoeff</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Column&#x27;s maximum: </span></span><br><span class="line"><span class="comment">3 2 7 9</span></span><br><span class="line"><span class="comment">Row&#x27;s maximum: </span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// colwise + max/min</span></span><br><span class="line">	<span class="function">MatrixXf <span class="title">mat</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">	mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">			<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">	MatrixXf::Index   maxIndex;</span><br><span class="line">	<span class="type">float</span> maxSum = mat.<span class="built_in">colwise</span>().<span class="built_in">sum</span>().<span class="built_in">maxCoeff</span>(&amp;maxIndex);</span><br><span class="line">	</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Maximum sum at position &quot;</span> &lt;&lt; maxIndex &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;The corresponding vector is: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; mat.<span class="built_in">col</span>( maxIndex ) &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;And its sum is is: &quot;</span> &lt;&lt; maxSum &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Maximum sum at position 2</span></span><br><span class="line"><span class="comment">The corresponding vector is: </span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">And its sum is is: 13</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// broadcast with vector</span></span><br><span class="line">	<span class="function">Eigen::MatrixXf <span class="title">mat</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="function">Eigen::VectorXf <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	mat &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">			<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">			</span><br><span class="line">	v &lt;&lt; <span class="number">0</span>,</span><br><span class="line">		<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//add v to each column of m</span></span><br><span class="line">	mat.<span class="built_in">colwise</span>() += v;</span><br><span class="line">	<span class="comment">//mat += v; // ERROR</span></span><br><span class="line">	</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Broadcasting result: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; mat &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Broadcasting result: </span></span><br><span class="line"><span class="comment">1 2 6 9</span></span><br><span class="line"><span class="comment">4 2 8 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Eigen::MatrixXf <span class="title">m</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="function">Eigen::VectorXf <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	m &lt;&lt; <span class="number">1</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">		<span class="number">3</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">		</span><br><span class="line">	v &lt;&lt; <span class="number">2</span>,</span><br><span class="line">		<span class="number">3</span>;</span><br><span class="line">	MatrixXf::Index index;</span><br><span class="line">	<span class="comment">// find nearest neighbour</span></span><br><span class="line">	(m.<span class="built_in">colwise</span>() - v).<span class="built_in">colwise</span>().<span class="built_in">squaredNorm</span>().<span class="built_in">minCoeff</span>(&amp;index);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Nearest neighbour is column &quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; m.<span class="built_in">col</span>(index) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Nearest neighbour is column 0:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_eigen3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test0();</span></span><br><span class="line">	<span class="comment">//test1();</span></span><br><span class="line">	<span class="comment">//test2();</span></span><br><span class="line">	<span class="comment">//test3();</span></span><br><span class="line">	<span class="comment">//test4();</span></span><br><span class="line">	<span class="comment">//test5();</span></span><br><span class="line">	<span class="comment">//test6();</span></span><br><span class="line">	<span class="comment">//test7();</span></span><br><span class="line">	<span class="built_in">test8</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><strong><a href="https://www.cnblogs.com/houkai/p/6351609.html">eigen3 tutorial</a></strong></li>
<li><a href="https://github.com/eigenteam/eigen-git-mirror/blob/master/cmake/FindEigen3.cmake">eigen3 git</a></li>
<li><a href="https://blog.csdn.net/qq_35508344/article/details/80485973">eigen3 example</a></li>
<li><a href="https://blog.csdn.net/hanss2/article/details/78822955">eigen3 example</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190315: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>eigen3</tag>
      </tags>
  </entry>
  <entry>
    <title>mean shift clustering</title>
    <url>//blog/mean-shift-clustering/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="MeanShift"><a href="#MeanShift" class="headerlink" title="MeanShift"></a>MeanShift</h3><ul>
<li>python:	<code>git clone https://github.com/mattnedrich/MeanShift_py.git</code></li>
<li>cpp:  <code>git https://github.com/mattnedrich/MeanShift_cpp.git</code></li>
</ul>
<p>cpp compile </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> MeanShfit_cpp </span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake .. &amp;&amp; make -j8</span><br><span class="line"></span><br><span class="line">./MeanShift_cpp </span><br></pre></td></tr></table></figure>

<h4 id="Visualization-for-linux"><a href="#Visualization-for-linux" class="headerlink" title="Visualization for linux"></a>Visualization for linux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gnuplot gnuplot-qt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>gnuplot<br>plot ‘test.csv’ with points, ‘result.csv’ with points</p>
</blockquote>
<h3 id="python-demo"><a href="#python-demo" class="headerlink" title="python demo"></a>python demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mean_shift <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ms_cluster</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="comment"># case(1) demo:     kernel_bandwidth = 3.0, cluster_epsilon = 6</span></span><br><span class="line">        <span class="comment"># case(2) laneseg:  kernel_bandwidth = 0.5, cluster_epsilon = 2</span></span><br><span class="line">        mean_shifter = ms.MeanShift()</span><br><span class="line">        mean_shift_result = mean_shifter.cluster(data, kernel_bandwidth = <span class="number">3</span>, cluster_epsilon= <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">return</span> mean_shift_result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sklearn_cluster</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MeanShift</span><br><span class="line">        <span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> estimate_bandwidth</span><br><span class="line"></span><br><span class="line">        bandwidth = estimate_bandwidth(data, quantile=<span class="number">0.2</span>, n_samples=data.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print(&quot;bandwidth=&quot;,bandwidth) # 3</span></span><br><span class="line">        mean_shifter = MeanShift(bandwidth, bin_seeding=<span class="literal">True</span>)</span><br><span class="line">        mean_shifter.fit(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get same results</span></span><br><span class="line">        original_points = data</span><br><span class="line">        cluster_centers = mean_shifter.cluster_centers_</span><br><span class="line">        cluster_ids = mean_shifter.labels_</span><br><span class="line"></span><br><span class="line">        mean_shift_result = ms.MeanShiftResult(original_points, cluster_centers, cluster_ids)</span><br><span class="line">        <span class="keyword">return</span> mean_shift_result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cluster_api</span>(<span class="params">data, use_sklearn=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> use_sklearn:</span><br><span class="line">                <span class="keyword">return</span> sklearn_cluster(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> ms_cluster(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_cluster_result</span>(<span class="params">mean_shift_result</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Original Point     Shifted Point  Cluster ID&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;============================================&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mean_shift_result.original_points)): <span class="comment"># 125</span></span><br><span class="line">                original_point = mean_shift_result.original_points[i] <span class="comment"># 125</span></span><br><span class="line">                cluster_id = mean_shift_result.cluster_ids[i] <span class="comment"># 125  value=0,1,2</span></span><br><span class="line">                cluster_center = mean_shift_result.cluster_centers[cluster_id] <span class="comment"># 3   </span></span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>( </span><br><span class="line">                        <span class="string">&quot;(%5.2f,%5.2f) -&gt;  (%5.2f,%5.2f) cluster %i&quot;</span> % </span><br><span class="line">                        (original_point[<span class="number">0</span>], original_point[<span class="number">1</span>], </span><br><span class="line">                        cluster_center[<span class="number">0</span>], cluster_center[<span class="number">1</span>], </span><br><span class="line">                        cluster_id)</span><br><span class="line">                ) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;============================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">        use_sklearn = <span class="literal">True</span></span><br><span class="line">        data = np.genfromtxt(<span class="string">&#x27;data.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data.shape=&quot;</span>,data.shape)</span><br><span class="line"></span><br><span class="line">        mean_shift_result = cluster_api(data,use_sklearn)</span><br><span class="line">        <span class="comment">#print_cluster_result(mean_shift_result)</span></span><br><span class="line"></span><br><span class="line">        original_points =  mean_shift_result.original_points <span class="comment"># (125, 2)</span></span><br><span class="line">        cluster_centers = mean_shift_result.cluster_centers  <span class="comment"># (3, 2)</span></span><br><span class="line">        cluster_ids = mean_shift_result.cluster_ids <span class="comment"># (125,)   value=[0,1,2]</span></span><br><span class="line"></span><br><span class="line">        unique_ids = np.unique(cluster_ids) <span class="comment"># (3,)  value=[0,1,2]</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;original_points.shape=&quot;</span>,original_points.shape) <span class="comment"># (125, 2)</span></span><br><span class="line">        <span class="built_in">print</span>(original_points[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cluster_centers.shape=&quot;</span>,cluster_centers.shape) <span class="comment"># (3, 2)</span></span><br><span class="line">        <span class="built_in">print</span>(cluster_centers)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cluster_ids.shape=&quot;</span>,cluster_ids.shape) <span class="comment"># (125,)</span></span><br><span class="line">        <span class="built_in">print</span>(cluster_ids) <span class="comment"># [0,0,0,...1,1,1,...,2,2,2,...] 0,1,2 cluster ids</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;unique_ids.shape=&quot;</span>,unique_ids.shape) <span class="comment"># (3,)</span></span><br><span class="line">        <span class="built_in">print</span>(unique_ids)  <span class="comment"># 0,1,2</span></span><br><span class="line"></span><br><span class="line">        x = original_points[:,<span class="number">0</span>]</span><br><span class="line">        y = original_points[:,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        fig = plt.figure()</span><br><span class="line">        ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">        scatter = ax.scatter(x,y,c=cluster_ids,s=<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">for</span> cx,cy <span class="keyword">in</span> cluster_centers:</span><br><span class="line">                ax.scatter(cx,cy,s=<span class="number">50</span>,c=<span class="string">&#x27;red&#x27;</span>,marker=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">                ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                plt.colorbar(scatter)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> use_sklearn:</span><br><span class="line">                filename = <span class="string">&quot;1_sklearn&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                filename = <span class="string">&quot;2_ms&quot;</span></span><br><span class="line"></span><br><span class="line">        fig.savefig(filename)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK &quot;</span>+filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure>

<h4 id="meanshift-py"><a href="#meanshift-py" class="headerlink" title="meanshift_py"></a>meanshift_py</h4><pre><code>#===============================
# ms 
#===============================
(&#39;data.shape=&#39;, (125, 2))
(&#39;original_points.shape=&#39;, (125, 2))
[[10.91079039  8.38941202]
 [ 9.87500165  9.9092509 ]
 [ 7.8481223  10.4317483 ]
 [ 8.53412293  9.55908561]
 [10.38316846  9.61879086]
 [ 8.11061595  9.77471761]
 [10.02119468  9.53877962]
 [ 9.37705852  9.70853991]
 [ 7.67017034  9.60315231]
 [10.94308287 11.76207349]]
(&#39;cluster_centers.shape=&#39;, (3, 2))
[[-3.45216026  5.28851174]
 [ 5.02926925  3.56548696]
 [ 8.63149568  9.25488818]]
(&#39;cluster_ids.shape=&#39;, (125,))
[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 1 0 0 0]
(&#39;unique_ids.shape=&#39;, (3,))
[0 1 2]
OK 2_ms
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20190419173554794-823758488.png" alt="ms"></p>
<h4 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h4><pre><code>#===============================
# sklearn 
#===============================

(&#39;data.shape=&#39;, (125, 2))
(&#39;original_points.shape=&#39;, (125, 2))
[[10.91079039  8.38941202]
 [ 9.87500165  9.9092509 ]
 [ 7.8481223  10.4317483 ]
 [ 8.53412293  9.55908561]
 [10.38316846  9.61879086]
 [ 8.11061595  9.77471761]
 [10.02119468  9.53877962]
 [ 9.37705852  9.70853991]
 [ 7.67017034  9.60315231]
 [10.94308287 11.76207349]]
(&#39;cluster_centers.shape=&#39;, (3, 2))
[[ 4.79792283  3.01140269]
 [ 9.2548292  10.11312163]
 [-4.11368202  5.44826076]]
(&#39;cluster_ids.shape=&#39;, (125,))
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 0 2 2 2]
(&#39;unique_ids.shape=&#39;, (3,))
[0 1 2]
OK 1_sklearn
</code></pre>
<p><img src="https://kezunlin.me/images/posts/635233-20190419173551648-1533882819.png" alt="sklearn"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/mattnedrich/MeanShift_py">MeanShift_py</a></li>
<li><a href="https://github.com/mattnedrich/MeanShift_cpp">MeanShift_cpp</a></li>
<li><a href="https://blog.csdn.net/google19890102/article/details/51030884">mean shift clustering intro</a></li>
<li><a href="https://blog.csdn.net/lwx309025167/article/details/78434930">opencv mean shift</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190318: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>meanshift</tag>
      </tags>
  </entry>
  <entry>
    <title>install and use nvidia management library (nvml)</title>
    <url>//blog/nvidia-management-library-nvml/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="nvidia-smi"><a href="#nvidia-smi" class="headerlink" title="nvidia-smi"></a>nvidia-smi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; nvidia-smi</span><br><span class="line">Thu Mar 21 09:41:18 2019       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 396.54                 Driver Version: 396.54                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 1060    Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| N/A   65C    P0    30W /  N/A |    538MiB /  6078MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure>

<h3 id="nvidia-ml-py"><a href="#nvidia-ml-py" class="headerlink" title="nvidia-ml-py"></a>nvidia-ml-py</h3><p>This is a wrapper around the NVML library.</p>
<p>Python methods wrap NVML functions, implemented in a C shared library.</p>
<blockquote>
<p>Each function’s use is the same with the following exceptions: Instead of returning error codes, failing error codes are raised as Python exceptions.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nvidia-ml-py2 --user</span><br><span class="line">pip install nvidia-ml-py3 --user</span><br></pre></td></tr></table></figure>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># pip install nvidia-ml-py3 --user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pynvml</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pynvml.nvmlInit()</span><br><span class="line"><span class="keyword">except</span> pynvml.NVMLError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error) </span><br><span class="line">    <span class="comment"># Driver Not Loaded      驱动加载失败(没装驱动或者驱动有问题)</span></span><br><span class="line">    <span class="comment"># Insufficent Permission 没有以管理员权限运行  pynvml.NVMLError_DriverNotLoaded: Driver Not Loaded</span></span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(pynvml.nvmlDeviceGetCount())</span><br><span class="line"><span class="keyword">except</span> pynvml.NVMLError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pynvml.nvmlDeviceGetCount())<span class="comment"># total gpu count = 1</span></span><br><span class="line"><span class="built_in">print</span>(pynvml.nvmlSystemGetDriverVersion()) <span class="comment"># 396.54</span></span><br><span class="line"></span><br><span class="line">GPU_ID = <span class="number">0</span></span><br><span class="line">handle = pynvml.nvmlDeviceGetHandleByIndex(GPU_ID)</span><br><span class="line"><span class="built_in">print</span>(pynvml.nvmlDeviceGetName(handle)) <span class="comment"># GeForce GTX 1060</span></span><br><span class="line"></span><br><span class="line">meminfo = pynvml.nvmlDeviceGetMemoryInfo(handle)</span><br><span class="line">MB_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"><span class="built_in">print</span>(meminfo.total/MB_SIZE) <span class="comment"># 6078 MB</span></span><br><span class="line"><span class="built_in">print</span>(meminfo.used/MB_SIZE)  <span class="comment"># 531 MB</span></span><br><span class="line"><span class="built_in">print</span>(meminfo.free/MB_SIZE)  <span class="comment"># 5546 MB</span></span><br><span class="line"></span><br><span class="line">pynvml.nvmlShutdown()</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.nvidia.com/nvidia-management-library-nvml">nvml</a></li>
<li><a href="https://docs.nvidia.com/deploy/nvml-api/index.html">nvml-api</a></li>
<li><a href="https://pypi.org/project/nvidia-ml-py/">nvidia-ml-py</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190321: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>nvml</tag>
      </tags>
  </entry>
  <entry>
    <title>speed up opencv image processing with openmp</title>
    <url>//blog/speed-up-opencv-image-processing-with-openmp/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/15f5c3e8/">Part 1: compile opencv on ubuntu 16.04</a></li>
<li><a href="https://kezunlin.me/post/6580691f/">Part 2: compile opencv with CUDA support on windows 10</a></li>
<li><a href="https://kezunlin.me/post/61d55ab4/">Part 3: opencv mat for loop</a></li>
<li><strong><a href="https://kezunlin.me/post/7a6ba82e/">Part 4: speed up opencv image processing with openmp</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><ul>
<li>linux&#x2F;window:  cmake with <code>CXX_FLAGS=-fopenmp</code></li>
<li>window VS: VS also support openmp, <code>C/C++| Language | /openmp</code></li>
</ul>
<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span> loop ...</span><br></pre></td></tr></table></figure>

<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><p>use <code>CXX_FLAGS=-fopenmp</code> in CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(hello)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenMP REQUIRED)</span><br><span class="line"><span class="keyword">if</span>(OPENMP_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;OPENMP FOUND&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">message</span>([main] <span class="string">&quot; OpenMP_C_FLAGS=$&#123;OpenMP_C_FLAGS&#125;&quot;</span>) <span class="comment"># -fopenmp</span></span><br><span class="line">    <span class="keyword">message</span>([main] <span class="string">&quot; OpenMP_CXX_FLAGS&#125;=$&#123;OpenMP_CXX_FLAGS&#125;&quot;</span>) <span class="comment"># -fopenmp</span></span><br><span class="line">    <span class="keyword">message</span>([main] <span class="string">&quot; OpenMP_EXE_LINKER_FLAGS=$&#123;OpenMP_EXE_LINKER_FLAGS&#125;&quot;</span>) <span class="comment"># ***</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># no use for xxx_INCLUDE_DIRS and xxx_libraries for OpenMP</span></span><br><span class="line">    <span class="keyword">message</span>([main] <span class="string">&quot; OpenMP_INCLUDE_DIRS=$&#123;OpenMP_INCLUDE_DIRS&#125;&quot;</span>) <span class="comment"># ***</span></span><br><span class="line">    <span class="keyword">message</span>([main] <span class="string">&quot; OpenMP_LIBRARIES=$&#123;OpenMP_LIBRARIES&#125;&quot;</span>) <span class="comment"># ***</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(CMAKE_C_FLAGS <span class="string">&quot;$&#123;CMAKE_C_FLAGS&#125; $&#123;OpenMP_C_FLAGS&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; $&#123;OpenMP_CXX_FLAGS&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; $&#123;OpenMP_EXE_LINKER_FLAGS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(hello hello.cpp)</span><br><span class="line"><span class="comment">#target_link_libraries(hello xxx)</span></span><br></pre></td></tr></table></figure>
<p>options<br><img src="https://kezunlin.me/images/posts/635233-20181031153435506-1474472980.png" alt="openmp"></p>
<p>or use <code>g++ hello.cpp -fopenmp</code> to compile</p>
<h3 id="view-demo"><a href="#view-demo" class="headerlink" title="view demo"></a>view demo</h3><p>list dynamic dependencies  (ldd)</p>
<pre><code>ldd hello 
    linux-vdso.so.1 =&gt;  (0x00007ffd71365000)
    libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f8ea7f00000)
    libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00007f8ea7cde000)
    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8ea7914000)
    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f8ea760b000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f8ea8282000)
    libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f8ea73f5000)
    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8ea71f1000)
    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f8ea6fd4000)
</code></pre>
<blockquote>
<p><code>libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1</code> </p>
</blockquote>
<p>list names (nm) </p>
<pre><code>nm hello 
0000000000602080 B __bss_start
0000000000602190 b completed.7594
                 U __cxa_atexit@@GLIBC_2.2.5
0000000000602070 D __data_start
0000000000602070 W data_start
0000000000400b00 t deregister_tm_clones
0000000000400b80 t __do_global_dtors_aux
0000000000601df8 t __do_global_dtors_aux_fini_array_entry
0000000000602078 d __dso_handle
0000000000601e08 d _DYNAMIC
0000000000602080 D _edata
0000000000602198 B _end
0000000000400d44 T _fini
0000000000400ba0 t frame_dummy
0000000000601de8 t __frame_dummy_init_array_entry
0000000000400f18 r __FRAME_END__
0000000000602000 d _GLOBAL_OFFSET_TABLE_
0000000000400c28 t _GLOBAL__sub_I_main
                 w __gmon_start__
0000000000400d54 r __GNU_EH_FRAME_HDR
                 U GOMP_parallel@@GOMP_4.0
                 U __gxx_personality_v0@@CXXABI_1.3
00000000004009e0 T _init
0000000000601df8 t __init_array_end
0000000000601de8 t __init_array_start
0000000000400d50 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000601e00 d __JCR_END__
0000000000601e00 d __JCR_LIST__
                 w _Jv_RegisterClasses
0000000000400d40 T __libc_csu_fini
0000000000400cd0 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000400bc6 T main
0000000000400c3d t main._omp_fn.0
                 U omp_get_num_threads@@OMP_1.0
                 U omp_get_thread_num@@OMP_1.0
0000000000400b40 t register_tm_clones
0000000000400ad0 T _start
0000000000602080 d __TMC_END__
0000000000400bea t _Z41__static_initialization_and_destruction_0ii
                 U _ZNSolsEPFRSoS_E@@GLIBCXX_3.4
                 U _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4
                 U _ZNSt8ios_base4InitD1Ev@@GLIBCXX_3.4
0000000000602080 B _ZSt4cout@@GLIBCXX_3.4
                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@@GLIBCXX_3.4
0000000000602191 b _ZStL8__ioinit
                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@@GLIBCXX_3.4
                 
</code></pre>
<blockquote>
<p><code>omp_get_num_threads</code>, <code>omp_get_thread_num</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="OpenMP-Introduction"><a href="#OpenMP-Introduction" class="headerlink" title="OpenMP Introduction"></a>OpenMP Introduction</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/51173703">openmp</a></li>
</ul>
<p>OpenMP的指令格式</p>
<pre><code>#pragma omp directive [clause[clause]…]
#pragma omp parallel private(i, j)
</code></pre>
<blockquote>
<p><code>parallel</code> is directive， <code>private</code> is clause</p>
</blockquote>
<h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><ul>
<li><strong>parallel</strong>，用在一个代码段之前，表示这段代码将被多个线程并行执行</li>
<li><strong>for</strong>，用于for循环之前，将循环分配到多个线程中并行执行，必须保证每次循环之间无相关性。</li>
<li><strong>parallel for</strong>， parallel 和 for语句的结合，也是用在一个for循环之前，表示for循环的代码将被多个线程并行执行。</li>
<li><strong>sections</strong>，用在可能会被并行执行的代码段之前</li>
<li><strong>parallel sections</strong>，parallel和sections两个语句的结合</li>
<li>critical，用在一段代码临界区之前</li>
<li>single，用在一段只被单个线程执行的代码段之前，表示后面的代码段将被单线程执行。</li>
<li>flush，</li>
<li>barrier，用于并行区内代码的线程同步，所有线程执行到barrier时要停止，直到所有线程都执行到barrier时才继续往下执行。</li>
<li>atomic，用于指定一块内存区域被制动更新</li>
<li>master，用于指定一段代码块由主线程执行</li>
<li>ordered， 用于指定并行区域的循环按顺序执行</li>
<li>threadprivate, 用于指定一个变量是线程私有的。</li>
</ul>
<h4 id="parallel-for"><a href="#parallel-for" class="headerlink" title="parallel for"></a>parallel for</h4><p>OpenMP 对可以多线程化的循环有如下五个要求：</p>
<ul>
<li>循环的变量变量（就是i）必须是有符号整形，其他的都不行。</li>
<li>循环的比较条件必须是&lt; &lt;&#x3D; &gt; &gt;&#x3D;中的一种</li>
<li>循环的增量部分必须是增减一个不变的值（即每次循环是不变的）。</li>
<li>如果比较符号是&lt; &lt;&#x3D;，那每次循环i应该增加，反之应该减小</li>
<li>循环必须是没有奇奇怪怪的东西，不能从内部循环跳到外部循环，goto和break只能在循环内部跳转，异常必须在循环内部被捕获。</li>
</ul>
<p>如果你的循环不符合这些条件，那就只好改写了.</p>
<blockquote>
<p>avoid race condition</p>
</blockquote>
<p>当一个循环满足以上五个条件时，依然可能因为数据依赖而不能够合理的并行化。当两个不同的迭代之间的数据存在依赖关系时，就会发生这种情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设数组已经初始化为1</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    factorial[i] = i * factorial[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ERROR.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp for</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>same as </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h4 id="parallel-sections"><a href="#parallel-sections" class="headerlink" title="parallel sections"></a>parallel sections</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel sections # parallel </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp section # thread-1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">function1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">　　<span class="meta">#<span class="keyword">pragma</span> omp section # thread-2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">function2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>parallel sections里面的内容要并行执行，具体分工上，每个线程执行其中的一个section</p>
</blockquote>
<h3 id="clause"><a href="#clause" class="headerlink" title="clause"></a>clause</h3><ul>
<li><strong>private</strong>, 指定每个线程都有它自己的变量私有副本。</li>
<li>firstprivate，指定每个线程都有它自己的变量私有副本，并且变量要被继承主线程中的初值。</li>
<li>lastprivate，主要是用来指定将线程中的私有变量的值在并行处理结束后复制回主线程中的对应变量。</li>
<li><strong>reduce</strong>，用来指定一个或多个变量是私有的，并且在并行处理结束后这些变量要执行指定的运算。</li>
<li>nowait，忽略指定中暗含的等待</li>
<li><strong>num_threads</strong>，指定线程的个数</li>
<li><strong>schedule</strong>，指定如何调度for循环迭代</li>
<li>shared，指定一个或多个变量为多个线程间的共享变量</li>
<li>ordered，用来指定for循环的执行要按顺序执行</li>
<li>copyprivate，用于single指令中的指定变量为多个线程的共享变量</li>
<li>copyin，用来指定一个threadprivate的变量的值要用主线程的值进行初始化。</li>
<li>default，用来指定并行处理区域内的变量的使用方式，缺省是shared</li>
</ul>
<h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; <span class="comment">// private to each thread ? YES</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x; <span class="comment">// private to each thread ? YES</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>local variables are automatically private to each thread.<br>The reason for the existence of the <code>private</code> clause is so that you don’t have to change your code.<br>see <a href="https://stackoverflow.com/questions/6358375/openmp-are-local-variables-automatically-private">here</a></p>
</blockquote>
<p>The only way to parallelize the following code without the private clause</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for private(j)</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>is to change the code. For example like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// mark j as local variable to worker thread</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="reduction"><a href="#reduction" class="headerlink" title="reduction"></a>reduction</h4><p>例如累加</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += array[i]; <span class="comment">// sum需要私有才能实现并行化，但是又必须是公有的才能产生正确结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的这个程序里，sum公有或者私有都不对，为了解决这个问题，OpenMP 提供了<code>reduction</code>语句；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for reduction(+:sum)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内部实现中，OpenMP为每个线程提供了私有的sum变量(初始化为0)，当线程退出时，OpenMP再把每个线程私有的sum加在一起得到最终结果。</p>
</blockquote>
<h4 id="num-threads"><a href="#num-threads" class="headerlink" title="num_threads"></a>num_threads</h4><p><code>num_threads(4)</code> same as <code>omp_set_num_threads(4)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// `num_threads(4)` same as `omp_set_num_threads(4)`</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel num_threads(4)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Hello, I am Thread %d\n&quot;</span>, <span class="built_in">omp_get_thread_num</span>()); <span class="comment">// 0,1,2,3,</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h4><p>format</p>
<pre><code>#pragma omp parallel for schedule(kind [, chunk size])
</code></pre>
<p>kind: see <a href="https://software.intel.com/en-us/articles/openmp-loop-scheduling">openmp-loop-scheduling</a> and <a href="https://stackoverflow.com/questions/10850155/whats-the-difference-between-static-and-dynamic-schedule-in-openmp">whats-the-difference-between-static-and-dynamic-schedule-in-openmp</a></p>
<ul>
<li><code>static</code>: Divide the loop into equal-sized chunks or as equal as possible in the case where the number of loop iterations is not evenly divisible by the number of threads multiplied by the chunk size. <code>By default, chunk size is loop_count/number_of_threads</code>.</li>
<li><code>dynamic</code>: Use the internal work queue to give a chunk-sized block of loop iterations to each thread. When a thread is finished, it retrieves the next block of loop iterations from the top of the work queue. <code>By default, the chunk size is 1</code>. Be careful when using this scheduling type because of the extra overhead involved.</li>
<li><code>guided</code>: special case of <code>dynamic</code>. Similar to dynamic scheduling, but the chunk size starts off large and decreases to better handle load imbalance between iterations. The optional chunk parameter specifies them minimum size chunk to use. <code>By default the chunk size is approximately loop_count/number_of_threads</code>.</li>
<li><code>auto</code>: When schedule (auto) is specified, the decision regarding <code>scheduling is delegated to the compiler</code>. The programmer gives the compiler the freedom to choose any possible mapping of iterations to threads in the team. </li>
<li><code>runtime</code>: with ENV<code>OMP_SCHEDULE</code>, we can test 3 types scheduling: <code>static,dynamic,guided</code> without recompile the code.</li>
</ul>
<blockquote>
<p>The optional parameter (chunk), when specified, must be a positive integer.</p>
</blockquote>
<p>默认情况下，OpenMP认为所有的循环迭代运行的时间都是一样的，这就导致了OpenMP会把不同的迭代等分到不同的核心上，并且让他们分布的尽可能减小内存访问冲突，这样做是因为循环一般会线性地访问内存, 所以把循环按照前一半后一半的方法分配可以最大程度的减少冲突. 然而对内存访问来说这可能是最好的方法, 但是对于负载均衡可能并不是最好的方法, 而且反过来最好的负载均衡可能也会破坏内存访问. 因此必须折衷考虑.</p>
<blockquote>
<p>内存访问vs负载均衡,需要折中考虑。<br>openmp默认使用的schedule是取决于编译器实现的。gcc默认使用schedule(dynamic,1)，也就是动态调度并且块大小是1.<br>线程数不要大于实际核数，否则就是oversubscription</p>
</blockquote>
<p><a href="https://software.intel.com/en-us/vtune-amplifier-cookbook-openmp-imbalance-and-scheduling-overhead">isprime</a>可以对dynamic做一个展示。</p>
<h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><ul>
<li><code>omp_get_num_procs</code>, 返回运行本线程的多处理机的处理器个数。</li>
<li><code>omp_set_num_threads</code>, 设置并行执行代码时的线程个数</li>
<li><code>omp_get_num_threads</code>, 返回当前并行区域中的活动线程(active thread)个数,如果没有设置，默认为1。</li>
<li><code>omp_get_thread_num</code>, 返回线程号(0,1,2,…)</li>
<li><code>omp_init_lock</code>, 初始化一个简单锁</li>
<li><code>omp_set_lock</code>， 上锁操作</li>
<li><code>omp_unset_lock</code>， 解锁操作，要和<code>omp_set_lock</code>函数配对使用</li>
<li><code>omp_destroy_lock</code>，关闭一个锁，要和 <code>omp_init_lock</code>函数配对使用</li>
</ul>
<p>check cpu</p>
<pre><code>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 
    8  Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
</code></pre>
<blockquote>
<p><code>omp_get_num_procs</code> return <code>8</code>.</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="OpenMP-Example"><a href="#OpenMP-Example" class="headerlink" title="OpenMP Example"></a>OpenMP Example</h2><h3 id="omp-get-num-threads"><a href="#omp-get-num-threads" class="headerlink" title="omp_get_num_threads"></a>omp_get_num_threads</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;I am Thread %d,  omp_get_num_threads = %d, omp_get_num_procs = %d\n&quot;</span>, </span><br><span class="line">		<span class="built_in">omp_get_thread_num</span>(), </span><br><span class="line">		<span class="built_in">omp_get_num_threads</span>(),</span><br><span class="line">		<span class="built_in">omp_get_num_procs</span>()</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I am Thread 0,  omp_get_num_threads = 1, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><h4 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `parallel`，用在一个代码段之前，表示这段代码block将被多个线程并行执行</span></span><br><span class="line">	<span class="comment">// if not set `omp_set_num_threads`, by default use `omp_get_num_procs`, eg 8</span></span><br><span class="line">	<span class="comment">//omp_set_num_threads(4); // 设置线程数，一般设置的线程数不超过CPU核心数</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Hello, I am Thread %d,  omp_get_num_threads = %d, omp_get_num_procs = %d\n&quot;</span>, </span><br><span class="line">			<span class="built_in">omp_get_thread_num</span>(), </span><br><span class="line">			<span class="built_in">omp_get_num_threads</span>(),</span><br><span class="line">			<span class="built_in">omp_get_num_procs</span>()</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello, I am Thread 3,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 7,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 1,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 6,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 5,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 4,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 2,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 0,  omp_get_num_threads = 8, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `parallel`，用在一个代码段之前，表示这段代码block将被多个线程并行执行</span></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>); <span class="comment">// 设置线程数，一般设置的线程数不超过CPU核心数</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Hello, I am Thread %d,  omp_get_num_threads = %d, omp_get_num_procs = %d\n&quot;</span>, </span><br><span class="line">			<span class="built_in">omp_get_thread_num</span>(), </span><br><span class="line">			<span class="built_in">omp_get_num_threads</span>(),</span><br><span class="line">			<span class="built_in">omp_get_num_procs</span>()</span><br><span class="line">		);</span><br><span class="line">		<span class="comment">//std::cout &lt;&lt; &quot;Hello&quot; &lt;&lt; &quot;, I am Thread &quot; &lt;&lt; omp_get_thread_num() &lt;&lt; std::endl; // 0,1,2,3</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># use `cout`</span></span><br><span class="line"><span class="comment">HelloHello, I am Thread Hello, I am Thread , I am Thread Hello, I am Thread 2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* use `printf`</span></span><br><span class="line"><span class="comment">Hello, I am Thread 0,  omp_get_num_threads = 4, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 3,  omp_get_num_threads = 4, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 1,  omp_get_num_threads = 4, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">Hello, I am Thread 2,  omp_get_num_threads = 4, omp_get_num_procs = 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>notice the difference of <code>std::cout</code> and <code>printf</code></p>
</blockquote>
<h4 id="case3"><a href="#case3" class="headerlink" title="case3"></a>case3</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `parallel`，用在一个代码段之前，表示这段代码block将被多个线程并行执行</span></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="omp-parallel-for"><a href="#omp-parallel-for" class="headerlink" title="omp parallel&#x2F;for"></a>omp parallel&#x2F;for</h3><h4 id="omp-parallel-omp-for"><a href="#omp-parallel-omp-for" class="headerlink" title="omp parallel + omp for"></a>omp parallel + omp for</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `omp parallel` + `omp for` === `omp parallel for`</span></span><br><span class="line">	<span class="comment">// `omp for` 用在一个for循环之前，表示for循环的每一次iteration将被分配到多个线程并行执行。</span></span><br><span class="line">	<span class="comment">// 此处8次iteration被平均分配到4个thread执行，每个thread执行2次iteration</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	iter   #thread id</span></span><br><span class="line"><span class="comment">	0,1     0</span></span><br><span class="line"><span class="comment">	2,3     1</span></span><br><span class="line"><span class="comment">	4,5     2</span></span><br><span class="line"><span class="comment">	6,7     3</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp for</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="omp-parallel-for-1"><a href="#omp-parallel-for-1" class="headerlink" title="omp parallel for"></a>omp parallel for</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `parallel for`，用在一个for循环之前，表示for循环的每一次iteration将被分配到多个线程并行执行。</span></span><br><span class="line">	<span class="comment">// 此处8次iteration被平均分配到4个thread执行，每个thread执行2次iteration</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	iter   #thread id</span></span><br><span class="line"><span class="comment">	0,1     0</span></span><br><span class="line"><span class="comment">	2,3     1</span></span><br><span class="line"><span class="comment">	4,5     2</span></span><br><span class="line"><span class="comment">	6,7     3</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="sqrt-case"><a href="#sqrt-case" class="headerlink" title="sqrt case"></a>sqrt case</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">base_sqrt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::posix_time::ptime pt1 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000000</span>;i++)</span><br><span class="line">        a = <span class="built_in">sqrt</span>(i);</span><br><span class="line">	</span><br><span class="line">	boost::posix_time::ptime pt2 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line">	<span class="type">int64_t</span> cost = (pt2 - pt1).<span class="built_in">total_milliseconds</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, cost = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), cost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::posix_time::ptime pt1 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">8</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        <span class="built_in">base_sqrt</span>();</span><br><span class="line">    </span><br><span class="line">	boost::posix_time::ptime pt2 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line">	<span class="type">int64_t</span> cost = (pt2 - pt1).<span class="built_in">total_milliseconds</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main Thread = %d, cost = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), cost);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sequential</p>
<pre><code>time ./demo_openmp
Worker Thread = 0, cost = 1746 ms
Worker Thread = 0, cost = 1711 ms
Worker Thread = 0, cost = 1736 ms
Worker Thread = 0, cost = 1734 ms
Worker Thread = 0, cost = 1750 ms
Worker Thread = 0, cost = 1718 ms
Worker Thread = 0, cost = 1769 ms
Worker Thread = 0, cost = 1732 ms
Main Thread = 0, cost = 13899 ms
./demo_openmp  13.90s user 0.00s system 99% cpu 13.903 total
</code></pre>
<p>parallel </p>
<pre><code>time ./demo_openmp
Worker Thread = 1, cost = 1875 ms
Worker Thread = 6, cost = 1876 ms
Worker Thread = 0, cost = 1876 ms
Worker Thread = 7, cost = 1876 ms
Worker Thread = 5, cost = 1877 ms
Worker Thread = 3, cost = 1963 ms
Worker Thread = 4, cost = 2000 ms
Worker Thread = 2, cost = 2027 ms
Main Thread = 0, cost = 2031 ms
./demo_openmp  15.10s user 0.01s system 740% cpu 2.041 total
</code></pre>
<blockquote>
<p>2031s + 10ms(system) &#x3D; 2041ms (total)<br>2.041* 740% &#x3D; 15.1034 s</p>
</blockquote>
<h3 id="parallel-sections-1"><a href="#parallel-sections-1" class="headerlink" title="parallel sections"></a>parallel sections</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	boost::posix_time::ptime pt1 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// `parallel sections`里面的内容要并行执行，具体分工上，每个线程执行其中的一个`section`</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel sections <span class="comment">// parallel </span></span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp section <span class="comment">// thread-0</span></span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">base_sqrt</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp section <span class="comment">// thread-1</span></span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">base_sqrt</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp section <span class="comment">// thread-2</span></span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">base_sqrt</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp section <span class="comment">// thread-3</span></span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">base_sqrt</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	boost::posix_time::ptime pt2 = boost::posix_time::microsec_clock::<span class="built_in">local_time</span>();</span><br><span class="line">	<span class="type">int64_t</span> cost = (pt2 - pt1).<span class="built_in">total_milliseconds</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main Thread = %d, cost = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">time ./demo_openmp</span></span><br><span class="line"><span class="comment">Worker Thread = 0, cost = 1843 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, cost = 1843 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, cost = 1844 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, cost = 1845 ms</span></span><br><span class="line"><span class="comment">Main Thread = 0, cost = 1845 ms</span></span><br><span class="line"><span class="comment">./demo_openmp  7.39s user 0.00s system 398% cpu 1.855 total</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="private-1"><a href="#private-1" class="headerlink" title="private"></a>private</h3><h4 id="error-case"><a href="#error-case" class="headerlink" title="error case"></a>error case</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4_error</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// we get error result, because `j` is shared between all worker threads.</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, j = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 0 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>error results.</p>
</blockquote>
<h4 id="fix1-by-changing-code"><a href="#fix1-by-changing-code" class="headerlink" title="fix1 by changing code"></a>fix1 by changing code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4_fix1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// we get error result, because `j` is shared between all worker threads.</span></span><br><span class="line">	<span class="comment">// fix1: we have to change original code to make j as local variable</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> j;  <span class="comment">// fix1: `int j`</span></span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123; </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, j = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 7 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="fix2-by-private-j"><a href="#fix2-by-private-j" class="headerlink" title="fix2 by private(j)"></a>fix2 by private(j)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4_fix2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// we get error result, because `j` is shared between all worker threads.</span></span><br><span class="line">	<span class="comment">// fix1: we have to change original code to make j as local variable</span></span><br><span class="line">	<span class="comment">// fix2: use `private(j)`, no need to change original code</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for private(j) <span class="comment">// fix2</span></span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, j = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 3 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, j = 7 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, j = 7 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="reduction-1"><a href="#reduction-1" class="headerlink" title="reduction"></a>reduction</h3><h4 id="error-case-1"><a href="#error-case-1" class="headerlink" title="error case"></a>error case</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5_error</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> array[<span class="number">8</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//#pragma omp parallel for reduction(+:sum)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for  <span class="comment">// ERROR</span></span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		sum += array[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, sum = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main Thread = %d, sum = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// ERROR RESULT</span></span><br><span class="line"><span class="comment">Worker Thread = 0, sum = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, sum = 9 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, sum = 8 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, sum = 16 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, sum = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, sum = 19 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, sum = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, sum = 24 ms</span></span><br><span class="line"><span class="comment">Main Thread = 0, sum = 24 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="reduction-sum"><a href="#reduction-sum" class="headerlink" title="reduction(+:sum)"></a>reduction(+:sum)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5_fix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> array[<span class="number">8</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	sum需要私有才能实现并行化，但是又必须是公有的才能产生正确结果;</span></span><br><span class="line"><span class="comment">	sum公有或者私有都不对，为了解决这个问题，OpenMP提供了reduction语句.</span></span><br><span class="line"><span class="comment">	内部实现中，OpenMP为每个线程提供了私有的sum变量(初始化为0)，</span></span><br><span class="line"><span class="comment">	当线程退出时，OpenMP再把每个线程私有的sum加在一起得到最终结果。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for reduction(+:sum)</span></span><br><span class="line"><span class="comment">//#pragma omp parallel for  // ERROR</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		sum += array[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Worker Thread = %d, sum = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main Thread = %d, sum = %d ms\n&quot;</span>,<span class="built_in">omp_get_thread_num</span>(), sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Worker Thread = 0, sum = 0 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 0, sum = 1 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, sum = 2 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 1, sum = 5 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, sum = 6 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 3, sum = 13 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, sum = 4 ms</span></span><br><span class="line"><span class="comment">Worker Thread = 2, sum = 9 ms</span></span><br><span class="line"><span class="comment">Main Thread = 0, sum = 28 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="num-threads-1"><a href="#num-threads-1" class="headerlink" title="num_threads"></a>num_threads</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// `num_threads(4)` same as `omp_set_num_threads(4)`</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel num_threads(4)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Hello, I am Thread %d\n&quot;</span>, <span class="built_in">omp_get_thread_num</span>()); <span class="comment">// 0,1,2,3,</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello, I am Thread 0</span></span><br><span class="line"><span class="comment">Hello, I am Thread 2</span></span><br><span class="line"><span class="comment">Hello, I am Thread 3</span></span><br><span class="line"><span class="comment">Hello, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="schedule-1"><a href="#schedule-1" class="headerlink" title="schedule"></a>schedule</h3><h4 id="static-2"><a href="#static-2" class="headerlink" title="(static,2)"></a>(static,2)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test7_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// static, num_loop/num_threads</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for schedule(static,2) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="static-4"><a href="#static-4" class="headerlink" title="(static,4)"></a>(static,4)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test7_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// static, num_loop/num_threads</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for schedule(static,4) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="dynamic-1"><a href="#dynamic-1" class="headerlink" title="(dynamic,1)"></a>(dynamic,1)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test7_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// dynamic</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for schedule(dynamic,1) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 3</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="dynamic-3"><a href="#dynamic-3" class="headerlink" title="(dynamic,3)"></a>(dynamic,3)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test7_4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="comment">// dynamic</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for schedule(dynamic,3) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d, I am Thread %d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 1, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 2, I am Thread 0</span></span><br><span class="line"><span class="comment">i = 6, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 7, I am Thread 2</span></span><br><span class="line"><span class="comment">i = 3, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 4, I am Thread 1</span></span><br><span class="line"><span class="comment">i = 5, I am Thread 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="schedule-compare"><a href="#schedule-compare" class="headerlink" title="schedule compare"></a>schedule compare</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 100000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isprime</span><span class="params">( <span class="type">int</span> x )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> y = <span class="number">2</span>; y * y &lt;= x; y++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( x % y == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for reduction (+:sum) schedule(dynamic,1) </span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">2</span>; i &lt;= NUM ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sum += <span class="built_in">isprime</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;Number of primes numbers: %d&quot;</span>, sum );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="no-schedule"><a href="#no-schedule" class="headerlink" title="no schedule"></a>no schedule</h4><pre><code>Number of primes numbers: 5761455./demo_openmp  151.64s user 0.04s system 582% cpu 26.048 total
</code></pre>
<h4 id="schedule-static-1"><a href="#schedule-static-1" class="headerlink" title="schedule(static,1)"></a>schedule(static,1)</h4><pre><code>Number of primes numbers: 5761455./demo_openmp  111.13s user 0.00s system 399% cpu 27.799 total
</code></pre>
<h4 id="schedule-dynamic-1"><a href="#schedule-dynamic-1" class="headerlink" title="schedule(dynamic,1)"></a>schedule(dynamic,1)</h4><pre><code>Number of primes numbers: 5761455./demo_openmp  167.22s user 0.02s system 791% cpu 21.135 total
</code></pre>
<h4 id="schedule-dynamic-200"><a href="#schedule-dynamic-200" class="headerlink" title="schedule(dynamic,200)"></a>schedule(dynamic,200)</h4><pre><code>Number of primes numbers: 5761455./demo_openmp  165.96s user 0.02s system 791% cpu 20.981 total
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h2 id="OpenCV-with-OpenMP"><a href="#OpenCV-with-OpenMP" class="headerlink" title="OpenCV with OpenMP"></a>OpenCV with OpenMP</h2><p>see <a href="http://answers.opencv.org/question/103701/how-opencv-use-openmp-thread-to-get-performance/">how-opencv-use-openmp-thread-to-get-performance</a></p>
<p>3 type OpenCV implementation</p>
<ul>
<li>sequential implementation: default (slowest)</li>
<li>parallel implementation: OpenMP &#x2F; TBB</li>
<li>GPU implementation: CUDA(fastest) &#x2F; OpenCL</li>
</ul>
<blockquote>
<p>With CMake-gui, Building <code>OpenCV</code> with the <code>WITH_OPENMP</code> flag means that the internal functions will use <code>OpenMP</code> to parallelize some of the algorithms, like <code>cvCanny</code>, <code>cvSmooth</code> and <code>cvThreshold</code>.</p>
</blockquote>
<blockquote>
<p>In OpenCV, an algorithm can have a <code>sequential (slowest) implementation</code>; a <code>parallel implementation</code> using <code>OpenMP</code> or <code>TBB</code>; and a <code>GPU implementation</code> using <code>OpenCL</code> or <code>CUDA</code>(fastest). You can decide with the <code>WITH_XXX</code> flags which version to use.</p>
</blockquote>
<blockquote>
<p>Of course, not every algorithm can be parallelized.</p>
</blockquote>
<blockquote>
<p>Now, if you want to parallelize your methods with OpenMP, you have to implement it yourself.</p>
</blockquote>
<h3 id="concepts"><a href="#concepts" class="headerlink" title="concepts"></a>concepts</h3><p><code>avoiding extra copying</code></p>
<p>from <a href="https://stackoverflow.com/questions/9039449/improving-image-processing-speed?r=SearchResults">improving-image-processing-speed</a></p>
<blockquote>
<p>There is one important thing about increasing speed in OpenCV not related to processor nor algorithm and it is <strong>avoiding extra copying</strong> when dealing with matrices. I will give you an example taken from the documentation:</p>
</blockquote>
<blockquote>
<p>“…by constructing a header for a part of another matrix. It can be a single row, single column, several rows, several columns, rectangular region in the matrix (called a minor in algebra) or a diagonal. Such operations are also O(1), because the new header will reference the same data. You can actually modify a part of the matrix using this feature, e.g.”</p>
</blockquote>
<h3 id="parallel-for-1"><a href="#parallel-for-1" class="headerlink" title="parallel for"></a>parallel for</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/highgui/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/features2d/features2d.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">opencv_vector</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> imNum = <span class="number">2</span>;</span><br><span class="line">    <span class="function">std::vector&lt;cv::Mat&gt; <span class="title">imVec</span><span class="params">(imNum)</span></span>;</span><br><span class="line">    std::vector&lt;std::vector&lt;cv::KeyPoint&gt;&gt;<span class="built_in">keypointVec</span>(imNum);</span><br><span class="line">    <span class="function">std::vector&lt;cv::Mat&gt; <span class="title">descriptorsVec</span><span class="params">(imNum)</span></span>;</span><br><span class="line">	</span><br><span class="line">	cv::Ptr&lt;cv::ORB&gt; detector = cv::ORB::<span class="built_in">create</span>();</span><br><span class="line">	cv::Ptr&lt;DescriptorMatcher&gt; matcher = cv::DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line"></span><br><span class="line">    std::vector&lt; cv::DMatch &gt; matches;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">100</span>];</span><br><span class="line">    <span class="type">double</span> t1 = <span class="built_in">omp_get_wtime</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//#pragma omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;imNum;i++)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename,<span class="string">&quot;rgb%d.jpg&quot;</span>,i);</span><br><span class="line">        imVec[i] = cv::<span class="built_in">imread</span>( filename, CV_LOAD_IMAGE_GRAYSCALE );</span><br><span class="line">        detector-&gt;<span class="built_in">detect</span>( imVec[i], keypointVec[i] );</span><br><span class="line">        detector-&gt;<span class="built_in">compute</span>( imVec[i],keypointVec[i],descriptorsVec[i]);</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;find &quot;</span>&lt;&lt;keypointVec[i].<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot; keypoints in im&quot;</span>&lt;&lt;i&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> t2 = <span class="built_in">omp_get_wtime</span>();</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;t2-t1&lt;&lt;std::endl;</span><br><span class="line">	</span><br><span class="line">	matcher-&gt;<span class="built_in">match</span>(descriptorsVec[<span class="number">0</span>], descriptorsVec[<span class="number">1</span>], matches, <span class="number">2</span>); <span class="comment">// uchar descriptor Mat</span></span><br><span class="line"></span><br><span class="line">    cv::Mat img_matches;</span><br><span class="line">    cv::<span class="built_in">drawMatches</span>( imVec[<span class="number">0</span>], keypointVec[<span class="number">0</span>], imVec[<span class="number">1</span>], keypointVec[<span class="number">1</span>], matches, img_matches ); </span><br><span class="line">    cv::<span class="built_in">namedWindow</span>(<span class="string">&quot;Matches&quot;</span>,CV_WINDOW_AUTOSIZE);</span><br><span class="line">    cv::<span class="built_in">imshow</span>( <span class="string">&quot;Matches&quot;</span>, img_matches );</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="parallel-sections-2"><a href="#parallel-sections-2" class="headerlink" title="parallel sections"></a>parallel sections</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel sections</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp section</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout&lt;&lt;<span class="string">&quot;processing im0&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">            im0 = cv::<span class="built_in">imread</span>(<span class="string">&quot;rgb0.jpg&quot;</span>, CV_LOAD_IMAGE_GRAYSCALE );</span><br><span class="line">            detector.<span class="built_in">detect</span>( im0, keypoints0);</span><br><span class="line">            extractor.<span class="built_in">compute</span>( im0,keypoints0,descriptors0);</span><br><span class="line">            std::cout&lt;&lt;<span class="string">&quot;find &quot;</span>&lt;&lt;keypoints<span class="number">0.</span><span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;keypoints in im0&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp section</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout&lt;&lt;<span class="string">&quot;processing im1&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">            im1 = cv::<span class="built_in">imread</span>(<span class="string">&quot;rgb1.jpg&quot;</span>, CV_LOAD_IMAGE_GRAYSCALE );</span><br><span class="line">            detector.<span class="built_in">detect</span>( im1, keypoints1);</span><br><span class="line">            extractor.<span class="built_in">compute</span>( im1,keypoints1,descriptors1);</span><br><span class="line">            std::cout&lt;&lt;<span class="string">&quot;find &quot;</span>&lt;&lt;keypoints<span class="number">1.</span><span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;keypoints in im1&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/baimafujinji/article/details/52444739">openmp</a></li>
<li><a href="https://blog.csdn.net/baimafujinji/article/details/52769930">openmp + MPI</a></li>
<li><a href="https://www.cnblogs.com/ospider/p/5265975.html">openmp</a></li>
<li><a href="http://answers.opencv.org/question/103701/how-opencv-use-openmp-thread-to-get-performance/">how-opencv-use-openmp-thread-to-get-performance</a></li>
<li><a href="https://blog.csdn.net/wangzhebupt/article/details/22743515">csdn opencv with openmp for+section </a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51173703">openmp functions</a></li>
<li><a href="https://stackoverflow.com/questions/9039449/improving-image-processing-speed?r=SearchResults">improving-image-processing-speed</a></li>
<li><a href="https://stackoverflow.com/questions/6358375/openmp-are-local-variables-automatically-private">openmp-are-local-variables-automatically-private</a></li>
<li><a href="https://stackoverflow.com/questions/10850155/whats-the-difference-between-static-and-dynamic-schedule-in-openmp">whats-the-difference-between-static-and-dynamic-schedule-in-openmp</a></li>
<li><a href="https://software.intel.com/en-us/vtune-amplifier-cookbook-openmp-imbalance-and-scheduling-overhead">dynamic openmp with isprime</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190403: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>openmp</tag>
      </tags>
  </entry>
  <entry>
    <title>python tkinter tutorial</title>
    <url>//blog/python-tkinter-tutorial/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="main-ui"><a href="#main-ui" class="headerlink" title="main ui"></a>main ui</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">messagebox</span><br><span class="line">- showinfo()</span><br><span class="line">- showwarning()</span><br><span class="line">- showerror()</span><br><span class="line">- askquestion()</span><br><span class="line">- askokcancel()</span><br><span class="line">- askyesno()</span><br><span class="line">- askretrycancel()</span><br><span class="line">- askyesnocancel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filedialog</span><br><span class="line">- asksaveasfilename() </span><br><span class="line">- asksaveasfile()</span><br><span class="line">- askopenfilename()</span><br><span class="line">- askopenfile()</span><br><span class="line">- askdirectory()</span><br><span class="line">- askopenfilenames()</span><br><span class="line">- askopenfiles()</span><br></pre></td></tr></table></figure>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> seed, uniform</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> uint8, uint16, load, save</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> imread, imwrite</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, makedirs</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists, basename</span><br><span class="line"></span><br><span class="line"><span class="comment"># for python 3</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> Tk, Frame, messagebox, filedialog, Button, Label, StringVar</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyGUI</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.root = Tk()</span><br><span class="line"></span><br><span class="line">        sw = <span class="variable language_">self</span>.root.winfo_screenwidth()</span><br><span class="line">        sh = <span class="variable language_">self</span>.root.winfo_screenheight()</span><br><span class="line">       </span><br><span class="line">        ww = <span class="number">700</span></span><br><span class="line">        wh = <span class="number">200</span></span><br><span class="line">        x = (sw-ww) / <span class="number">2</span></span><br><span class="line">        y = (sh-wh) / <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.root.title(<span class="string">&#x27;Image Compress Tool&#x27;</span>)</span><br><span class="line">        <span class="comment"># center</span></span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">&quot;%dx%d+%d+%d&quot;</span> % (ww, wh, x, y))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># frame1</span></span><br><span class="line">        frame1 = Frame(<span class="variable language_">self</span>.root) </span><br><span class="line">        frame1.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_btn = Button(frame1, text=<span class="string">&quot;Input Folder&quot;</span>, width=<span class="number">10</span>, height=<span class="number">3</span>, command=<span class="variable language_">self</span>.set_input_folder)</span><br><span class="line">        <span class="variable language_">self</span>.input_btn.pack(side=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_label_text = StringVar()</span><br><span class="line">        <span class="variable language_">self</span>.input_label_text.<span class="built_in">set</span>(<span class="string">&quot;Input Folder&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_label = Label(frame1, textvariable=<span class="variable language_">self</span>.input_label_text, width=<span class="number">70</span>, height=<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.input_label.pack(side=<span class="string">&#x27;left&#x27;</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># frame2</span></span><br><span class="line">        frame2 = Frame(<span class="variable language_">self</span>.root) </span><br><span class="line">        frame2.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.output_btn = Button(frame2, text=<span class="string">&quot;Output Folder&quot;</span>, width=<span class="number">10</span>, height=<span class="number">3</span>, command=<span class="variable language_">self</span>.set_output_folder)</span><br><span class="line">        <span class="variable language_">self</span>.output_btn.pack(side=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.output_label_text = StringVar()</span><br><span class="line">        <span class="variable language_">self</span>.output_label_text.<span class="built_in">set</span>(<span class="string">&quot;Output Folder&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.output_label = Label(frame2, textvariable = <span class="variable language_">self</span>.output_label_text, width=<span class="number">70</span>, height=<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.output_label.pack(side=<span class="string">&#x27;left&#x27;</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># frame3</span></span><br><span class="line">        frame3 = Frame(<span class="variable language_">self</span>.root)</span><br><span class="line">        frame3.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;nw&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.run_btn = Button(frame3, text=<span class="string">&quot;执行加密&quot;</span>, width=<span class="number">10</span>, height=<span class="number">3</span>, command=<span class="variable language_">self</span>.run_task)</span><br><span class="line">        <span class="variable language_">self</span>.run_btn.pack(side=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.run_label_text = StringVar()</span><br><span class="line">        <span class="variable language_">self</span>.run_label_text.<span class="built_in">set</span>(<span class="string">&quot;Ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.run_label = Label(frame3, textvariable = <span class="variable language_">self</span>.run_label_text, width=<span class="number">70</span>, height=<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.run_label.pack(side=<span class="string">&#x27;left&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mainloop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root.mainloop() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_input_folder</span>(<span class="params">self</span>):</span><br><span class="line">        result = filedialog.askdirectory()</span><br><span class="line">        <span class="variable language_">self</span>.input_label_text.<span class="built_in">set</span>(result)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_output_folder</span>(<span class="params">self</span>):</span><br><span class="line">        result = filedialog.askdirectory()</span><br><span class="line">        <span class="variable language_">self</span>.output_label_text.<span class="built_in">set</span>(result)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_task</span>(<span class="params">self</span>):</span><br><span class="line">        input_folder = <span class="variable language_">self</span>.input_label_text.get()</span><br><span class="line">        output_folder = <span class="variable language_">self</span>.output_label_text.get()</span><br><span class="line">        <span class="comment">#print(&quot;input_folder: &quot;+input_folder)</span></span><br><span class="line">        <span class="comment">#print(&quot;output_folder: &quot;+output_folder)</span></span><br><span class="line">        <span class="keyword">if</span> exists(input_folder):</span><br><span class="line">            <span class="comment">#batch_compress(input_folder, output_folder)</span></span><br><span class="line">            <span class="variable language_">self</span>.run_label_text.<span class="built_in">set</span>(<span class="string">&quot;Compress OK.&quot;</span>)</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Compress OK.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;Warn&quot;</span>, <span class="string">&quot;Please input folder&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gui</span>():</span><br><span class="line">    app = MyGUI()</span><br><span class="line">    app.mainloop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    gui()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>snapshots<br><img src="https://kezunlin.me/images/posts/635233-20190411172357148-1179952371.png" alt="tkinter demo"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/progor/p/8506513.html">tkinter demo</a></li>
<li><a href="https://docs.python.org/3.5/library/tkinter.html">tkinter docs</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190411: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>gui</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>difference between push_back and emplace_back with C++ 11</title>
    <url>//blog/cpp11-push-back-and-emplace-back/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span> (<span class="type">int</span> x_arg) : <span class="built_in">x</span> (x_arg) &#123; std::cout &lt;&lt; <span class="string">&quot;A (x_arg)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="built_in">A</span> () &#123; x = <span class="number">0</span>; std::cout &lt;&lt; <span class="string">&quot;A ()\n&quot;</span>; &#125;</span><br><span class="line">  <span class="built_in">A</span> (<span class="type">const</span> A &amp;rhs) <span class="keyword">noexcept</span> &#123; x = rhs.x; std::cout &lt;&lt; <span class="string">&quot;A (A &amp;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="built_in">A</span> (A &amp;&amp;rhs) <span class="keyword">noexcept</span> &#123; x = rhs.x; std::cout &lt;&lt; <span class="string">&quot;A (A &amp;&amp;)\n&quot;</span>; &#125;</span><br><span class="line">  ~<span class="built_in">A</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~A ()\n&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_emplace_back_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// For emplace_back constructor A (int x_arg) will be called.</span></span><br><span class="line">	<span class="comment">// And for push_back A (int x_arg) is called first and </span></span><br><span class="line">	<span class="comment">// move A (A &amp;&amp;rhs) is called afterwards</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call emplace_back:\n&quot;</span>;</span><br><span class="line">    a.<span class="built_in">emplace_back</span>(<span class="number">0</span>); </span><br><span class="line">	<span class="comment">// (1) direct object creation inside vector</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call push_back:\n&quot;</span>;</span><br><span class="line">    a.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">// (1) create temp object and </span></span><br><span class="line">	<span class="comment">// (2) then move copy to vector and </span></span><br><span class="line">	<span class="comment">// (3) free temp object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">call emplace_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">call push_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">A (A &amp;&amp;)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>see <img src="https://kezunlin.me/images/posts/635233-20191015111647199-971244470.jpg" alt="kezunlin"></p>
<blockquote>
<p>image from <a href="http://candcplusplus.com/c-difference-between-emplace_back-and-push_back-function">c-difference-between-emplace_back-and-push_back-function</a></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_emplace_back_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// emplace_back and push_back for `A(0)`, it&#x27;s same.</span></span><br><span class="line">	<span class="comment">// A (int x_arg) is called first and </span></span><br><span class="line">	<span class="comment">// move A (A &amp;&amp;rhs) is called afterwards</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call emplace_back:\n&quot;</span>;</span><br><span class="line">    a.<span class="built_in">emplace_back</span>(<span class="built_in">A</span>(<span class="number">0</span>)); </span><br><span class="line">	<span class="comment">// (1) create temp object and </span></span><br><span class="line">	<span class="comment">// (2) then move copy to vector and </span></span><br><span class="line">	<span class="comment">// (3) free temp object</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call push_back:\n&quot;</span>;</span><br><span class="line">    a.<span class="built_in">push_back</span>(<span class="built_in">A</span>(<span class="number">1</span>));</span><br><span class="line">	<span class="comment">// (1) create temp object and </span></span><br><span class="line">	<span class="comment">// (2) then move copy to vector and </span></span><br><span class="line">	<span class="comment">// (3) free temp object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">call emplace_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">A (A &amp;&amp;)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">call push_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">A (A &amp;&amp;)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="case-3"><a href="#case-3" class="headerlink" title="case 3"></a>case 3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_emplace_back_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// emplace_back and push_back for `A obj(0)`, it&#x27;s same.</span></span><br><span class="line">	<span class="comment">// A (int x_arg) is called first and </span></span><br><span class="line">	<span class="comment">// copy constructor A (A &amp;) is called afterwards</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call emplace_back:\n&quot;</span>;</span><br><span class="line">    <span class="function">A <span class="title">obj</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">emplace_back</span>(obj); </span><br><span class="line">	 <span class="comment">// copy constructor to vector</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    std::vector&lt;A&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;call push_back:\n&quot;</span>;</span><br><span class="line">    <span class="function">A <span class="title">obj</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">push_back</span>(obj);</span><br><span class="line">	 <span class="comment">// copy constructor to vector</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">call emplace_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">A (A &amp;)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">call push_back:</span></span><br><span class="line"><span class="comment">A (x_arg)</span></span><br><span class="line"><span class="comment">A (A &amp;)</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment">~A ()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h3 id="extract-subvector"><a href="#extract-subvector" class="headerlink" title="extract subvector"></a>extract subvector</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator first = myVec.<span class="built_in">begin</span>() + <span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator last = myVec.<span class="built_in">begin</span>() + <span class="number">15</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">newVec</span><span class="params">(first, last)</span></span>; <span class="comment">// [10,15)</span></span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/4303513/push-back-vs-emplace-back">push-back-vs-emplace-back</a></li>
<li><a href="http://candcplusplus.com/c-difference-between-emplace_back-and-push_back-function">c-difference-between-emplace_back-and-push_back-function</a></li>
<li><a href="https://blog.csdn.net/yockie/article/details/52674366">push_back and emplace_back</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190422: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>use nvidia tensorrt fp32 fp16 to do inference with caffe and pytorch model</title>
    <url>//blog/tensorrt-fp32-fp16-tutorial/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/dacc4196/">Part 1: install and configure tensorrt 4 on ubuntu 16.04</a></li>
<li><strong><a href="https://kezunlin.me/post/bcdfb73c/">Part 2: tensorrt fp32 fp16 tutorial</a></strong></li>
<li><a href="https://kezunlin.me/post/30e0cb19/">Part 3: tensorrt int8 tutorial</a></li>
</ul>
<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><h3 id="include-headers"><a href="#include-headers" class="headerlink" title="include headers"></a>include headers</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime_api.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NvCaffeParser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NvOnnxConfig.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NvOnnxParser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NvInfer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> nvinfer1;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> nvcaffeparser1;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Logger gLogger;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes of MNIST Caffe model</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INPUT_H = <span class="number">28</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INPUT_W = <span class="number">28</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> OUTPUT_SIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//const char* INPUT_BLOB_NAME = &quot;data&quot;;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* OUTPUT_BLOB_NAME = <span class="string">&quot;prob&quot;</span>;</span><br><span class="line"><span class="type">const</span> std::string mnist_data_dir = <span class="string">&quot;data/mnist/&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple PGM (portable greyscale map) reader</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readPGMFile</span><span class="params">(<span class="type">const</span> std::string&amp; fileName, <span class="type">uint8_t</span> buffer[INPUT_H * INPUT_W])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">readPGMFile</span>(fileName, buffer, INPUT_H, INPUT_W);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="caffe-model-to-tensorrt"><a href="#caffe-model-to-tensorrt" class="headerlink" title="caffe model to tensorrt"></a>caffe model to tensorrt</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">caffeToTRTModel</span><span class="params">(<span class="type">const</span> std::string&amp; deployFilepath,       <span class="comment">// Path of Caffe prototxt file</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">const</span> std::string&amp; modelFilepath,        <span class="comment">// Path of Caffe model file</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">const</span> std::vector&lt;std::string&gt;&amp; outputs, <span class="comment">// Names of network outputs</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">unsigned</span> <span class="type">int</span> maxBatchSize,               <span class="comment">// Note: Must be at least as large as the batch we want to run with</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     IHostMemory*&amp; trtModelStream)</span>            <span class="comment">// Output buffer for the TRT model</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Create builder</span></span><br><span class="line">    IBuilder* builder = <span class="built_in">createInferBuilder</span>(gLogger);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse caffe model to populate network, then set the outputs</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reading Caffe prototxt: &quot;</span> &lt;&lt; deployFilepath &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reading Caffe model: &quot;</span> &lt;&lt; modelFilepath &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    INetworkDefinition* network = builder-&gt;<span class="built_in">createNetwork</span>();</span><br><span class="line">    ICaffeParser* parser = <span class="built_in">createCaffeParser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> useFp16 = builder-&gt;<span class="built_in">platformHasFastFp16</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;platformHasFastFp16: &quot;</span> &lt;&lt; useFp16 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> useInt8 = builder-&gt;<span class="built_in">platformHasFastInt8</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;platformHasFastInt8: &quot;</span> &lt;&lt; useInt8 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a 16-bit model if it&#x27;s natively supported</span></span><br><span class="line">    DataType modelDataType = useFp16 ? DataType::kHALF : DataType::kFLOAT; </span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> IBlobNameToTensor* blobNameToTensor = parser-&gt;<span class="built_in">parse</span>(deployFilepath.<span class="built_in">c_str</span>(),</span><br><span class="line">                                                              modelFilepath.<span class="built_in">c_str</span>(),</span><br><span class="line">                                                              *network,</span><br><span class="line">                                                              modelDataType);</span><br><span class="line">    <span class="comment">// Specify output tensors of network</span></span><br><span class="line">    <span class="comment">// ERROR: Network must have at least one output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : outputs)&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;output = &quot;</span>&lt;&lt; s.<span class="built_in">c_str</span>() &lt;&lt; std::endl;</span><br><span class="line">        network-&gt;<span class="built_in">markOutput</span>(*blobNameToTensor-&gt;<span class="built_in">find</span>(s.<span class="built_in">c_str</span>())); <span class="comment">// prob</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    builder-&gt;<span class="built_in">setMaxBatchSize</span>(maxBatchSize);</span><br><span class="line">    builder-&gt;<span class="built_in">setMaxWorkspaceSize</span>(<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up the network for paired-fp16 format if available</span></span><br><span class="line">    <span class="keyword">if</span>(useFp16)</span><br><span class="line">        builder-&gt;<span class="built_in">setFp16Mode</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build engine</span></span><br><span class="line">    ICudaEngine* engine = builder-&gt;<span class="built_in">buildCudaEngine</span>(*network);</span><br><span class="line">    <span class="built_in">assert</span>(engine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy parser and network</span></span><br><span class="line">    network-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    parser-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Serialize engine and destroy it</span></span><br><span class="line">    trtModelStream = engine-&gt;<span class="built_in">serialize</span>();</span><br><span class="line">    engine-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    builder-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shutdownProtobufLibrary();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="pytorch-onnx-to-tensorrt"><a href="#pytorch-onnx-to-tensorrt" class="headerlink" title="pytorch onnx to tensorrt"></a>pytorch onnx to tensorrt</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">onnxToTRTModel</span><span class="params">( <span class="type">const</span> std::string&amp; modelFilepath,        <span class="comment">// name of the onnx model </span></span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">unsigned</span> <span class="type">int</span> maxBatchSize,            <span class="comment">// batch size - NB must be at least as large as the batch we want to run with</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     IHostMemory *&amp;trtModelStream)</span>      <span class="comment">// output buffer for the TensorRT model</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// create the builder</span></span><br><span class="line">    IBuilder* builder = <span class="built_in">createInferBuilder</span>(gLogger);</span><br><span class="line"></span><br><span class="line">    nvonnxparser::IOnnxConfig* config = nvonnxparser::<span class="built_in">createONNXConfig</span>();</span><br><span class="line">    config-&gt;<span class="built_in">setModelFileName</span>(modelFilepath.<span class="built_in">c_str</span>());</span><br><span class="line">    </span><br><span class="line">    nvonnxparser::IONNXParser* parser = nvonnxparser::<span class="built_in">createONNXParser</span>(*config);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Optional - uncomment below lines to view network layer information</span></span><br><span class="line">    <span class="comment">//config-&gt;setPrintLayerInfo(true);</span></span><br><span class="line">    <span class="comment">//parser-&gt;reportParsingInfo();</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!parser-&gt;<span class="built_in">parse</span>(modelFilepath.<span class="built_in">c_str</span>(), DataType::kFLOAT))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">string <span class="title">msg</span><span class="params">(<span class="string">&quot;failed to parse onnx file&quot;</span>)</span></span>;</span><br><span class="line">        gLogger.<span class="built_in">log</span>(nvinfer1::ILogger::Severity::kERROR, msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!parser-&gt;<span class="built_in">convertToTRTNetwork</span>()) &#123;</span><br><span class="line">        <span class="function">string <span class="title">msg</span><span class="params">(<span class="string">&quot;ERROR, failed to convert onnx network into TRT network&quot;</span>)</span></span>;</span><br><span class="line">        gLogger.<span class="built_in">log</span>(nvinfer1::ILogger::Severity::kERROR, msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    nvinfer1::INetworkDefinition* network = parser-&gt;<span class="built_in">getTRTNetwork</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Build the engine</span></span><br><span class="line">    builder-&gt;<span class="built_in">setMaxBatchSize</span>(maxBatchSize);</span><br><span class="line">    builder-&gt;<span class="built_in">setMaxWorkspaceSize</span>(<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    ICudaEngine* engine = builder-&gt;<span class="built_in">buildCudaEngine</span>(*network);</span><br><span class="line">    <span class="built_in">assert</span>(engine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we don&#x27;t need the network any more, and we can destroy the parser</span></span><br><span class="line">    network-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    parser-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// serialize the engine, then close everything down</span></span><br><span class="line">    trtModelStream = engine-&gt;<span class="built_in">serialize</span>();</span><br><span class="line">    engine-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    builder-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shutdownProtobufLibrary();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="do-inference"><a href="#do-inference" class="headerlink" title="do inference"></a>do inference</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">doInference</span><span class="params">(IExecutionContext&amp; context, <span class="type">float</span>* input, <span class="type">float</span>* output, <span class="type">int</span> batchSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> ICudaEngine&amp; engine = context.<span class="built_in">getEngine</span>();</span><br><span class="line">    <span class="comment">// Pointers to input and output device buffers to pass to engine.</span></span><br><span class="line">    <span class="comment">// Engine requires exactly IEngine::getNbBindings() number of buffers.</span></span><br><span class="line">    <span class="built_in">assert</span>(engine.<span class="built_in">getNbBindings</span>() == <span class="number">2</span>);</span><br><span class="line">    <span class="type">void</span>* buffers[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// In order to bind the buffers, we need to know the names of the input and output tensors.</span></span><br><span class="line">    <span class="comment">// Note that indices are guaranteed to be less than IEngine::getNbBindings()</span></span><br><span class="line">    <span class="type">int</span> inputIndex, outputIndex;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bindings after deserializing:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bi = <span class="number">0</span>; bi &lt; engine.<span class="built_in">getNbBindings</span>(); bi++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (engine.<span class="built_in">bindingIsInput</span>(bi) == <span class="literal">true</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            inputIndex = bi;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Binding %d (%s): Input.\n&quot;</span>,  bi, engine.<span class="built_in">getBindingName</span>(bi));</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            outputIndex = bi;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Binding %d (%s): Output.\n&quot;</span>, bi, engine.<span class="built_in">getBindingName</span>(bi));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const int inputIndex = engine.getBindingIndex(INPUT_BLOB_NAME);</span></span><br><span class="line">    <span class="comment">//const int outputIndex = engine.getBindingIndex(OUTPUT_BLOB_NAME);</span></span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;inputIndex = &quot;</span>&lt;&lt; inputIndex &lt;&lt; std::endl; <span class="comment">// 0   data</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;outputIndex = &quot;</span>&lt;&lt; outputIndex &lt;&lt; std::endl; <span class="comment">// 1  prob</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create GPU buffers on device</span></span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaMalloc</span>(&amp;buffers[inputIndex], batchSize * INPUT_H * INPUT_W * <span class="built_in">sizeof</span>(<span class="type">float</span>)));</span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaMalloc</span>(&amp;buffers[outputIndex], batchSize * OUTPUT_SIZE * <span class="built_in">sizeof</span>(<span class="type">float</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create stream</span></span><br><span class="line">    cudaStream_t stream;</span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaStreamCreate</span>(&amp;stream));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DMA input batch data to device, infer on the batch asynchronously, and DMA output back to host</span></span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaMemcpyAsync</span>(buffers[inputIndex], input, batchSize * INPUT_H * INPUT_W * <span class="built_in">sizeof</span>(<span class="type">float</span>), cudaMemcpyHostToDevice, stream));</span><br><span class="line">    context.<span class="built_in">enqueue</span>(batchSize, buffers, stream, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaMemcpyAsync</span>(output, buffers[outputIndex], batchSize * OUTPUT_SIZE * <span class="built_in">sizeof</span>(<span class="type">float</span>), cudaMemcpyDeviceToHost, stream));</span><br><span class="line">    <span class="built_in">cudaStreamSynchronize</span>(stream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Release stream and buffers</span></span><br><span class="line">    <span class="built_in">cudaStreamDestroy</span>(stream);</span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaFree</span>(buffers[inputIndex]));</span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaFree</span>(buffers[outputIndex]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="save-and-load-engine"><a href="#save-and-load-engine" class="headerlink" title="save and load engine"></a>save and load engine</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SaveEngine</span><span class="params">(<span class="type">const</span> nvinfer1::IHostMemory&amp; trtModelStream, <span class="type">const</span> std::string&amp; engine_filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ofstream file;</span><br><span class="line">    file.<span class="built_in">open</span>(engine_filepath, std::ios::binary | std::ios::out);</span><br><span class="line">    <span class="keyword">if</span>(!file.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;read create engine file&quot;</span> &lt;&lt; engine_filepath &lt;&lt;<span class="string">&quot; failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    file.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span>*)trtModelStream.<span class="built_in">data</span>(), trtModelStream.<span class="built_in">size</span>());</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ICudaEngine* <span class="title">LoadEngine</span><span class="params">(IRuntime&amp; runtime, <span class="type">const</span> std::string&amp; engine_filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream file;</span><br><span class="line">    file.<span class="built_in">open</span>(engine_filepath, ios::binary | ios::in);</span><br><span class="line">    file.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::end); </span><br><span class="line">    <span class="type">int</span> length = file.<span class="built_in">tellg</span>();         </span><br><span class="line">    file.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::beg); </span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;<span class="type">char</span>&gt; <span class="title">data</span><span class="params">(<span class="keyword">new</span> <span class="type">char</span>[length], std::default_delete&lt;<span class="type">char</span>[]&gt;())</span></span>;</span><br><span class="line">    file.<span class="built_in">read</span>(data.<span class="built_in">get</span>(), length);</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// runtime-&gt;deserializeCudaEngine(trtModelStream-&gt;data(), trtModelStream-&gt;size(), nullptr);</span></span><br><span class="line">    ICudaEngine* engine = runtime.<span class="built_in">deserializeCudaEngine</span>(data.<span class="built_in">get</span>(), length, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">assert</span>(engine != <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">demo_save_caffe_to_trt</span><span class="params">(<span class="type">const</span> std::string&amp; engine_filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string deploy_filepath = mnist_data_dir + <span class="string">&quot;mnist.prototxt&quot;</span>;</span><br><span class="line">    std::string model_filepath = mnist_data_dir + <span class="string">&quot;mnist.caffemodel&quot;</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// Create TRT model from caffe model and serialize it to a stream</span></span><br><span class="line">    IHostMemory* trtModelStream&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="built_in">caffeToTRTModel</span>(deploy_filepath, model_filepath, std::vector&lt;std::string&gt;&#123;OUTPUT_BLOB_NAME&#125;, <span class="number">1</span>, trtModelStream);</span><br><span class="line">    <span class="built_in">assert</span>(trtModelStream != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SaveEngine</span>(*trtModelStream, engine_filepath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// destroy stream</span></span><br><span class="line">    trtModelStream-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">demo_save_onnx_to_trt</span><span class="params">(<span class="type">const</span> std::string&amp; engine_filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string onnx_filepath = mnist_data_dir + <span class="string">&quot;mnist.onnx&quot;</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// Create TRT model from caffe model and serialize it to a stream</span></span><br><span class="line">    IHostMemory* trtModelStream&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="built_in">onnxToTRTModel</span>(onnx_filepath, <span class="number">1</span>, trtModelStream);</span><br><span class="line">    <span class="built_in">assert</span>(trtModelStream != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SaveEngine</span>(*trtModelStream, engine_filepath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// destroy stream</span></span><br><span class="line">    trtModelStream-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mnist_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> use_caffe = <span class="literal">false</span>; </span><br><span class="line">    std::string engine_filepath;</span><br><span class="line">    <span class="keyword">if</span> (use_caffe)&#123;</span><br><span class="line">        engine_filepath = <span class="string">&quot;cfg/mnist/caffe_minist_fp32.trt&quot;</span>;</span><br><span class="line">        <span class="built_in">demo_save_caffe_to_trt</span>(engine_filepath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        engine_filepath = <span class="string">&quot;cfg/mnist/onnx_minist_fp32.trt&quot;</span>;</span><br><span class="line">        <span class="built_in">demo_save_onnx_to_trt</span>(engine_filepath);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;[API] Save engine to &quot;</span>&lt;&lt; engine_filepath &lt;&lt;std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> num = <span class="number">6</span>;</span><br><span class="line">    std::string digit_filepath = mnist_data_dir + std::<span class="built_in">to_string</span>(num) + <span class="string">&quot;.pgm&quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Read a digit file</span></span><br><span class="line">    <span class="type">uint8_t</span> fileData[INPUT_H * INPUT_W];</span><br><span class="line">    <span class="built_in">readPGMFile</span>(digit_filepath, fileData);</span><br><span class="line">    <span class="type">float</span> data[INPUT_H * INPUT_W];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (use_caffe)&#123;</span><br><span class="line"></span><br><span class="line">        std::string mean_filepath = mnist_data_dir + <span class="string">&quot;mnist_mean.binaryproto&quot;</span>;</span><br><span class="line">        <span class="comment">// Parse mean file</span></span><br><span class="line">        ICaffeParser* parser = <span class="built_in">createCaffeParser</span>();</span><br><span class="line">        IBinaryProtoBlob* meanBlob = parser-&gt;<span class="built_in">parseBinaryProto</span>(mean_filepath.<span class="built_in">c_str</span>());</span><br><span class="line">        parser-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subtract mean from image</span></span><br><span class="line">        <span class="type">const</span> <span class="type">float</span>* meanData = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">float</span>*&gt;(meanBlob-&gt;<span class="built_in">getData</span>()); <span class="comment">// size 786</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; INPUT_H * INPUT_W; i++)</span><br><span class="line">            data[i] = <span class="built_in">float</span>(fileData[i]) - meanData[i];</span><br><span class="line">        </span><br><span class="line">        meanBlob-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; INPUT_H * INPUT_W; i++)</span><br><span class="line">            data[i] = <span class="number">1.0</span> - <span class="built_in">float</span>(fileData[i]/<span class="number">255.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deserialize engine we serialized earlier</span></span><br><span class="line">    IRuntime* runtime = <span class="built_in">createInferRuntime</span>(gLogger);</span><br><span class="line">    <span class="built_in">assert</span>(runtime != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;[API] Load engine from &quot;</span>&lt;&lt; engine_filepath &lt;&lt;std::endl;</span><br><span class="line">    ICudaEngine* engine = <span class="built_in">LoadEngine</span>(*runtime, engine_filepath);</span><br><span class="line">    <span class="built_in">assert</span>(engine != <span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    IExecutionContext* context = engine-&gt;<span class="built_in">createExecutionContext</span>();</span><br><span class="line">    <span class="built_in">assert</span>(context != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run inference on input data</span></span><br><span class="line">    <span class="type">float</span> prob[OUTPUT_SIZE];</span><br><span class="line">    <span class="built_in">doInference</span>(*context, data, prob, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy the engine</span></span><br><span class="line">    context-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    engine-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    runtime-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print histogram of the output distribution</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nOutput:\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for onnx,we get z as output, we need to use softmax to get probs</span></span><br><span class="line">    <span class="keyword">if</span> ( !use_caffe)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Calculate Softmax</span></span><br><span class="line">        <span class="type">float</span> sum&#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            prob[i] = <span class="built_in">exp</span>(prob[i]);</span><br><span class="line">            sum += prob[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            prob[i] /= sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find max probs</span></span><br><span class="line">    <span class="type">float</span> val&#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line">    <span class="type">int</span> idx&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        val = std::<span class="built_in">max</span>(val, prob[i]);</span><br><span class="line">        <span class="keyword">if</span> (val == prob[i]) &#123;</span><br><span class="line">            idx = i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; Prob &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;  &quot;</span>&lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; prob[i];</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; std::<span class="built_in">string</span>(<span class="built_in">int</span>(std::<span class="built_in">floor</span>(prob[i] * <span class="number">10</span> + <span class="number">0.5f</span>)), <span class="string">&#x27;*&#x27;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (idx == num &amp;&amp; val &gt; <span class="number">0.9f</span>) ? EXIT_SUCCESS : EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">mnist_demo</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="results"><a href="#results" class="headerlink" title="results"></a>results</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/sample_mnist </span><br><span class="line">[API] Save engine to cfg/mnist/onnx_minist_fp32.trt</span><br><span class="line">[API] Load engine from cfg/mnist/onnx_minist_fp32.trt</span><br><span class="line">Bindings after deserializing:</span><br><span class="line">Binding 0 (Input3): Input.</span><br><span class="line">Binding 1 (Plus214_Output_0): Output.</span><br><span class="line">inputIndex = 0</span><br><span class="line">outputIndex = 1</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line"> Prob 0  0.00000: </span><br><span class="line"> Prob 1  0.00001: </span><br><span class="line"> Prob 2  0.00002: </span><br><span class="line"> Prob 3  0.00003: </span><br><span class="line"> Prob 4  0.00004: </span><br><span class="line"> Prob 5  0.00005: </span><br><span class="line"> Prob 6  1.00006: **********</span><br><span class="line"> Prob 7  0.00007: </span><br><span class="line"> Prob 8  0.00008: </span><br><span class="line"> Prob 9  0.00009: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-api/">tensorrt-api</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190422 created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>mnist</tag>
        <tag>tensorrt</tag>
        <tag>pytorch</tag>
        <tag>onnx</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp ref</title>
    <url>//blog/cpp-ref/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="sizeof-array"><a href="#sizeof-array" class="headerlink" title="sizeof(array)"></a>sizeof(array)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">print_size1</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// int add(int*, int)</span></span><br><span class="line">	std::cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; std::endl; </span><br><span class="line">	<span class="comment">// we get sizeof(int*)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">print_size2</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// int add(int*, int)</span></span><br><span class="line">	std::cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; std::endl;</span><br><span class="line">	<span class="comment">// we get sizeof(int*)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_ELEMENTS(array) (sizeof(array)/sizeof((array)[0])) </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">N_ELEMENTS</span>(a); </span><br><span class="line">	std::cout&lt;&lt;<span class="string">&quot;num  = &quot;</span>&lt;&lt; n &lt;&lt; std::endl; <span class="comment">// 5</span></span><br><span class="line">	std::cout&lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; std::endl; <span class="comment">// int size</span></span><br><span class="line">	std::cout&lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>*) &lt;&lt; std::endl; <span class="comment">// pointer size</span></span><br><span class="line">	std::cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; std::endl; <span class="comment">// 20</span></span><br><span class="line">	<span class="built_in">print_size1</span>(a, <span class="number">5</span>);</span><br><span class="line">	<span class="built_in">print_size2</span>(a, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>An array-type is implicitly converted into pointer type when you pass it in to a function.<br>int a[]作为函数参数，隐式的转换为int *a. </p>
</blockquote>
<p>编译会产生warning.</p>
<pre><code>warning: ‘sizeof’ on array function parameter ‘a’ will return size of ‘int*’ [-Wsizeof-array-argument]
  std::cout&lt;&lt; sizeof(a) &lt;&lt; std::endl; // pointer size
</code></pre>
<h3 id="char-string"><a href="#char-string" class="headerlink" title="char* string"></a>char* string</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_str1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</span></span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;Hello&quot;</span>;  <span class="comment">//Warning</span></span><br><span class="line">  </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str1 = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// No warning </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// trying to modify const string literal </span></span><br><span class="line">    <span class="comment">// gives Runtime error  </span></span><br><span class="line">	<span class="comment">// segmentation fault (core dumped)</span></span><br><span class="line">    <span class="comment">//str[1] = &#x27;o&#x27;; </span></span><br><span class="line">  </span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello常量字符串，存放在静态数据区; 由于字符串常量无需改动，放在静态内存区会提高效率.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_str2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> str1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">char</span> str2[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> str3[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> str4[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *str5 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *str6 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	cout &lt;&lt; ( str1 == str2 ) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line">	cout &lt;&lt; ( str3 == str4 ) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line">	cout &lt;&lt; ( str5 == str6 ) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	str1[<span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>; <span class="comment">// OK </span></span><br><span class="line">	<span class="comment">//str3[1] = &#x27;B&#x27;; // Compiler ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">str1,str2,str3,str4是数组变量。它们有各自的内存空间；</span></span><br><span class="line"><span class="comment">而str5,str6是指针，它们指向同样的常量字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">return_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">const</span> <span class="type">char</span> *p=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> 	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_str3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">const</span> <span class="type">char</span> *str=<span class="literal">NULL</span>; </span><br><span class="line"> 	str= <span class="built_in">return_str</span>();</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">// abc</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于&quot;abc&quot;是一个字符串常量，存放在静态数据区。把该字符串常量存放的静态数据区的首地址赋值给了指针。</span></span><br><span class="line"><span class="comment">所以return_str函数退出时，该字符串常量所在内存不会被回收。故可以通过指针顺利无误的訪问。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">return_str2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">char</span> p[] =<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> 	<span class="keyword">return</span> p; <span class="comment">// warning: address of local variable ‘p’ returned [-Wreturn-local-addr]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_str4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">char</span> *str=<span class="literal">NULL</span>; </span><br><span class="line"> 	str= <span class="built_in">return_str2</span>();</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">// null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;abc&quot;是一个字符串常量，存放在静态数据区。</span></span><br><span class="line"><span class="comment">可是把一个字符串常量赋值给了一个局部变量(char []型数组)，该局部变量存放在栈中，该数组空间中也存储&quot;abc&quot;的一份拷贝。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">也就是说`char p[]=&quot;abc&quot;;`这条语句让&quot;abc&quot;这个字符串在内存中有两份拷贝，一份在动态分配的栈中，还有一份在静态存储区。</span></span><br><span class="line"><span class="comment">这是与前者return_str1最本质的差别，当return_str2函数退出时，栈要清空，局部变量的内存也被清空了。</span></span><br><span class="line"><span class="comment">所以这时的函数返回的是一个已被释放的内存地址。所以打印出来的是null。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">return_str3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">static</span> <span class="type">char</span> p[]=<span class="string">&quot;abc&quot;</span>; <span class="comment">//p存放在静态存储区，内容为abc</span></span><br><span class="line"> 	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_str5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	<span class="type">char</span> *str=<span class="literal">NULL</span>; </span><br><span class="line"> 	str= <span class="built_in">return_str3</span>();</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">// abc</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果函数的返回值非要是一个局部变量的地址，那么该局部变量一定要申明为static类型。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.geeksforgeeks.org/char-vs-stdstring-vs-char-c/">char*-vs-stdstring</a><br><a href="https://www.cnblogs.com/gavanwanggw/p/7246880.html">const string</a></p>
<h3 id="NULL-vs-nullptr"><a href="#NULL-vs-nullptr" class="headerlink" title="NULL vs nullptr"></a>NULL vs nullptr</h3><p><a href="https://www.geeksforgeeks.org/understanding-nullptr-c/">nullptr</a><br>NULL  (void *)0 </p>
<ul>
<li>convert to integer</li>
<li>pointer</li>
</ul>
<p>nullptr keyword</p>
<ul>
<li>pointer </li>
<li>CAN NOT convert to integer</li>
<li>nullptr is convertible to bool.</li>
</ul>
<h3 id="const-vs-non-const"><a href="#const-vs-non-const" class="headerlink" title="const vs non-const"></a>const vs non-const</h3><blockquote>
<p>Use const whenever possible.</p>
</blockquote>
<blockquote>
<p>将某些东西声明为const可以帮助编译器侦测出错误的用法。const可以被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。<br>当const和non-const成员函数有实质等价的实现时，令non-const版本去调用const版本可以避免代码重复。反之则不可。</p>
</blockquote>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextBlock</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line">    <span class="comment">//const：和原先一样</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[] (std::<span class="type">size_t</span> position) <span class="type">const</span> </span><br><span class="line">    &#123; </span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> text[position]; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//non-const：发生区别，直接调用了const op[]</span></span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[] (std::<span class="type">size_t</span> position)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="comment">//直接return</span></span><br><span class="line">            <span class="built_in">const_cast</span>&lt;<span class="type">char</span>&amp;&gt;(  <span class="comment">//(3)将op[]返回值的const移除</span></span><br><span class="line">                <span class="built_in">static_cast</span>&lt;<span class="type">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)    <span class="comment">//(1)为*this加上const</span></span><br><span class="line">                    [position]    <span class="comment">//(2)调用const op[]</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>两次转型:<br>第一次，用来为<em>this添加 const，将</em>this从其原始类型TextBlock&amp; 转换为const TextBlock&amp;，使得接下来调用operator[]是可以条用const的版本，使用<code>static_cast</code>。<br>第二次，则是从const operator[]的返回值中移除const，利用<code>const_cast</code>来完成。</p>
</blockquote>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul>
<li>static: internal linkage</li>
<li>extern: external linkage</li>
</ul>
<h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><p><a href="https://www.geeksforgeeks.org/understanding-extern-keyword-in-c/">extern</a></p>
<blockquote>
<p>extern is present by default with C functions.<br>Since the declaration can be done any number of times and definition can be done only once</p>
</blockquote>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p><a href="https://www.geeksforgeeks.org/understanding-volatile-qualifier-c-set-1-introduction/">volatile</a><br><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/06/24/1764231.html">volatile cnblogs</a></p>
<blockquote>
<p>volatile 异变的，告诉compiler这个值可能会在当前线程外部被改变，因此不要进行优化，每次都从ram地址读取，而不要从register读取缓存的副本。</p>
</blockquote>
<h3 id="Internal-Linkage-and-External-Linkage-in-C"><a href="#Internal-Linkage-and-External-Linkage-in-C" class="headerlink" title="Internal Linkage and External Linkage in C"></a>Internal Linkage and External Linkage in C</h3><p><a href="https://www.geeksforgeeks.org/internal-linkage-external-linkage-c/">internal linkage and external linkage</a><br><a href="https://stackoverflow.com/questions/1358400/what-is-external-linkage-and-internal-linkage">what-is-external-linkage-and-internal-linkage</a></p>
<blockquote>
<p>scope is a property handled by compiler, whereas linkage is a property handled by linker.<br>external linkage means the symbol (function or global variable) is accessible throughout your program and internal linkage means that it’s only accessible in one translation unit.<br>You can explicitly control the linkage of a symbol by using the extern and static keywords. If the linkage isn’t specified then the default linkage is extern for non-const symbols and static (internal) for const symbols.<br>The keyword static plays a double role. (1) When used in the definitions of global variables, it specifies internal linkage. (2) When used in the definitions of the local variables, it specifies that the lifetime of the variable is going to be the duration of the program instead of being the duration of the function.</p>
</blockquote>
<h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h3><p><a href="https://www.geeksforgeeks.org/understanding-constexper-specifier-in-c/">constexper</a></p>
<blockquote>
<p>constexpr is a feature added in C++ 11. The main idea is performance improvement of programs by doing computations at compile time rather than run time.</p>
</blockquote>
<h4 id="constexpr-vs-inline-functions"><a href="#constexpr-vs-inline-functions" class="headerlink" title="constexpr vs inline functions"></a>constexpr vs inline functions</h4><blockquote>
<p>Both are for performance improvements, inline functions are request to compiler to expand at compile time and save time of function call overheads. In inline functions, expressions are always evaluated at run time. constexpr is different, here expressions are evaluated at compile time.</p>
</blockquote>
<h3 id="vtable-and-vptr"><a href="#vtable-and-vptr" class="headerlink" title="vtable and vptr"></a>vtable and vptr</h3><p><a href="https://www.geeksforgeeks.org/virtual-functions-and-runtime-polymorphism-in-c-set-1-introduction/">virtual-functions-and-runtime-polymorphism</a><br><a href="https://practice.geeksforgeeks.org/problems/what-are-vtable-and-vptr">what-are-vtable-and-vptr</a><br><a href="https://www.geeksforgeeks.org/calling-virtual-methods-in-constructordestructor-in-cpp/">calling-virtual-methods-in-constructordestructor-in-cpp</a></p>
<blockquote>
<p>It is highly recommended to avoid calling virtual methods from constructor&#x2F;destructor.</p>
</blockquote>
<p><a href="https://www.cnblogs.com/hellogiser/p/virtual-function-table.html">virtual-function-table</a><br><a href="https://www.cnblogs.com/hellogiser/p/class-memory-layout.html">class-memory-layout</a></p>
<h3 id="Virtual-Constructor"><a href="#Virtual-Constructor" class="headerlink" title="Virtual Constructor"></a>Virtual Constructor</h3><p><a href="https://www.geeksforgeeks.org/advanced-c-virtual-constructor/">Virtual Constructor</a></p>
<blockquote>
<p>Virtual Constructor, NO<br>Can we make a class constructor virtual in C++ to create polymorphic objects? No. C++ being static typed (the purpose of RTTI is different) language, it is meaningless to the C++ compiler to create an object polymorphically. The compiler must be aware of the class type to create the object. In other words, what type of object to be created is a compile time decision from C++ compiler perspective. If we make constructor virtual, compiler flags an error.</p>
</blockquote>
<h3 id="Virtual-Destructor"><a href="#Virtual-Destructor" class="headerlink" title="Virtual Destructor"></a>Virtual Destructor</h3><p><a href="https://www.geeksforgeeks.org/virtual-destructor/">Virtual Destructor</a></p>
<blockquote>
<p>Deleting a derived class object using a pointer to a base class that has a non-virtual destructor results in undefined behavior.</p>
</blockquote>
<h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><ul>
<li><p><a href="https://www.geeksforgeeks.org/order-constructor-destructor-call-c/">Order of Constructor&#x2F; Destructor Call in C++</a></p>
</li>
<li><p><a href="https://www.geeksforgeeks.org/make-class-whose-objects-can-dynamically-allocated/">How to make a C++ class whose objects can only be dynamically allocated?</a></p>
</li>
<li><p><a href="https://www.geeksforgeeks.org/possible-call-constructor-destructor-explicitly/">Is it possible to call constructor and destructor explicitly?</a></p>
<blockquote>
<p>Yes, it is possible to call special member functions explicitly by programmer.<br>When the constructor is called explicitly the compiler creates a nameless temporary object and it is immediately destroyed.<br>we should never call destructor explicitly on local (automatic) object, because really bad results can be acquired by doing that.<br>Local objects are automatically destroyed by compiler when they go out of scope and this is the guarantee of C++ language.</p>
</blockquote>
</li>
<li><p><a href="https://www.geeksforgeeks.org/output-of-c-program-set-18-3/">Print 1 to 100 in C++, without loop and recursion</a></p>
<blockquote>
<p> Template Metaprogramming</p>
</blockquote>
</li>
</ul>
<p>thread </p>
<ul>
<li>pass by value by default</li>
<li>pass by ref: <code>std::ref(variable)</code></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tutorialspoint.com/cplusplus/cpp_overloading.htm">tutorialspoint full (easy)</a></li>
<li><a href="https://www.geeksforgeeks.org/c-plus-plus/">geeksforgeeks full (medium)</a></li>
<li><a href="https://www.geeksforgeeks.org/multithreading-in-cpp/">geeksforgeeks multithreading</a></li>
<li><a href="https://en.cppreference.com/w/cpp/container/unordered_map">cppreference</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190429: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>stream live video over network with opencv and imagezmq </title>
    <url>//blog/live-video-streaming-over-network-with-opencv-and-imagezmq/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="imagezmq"><a href="#imagezmq" class="headerlink" title="imagezmq"></a>imagezmq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeffbass/imagezmq.git</span><br></pre></td></tr></table></figure>

<p>imagezmq has been tested with:</p>
<ol>
<li>Python 3.5 and 3.6</li>
<li>OpenCV 3.3</li>
<li>Raspian Stretch and Raspian Jessie</li>
<li>PyZMQ 16.0</li>
<li>imutils 0.4.3 (used get to images from PiCamera)</li>
</ol>
<h3 id="install-tools"><a href="#install-tools" class="headerlink" title="install tools"></a>install tools</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3cv3  <span class="comment"># use your virtual environment name</span></span><br><span class="line">pip install pyzmq</span><br><span class="line">pip install imutils</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># terminal 1</span></span><br><span class="line"><span class="built_in">cd</span> imagezmq/tests</span><br><span class="line">python test_1_receive_images.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># terminal 2</span></span><br><span class="line"><span class="built_in">cd</span> imagezmq/tests</span><br><span class="line">python test_1_send_images.py</span><br></pre></td></tr></table></figure>

<p>received image snapshot </p>
<p><img src="https://kezunlin.me/images/posts/1864218-20191126082032239-1816648652.png" alt="receive image"></p>
<p><img src="https://kezunlin.me/images/posts/1864218-20191126082034446-206139701.png" alt="receive image 2"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.pyimagesearch.com/2019/04/15/live-video-streaming-over-network-with-opencv-and-imagezmq/">live-video-streaming-over-network-with-opencv-and-imagezmq</a></li>
<li><a href="https://github.com/jeffbass/imagezmq">imagezmq</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190506: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>imagezmq</tag>
      </tags>
  </entry>
  <entry>
    <title>pratical machine learning with python</title>
    <url>//blog/ml-ref/</url>
    <content><![CDATA[<h2 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2><h3 id="determinant"><a href="#determinant" class="headerlink" title="determinant"></a>determinant</h3><p>basic </p>
<ul>
<li><a href="https://www.jianshu.com/p/51ec2d87b5f3">matrix determinant</a></li>
<li><a href="https://www.jianshu.com/p/f84157116683">minor&#x2F;cofactor&#x2F;adjugate&#x2F;inverse matrix</a></li>
</ul>
<p><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D343/sign=03ae18e90133874498c52978620ed937/30adcbef76094b3659255d54aecc7cd98c109dd0.jpg" alt="determinant formula"></p>
<p>determinant properties</p>
<ul>
<li><a href="https://www.cnblogs.com/seniusen/p/10023231.html">determinant properties</a></li>
</ul>
<p>online calculator </p>
<ul>
<li><a href="https://ncalculators.com/matrix/matrix-determinant-calculator.htm">determinant</a></li>
<li><a href="https://ncalculators.com/matrix/2x2-inverse-matrix-calculator.htm">inverse</a></li>
</ul>
<h3 id="inverse-adjoint-adjugate-matrix"><a href="#inverse-adjoint-adjugate-matrix" class="headerlink" title="inverse&#x2F;adjoint(adjugate) matrix"></a>inverse&#x2F;adjoint(adjugate) matrix</h3><p>Only non-singular matrices have inverses. (det(A) !&#x3D; 0)</p>
<ul>
<li>minor matrix</li>
<li>cofactor matrix</li>
<li>adjoint&#x2F;adjugate matrix</li>
<li>inverse matrix</li>
<li>conjugate matrix</li>
</ul>
<h3 id="eigenvalue-eigenvector"><a href="#eigenvalue-eigenvector" class="headerlink" title="eigenvalue&#x2F;eigenvector"></a>eigenvalue&#x2F;eigenvector</h3><p>An*n<br>graph demo<br><a href="https://blog.csdn.net/alvinlyb/article/details/78892486">eigenvector</a></p>
<p><a href="https://www.wikihow.com/Find-Eigenvalues-and-Eigenvectors">eigenvector steps</a></p>
<h3 id="svd"><a href="#svd" class="headerlink" title="svd"></a>svd</h3><p>singular value decomposition<br>Am*n (m!&#x3D;n)<br><a href="https://www.cnblogs.com/pinard/p/6251584.html">svd</a></p>
<h2 id="Probability-Theory"><a href="#Probability-Theory" class="headerlink" title="Probability Theory"></a>Probability Theory</h2><p>random variable: discrete&#x2F;continuous</p>
<ul>
<li>probability mass function: pmf (possion, binomial distribution ) for <strong>discrete random variable</strong></li>
<li>probability density function: pdf (normal,uniform) for <strong>contiunous random variable</strong></li>
<li>cumulative distribution function: cdf  for <strong>discrete+contiunous random variable</strong></li>
</ul>
<p>see <a href="http://blog.dyingbleed.com/pmf-cdf-pdf/">pmf-cdf-pdf</a><br><a href="https://stats.stackexchange.com/questions/242465/distribution-function-terminology-pdf-cdf-pmf-etc">distribution-function-terminology-pdf-cdf-pmf-etc</a></p>
<blockquote>
<p>binomial: n times Bernoulli trial, P(x&#x3D;k)&#x3D;C(n,k)* p^k * (1-p)^(n-k)</p>
</blockquote>
<ul>
<li>marginal probability</li>
<li>joint probability</li>
<li>conditional probability</li>
<li>bayes theorem</li>
</ul>
<p>see <a href="https://sites.nicholas.duke.edu/statsreview/jmc/">here</a></p>
<blockquote>
<p>Marginal probability: the probability of an event occurring (p(A)), it may be thought of as an unconditional probability.  It is not conditioned on another event.  Example:  the probability that a card drawn is red (p(red) &#x3D; 0.5).  Another example:  the probability that a card drawn is a 4  (p(four)&#x3D;1&#x2F;13).</p>
</blockquote>
<blockquote>
<p>Joint probability:  p(A and B).  The probability of event A and event B occurring.  It is the probability of the intersection of two or more events.  The probability of the intersection of A and B may be written p(A ∩ B). Example:  the probability that a card is a four and red &#x3D;p(four and red) &#x3D; 2&#x2F;52&#x3D;1&#x2F;26.  (There are two red fours in a deck of 52, the 4 of hearts and the 4 of diamonds).</p>
</blockquote>
<blockquote>
<p>Conditional probability:  p(A|B) is the probability of event A occurring, given that event B occurs. Example:  given that you drew a red card, what’s the probability that it’s a four (p(four|red))&#x3D;2&#x2F;26&#x3D;1&#x2F;13.  So out of the 26 red cards (given a red card), there are two fours so 2&#x2F;26&#x3D;1&#x2F;13.</p>
</blockquote>
<blockquote>
<p>bayes theorem:  p(cancer)&#x3D;0.01, p(positive test|cancer)&#x3D;0.9, p(positive test|no cancer)&#x3D;0.08<br>p(cancer|positive test)?</p>
</blockquote>
<p><a href="http://tinyheero.github.io/2016/03/20/basic-prob.html">basic-prob</a></p>
<h2 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h2><p>2 types of statistics</p>
<ul>
<li>descriptive statistics 描述性统计值</li>
<li>inferential statistics　推理性统计值</li>
</ul>
<h3 id="descriptive-statistics"><a href="#descriptive-statistics" class="headerlink" title="descriptive statistics"></a>descriptive statistics</h3><h4 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h4><ul>
<li>n, sum, min,max, range &#x3D;max-min,</li>
<li>mean,median,mode</li>
<li>variance,standard deviation </li>
<li>skewness,kurtosis<blockquote>
<p>from <a href="https://www.purplemath.com/modules/meanmode.htm">mean,median,mode</a></p>
</blockquote>
</li>
</ul>
<p>mean&#x2F;median&#x2F;mode</p>
<ul>
<li>mean: regular meaning of “average”</li>
<li>median: middle value</li>
<li>mode: most often</li>
</ul>
<p>2 types of data set: <a href="https://stattrek.com/sampling/populations-and-samples.aspx">here</a></p>
<ul>
<li>population: u,sigma^2, sigma —&gt; parameter</li>
<li>sample:  x, s^2, s —&gt;  statistic</li>
</ul>
<blockquote>
<p>population是总体,总体的数据是不变的,u就代表总体真实的均值；<br>sample是样本,我们总体的数据很难得到,必须借助样本猜测总体的情况,但是每次采样的时候会有不同,因此x拔表示一次采样的均值；<br>不同采样的均值x往往不同,但是总体均值u一定是不变的。</p>
</blockquote>
<p>population<br><img src="https://kezunlin.me/images/posts/635233-20190522085451958-700851246.png" alt="population"></p>
<p>sample<br><img src="https://kezunlin.me/images/posts/635233-20190522085910140-397214367.png" alt="sample"></p>
<blockquote>
<p>see <a href="https://cn.bing.com/search?q=mean%20median%20&qs=n&form=QBRE&sp=-1&pq=mean%20median%20&sc=8-12&sk=&cvid=4161BAB55A18491594A005523AEDF298">example</a></p>
</blockquote>
<h4 id="skewness-vs-kurtosis"><a href="#skewness-vs-kurtosis" class="headerlink" title="skewness vs kurtosis"></a>skewness vs kurtosis</h4><ul>
<li>skewness: 偏度  the degree of symmetry</li>
<li>kurtosis: 峰度　the degree of peakedness&#x2F;flatness</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190522094931003-1160367822.jpg" alt="image"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190522095110460-710218536.jpg" alt="image"></p>
<p>formula see <a href="https://itl.nist.gov/div898/handbook/eda/section3/eda35b.htm">skewness kurtosis formula</a></p>
<h3 id="inferential-statistics"><a href="#inferential-statistics" class="headerlink" title="inferential statistics"></a>inferential statistics</h3><p><img src="https://kezunlin.me/images/posts/635233-20190619144201298-517495811.jpg" alt="inferential statistics"><br><img src="https://kezunlin.me/images/posts/635233-20190619144446758-1310784151.jpg" alt="inferential statistics"><br>Each hypothesis: null hypothesis +  an alternative hypothesis.  </p>
<ul>
<li>H0: u1&#x3D;u2&#x3D;u3&#x3D;…&#x3D;un.  it indicates that the group means for the various groups are NOT very different from each other based on statistical significance levels.</li>
<li>Ha: there exists at least two group means that are statistically significantly different from each other.</li>
</ul>
<p>significance tests　显著性检验</p>
<ul>
<li>H0: there is NO real difference</li>
<li>Ha: there is a difference<blockquote>
<p>Reject H0 at 5% significant level if p-value&lt;5%, statistical significant<br>Reject H0 at 1% significant level if p-value&lt;1%, highly significant<br>one-tailed tests vs two-tailed tests</p>
</blockquote>
</li>
</ul>
<p>one-way ANOVA test: </p>
<ul>
<li>if p-value&lt;&#x3D;5%, the result is statistically significant different, we reject the null hypothesis in favor of the alternative hypothesis. (Ha was correct)</li>
<li>Otherwise, if the results is not statistically significant, we conclude that our null hypothesis was correct. (H0 was correct)</li>
</ul>
<p>demo<br><img src="https://kezunlin.me/images/posts/635233-20190619143945820-1738438241.png" alt="anova test"></p>
<blockquote>
<p>F-stat&gt;4.737 or p-value&lt;0.05, then reject H0</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20190619144127155-2135913752.png" alt="boxplot for anova test"></p>
<p>parametric tests vs nonparametric tests 参数检验　vs 非参数检验</p>
<h2 id="Data-Mining"><a href="#Data-Mining" class="headerlink" title="Data Mining"></a>Data Mining</h2><ul>
<li>KDD: knowledge discovery of dataset </li>
<li>CRISP-DM: cross-industry standard process for data mining 跨行业数据挖掘标准流程</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190522101222659-268099901.png" alt="CRISP-DM_Process_Diagram.png"></p>
<h2 id="Machine-Learning-methods"><a href="#Machine-Learning-methods" class="headerlink" title="Machine Learning methods"></a>Machine Learning methods</h2><p>with&#x2F;without labels</p>
<ul>
<li>supervised learning: <ul>
<li>classification</li>
<li>regression</li>
</ul>
</li>
<li>unsupervised learning<ul>
<li>clustering</li>
<li>dimensionality reduction</li>
<li>anomaly detection</li>
<li>assiciation rule-mining&#x2F;market basket analysis(购物篮分析)</li>
</ul>
</li>
<li>semi-supervised learning</li>
<li>reinforcement learning</li>
</ul>
<p>online&#x2F;offline</p>
<ul>
<li>batch learning&#x2F;offline learning</li>
<li>online learning</li>
</ul>
<p>instance&#x2F;model</p>
<ul>
<li>instance based learning</li>
<li>model based learning</li>
</ul>
<h2 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h2><h3 id="statistics"><a href="#statistics" class="headerlink" title="statistics"></a>statistics</h3><ul>
<li>descriptive statistics</li>
<li>inferential statistics</li>
</ul>
<h3 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h3><p>3 types</p>
<ul>
<li>univariate analysis: n&#x3D;1</li>
<li>bivariate analysis: n&#x3D;2</li>
<li>multivariate analysis: n&gt;&#x3D;3</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190619152011901-168373230.jpg" alt="3 types of analysis"></p>
<ul>
<li>use histogram to visualize data</li>
<li>correlation matrix&#x2F;heatmap</li>
</ul>
<h2 id="Model-Evaluation"><a href="#Model-Evaluation" class="headerlink" title="Model Evaluation"></a>Model Evaluation</h2><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><p>confusion matrix</p>
<ul>
<li>accuracy</li>
<li>precision</li>
<li>recall</li>
<li>F1-score: harmonic mean 调和平均值</li>
</ul>
<p>value range (0-1), the bigger, the better.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20190618144928732-1997507318.png" alt="confusion matrix"></p>
<p>precision vs recall curve<br><img src="https://kezunlin.me/images/posts/635233-20190618151318062-715784222.png" alt="precision vs recall"></p>
<p>another curve</p>
<ul>
<li>roc: receiver operating characteristic 接受者操作特征.  TPR vs FPR curve</li>
<li>auc: area under curve.  value range (0-1), the bigger, the better.</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618151018159-318786418.png" alt="roc basic"><br><img src="https://kezunlin.me/images/posts/635233-20190618150355651-1546386024.png" alt="roc"><br><img src="https://kezunlin.me/images/posts/635233-20190618150814474-536646125.jpg" alt="auc"><br><img src="https://kezunlin.me/images/posts/635233-20190618150657897-1643602084.png" alt="roc demo"></p>
<p>all in one<br><img src="https://kezunlin.me/images/posts/635233-20190618151558587-282770481.png" alt="roc, precision recall, f1-score"></p>
<p>multi-class classification for ROC</p>
<ul>
<li>micro-averaging: treat as binary </li>
<li>macro-averaging:  equal weight<br><img src="https://kezunlin.me/images/posts/635233-20190619175451921-1801584977.png" alt="roc for multi-class classification"></li>
</ul>
<h3 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h3><p>types</p>
<ul>
<li>partition&#x2F;centroid based clustering: k-means,k-medoids</li>
<li>hierachical clustering: AgglomerativeClustering, affinity propagation<ul>
<li>ward&#x2F;single linkage</li>
<li>averate linkage</li>
<li>complete linkage</li>
</ul>
</li>
<li>distribution based clustering: gaussian mixture models</li>
<li>densitity based clustering: DBSCAN, OPTICS</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618152757010-799129444.png" alt="clustering"><br><img src="https://kezunlin.me/images/posts/635233-20190618152840294-1313788780.png" alt="clustering"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190618154249813-1152275745.jpg" alt="partition based clustering"><br><img src="https://kezunlin.me/images/posts/635233-20190618154036170-139572525.jpg" alt="hierachical clustering dendrogram"><br><img src="https://kezunlin.me/images/posts/635233-20190618154158157-1063351244.png" alt="linkages"></p>
<h4 id="external-validation"><a href="#external-validation" class="headerlink" title="external validation"></a>external validation</h4><p>with labels</p>
<ul>
<li>homogeneity</li>
<li>completeness</li>
<li>v-measure: harmonic mean 调和平均值<br>value range (0-1), the bigger, the better.</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618152717377-1272500102.jpg" alt="homogeneity completeness"><br><img src="https://kezunlin.me/images/posts/635233-20190618153341598-798705751.jpg" alt="v-measure"></p>
<h4 id="internal-validation"><a href="#internal-validation" class="headerlink" title="internal validation"></a>internal validation</h4><p>no labels<br>2 most important traits:</p>
<ul>
<li>compact groups</li>
<li>well seperated groups</li>
</ul>
<p>metric</p>
<ul>
<li>silhouette coefficient: SC轮廓系数. value range (-1-1), the bigger, the better.</li>
<li>calinski-harabaz index: chi指数   value range &gt;0 , the bigger, the better.</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618154805753-557196140.jpg" alt="sc"><br><img src="https://kezunlin.me/images/posts/635233-20190618154934289-438670456.jpg" alt="sc"><br><img src="https://kezunlin.me/images/posts/635233-20190618155106519-791597666.png" alt="sc vs number of clusters"><br><img src="https://kezunlin.me/images/posts/635233-20190618155404644-386109044.png" alt="sc and chi"></p>
<h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h3><p>metric:</p>
<ul>
<li>mean squared error: MSE</li>
<li>root mean squared error: RMSE</li>
<li>coefficient of determination (R^2):判定系数</li>
<li>coefficient of correlation (r):相关系数  value range (-1,1)</li>
</ul>
<p>R2: value range (0,1), the bigger, the better.</p>
<blockquote>
<p>for simple linear regression, R^2 &#x3D; r^2</p>
</blockquote>
<p>formula:<br><img src="https://kezunlin.me/images/posts/635233-20190613100645927-2086416697.png" alt="r2 formula"></p>
<p>correlation coefficient<br><img src="https://kezunlin.me/images/posts/635233-20190613102402855-1112676399.png" alt="r demo"></p>
<p>r2 demo<br><img src="https://kezunlin.me/images/posts/635233-20190613102853720-421135885.jpg" alt="r2"><br><img src="https://kezunlin.me/images/posts/635233-20190613094519733-545867820.jpg" alt="r2 demo"></p>
<blockquote>
<p>images from bing search.</p>
</blockquote>
<h4 id="regression-analysis"><a href="#regression-analysis" class="headerlink" title="regression analysis"></a>regression analysis</h4><p>types</p>
<ul>
<li>simple linear regression</li>
<li>multiple linear regression</li>
<li>nonlinear regression</li>
</ul>
<p>assumptions</p>
<ul>
<li>training dataset(sample) is representative of the population being modeled</li>
<li>x1,x2,…,xn are linearly independent. no multicollinearity 非多重共线性 </li>
<li>homoscedasticity of error 同方差性:  residuals being random and no any patterns</li>
</ul>
<blockquote>
<p>multicollinearity 多重共线性:  correlation matrix<br>variance inflation factor (VIF)方差膨胀因子　VIFi &#x3D; 1&#x2F;(1-Ri^2). VIF越大，显示共线性越严重。经验判断方法表明：当0&lt;VIF&lt;10，不存在多重共线性；当10≤VIF&lt;100，存在较强的多重共线性；当VIF≥100，存在严重多重共线性。<br>homo-scedastic(同方差) vs hetero-scedastic (异方差性): residual plot<br>homogeneous vs heterogeneous 同质的vs异质的</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20190617144321205-573073220.png" alt="correlation matrix/heatmap"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190617145208765-175981783.jpg" alt="VIF"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190617113523952-599571664.png" alt="homoscedasticity"><br><img src="https://kezunlin.me/images/posts/635233-20190617113542212-995572923.png" alt="homoscedasticity"></p>
<p>evaluation analysis</p>
<ul>
<li>residual analysis</li>
<li>normality tests (Q-Q plot）正态分布检验</li>
<li>R^2</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190617145954684-427188783.png" alt="QQ-plot"></p>
<h5 id="linear-regression"><a href="#linear-regression" class="headerlink" title="linear regression"></a>linear regression</h5><blockquote>
<p>y &#x3D; kx + b, use OLS </p>
</blockquote>
<h5 id="decision-tree-based-regression"><a href="#decision-tree-based-regression" class="headerlink" title="decision tree based regression"></a>decision tree based regression</h5><p>linear vs non-linear regression:</p>
<ul>
<li>linear regression</li>
<li>decision tree based regression (non-linear)</li>
</ul>
<blockquote>
<p>decision tree can be used for both classification and regression. CART</p>
</blockquote>
<p>node splitting<br>for regression:</p>
<ul>
<li>MSE: mean squared error  </li>
<li>RMSE: root mean squared error  </li>
<li>MAE: mean absolute error </li>
<li>MAPE: mean absolute percentage error</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190617163953017-375911658.jpg" alt="regression"><br><img src="https://kezunlin.me/images/posts/635233-20190617164254843-277788876.jpg" alt="mse and mae"></p>
<p>for classification</p>
<ul>
<li>information gain(entropy): 信息增益(熵) </li>
<li>gini impurity&#x2F;index: GINI 基尼不纯度</li>
<li>misclassification error:</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190617165054902-66957836.png" alt="ig and gini"><br><img src="https://kezunlin.me/images/posts/635233-20190617165115901-1683267423.png" alt="bad vs good split"></p>
<p>stoppint criteria</p>
<ul>
<li>max depth</li>
<li>min samples to split internal nodes</li>
<li>max leaf nodes<blockquote>
<p>use GridSearch to search for optimal hyperparameters</p>
</blockquote>
</li>
</ul>
<p>decesion tree algorithms</p>
<ul>
<li>CART</li>
<li>ID3</li>
<li>C4.5</li>
</ul>
<h3 id="ensemble-learning"><a href="#ensemble-learning" class="headerlink" title="ensemble learning"></a>ensemble learning</h3><p>3 major families:</p>
<ul>
<li>bagging: boostrap aggregating, boostrap sampling(自助采样法) eg. RandomForest</li>
<li>boosting: eg. Gradient Boosting Machine(GBM), AdaBoost<ul>
<li>GBM variant: LightGBM, Extreme Gradient Boosting(XGBoost)</li>
</ul>
</li>
<li>stacking</li>
</ul>
<p>others</p>
<ul>
<li>binning</li>
<li>blending</li>
<li>averaging</li>
<li>voting</li>
</ul>
<blockquote>
<p>see <a href="https://www.kdnuggets.com/2017/11/difference-bagging-boosting.html">What is the difference between Bagging and Boosting?</a><br>see <a href="https://zhuanlan.zhihu.com/p/39920405">集成学习-Boosting,Bagging与Stacking</a></p>
</blockquote>
<p>boostrap aggregating&#x2F;bagging<br><img src="https://kezunlin.me/images/posts/635233-20190619170531866-2007371735.png" alt="boostrap aggregating/bagging"></p>
<p>boosting<br><img src="https://kezunlin.me/images/posts/635233-20190619172323472-1369002181.png" alt="boosting"><br><img src="https://kezunlin.me/images/posts/635233-20190619172620343-1105158442.jpg" alt="boosting"></p>
<p>model stacking<br><img src="https://kezunlin.me/images/posts/635233-20190617172129437-38352695.png" alt="stacking"><br><img src="https://kezunlin.me/images/posts/635233-20190617172758390-616098962.png" alt="stacking"></p>
<h2 id="Model-Tuning"><a href="#Model-Tuning" class="headerlink" title="Model Tuning"></a>Model Tuning</h2><h3 id="decision-trees"><a href="#decision-trees" class="headerlink" title="decision trees"></a>decision trees</h3><ul>
<li>information gain: IG 信息增益</li>
<li>gini impurity: GI 基尼不纯度</li>
</ul>
<h3 id="bias-variance-tradeoff"><a href="#bias-variance-tradeoff" class="headerlink" title="bias-variance tradeoff"></a>bias-variance tradeoff</h3><p>The main causes of error in learning are due to <strong>noise, bias and variance</strong>.</p>
<p>extreme cases of bias-variance</p>
<ul>
<li>underfitting: higt bias, low variance</li>
<li>overfitting: lower bias, high vairance</li>
</ul>
<p><a href="http://scott.fortmann-roe.com/docs/BiasVariance.html">bias-variance tradeoff</a></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190613163856662-2107028438.png" alt="bias-variance"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190613163654197-1290389410.png" alt="bias-variance model complexity"></p>
<p>see <a href="https://www.learnopencv.com/bias-variance-tradeoff-in-machine-learning/">learnopencv</a></p>
<h3 id="cross-validation"><a href="#cross-validation" class="headerlink" title="cross validation"></a>cross validation</h3><p>train&#x2F;validation&#x2F;test </p>
<p>cross validation strategies:</p>
<ul>
<li>leave one out CV: n-1 samples as train, 1 sample as validate</li>
<li>k-fold CV: split into k equal subsets. k-1 subsets as train, 1 subset as validate<blockquote>
<p>5-fold, 10-fold in pratice</p>
</blockquote>
</li>
</ul>
<h3 id="hyperparameter-tuning-strategies"><a href="#hyperparameter-tuning-strategies" class="headerlink" title="hyperparameter tuning strategies"></a>hyperparameter tuning strategies</h3><ul>
<li>grid search: manually specifying the grid,  parallelizable</li>
<li>randomized search: automatic</li>
</ul>
<h2 id="Model-Interpertation"><a href="#Model-Interpertation" class="headerlink" title="Model Interpertation"></a>Model Interpertation</h2><p>tools </p>
<ul>
<li><a href="https://github.com/marcotcr/lime">lime</a></li>
<li><a href="https://github.com/oracle/Skater">skater</a></li>
</ul>
<p>global vs local interpertation</p>
<ul>
<li>global interpertation: based on the whole dataset (feature_importance, partial_dependence plot)</li>
<li>local interpertation: based on a single prediction</li>
</ul>
<p>global interpertation<br><img src="https://kezunlin.me/images/posts/635233-20190620094807673-860707178.png" alt="feature_importance"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190620094700378-2134283575.png" alt="one-way partial_dependence plot"></p>
<p><img src="https://kezunlin.me/images/posts/635233-20190620094713232-826398055.png" alt="two-way partial_dependence plot"></p>
<p>local interpertation<br><img src="https://kezunlin.me/images/posts/635233-20190620095026602-495994008.png" alt="local interpertation"></p>
<p>model decision surface&#x2F; hypersurface<br><img src="https://kezunlin.me/images/posts/635233-20190619163426323-438972719.png" alt="model decision surface"></p>
<h2 id="Model-Deployment"><a href="#Model-Deployment" class="headerlink" title="Model Deployment"></a>Model Deployment</h2><ul>
<li>rest api </li>
<li>micro service</li>
<li>model deployment as a service, anything as a service(XAAS)</li>
</ul>
<h2 id="Real-world-case-studies"><a href="#Real-world-case-studies" class="headerlink" title="Real-world case studies"></a>Real-world case studies</h2><h3 id="customer-segmentation"><a href="#customer-segmentation" class="headerlink" title="customer segmentation"></a>customer segmentation</h3><p>clustering problem</p>
<p>factors</p>
<ul>
<li>geographic　地理因素</li>
<li>demographic 人口统计因素</li>
<li>psychographic 心理因素</li>
<li>behavioural 行为因素</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618093024515-262889608.jpg" alt="customer segmentation"></p>
<p>RFM Model for customer value</p>
<ul>
<li>recency</li>
<li>frequency</li>
<li>monetary value</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190618141557519-155852148.jpg" alt="RFM Model"></p>
<h3 id="association-rule-mining"><a href="#association-rule-mining" class="headerlink" title="association-rule mining"></a>association-rule mining</h3><p>assiciation rule-mining&#x2F;market basket analysis(购物篮分析)</p>
<p>basics</p>
<ul>
<li>association rule: {item1,item2,item3 —&gt; itemK}</li>
<li>itemset:  {milk,bread} {beer,diaper}</li>
<li>frequent itemset: {milk,bread}</li>
</ul>
<p>metrics</p>
<ul>
<li>support &#x3D; frq(X,Y)&#x2F;N</li>
<li>confidence &#x3D; support(X,Y)&#x2F;support(X) &#x3D; frq(X,Y)&#x2F;frq(X)</li>
<li>lift &#x3D; support(X,Y)&#x2F;(support(X)*support(Y)) &#x3D; N*frq(X,Y)&#x2F;(frq(X)*frq(Y))</li>
</ul>
<p>good rules: large confidence, large support, lift &gt;1</p>
<blockquote>
<p>lift(X-&gt;Y) &#x3D; 0　means X and Y not occur at the same time<br>lift(X-&gt;Y) &#x3D; 1　means X and Y are independent of each other.<br><img src="https://kezunlin.me/images/posts/635233-20190618165330230-815144975.jpg" alt="support"><br><img src="https://kezunlin.me/images/posts/635233-20190618170045470-955987317.png" alt="support"><br><img src="https://kezunlin.me/images/posts/635233-20190618170418412-1948436415.jpg" alt="demo">        </p>
</blockquote>
<p>algorithms</p>
<ul>
<li>apriori algorithm: generate all 2^k itemsets, TOO EXPENSIVE</li>
<li>FP growth: no need to generate all 2^k itemsets, use special structure FP-tree, divide-and-conquer stragety</li>
</ul>
<p>k unique products, then 2^k itemsets.</p>
<h3 id="recommender-system"><a href="#recommender-system" class="headerlink" title="recommender system"></a>recommender system</h3><p>recommender systems&#x2F; recommendation engines</p>
<h4 id="big-data-with-pandas"><a href="#big-data-with-pandas" class="headerlink" title="big data with pandas"></a>big data with pandas</h4><p>how to process big data with pandas ?</p>
<pre><code>import pandas as pd
for chunk in pd.read_csv(&lt;filepath&gt;, chunksize=&lt;your_chunksize_here&gt;)
    do_processing()
    train_algorithm()
</code></pre>
<blockquote>
<p>read by chunk<br>see <a href="https://datascience.stackexchange.com/questions/27767/opening-a-20gb-file-for-analysis-with-pandas">opening-a-20gb-file-for-analysis-with-pandas</a></p>
</blockquote>
<p>other tools</p>
<ul>
<li><a href="https://docs.dask.org/en/latest/">dask</a></li>
<li><a href="https://ml.dask.org/">dask-ml</a></li>
</ul>
<p>other refs</p>
<ul>
<li><a href="https://www.jianshu.com/p/8a1956a86c0c">dask+numba</a></li>
<li><a href="http://blog.itpub.net/31509949/viewspace-2212324/">dask parallize feature engineering</a></li>
</ul>
<h4 id="types-of-recommendation-engines"><a href="#types-of-recommendation-engines" class="headerlink" title="types of recommendation engines"></a>types of recommendation engines</h4><p>3 types</p>
<ul>
<li>user-based recommendation engines</li>
<li>content-based recommendation engines</li>
<li>hybrid&#x2F;collaborative filtering(协同过滤) recommendation engines<blockquote>
<p>based on similarity</p>
</blockquote>
</li>
</ul>
<p>different cases</p>
<ul>
<li>popularity-based: most liked songs by all users </li>
<li>similarity-based: similar songs for given user</li>
<li>matrix factorization based: use svd to get low rand approximation of the utility matrix</li>
</ul>
<h4 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h4><ul>
<li>Jaccard Index&#x2F;Jaccard similarity coefficient, (0-1)</li>
<li>cosine similarity</li>
</ul>
<blockquote>
<p>Jaccard Distance &#x3D; 1 - Jaccard Index<br><img src="https://kezunlin.me/images/posts/635233-20190620144813357-729179583.png" alt="Jaccard Index"><br><img src="https://kezunlin.me/images/posts/635233-20190620144830190-1685149186.jpg" alt="Jaccard Index"><br><img src="https://kezunlin.me/images/posts/635233-20190620144849854-1119859739.png" alt="demo"></p>
</blockquote>
<h4 id="matrix-factorization"><a href="#matrix-factorization" class="headerlink" title="matrix factorization"></a>matrix factorization</h4><p>矩阵分解<br>use matrix factorization to discover latent features between two different kinds of entities</p>
<p><img src="https://kezunlin.me/images/posts/635233-20190620153656632-1809021630.png" alt="utility matrix"></p>
<blockquote>
<p>sparse matrix</p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20190620153716968-1600019675.png" alt="matrix factorization"></p>
<blockquote>
<p>use SVD: matrix factorization, PCA </p>
</blockquote>
<p>implicit feedback 隐式反馈: song play count—&gt; likeness</p>
<h4 id="recommendation-engine-libraries"><a href="#recommendation-engine-libraries" class="headerlink" title="recommendation engine libraries"></a>recommendation engine libraries</h4><ul>
<li>scikit-surprise (Simple Python Recommendation System Engine)</li>
<li>lightfm</li>
<li>crab</li>
<li>rec_sys</li>
</ul>
<h3 id="time-series-forecasting"><a href="#time-series-forecasting" class="headerlink" title="time series forecasting"></a>time series forecasting</h3><h4 id="basics"><a href="#basics" class="headerlink" title="basics"></a>basics</h4><p>predictive modeling</p>
<p>time series analysis&#x2F;forecasting:</p>
<ul>
<li>traditional approaches<ul>
<li>Moving Average: MV</li>
<li>Exponential Smoothing: EWMA</li>
<li>Holt-Winter EWMA</li>
<li>Box-jenkins methodologies: AR, MA, ARIMA, S-ARIMA</li>
</ul>
</li>
<li>deep learning approaches: RNN, eg. LSTM <ul>
<li>regression modeling (x1,x2,..x6,—&gt;x7): many-to-one</li>
<li>sequence modeling: squence -&gt; sequence</li>
</ul>
</li>
</ul>
<p>two domains</p>
<ul>
<li>frequency domain: spectral and wavelet analysis</li>
<li>time domain: auto- and cross-correlation analysis</li>
</ul>
<p>where to get data ?</p>
<ul>
<li>Yahho</li>
<li>quandl:</li>
</ul>
<p>tools to fetch data:</p>
<ul>
<li>quandl: register for key first</li>
<li>pandas-datareader</li>
</ul>
<h4 id="time-series-components"><a href="#time-series-components" class="headerlink" title="time series components"></a>time series components</h4><p>3 major components:</p>
<ul>
<li>seasonality</li>
<li>trend</li>
<li>residual</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190621164523138-274852883.png" alt="major components"></p>
<p>smoothing techniques</p>
<ul>
<li>Moving Average: MV</li>
<li>Exponential Smoothing: EWMA</li>
</ul>
<h4 id="ARIMA"><a href="#ARIMA" class="headerlink" title="ARIMA"></a>ARIMA</h4><p>AR vs MV</p>
<ul>
<li>auto regressive</li>
<li>moving average<blockquote>
<p>ARIMA: auto regressive integrated moving average</p>
</blockquote>
</li>
</ul>
<p>key concepts</p>
<ul>
<li>Stationarity(平稳性):  One the key assumptions behind the ARIMA models. Stationarity refers to the property where for a time series its mean, variance, and autocorrelation are time invariant. <strong>In other words, mean, variance,and autocorrelation do not change with time</strong></li>
<li>Differencing(差分): differencing is widely used to stabilize the mean of a time series.　We can then apply different tests to confirm if the resulting series is stationary　or not.</li>
<li>Unit Root Tests: Statistical tests that help us understand if a given series is stationary<br>or not. <ul>
<li><code>ad_fuller_test</code>: The Augmented Dickey Fuller test begins with a null hypothesis of series being non-stationary</li>
<li><code>kpss_test</code>: while Kwiatkowski-Phillips-Schmidt-Shin test or KPSS has a null hypothesis that the series is stationary.</li>
</ul>
</li>
</ul>
<p>ad_fuller_test<br><img src="https://kezunlin.me/images/posts/635233-20190621171312867-1233129563.png" alt="ad_fuller_test 1"></p>
<blockquote>
<p>not statistically significant, accpet H0: non-stationary<br><img src="https://kezunlin.me/images/posts/635233-20190621171410960-353658517.png" alt="validate 1"></p>
</blockquote>
<p><img src="https://kezunlin.me/images/posts/635233-20190621171441978-1844678361.png" alt="ad_fuller_test 2"></p>
<blockquote>
<p>statistically significant, reject H0 and accept Ha: stationary<br><img src="https://kezunlin.me/images/posts/635233-20190621171504882-1622081726.png" alt="validate 2"></p>
</blockquote>
<p><code>ARIMA(p,d,q)</code> model<br>where,</p>
<ul>
<li>p is the order of Autoregression</li>
<li>q is the order of Moving average</li>
<li>d is the order of differencing</li>
</ul>
<p>how to choose p and q?</p>
<ul>
<li>ACF or Auto Correlation Function plot —&gt; q &#x3D; 1</li>
<li>PACF or the Partial Auto Correlation Function plot —&gt; p &#x3D; 1</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190621172513678-1126519018.png" alt="ACF PACF"></p>
<p>use grid search to choose p and q based on AIC</p>
<blockquote>
<p>AIC or Akaike Information Criterion measures the<br>goodness of fit and parsimony.<br><img src="https://kezunlin.me/images/posts/635233-20190621172850470-1417181261.png" alt="auto ARIMA"></p>
</blockquote>
<h4 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h4><p>Efficient Market Hypothesis: which says that it is almost impossible to beat the market consistently and there<br>are others which disagree with it.</p>
<p>modeling</p>
<ul>
<li>regression modeling</li>
<li>sequence modeling</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190621173532633-594452091.png" alt="regression modeling"></p>
<p><code>(N,W,F)</code> format as input</p>
<ul>
<li>number of sequence</li>
<li>window: length of sequence</li>
<li>features per timestamp</li>
</ul>
<p>for regression<br><img src="https://kezunlin.me/images/posts/635233-20190621173607256-348222903.png" alt="regression"></p>
<p>for sequence<br><img src="https://kezunlin.me/images/posts/635233-20190621173631098-1609541895.png" alt="sequence"></p>
<blockquote>
<p>we need to pad test sequence to match input shape.</p>
</blockquote>
<p>other time series tools</p>
<ul>
<li><a href="https://github.com/facebook/prophet">facebook prophet</a></li>
</ul>
<h2 id="New-Concepts"><a href="#New-Concepts" class="headerlink" title="New Concepts"></a>New Concepts</h2><ul>
<li>Linear Discriminant Analysis(LDA)线性判别分析</li>
<li>Quadratic Discriminant Analysis(QDA)线性判别分析</li>
</ul>
<p>sklearn code</p>
<pre><code>from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://cn.bing.com/images/search">bing images</a></li>
<li><a href="https://github.com/dipanjanS/practical-machine-learning-with-python">pratical machine learning with python</a></li>
<li><a href="https://github.com/Apress/practical-ml-w-python">code for practical-ml-w-python</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190516: created.</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install mplack on ubuntu 16.04</title>
    <url>//blog/mplack-tutorial-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>mlpack: a scalable C++ machine learning library </p>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><ul>
<li>Armadillo     &gt;&#x3D; 6.500.0</li>
<li>Boost</li>
<li>CMake         &gt;&#x3D; 3.3.2</li>
</ul>
<blockquote>
<p>Armadillo: c++ linear algebra library based on <code>LAPACK</code> and <code>BLAS</code><br>If you are compiling Armadillo by hand, ensure that LAPACK and BLAS are enabled.</p>
</blockquote>
<blockquote>
<p>see <a href="https://www.cnblogs.com/cslxiao/p/3512976.html">OpenCV vs. Armadillo vs. Eigen on Linux</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libarmadillo-dev</span><br></pre></td></tr></table></figure>

<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><h4 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libmlpack-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>version: 2.0.1<br>by default <code>mlpack</code> will install to <code>/usr/include/mlpack</code> and <code>/usr/lib</code></p>
</blockquote>
<h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.mlpack.org/files/mlpack-3.1.1.tar.gz</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mlpack/mlpack.git</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>configure and output </p>
<pre><code>...
Found Armadillo: /usr/lib/libarmadillo.so (found suitable version &quot;6.500.5&quot;, minimum required is &quot;6.500.0&quot;) 
Armadillo libraries: /usr/lib/libarmadillo.so
...
</code></pre>
<blockquote>
<p>version: 3.1.1<br>by default <code>mlpack</code> will install to <code>/usr/local/include</code> and <code>/usr/local/lib/libmlpack.so.3.1</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><h4 id="mlpack-config-cmake"><a href="#mlpack-config-cmake" class="headerlink" title="mlpack-config.cmake"></a>mlpack-config.cmake</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#.rst:</span></span><br><span class="line"><span class="comment"># FindMLPACK</span></span><br><span class="line"><span class="comment"># -------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Find MLPACK</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Find the MLPACK C++ library</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Using MLPACK::</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   find_package(MLPACK REQUIRED)</span></span><br><span class="line"><span class="comment">#   include_directories($&#123;MLPACK_INCLUDE_DIRS&#125;)</span></span><br><span class="line"><span class="comment">#   add_executable(foo foo.cc)</span></span><br><span class="line"><span class="comment">#   target_link_libraries(foo $&#123;MLPACK_LIBRARIES&#125;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This module sets the following variables::</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   MLPACK_FOUND - set to true if the library is found</span></span><br><span class="line"><span class="comment">#   MLPACK_INCLUDE_DIRS - list of required include directories</span></span><br><span class="line"><span class="comment">#   MLPACK_LIBRARIES - list of libraries to be linked</span></span><br><span class="line"><span class="comment">#   MLPACK_VERSION_MAJOR - major version number</span></span><br><span class="line"><span class="comment">#   MLPACK_VERSION_MINOR - minor version number</span></span><br><span class="line"><span class="comment">#   MLPACK_VERSION_PATCH - patch version number</span></span><br><span class="line"><span class="comment">#   MLPACK_VERSION_STRING - version number as a string (ex: &quot;1.0.4&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># UNIX paths are standard, no need to specify them.</span></span><br><span class="line"><span class="keyword">find_library</span>(MLPACK_LIBRARY</span><br><span class="line">	NAMES mlpack</span><br><span class="line">	PATHS <span class="string">&quot;$ENV&#123;ProgramFiles&#125;/mlpack/lib&quot;</span>  <span class="string">&quot;$ENV&#123;ProgramFiles&#125;/mlpack/lib64&quot;</span> <span class="string">&quot;$ENV&#123;ProgramFiles&#125;/mlpack&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">find_path</span>(MLPACK_INCLUDE_DIR</span><br><span class="line">	NAMES mlpack/core.hpp mlpack/prereqs.hpp</span><br><span class="line">	PATHS <span class="string">&quot;$ENV&#123;ProgramFiles&#125;/mlpack&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MLPACK_INCLUDE_DIR)</span><br><span class="line">	<span class="comment"># Read and parse mlpack version header file for version number</span></span><br><span class="line">	<span class="keyword">file</span>(STRINGS <span class="string">&quot;$&#123;MLPACK_INCLUDE_DIR&#125;/mlpack/core/util/version.hpp&quot;</span> _mlpack_HEADER_CONTENTS REGEX <span class="string">&quot;#define MLPACK_VERSION_[A-Z]+ &quot;</span>)</span><br><span class="line">	<span class="keyword">string</span>(REGEX REPLACE <span class="string">&quot;.*#define MLPACK_VERSION_MAJOR ([0-9]+).*&quot;</span> <span class="string">&quot;\\1&quot;</span> MLPACK_VERSION_MAJOR <span class="string">&quot;$&#123;_mlpack_HEADER_CONTENTS&#125;&quot;</span>)</span><br><span class="line">	<span class="keyword">string</span>(REGEX REPLACE <span class="string">&quot;.*#define MLPACK_VERSION_MINOR ([0-9]+).*&quot;</span> <span class="string">&quot;\\1&quot;</span> MLPACK_VERSION_MINOR <span class="string">&quot;$&#123;_mlpack_HEADER_CONTENTS&#125;&quot;</span>)</span><br><span class="line">	<span class="keyword">string</span>(REGEX REPLACE <span class="string">&quot;.*#define MLPACK_VERSION_PATCH ([0-9]+).*&quot;</span> <span class="string">&quot;\\1&quot;</span> MLPACK_VERSION_PATCH <span class="string">&quot;$&#123;_mlpack_HEADER_CONTENTS&#125;&quot;</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">unset</span>(_mlpack_HEADER_CONTENTS)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">set</span>(MLPACK_VERSION_STRING <span class="string">&quot;$&#123;MLPACK_VERSION_MAJOR&#125;.$&#123;MLPACK_VERSION_MINOR&#125;.$&#123;MLPACK_VERSION_PATCH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line">find_package_handle_standard_args(MLPACK</span><br><span class="line">	REQUIRED_VARS MLPACK_LIBRARY MLPACK_INCLUDE_DIR</span><br><span class="line">	VERSION_VAR MLPACK_VERSION_STRING</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(MLPACK_FOUND)</span><br><span class="line">	<span class="keyword">set</span>(MLPACK_INCLUDE_DIRS <span class="variable">$&#123;MLPACK_INCLUDE_DIR&#125;</span>)</span><br><span class="line">	<span class="keyword">set</span>(MLPACK_LIBRARIES <span class="variable">$&#123;MLPACK_LIBRARY&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hide internal variables</span></span><br><span class="line"><span class="keyword">mark_as_advanced</span>(</span><br><span class="line">	MLPACK_INCLUDE_DIR</span><br><span class="line">	MLPACK_LIBRARY</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>From <a href="https://github.com/mlpack/mlpack/issues/444">here</a></p>
</blockquote>
<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(MLPACK REQUIRED)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; MLPACK_INCLUDE_DIRS = $&#123;MLPACK_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; MLPACK_LIBRARIES = $&#123;MLPACK_LIBRARIES&#125;&quot;</span>)  </span><br><span class="line"><span class="comment"># /usr/local/include</span></span><br><span class="line"><span class="comment"># /usr/local/lib/libmlpack.so</span></span><br></pre></td></tr></table></figure>

<h3 id="mlpack-clustering"><a href="#mlpack-clustering" class="headerlink" title="mlpack clustering"></a>mlpack clustering</h3><blockquote>
<p>see <a href="https://mlpack.org/doc/mlpack-3.1.0/cli_documentation.html">mlpack clustering</a></p>
</blockquote>
<h4 id="kmeans"><a href="#kmeans" class="headerlink" title="kmeans"></a>kmeans</h4><p>skip now.</p>
<h4 id="meanshift"><a href="#meanshift" class="headerlink" title="meanshift"></a>meanshift</h4><ul>
<li><p><a href="https://mlpack.org/doc/mlpack-git/doxygen/classmlpack_1_1meanshift_1_1MeanShift.html">mlpack_meanshift doc</a></p>
</li>
<li><p><a href="https://github.com/mlpack/mlpack/blob/master/src/mlpack/tests/mean_shift_test.cpp">mlpack mean shift test</a></p>
</li>
</ul>
<h4 id="dbscan"><a href="#dbscan" class="headerlink" title="dbscan"></a>dbscan</h4><ul>
<li><a href="https://github.com/mlpack/mlpack/blob/master/src/mlpack/tests/dbscan_test.cpp">mlpack dbscan test</a></li>
</ul>
<h3 id="sklearn-clustering"><a href="#sklearn-clustering" class="headerlink" title="sklearn clustering"></a>sklearn clustering</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MeanShift</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br></pre></td></tr></table></figure>
<blockquote>
<p>see <a href="https://scikit-learn.org/stable/modules/classes.html#module-sklearn.cluster">sklearn clustering</a></p>
</blockquote>
<h3 id="opencv-clustering"><a href="#opencv-clustering" class="headerlink" title="opencv clustering"></a>opencv clustering</h3><ul>
<li>cv::kmeans()</li>
</ul>
<blockquote>
<p>see <a href="https://docs.opencv.org/4.1.0/d5/d38/group__core__cluster.html">opencv clustering</a></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/mlpack/mlpack">mlpack</a></li>
<li><a href="http://www.mlpack.org/doc/stable/cli_documentation.html#tutorials">mlpack.org</a></li>
<li><a href="https://github.com/mlpack/mlpack/issues/444">mlpack findpackage</a></li>
<li><a href="https://github.com/mlpack/mlpack/blob/master/src/mlpack/tests/mean_shift_test.cpp">mlpack mean shift</a></li>
<li><a href="https://github.com/davisking/dlib">dlib</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190520: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>mlpack</tag>
      </tags>
  </entry>
  <entry>
    <title>anaconda tutorial on ubuntu 16.04</title>
    <url>//blog/anaconda-tutorial-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>ubuntu 16.04</li>
<li>conda 4.6.14</li>
<li>python 3.7.3 (default)</li>
<li>python 3.5.6 (env)</li>
</ul>
<h3 id="Install-Conda"><a href="#Install-Conda" class="headerlink" title="Install Conda"></a>Install Conda</h3><p>download <code>Anaconda3-2019.03-Linux-x86_64.sh</code> from <a href="https://www.anaconda.com/distribution/#linux">here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash ./Anaconda3-2019.03-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">[/home/kezunlin/anaconda3] &gt;&gt;&gt; </span><br><span class="line">PREFIX=/home/kezunlin/anaconda3</span><br><span class="line">installing: python-3.7.3-h0371630_0 ...</span><br><span class="line">Python 3.7.3</span><br><span class="line">...</span><br><span class="line">installing: scikit-image-0.14.2-py37he6710b0_0 ...</span><br><span class="line">installing: scikit-learn-0.20.3-py37hd81dba3_0 ...</span><br><span class="line">installing: astropy-3.1.2-py37h7b6447c_0 ...</span><br><span class="line">installing: statsmodels-0.9.0-py37h035aef0_0 ...</span><br><span class="line">installing: seaborn-0.9.0-py37_0 ...</span><br><span class="line">installing: anaconda-2019.03-py37_0 ...</span><br><span class="line">installation finished.</span><br><span class="line">Do you wish the installer to initialize Anaconda3</span><br><span class="line">by running conda init? [<span class="built_in">yes</span>|no]</span><br><span class="line"></span><br><span class="line">If you<span class="string">&#x27;d prefer that conda&#x27;</span>s base environment not be activated on startup, </span><br><span class="line">    <span class="built_in">set</span> the auto_activate_base parameter to <span class="literal">false</span>: </span><br><span class="line"></span><br><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Thank you <span class="keyword">for</span> installing Anaconda3!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>conda config –set auto_activate_base false</p>
</blockquote>
<p>check version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version</span><br><span class="line">conda 4.6.11</span><br><span class="line"></span><br><span class="line">conda update conda</span><br><span class="line"></span><br><span class="line">conda --version</span><br><span class="line">conda 4.6.14</span><br></pre></td></tr></table></figure>

<h3 id="Managing-Environments"><a href="#Managing-Environments" class="headerlink" title="Managing Environments"></a>Managing Environments</h3><h4 id="create-new-env"><a href="#create-new-env" class="headerlink" title="create new env"></a>create new env</h4><p>When you begin using conda, you already have a default environment named <code>base</code>. You don’t want to put programs into your base environment, though. Create separate environments to keep your programs isolated from each other.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) kezunlin@ke:~$ conda --version</span><br><span class="line">conda 4.6.14</span><br><span class="line"></span><br><span class="line">(base) kezunlin@ke:~$ conda create --name snowflakes biopython</span><br><span class="line">(base) kezunlin@ke:~$ conda activate snowflakes</span><br><span class="line">(snowflakes) kezunlin@ke:~$ </span><br><span class="line">(snowflakes) kezunlin@ke:~$ conda deactivate</span><br><span class="line">(base) kezunlin@ke:~$ </span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>conda activate</code> only works on conda 4.6 and later versions.</p>
</blockquote>
<h4 id="list-envs"><a href="#list-envs" class="headerlink" title="list envs"></a>list envs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  /home/kezunlin/anaconda3</span><br><span class="line">snowflakes               /home/kezunlin/anaconda3/envs/snowflakes</span><br></pre></td></tr></table></figure>

<p><code>～/.conda/environments.txt</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/home/kezunlin/anaconda3</span><br><span class="line">/home/kezunlin/anaconda3/envs/snowflakes</span><br><span class="line">/home/kezunlin/anaconda3/envs/py35</span><br></pre></td></tr></table></figure>

<h3 id="Managing-Python"><a href="#Managing-Python" class="headerlink" title="Managing Python"></a>Managing Python</h3><p>When you create a new environment, conda installs the same Python version you used when you downloaded and installed Anaconda. If you want to use a different version of Python, for example <code>Python 3.5</code>, simply create a new environment and specify the version of Python that you want.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name snakes python=3.5</span><br><span class="line">conda activate py35</span><br><span class="line"></span><br><span class="line">conda info --envs</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                     /home/kezunlin/anaconda3</span><br><span class="line">py35                  *  /home/kezunlin/anaconda3/envs/py35</span><br><span class="line">snowflakes               /home/kezunlin/anaconda3/envs/snowflakes</span><br><span class="line"></span><br><span class="line">(base) kezunlin@ke:~$ python --version</span><br><span class="line">Python 3.7.3</span><br><span class="line">(base) kezunlin@ke:~$ conda activate py35</span><br><span class="line">(py35) kezunlin@ke:~$ python --version</span><br><span class="line">Python 3.5.6 :: Anaconda, Inc.</span><br></pre></td></tr></table></figure>

<h3 id="Managing-packages"><a href="#Managing-packages" class="headerlink" title="Managing packages"></a>Managing packages</h3><h4 id="list-packages"><a href="#list-packages" class="headerlink" title="list packages"></a>list packages</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) kezunlin@ke:~$ conda activate py35</span><br><span class="line">(py35) kezunlin@ke:~$ </span><br><span class="line">(py35) kezunlin@ke:~$ conda list</span><br><span class="line"><span class="comment"># packages in environment at /home/kezunlin/anaconda3/envs/py35:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">ca-certificates           2019.1.23                     0  </span><br><span class="line">certifi                   2018.8.24                py35_1  </span><br><span class="line">libedit                   3.1.20181209         hc058e9b_0  </span><br></pre></td></tr></table></figure>

<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda search beautifulsoup4</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">beautifulsoup4                 4.6.3          py27_0  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.6.3          py35_0  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.6.3          py36_0  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.6.3          py37_0  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.7.1          py27_1  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.7.1          py36_1  pkgs/main           </span><br><span class="line">beautifulsoup4                 4.7.1          py37_1  pkgs/main      </span><br></pre></td></tr></table></figure>

<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install beautifulsoup4</span><br></pre></td></tr></table></figure>

<h3 id="conda-config"><a href="#conda-config" class="headerlink" title="conda config"></a>conda config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line">conda config --show</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter notebook"></a>Jupyter notebook</h3><h4 id="install-jupyter"><a href="#install-jupyter" class="headerlink" title="install jupyter"></a>install jupyter</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n py35 python=3.5</span><br><span class="line">conda activate py35</span><br><span class="line">conda install jupyter</span><br></pre></td></tr></table></figure>

<h4 id="install-kernel"><a href="#install-kernel" class="headerlink" title="install kernel"></a>install kernel</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m ipykernel install --user --name=py35</span><br><span class="line">Installed kernelspec py35 <span class="keyword">in</span> /home/kezunlin/.local/share/jupyter/kernels/py35</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>jupyter</code> depends on <code>notebook</code> and <code>ipykernel</code><br>also see <a href="http://kezunline.me/post/f7eab850/">tensorflow jupyter notebook kenel</a></p>
</blockquote>
<h4 id="run-jupyter"><a href="#run-jupyter" class="headerlink" title="run jupyter"></a>run jupyter</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>now we can see <code>py35</code> kernel appears.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20190524151917076-1965937414.png" alt="py35 kernel"></p>
<h3 id="tensorflow-gpu-keras"><a href="#tensorflow-gpu-keras" class="headerlink" title="tensorflow-gpu&#x2F;keras"></a>tensorflow-gpu&#x2F;keras</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate py35</span><br><span class="line">conda install tensorflow-gpu keras</span><br></pre></td></tr></table></figure>

<p>test </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt;import keras as K</span><br><span class="line">Using TensorFlow backend.</span><br></pre></td></tr></table></figure>

<p>.keras&#x2F;keras.json </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;epsilon&quot;</span><span class="punctuation">:</span> <span class="number">1e-07</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;floatx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;float32&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;image_data_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;channels_last&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;backend&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tensorflow&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><p>see <a href="https://kezunlin.me/post/54e7a3d8/#more">pytorch tutorial on ubuntu 16.04</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://conda.io/projects/conda/en/latest/user-guide/getting-started.html">getting-started with conda</a></li>
<li><a href="https://conda.io/projects/conda/en/latest/commands.html">conda command ref</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190524: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>anaconda</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>speed up opencv image processing with OpenCL</title>
    <url>//blog/speed-up-opencv-image-processing-with-OpenCL/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><blockquote>
<p>OpenCL is a framework for writing programs that execute on these heterogenous platforms. The developers of an OpenCL library utilize all OpenCL compatible devices (CPUs, GPUs, DSPs, FPGAs etc) they find on a computer &#x2F; device and assign the right tasks to the right processor.<br>Keep in mind that as a user of OpenCV library you are not developing any OpenCL library. In fact you are not even a user of the OpenCL library because all the details are hidden behind the transparent API&#x2F;TAPI.</p>
</blockquote>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>cmake config by default for compiling OpenCV:</p>
<pre><code>WITH_OPENCL ON
</code></pre>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><h4 id="Mat"><a href="#Mat" class="headerlink" title="Mat"></a>Mat</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img, gray;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;image.jpg&quot;</span>, IMREAD_COLOR);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">cvtColor</span>(img, gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(gray, gray,<span class="built_in">Size</span>(<span class="number">7</span>, <span class="number">7</span>), <span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(gray, gray, <span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;edges&quot;</span>, gray);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UMat"><a href="#UMat" class="headerlink" title="UMat"></a>UMat</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UMat img, gray;</span><br><span class="line">    <span class="built_in">imread</span>(<span class="string">&quot;image.jpg&quot;</span>, IMREAD_COLOR).<span class="built_in">copyTo</span>(img);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">cvtColor</span>(img, gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(gray, gray,<span class="built_in">Size</span>(<span class="number">7</span>, <span class="number">7</span>), <span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(gray, gray, <span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;edges&quot;</span>, gray);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UMat with transparent API&#x2F;TAPI</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.learnopencv.com/opencv-transparent-api/">opencv-transparent-api</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190626: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>opencl</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to compile and use pytorch on ubuntu 16.04</title>
    <url>//blog/pytorch-tutorial-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="PyTorch-for-Python"><a href="#PyTorch-for-Python" class="headerlink" title="PyTorch for Python"></a>PyTorch for Python</h2><h3 id="install-pytorch-from-anaconda"><a href="#install-pytorch-from-anaconda" class="headerlink" title="install pytorch from anaconda"></a><del>install pytorch from anaconda</del></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda activate py35</span><br><span class="line"></span><br><span class="line"><span class="comment"># newest version</span></span><br><span class="line"><span class="comment"># 1.1.0 pytorch/0.3.0 torchvision</span></span><br><span class="line">conda install pytorch torchvision cudatoolkit=9.0 -c pytorch</span><br><span class="line"></span><br><span class="line"><span class="comment"># old version [NOT]</span></span><br><span class="line"><span class="comment"># 0.4.1 pytorch/0.2.1 torchvision</span></span><br><span class="line">conda install pytorch=0.4.1 cuda90 -c pytorch</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>The following NEW packages will be INSTALLED:

  pytorch            pytorch/linux-64::pytorch-1.1.0-py3.5_cuda9.0.176_cudnn7.5.1_0
  torchvision        pytorch/linux-64::torchvision-0.3.0-py35_cu9.0.176_1
</code></pre>
<blockquote>
<p>download from channel <code>pytorch</code> will cost much time!<br>下载<code>pytorch/linux-64::pytorch-1.1.0-py3.5_cuda9.0.176_cudnn7.5.1_0</code>速度非常慢！</p>
</blockquote>
<h3 id="install-pytorch-from-tsinghua"><a href="#install-pytorch-from-tsinghua" class="headerlink" title="install pytorch from tsinghua"></a>install pytorch from tsinghua</h3><h4 id="add-tsinghua-pytorch-channels"><a href="#add-tsinghua-pytorch-channels" class="headerlink" title="add tsinghua pytorch channels"></a>add tsinghua pytorch channels</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"><span class="comment"># for legacy win-64</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/peterjc123/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用anaconda官方pytorch源非常慢，用清华源代替。<br>see <a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">tsinghua anaconda</a></p>
</blockquote>
<p><code>cat ～/.condarc</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>

<h4 id="install-pytorch-from-tsinghua-1"><a href="#install-pytorch-from-tsinghua-1" class="headerlink" title="install pytorch from tsinghua"></a>install pytorch from tsinghua</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name torch python==3.7</span><br><span class="line">conda activate torch</span><br><span class="line"></span><br><span class="line">conda install -y pytorch torchvision</span><br><span class="line">conda install -y scikit-learn scikit-image pandas matplotlib pillow opencv</span><br></pre></td></tr></table></figure>

<p>The following NEW packages will be INSTALLED:</p>
<pre><code>  pytorch            anaconda/cloud/pytorch/linux-64::pytorch-1.1.0-py3.5_cuda9.0.176_cudnn7.5.1_0
  torchvision        anaconda/cloud/pytorch/linux-64::torchvision-0.3.0-py35_cu9.0.176_1
</code></pre>
<h3 id="test-pytorch"><a href="#test-pytorch" class="headerlink" title="test pytorch"></a>test pytorch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="string">&#x27;1.1.0&#x27;</span></span><br><span class="line">```   </span><br><span class="line">or </span><br><span class="line">```bash</span><br><span class="line">python -c <span class="string">&#x27;import torch; print(torch.cuda.is_available())&#x27;</span></span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure>
<h3 id="pre-trained-models"><a href="#pre-trained-models" class="headerlink" title="pre-trained models"></a>pre-trained models</h3><p>pre-trained model saved to <code>/home/kezunlin/.cache/torch/checkpoints/</code></p>
<p>Downloading: “<a href="https://download.pytorch.org/models/shufflenetv2_x0.5-f707e7126e.pth">https://download.pytorch.org/models/shufflenetv2_x0.5-f707e7126e.pth</a>“ to &#x2F;home&#x2F;kezunlin&#x2F;.cache&#x2F;torch&#x2F;checkpoints&#x2F;shufflenetv2_x0.5-f707e7126e.pth</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="PyTorch-for-C"><a href="#PyTorch-for-C" class="headerlink" title="PyTorch for C++"></a>PyTorch for C++</h2><h3 id="download-LibTorch"><a href="#download-LibTorch" class="headerlink" title="download LibTorch"></a>download LibTorch</h3><p>download from <a href="https://download.pytorch.org/libtorch/cu90/libtorch-shared-with-deps-latest.zip">LibTorch</a></p>
<h3 id="compile-from-source"><a href="#compile-from-source" class="headerlink" title="compile from source"></a>compile from source</h3><h4 id="compile-pytorch"><a href="#compile-pytorch" class="headerlink" title="compile pytorch"></a>compile pytorch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2, if you are updating an existing checkout</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch </span><br><span class="line">git submodule <span class="built_in">sync</span></span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">```    </span><br><span class="line">check tags </span><br><span class="line">```bash</span><br><span class="line">git tag -l </span><br><span class="line"></span><br><span class="line">v0.4.0</span><br><span class="line">v0.4.1</span><br><span class="line">v1.0.0</span><br><span class="line">v1.0.1</span><br><span class="line">v1.0rc0</span><br><span class="line">v1.0rc1</span><br><span class="line">v1.1.0</span><br></pre></td></tr></table></figure>

<p>now compile </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout v1.1.0</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with configs</p>
<pre><code>BUILD_PYTHON OFF
</code></pre>
<blockquote>
<p>be sure to use <code>stable version 1.1.0</code> from <a href="https://github.com/pytorch/pytorch/tree/v1.1.0">here</a> instead of latest version 20190724 (<code>unstable version 1.2.0</code>)<br>because error will occurs when load models.</p>
</blockquote>
<ul>
<li><p>for 1.1.0:  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;torch::jit::script::Module&gt; <span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(<span class="string">&quot;./model.pt&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>for latest 1.2.0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">torch::jit::script::Module <span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(<span class="string">&quot;./model.pt&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>configure output </p>
<p>  ******** Summary ********<br>  General:<br>CMake version         : 3.5.1<br>CMake command         : &#x2F;usr&#x2F;bin&#x2F;cmake<br>System                : Linux<br>C++ compiler          : &#x2F;usr&#x2F;bin&#x2F;c++<br>C++ compiler id       : GNU<br>C++ compiler version  : 5.4.0<br>BLAS                  : MKL<br>CXX flags             :  -fvisibility-inlines-hidden -fopenmp -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error&#x3D;deprecated-declarations -Wno-error&#x3D;pedantic -Wno-error&#x3D;redundant-decls -Wno-error&#x3D;old-style-cast -fdiagnostics-color&#x3D;always -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math<br>Build type            : Release<br>Compile definitions   : ONNX_ML&#x3D;1;ONNX_NAMESPACE&#x3D;onnx_torch;USE_GCC_ATOMICS&#x3D;1;HAVE_MMAP&#x3D;1;_FILE_OFFSET_BITS&#x3D;64;HAVE_SHM_OPEN&#x3D;1;HAVE_SHM_UNLINK&#x3D;1;HAVE_MALLOC_USABLE_SIZE&#x3D;1<br>CMAKE_PREFIX_PATH     :<br>CMAKE_INSTALL_PREFIX  : &#x2F;usr&#x2F;local<br><br>TORCH_VERSION         : 1.1.0<br>CAFFE2_VERSION        : 1.1.0<br>BUILD_CAFFE2_MOBILE   : ON<br>BUILD_ATEN_ONLY       : OFF<br>BUILD_BINARY          : OFF<br>BUILD_CUSTOM_PROTOBUF : ON<br>  Link local protobuf : ON<br>BUILD_DOCS            : OFF<br>BUILD_PYTHON          : OFF<br>BUILD_CAFFE2_OPS      : ON<br>BUILD_SHARED_LIBS     : ON<br>BUILD_TEST            : OFF<br>INTERN_BUILD_MOBILE   :<br>USE_ASAN              : OFF<br>USE_CUDA              : ON<br>  CUDA static link    : OFF<br>  USE_CUDNN           : ON<br>  CUDA version        : 9.2<br>  cuDNN version       : 7.1.4<br>  CUDA root directory : &#x2F;usr&#x2F;local&#x2F;cuda<br>  CUDA library        : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;stubs&#x2F;libcuda.so<br>  cudart library      : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudart.so<br>  cublas library      : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcublas.so<br>  cufft library       : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcufft.so<br>  curand library      : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcurand.so<br>  cuDNN library       : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so<br>  nvrtc               : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libnvrtc.so<br>  CUDA include path   : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include<br>  NVCC executable     : &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin&#x2F;nvcc<br>  CUDA host compiler  : &#x2F;usr&#x2F;bin&#x2F;cc<br>  USE_TENSORRT        : OFF<br>USE_ROCM              : OFF<br>USE_EIGEN_FOR_BLAS    : ON<br>USE_FBGEMM            : OFF<br>USE_FFMPEG            : OFF<br>USE_GFLAGS            : OFF<br>USE_GLOG              : OFF<br>USE_LEVELDB           : OFF<br>USE_LITE_PROTO        : OFF<br>USE_LMDB              : OFF<br>USE_METAL             : OFF<br>USE_MKL               : OFF<br>USE_MKLDNN            : OFF<br>USE_NCCL              : ON<br>  USE_SYSTEM_NCCL     : OFF<br>USE_NNPACK            : ON<br>USE_NUMPY             : ON<br>USE_OBSERVERS         : ON<br>USE_OPENCL            : OFF<br>USE_OPENCV            : OFF<br>USE_OPENMP            : ON<br>USE_TBB               : OFF<br>USE_PROF              : OFF<br>USE_QNNPACK           : ON<br>USE_REDIS             : OFF<br>USE_ROCKSDB           : OFF<br>USE_ZMQ               : OFF<br>USE_DISTRIBUTED       : ON<br>  USE_MPI             : ON<br>  USE_GLOO            : ON<br>  USE_GLOO_IBVERBS    : OFF<br>NAMEDTENSOR_ENABLED   : OFF<br>Public Dependencies  : Threads::Threads<br>Private Dependencies : qnnpack;nnpack;cpuinfo;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libnuma.so;fp16;&#x2F;usr&#x2F;lib&#x2F;openmpi&#x2F;lib&#x2F;libmpi_cxx.so;&#x2F;usr&#x2F;lib&#x2F;openmpi&#x2F;lib&#x2F;libmpi.so;gloo;aten_op_header_gen;foxi_loader;rt;gcc_s;gcc;dl<br>  Configuring done</p>
</li>
</ul>
<h4 id="install-pytorch"><a href="#install-pytorch" class="headerlink" title="install pytorch"></a>install pytorch</h4><p>now compile and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>Install the project...
-- Install configuration: &quot;Release&quot;
-- Old export file &quot;/usr/local/share/cmake/Caffe2/Caffe2Targets.cmake&quot; will be replaced.  Removing files [/usr/local/share/cmake/Caffe2/Caffe2Targets-release.cmake].
-- Set runtime path of &quot;/usr/local/bin/protoc&quot; to &quot;$ORIGIN&quot;
-- Old export file &quot;/usr/local/share/cmake/Gloo/GlooTargets.cmake&quot; will be replaced.  Removing files [/usr/local/share/cmake/Gloo/GlooTargets-release.cmake].
-- Set runtime path of &quot;/usr/local/lib/libonnxifi_dummy.so&quot; to &quot;$ORIGIN&quot;
-- Set runtime path of &quot;/usr/local/lib/libonnxifi.so&quot; to &quot;$ORIGIN&quot;
-- Set runtime path of &quot;/usr/local/lib/libfoxi_dummy.so&quot; to &quot;$ORIGIN&quot;
-- Set runtime path of &quot;/usr/local/lib/libfoxi.so&quot; to &quot;$ORIGIN&quot;
-- Set runtime path of &quot;/usr/local/lib/libc10.so&quot; to &quot;$ORIGIN&quot;
-- Set runtime path of &quot;/usr/local/lib/libc10_cuda.so&quot; to &quot;$ORIGIN:/usr/local/cuda/lib64&quot;
-- Set runtime path of &quot;/usr/local/lib/libthnvrtc.so&quot; to &quot;$ORIGIN:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64&quot;
-- Set runtime path of &quot;/usr/local/lib/libtorch.so&quot; to &quot;$ORIGIN:/usr/local/cuda/lib64:/usr/lib/openmpi/lib&quot;
-- Set runtime path of &quot;/usr/local/lib/libcaffe2_detectron_ops_gpu.so&quot; to &quot;$ORIGIN:/usr/local/cuda/lib64&quot;
-- Set runtime path of &quot;/usr/local/lib/libcaffe2_observers.so&quot; to &quot;$ORIGIN:/usr/local/cuda/lib64&quot;
</code></pre>
<blockquote>
<p>pytorch 1.1.0<br><strong>compile and install will cost more than 2 hours</strong><br>lib install to <code>/usr/local/lib/libtorch.so</code><br>cmake install to <code>/usr/local/share/cmake/Torch</code></p>
</blockquote>
<h3 id="C-example"><a href="#C-example" class="headerlink" title="C++ example"></a>C++ example</h3><p>load pytorch model in c++<br>see <a href="https://pytorch.org/tutorials/advanced/cpp_export.html">load pytorch model in c++</a></p>
<h4 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;torch/script.h&gt;</span> <span class="comment">// One-stop header.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;usage: example-app &lt;path-to-exported-script-module&gt;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Deserialize the ScriptModule from a file using torch::jit::load().</span></span><br><span class="line">  std::shared_ptr&lt;torch::jit::script::Module&gt; <span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(<span class="keyword">module</span> != <span class="literal">nullptr</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;ok\n&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Create a vector of inputs.</span></span><br><span class="line">std::vector&lt;torch::jit::IValue&gt; inputs;</span><br><span class="line">inputs.<span class="built_in">push_back</span>(torch::<span class="built_in">ones</span>(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute the model and turn its output into a tensor.</span></span><br><span class="line">at::Tensor output = <span class="keyword">module</span>-&gt;forward(inputs).<span class="built_in">toTensor</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; output.<span class="built_in">slice</span>(<span class="comment">/*dim=*/</span><span class="number">1</span>, <span class="comment">/*start=*/</span><span class="number">0</span>, <span class="comment">/*end=*/</span><span class="number">5</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span> FATAL_ERROR)</span><br><span class="line"><span class="keyword">project</span>(custom_ops)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/local/share/cmake/Torch</span></span><br><span class="line"><span class="keyword">find_package</span>(Torch REQUIRED)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; TORCH_INCLUDE_DIRS = $&#123;TORCH_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; TORCH_LIBRARIES = $&#123;TORCH_LIBRARIES&#125;&quot;</span>)  </span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;TORCH_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(example-app example-app.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(example-app <span class="string">&quot;$&#123;TORCH_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> example-app PROPERTY CXX_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>Found torch: /usr/local/lib/libtorch.so  
[Main] TORCH_INCLUDE_DIRS = /usr/local/include;/usr/local/include/torch/csrc/api/include
[Main] TORCH_LIBRARIES = torch;torch_library;/usr/local/lib/libc10.so;/usr/local/cuda/lib64/stubs/libcuda.so;/usr/local/cuda/lib64/libnvrtc.so;/usr/local/cuda/lib64/libnvToolsExt.so;/usr/local/cuda/lib64/libcudart.so;/usr/local/lib/libc10_cuda.so
[TOLOWER] ALGORITHM_TARGET = algorithm
</code></pre>
<h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>set <code>Torch_DIR</code> to <code>/home/kezunlin/program/libtorch/share/cmake/Torch</code><br>auto-set <code>Torch_DIR</code> to <code>/usr/local/share/cmake/Torch</code></p>
</blockquote>
<h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./example-app model.pt</span><br><span class="line">-0.2698 -0.0381  0.4023 -0.3010 -0.0448</span><br></pre></td></tr></table></figure>

<h3 id="errors-and-solutions"><a href="#errors-and-solutions" class="headerlink" title="errors and solutions"></a>errors and solutions</h3><h4 id="compile-errors-with-libtorch"><a href="#compile-errors-with-libtorch" class="headerlink" title="compile errors with libtorch"></a>compile errors with libtorch</h4><ul>
<li><a href="https://github.com/pytorch/pytorch/issues/15138">Build simple c++ example-cpp using Libtorch fails on arm with undefined reference to c10::Error::Error</a></li>
</ul>
<blockquote>
<p>@soumith<br>You might be building libtorch with a compiler that is incompatible with the compiler building your final app.<br>For example, you built libtorch with gcc 4.9.2 and your final app with gcc 5.1, and the C++ ABI between both of them is not the same, so you are seeing linker errors like these</p>
</blockquote>
<ul>
<li><a href="https://discuss.pytorch.org/t/issues-linking-with-libtorch-c-11-abi/29510">issues-linking-with-libtorch-c-11-abi</a></li>
</ul>
<blockquote>
<p>@christianperone</p>
</blockquote>
<pre><code>if (&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot; STREQUAL &quot;GNU&quot;)
  set(TORCH_CXX_FLAGS &quot;-D_GLIBCXX_USE_CXX11_ABI=0&quot;)
endif()
</code></pre>
<blockquote>
<p>Which forces GCC to use the old C++11 ABI.</p>
</blockquote>
<blockquote>
<p>@ smth<br>we have that flag set because we build with gcc 4.9.x, which only has the old ABI.<br>In GCC 5.1, the ABI for std::string was changed, and binaries compiling with gcc &gt;&#x3D; 5.1 are not ABI-compatible with binaries build with gcc &lt; 5.1 (like pytorch) unless you set that flag.</p>
</blockquote>
<p>resons and solutions</p>
<ul>
<li>Reasons: ** LibTorch compiled with GCC-4.9.X (only has the old ABI), and binaries compiling with gcc &gt;&#x3D; 5.1 are not ABI-compatible**</li>
<li>Solution: compile pytorch from source instead of using <code>LibTroch</code> downloaded from the website.</li>
</ul>
<h4 id="runtime-errors-with-pytorch"><a href="#runtime-errors-with-pytorch" class="headerlink" title="runtime errors with pytorch"></a>runtime errors with pytorch</h4><p>errors</p>
<pre><code>/usr/local/lib/libopencv_imgcodecs.so.3.1.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0&#39;
</code></pre>
<p>which means opencv link against <code>libtiff 4.0.6</code></p>
<p>ldd check </p>
<pre><code>ldd /usr/local/lib/libopencv_imgcodecs.so.3.1.0
    linux-vdso.so.1 =&gt;  (0x00007ffc92ffc000)
    libopencv_imgproc.so.3.1 =&gt; /usr/local/lib/libopencv_imgproc.so.3.1 (0x00007f32afbca000)
    libjpeg.so.8 =&gt; /usr/local/lib/libjpeg.so.8 (0x00007f32af948000)
    libpng12.so.0 =&gt; /lib/x86_64-linux-gnu/libpng12.so.0 (0x00007f32af723000)
    libtiff.so.5 =&gt; /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007f32af4ae000)
    
</code></pre>
<blockquote>
<p>when compile <code>opencv-3.1.0</code>, cmake find <code>/usr/lib/x86_64-linux-gnu/libtiff.so.5</code></p>
</blockquote>
<p>locate libtiff</p>
<pre><code>locate libtiff.so

/home/kezunlin/anaconda3/envs/py35/lib/libtiff.so
/home/kezunlin/anaconda3/envs/py35/lib/libtiff.so.5
/home/kezunlin/anaconda3/envs/py35/lib/libtiff.so.5.4.0
/home/kezunlin/anaconda3/lib/libtiff.so
/home/kezunlin/anaconda3/lib/libtiff.so.5
/home/kezunlin/anaconda3/lib/libtiff.so.5.4.0
/home/kezunlin/anaconda3/pkgs/libtiff-4.0.10-h2733197_2/lib/libtiff.so
/home/kezunlin/anaconda3/pkgs/libtiff-4.0.10-h2733197_2/lib/libtiff.so.5
/home/kezunlin/anaconda3/pkgs/libtiff-4.0.10-h2733197_2/lib/libtiff.so.5.4.0
/opt/MATLAB/R2016b/bin/glnxa64/libtiff.so.5
/opt/MATLAB/R2016b/bin/glnxa64/libtiff.so.5.0.5
/usr/lib/x86_64-linux-gnu/libtiff.so
/usr/lib/x86_64-linux-gnu/libtiff.so.5
/usr/lib/x86_64-linux-gnu/libtiff.so.5.2.4
</code></pre>
<blockquote>
<p>It seems that my OpenCV was compiled against libtiff 4, but I have libtiff 5, how to solve this problem?</p>
</blockquote>
<p>re-compile opencv-3.1.0 again, new errors occur<br>see <a href="https://github.com/opencv/opencv_contrib/issues/1478">here</a></p>
<pre><code>CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
CUDA_nppi_LIBRARY (ADVANCED)
    linked by target &quot;opencv_cudev&quot; in directory /home/kezunlin/program/opencv-3.1.0/modules/cudev
    linked by target &quot;opencv_cudev&quot; in directory /home/kezunlin/program/opencv-3.1.0/modules/cudev
    linked by target &quot;opencv_test_cudev&quot; in directory /home/kezunlin/program/opencv-3.1.0/modules/cudev/test
</code></pre>
<p>solutions:</p>
<pre><code>WITH_CUDA OFF
</code></pre>
<p>  WITH_VTK OFF<br>  WITH_TIFF OFF<br>  BUILD_PERF_TESTS OFF </p>
<blockquote>
<p>for python2, use default <code>/usr/bin/python2.7</code><br>for python3, NOT USE <code>anaconda</code> version<br>编译的过程中，尽量避免使用<code>anaconda</code>目录下的lib</p>
</blockquote>
<p>install libwebp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install libwebp-dev</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pytorch.org/">pytorch</a></li>
<li><a href="https://github.com/pytorch/pytorch">pytorch github</a></li>
<li><a href="https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html">deep_learning_60min_blitz</a></li>
<li><a href="https://github.com/yunjey/pytorch-tutorial">pytorch-tutorial</a></li>
<li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks">pytorch notebooks</a></li>
<li><a href="https://github.com/L1aoXingyu/pytorch-beginner">pytorch-beginner</a></li>
<li><a href="https://pytorch.org/cppdocs">pytorch cppdocs</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190626: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>deep learning for computer vision with python notes</title>
    <url>//blog/deep-learning-for-computer-visoion-with-python-notes/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h3 id="7-knn"><a href="#7-knn" class="headerlink" title="7 knn"></a>7 knn</h3><ul>
<li>no paramter, with training data as model</li>
<li>test not fast<blockquote>
<p>no learn anything</p>
</blockquote>
</li>
</ul>
<h3 id="8-parameterized-learning"><a href="#8-parameterized-learning" class="headerlink" title="8 parameterized learning"></a>8 parameterized learning</h3><ul>
<li>with parameters W,b as model</li>
<li>test very fast<blockquote>
<p>learn parameters</p>
</blockquote>
</li>
</ul>
<h3 id="multi-class-svm-loss-hinge-loss"><a href="#multi-class-svm-loss-hinge-loss" class="headerlink" title="multi-class svm loss&#x2F;hinge loss"></a>multi-class svm loss&#x2F;hinge loss</h3><p>svm with hinge loss </p>
<p><img src="https://kezunlin.me/images/posts/635233-20190709103145987-1108873245.png" alt="hinge loss"></p>
<ul>
<li>hinge loss</li>
<li>squared hinge loss</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190709110153545-1790129406.png" alt="hinge loss example"></p>
<blockquote>
<p>L1 &#x3D; 0,    correct predict<br>L2 &#x3D; 5.96, incorrect predict<br>L3 &#x3D; 5.20, incorrect predict</p>
</blockquote>
<h3 id="cross-entropy-loss-and-softmax-classifiers"><a href="#cross-entropy-loss-and-softmax-classifiers" class="headerlink" title="cross-entropy loss and softmax classifiers"></a>cross-entropy loss and softmax classifiers</h3><p>Softmax classifiers give you probabilities for each class label while hinge loss gives you the<br>margin.</p>
<p><img src="https://kezunlin.me/images/posts/635233-20190709110311106-1386122331.png" alt="cross-entropy loss example"></p>
<h3 id="9-optimization"><a href="#9-optimization" class="headerlink" title="9 optimization"></a>9 optimization</h3><h4 id="GD-and-SGD"><a href="#GD-and-SGD" class="headerlink" title="GD and SGD"></a>GD and SGD</h4><ul>
<li>basic gradient descent(GD): predict all training data and update weights per epoch </li>
<li>stochastic gradient descent(SGD): predict only batch training data and update weights per batch</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190712103138778-12291224.png" alt="GD"><br><img src="https://kezunlin.me/images/posts/635233-20190712103200939-2129687344.png" alt="SGD"></p>
<h4 id="Extensions-to-SGD"><a href="#Extensions-to-SGD" class="headerlink" title="Extensions to SGD"></a>Extensions to SGD</h4><ul>
<li>Momentum based SGD</li>
<li>Nesterov acceration SGD</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190712112130685-1593049237.png" alt="Momentum based SGD"><br><img src="https://kezunlin.me/images/posts/635233-20190712112150135-1831335209.png" alt="Nesterov acceration SGD"></p>
<blockquote>
<p>tips: use Momentum based SGD</p>
</blockquote>
<h4 id="regularization"><a href="#regularization" class="headerlink" title="regularization"></a>regularization</h4><p>add to original cost</p>
<ul>
<li>L1 regularization</li>
<li>L2 regularization(weight decay)</li>
<li>Elastic Net regularization</li>
</ul>
<p><img src="https://kezunlin.me/images/posts/635233-20190712135244331-1511390223.png" alt="regularization"></p>
<p>during training process</p>
<ul>
<li>dropout</li>
<li>data argumentation</li>
<li>early stopping(no-imporovements-in-N)</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="pyimagesearch.com">deep learning for computer vision with python</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190709: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>dl4cv</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to use vscode for remote development using ssh on windows</title>
    <url>//blog/vscode-for-remote-development-using-ssh-on-windows/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<h3 id="local"><a href="#local" class="headerlink" title="local"></a>local</h3><ol>
<li>install ssh-client on local machine.</li>
<li>download <code>VSCodeUserSetup-x64-1.36.1.exe</code> from <a href="https://code.visualstudio.com/insiders/">here</a> and install. </li>
<li>start vscode and install <code>Remote Development</code> extension.</li>
<li>ctrl+shift+p and enter <code>remote-ssh</code> and configure for ssh.</li>
</ol>
<p>edit <code>~/.ssh/config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host node08</span><br><span class="line">    HostName 192.168.100.08</span><br><span class="line">    User root</span><br><span class="line">    ForwardX11 <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">Host node09</span><br><span class="line">    HostName 192.168.100.09</span><br><span class="line">    User root </span><br><span class="line">    ForwardX11 <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>use <code>ssh-keygen</code> instead of <code>username and password</code><br>copy local <code>~/.ssh/id_rsa.pub</code> to remote <code>~/.ssh/authorized_keys</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br><span class="line"><span class="built_in">ls</span> .ssh/</span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br><span class="line"></span><br><span class="line">ssh-copy-id node08</span><br><span class="line">ssh-copy-id node09</span><br></pre></td></tr></table></figure>

<p>OK. Now we can ssh without password like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usage </span></span><br><span class="line">ssh node08</span><br><span class="line">ssh node09</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">### ssh without terminal closed</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># on server</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 每隔30s向客户端发送一次,确保terminal不会断开</span></span><br><span class="line">ClientAliveInterval  30</span><br><span class="line"><span class="built_in">sudo</span> service sshd reload</span><br></pre></td></tr></table></figure>

<h3 id="debug-python-with-vscode"><a href="#debug-python-with-vscode" class="headerlink" title="debug python with vscode"></a>debug python with vscode</h3><pre><code>Ctrl+Shift+P 
Python: Select Interpreter

~/anaconda3/envs/torch/bin/python
</code></pre>
<p>Debug shortcuts</p>
<pre><code>F11 step in
F10 step over
F5 continue
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://codepen.io/ginfuru/post/remote-editing-files-with-ssh">remote-editing-files-with-ssh</a></li>
<li><a href="https://code.visualstudio.com/docs/remote/ssh">vscode ssh</a></li>
<li><a href="https://code.visualstudio.com/docs/python/debugging">debugging</a></li>
<li><a href="https://code.visualstudio.com/docs/python/environments">environments</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190729: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>dl notes</title>
    <url>//blog/dl-notes/</url>
    <content><![CDATA[<h2 id="Quick-Links"><a href="#Quick-Links" class="headerlink" title="Quick Links"></a>Quick Links</h2><h3 id="kaggle"><a href="#kaggle" class="headerlink" title="kaggle"></a>kaggle</h3><ul>
<li><a href="https://www.kaggle.com/shivamb/data-science-glossary-on-kaggle">data-science-glossary-on-kaggle</a><blockquote>
<p>+860</p>
</blockquote>
</li>
</ul>
<h3 id="blogs"><a href="#blogs" class="headerlink" title="blogs"></a>blogs</h3><p>en</p>
<ul>
<li><a href="https://www.pyimagesearch.com/">pyimagesearch</a></li>
<li><a href="http://www.zubairahmed.net/">zubairahmed Deep Learning Practitioner</a></li>
<li><a href="https://www.learnopencv.com/">LearnOpenCV</a></li>
<li><a href="https://www.hackevolve.com/">MACHINE INTELLIGENCE<br>FOR HUMANS</a></li>
<li><a href="http://zbigatron.com/">zbigatron Computer Vision and AI</a></li>
</ul>
<p>zh</p>
<ul>
<li><a href="https://www.aiuai.cn/category/gpus/">ai and gpu</a></li>
</ul>
<p>less useful</p>
<ul>
<li><a href="https://nummist.com/opencv/default.aspx">Joseph Howse</a></li>
<li><a href="https://blog.piekniewski.info/">Piekniewski’s blog</a></li>
</ul>
<h3 id="themed-topics"><a href="#themed-topics" class="headerlink" title="themed topics"></a>themed topics</h3><h4 id="image-video-processing"><a href="#image-video-processing" class="headerlink" title="image video processing"></a>image video processing</h4><ul>
<li><a href="http://vmlaker.github.io/">vmlaker c++&#x2F;python image video processing</a></li>
<li><a href="https://hui-wang.info/2017/01/01/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BB%B7%E5%80%BC/">how to improve programmer’s value</a></li>
</ul>
<h4 id="Raspberry-Pi"><a href="#Raspberry-Pi" class="headerlink" title="Raspberry Pi"></a>Raspberry Pi</h4><ul>
<li><a href="https://www.pyimagesearch.com/2019/03/18/im-writing-a-book-on-computer-vision-and-the-raspberry-pi-and-i-need-your-input/">Movidius NCS and OpenVINO toolkit</a></li>
<li><a href="https://software.intel.com/es-es/node/762799?language=en">Movidius NCS with caffe</a></li>
</ul>
<blockquote>
<p>NCS(Neural Computing Stick)支持Caffe和Tensorflow框架训练出来的模型。<br>NCS SDK API提供了Python和C语言的支持。<br>Intel’s Movidius NCS and OpenVINO toolkit<br>Movidius APIv1—&gt;Movidius APIv2—&gt; OpenVINO<br>OpenVINO supports Intel CPUs, GPUs, FPGAs, and VPUs.<br>Movidius VPU (Vision Processing Unit)</p>
</blockquote>
<h3 id="papers"><a href="#papers" class="headerlink" title="papers"></a>papers</h3><ul>
<li><a href="https://paperswithcode.com/sota">paperswithcode</a></li>
<li><a href="http://www.arxiv-sanity.com/">arxiv-sanity</a></li>
<li><a href="scholar.google.com/">google schloar</a></li>
<li><a href="https://www.semanticscholar.org/">semanticscholar</a></li>
<li><a href="https://researchcode.com/">researchcode</a></li>
</ul>
<h3 id="online-books"><a href="#online-books" class="headerlink" title="online books"></a>online books</h3><p>Publisher</p>
<ul>
<li><a href="https://www.oreilly.com/">oreilly</a></li>
<li><a href="https://www.packtpub.com/data/deep-learning">packtpub</a></li>
<li><a href="https://www.manning.com/">manning</a></li>
</ul>
<p>free books </p>
<ul>
<li><a href="http://www.allitebooks.in/learning-image-processing-with-opencv/">free books</a></li>
<li><a href="https://sanet.st/blogs/polatebooks/">e-books</a></li>
</ul>
<p>specific books </p>
<ul>
<li><a href="https://www.ebook3000.co/generative-deep-learning/">Generative Deep Learning</a></li>
<li><a href="https://github.com/ageron/handson-ml">handson-ml book</a></li>
</ul>
<h3 id="online-courses"><a href="#online-courses" class="headerlink" title="online courses"></a>online courses</h3><h4 id="cs231n"><a href="#cs231n" class="headerlink" title="cs231n"></a>cs231n</h4><p>cs231n </p>
<ul>
<li><a href="http://vision.stanford.edu/teaching/cs231n/syllabus.html">cs231n&#x2F;syllabus</a></li>
<li><a href="http://cs231n.github.io/">cs231n.github.io</a></li>
</ul>
<p>github</p>
<ul>
<li><a href="https://github.com/mbadry1/CS231n-2017-Summary">CS231n-2017-Summary</a></li>
<li><a href="https://github.com/Burton2000/CS231n-2017">CS231n-2017</a></li>
</ul>
<h4 id="self-driving-cars"><a href="#self-driving-cars" class="headerlink" title="self-driving cars"></a>self-driving cars</h4><ul>
<li><a href="https://www.coursera.org/learn/visual-perception-self-driving-cars">visual-perception-self-driving-cars</a></li>
</ul>
<h3 id="GitHub-Tools"><a href="#GitHub-Tools" class="headerlink" title="GitHub Tools"></a>GitHub Tools</h3><h4 id="machine-learning"><a href="#machine-learning" class="headerlink" title="machine learning"></a>machine learning</h4><ul>
<li><p><a href="https://github.com/abhayspawar/featexp">featexp特征探索工具</a></p>
</li>
<li><p><a href="https://github.com/yzhao062/combo">combo: A Python Toolbox for Machine Learning Model Combination</a></p>
</li>
<li><p><a href="https://github.com/pandas-profiling/pandas-profiling">pandas-profiling</a></p>
<blockquote>
<p>pandas-profiling，一行代码生成超详细数据分析报告。</p>
</blockquote>
</li>
<li><p><a href="https://github.com/PAIR-code/facets">facets</a></p>
<blockquote>
<p>facebook的facets, Visualizations for machine learning datasets</p>
</blockquote>
</li>
</ul>
<h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><ul>
<li><a href="https://github.com/cool-RR/PySnooper">pysnooper</a></li>
<li><a href="https://github.com/zasdfgbnm/TorchSnooper">totchsnooper</a></li>
</ul>
<h4 id="nvidia"><a href="#nvidia" class="headerlink" title="nvidia"></a>nvidia</h4><ul>
<li><a href="https://developer.nvidia.com/embedded/twodaystoademo">nvidia Jetson</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference">jetson-inference</a></li>
</ul>
<h4 id="mxnet"><a href="#mxnet" class="headerlink" title="mxnet"></a>mxnet</h4><ul>
<li><a href="https://github.com/apache/incubator-mxnet">mxnet</a></li>
<li><a href="https://github.com/dmlc/gluon-cv">gluon-cv</a></li>
<li><a href="https://github.com/dmlc/gluon-nlp">gluon-nlp</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/55996985">tvm deploy mxnet nodels</a></li>
</ul>
<h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><ul>
<li><a href="https://revealjs.com/#/">Reveal.js</a><blockquote>
<p>把 Reveal.js 以及类似的 HTML 5 幻灯免费存放在 Github 上，利用 Github Pages 在线播放和分享 Reveal.js 幻灯</p>
</blockquote>
</li>
<li><a href="https://github.com/pyecharts/pyecharts">Pyecharts</a></li>
<li><a href="www.kepler.gl/">uber的kepler.gl</a></li>
</ul>
<h3 id="Train-Skills"><a href="#Train-Skills" class="headerlink" title="Train Skills"></a>Train Skills</h3><p>gan训练技巧</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/HuB0yIbtKoTj21kTudKArw">gan训练技巧 中文</a> </li>
<li><a href="https://towardsdatascience.com/10-lessons-i-learned-training-generative-adversarial-networks-gans-for-a-year-c9071159628">gan训练技巧 英文</a></li>
</ul>
<p>pytorch with dail for training</p>
<ul>
<li><p><a href="https://mp.weixin.qq.com/s/r8K3jZsmpRnSoVijKXZkMA">使用nvidia的dail,使用内存disk 加速gpu训练</a></p>
</li>
<li><p><a href="https://github.com/tanglang96/DataLoaders_DALI">dail code</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/JLMe0lJ6SAhOtrLR9IYEjQ">pytorch坑汇总 </a></p>
</li>
</ul>
<h3 id="Architectures"><a href="#Architectures" class="headerlink" title="Architectures"></a>Architectures</h3><h4 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h4><ul>
<li>lenet 1999,alexnet 2012,vggnet 2013,googlenet 2013,inception v1-v4, xception, resnet 2015, </li>
<li>squeezenet, densenet, mobilenet, unet</li>
<li>rcnn,fast rcnn,faster rcnn,mask rcnn</li>
<li>ssd,yolo v1 v2 v3，retinanet(focal loss)</li>
</ul>
<h4 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h4><ul>
<li>ResNeXt: ResNet的优化版ResNeXt,100层相当于resnet200层的精度。一个ResNet打所有，如果不行，那就Stacked Hourglass，还不行就SEResNet。</li>
<li>SEResNet</li>
<li>yolov3 tiny,yolov3 spp1,yolov3 spp3，slim yolov3 spp3(无人机目标检测)</li>
</ul>
<h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><ul>
<li>cnn倾向于学习到纹理信息，而不是形状信息。<a href="https://cugtyt.github.io/blog/papers/2019/0708">here</a></li>
<li><a href="https://mp.weixin.qq.com/s/8DFbRI6gsjFL3-I1nBmGqg">细粒度图像分类</a></li>
<li><a href="https://eng.uber.com/coordconv/">coordconv坐标卷积</a></li>
</ul>
<h3 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h3><ul>
<li><a href="https://arxiv.org/abs/1908.03673">目标检测综述Recent Advances in Deep Learning for Object Detection</a></li>
<li><a href="https://towardsdatascience.com/evolution-of-object-detection-and-localization-algorithms-e241021d8bad">evolution-of-object-detection-and-localization-algorithms</a></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S092523121830924X">Evaluation of deep neural networks for traffic sign detection systems</a><blockquote>
<p>本文比较各目标检测算法在交通标志检测任务中的综合性能。一共比较了8种模型(Faster R-CNN, R-FCN, SSD和 YOLO V2)，用5项指标（mAP&#x2F;FPS&#x2F;参数&#x2F;内存&#x2F;FLOPS）进行性能评价。</p>
</blockquote>
</li>
</ul>
<h4 id="anchor-based"><a href="#anchor-based" class="headerlink" title="anchor-based"></a>anchor-based</h4><ul>
<li>《IoU Loss for 2D&#x2F;3D Object Detection》 注：可提高 2D&#x2F;3D 目标检测的 mAP</li>
<li>IoU-balanced RetinaNet: 专用于Single-stage目标检测的IoU损失函数，如 IoU-balanced RetinaNet 相对于RetinaNet涨点1.1%，特别是高IoU，如涨点2.3% for AP90</li>
<li>上交&amp;中南&amp;南理提出：R3Det 适用于旋转目标的检测网络，综合性能优于RRPN、R2CNN和RetinaNet-R等网络，在航拍图像和场景文本检测数据集上表现SOTA</li>
</ul>
<h4 id="anchor-free"><a href="#anchor-free" class="headerlink" title="anchor-free"></a>anchor-free</h4><ul>
<li><a href="https://mp.weixin.qq.com/s/CqNdfdW5wXZTtP1b6wi6iQ">Matrix Net (xNet)</a><blockquote>
<p>基于关键点的目标检测器中，18 年提出的 CornerNet 是开山之作，今年又沿着它提出了 CenterNet。这些非常厉害的 single-shot 检测器看起来效果都不如 xNet(matrix net)</p>
</blockquote>
</li>
</ul>
<h3 id="Semantic-Segmentation"><a href="#Semantic-Segmentation" class="headerlink" title="Semantic Segmentation"></a>Semantic Segmentation</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/ektiUl_H_JlUJdaba-NGsw">语义分割总结</a></li>
</ul>
<h3 id="Instance-Segmentation"><a href="#Instance-Segmentation" class="headerlink" title="Instance Segmentation"></a>Instance Segmentation</h3><h3 id="Optimizers"><a href="#Optimizers" class="headerlink" title="Optimizers"></a>Optimizers</h3><ul>
<li>lookahead,SGD,RMSProp, Adam基础之上的wrapper optimizer</li>
<li><a href="https://mp.weixin.qq.com/s/scGkuMJ4lZULhmK69vWYpA">RAdam</a><blockquote>
<p> Adam、RMSProp这些算法虽然收敛速度很快，当往往会掉入局部最优解的“陷阱”；原始的SGD方法虽然能收敛到更好的结果，但是训练速度太慢。<br>最近，一位来自UIUC的中国博士生Liyuan Liu提出了一个新的优化器RAdam。它兼有Adam和SGD两者的优点，既能保证收敛速度快，也不容易掉入局部最优解，而且收敛结果对学习率的初始值非常不敏感。在较大学习率的情况下，RAdam效果甚至还优于SGD。目前论文作者已将RAdam开源，FastAI现在已经集成了RAdam，只需几行代码即可直接调用。RAdam在图像分类、语言建模，以及机器翻译等等许多任务上，都证明有效。<br>上次的adabound出来的时候adam也退休了一波，但是现在还是在用adam。</p>
</blockquote>
</li>
</ul>
<h3 id="Normization"><a href="#Normization" class="headerlink" title="Normization"></a>Normization</h3><ul>
<li><a href="https://arxiv.org/abs/1908.01259">新的归一化方法 AN：Attentive Normalization</a><blockquote>
<p>注意力归一化，从性能上看，AN 要优于 BN、GN和SN等归一化方法，From 北卡罗来纳大学</p>
</blockquote>
</li>
</ul>
<h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/uLkhJ6eYbuy_fHXu5jt0sg">attention系统总结</a></li>
<li><a href="https://danvatterott.com/blog/2016/09/20/attention-in-a-convolutional-neural-net/">attention-in-a-convolutional-neural-net</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/77834369">语义分割中的Attention和低秩重建</a></li>
</ul>
<h3 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h3><h3 id="AutoML"><a href="#AutoML" class="headerlink" title="AutoML"></a>AutoML</h3><h3 id="Graph-NN"><a href="#Graph-NN" class="headerlink" title="Graph NN"></a>Graph NN</h3><ul>
<li>pytorch_geometric: 几年来，图神经网络（GNN）在推荐系统、搜索引擎、计算机视觉等领域中都引起了较大的关注。Github有大量开源GNN实现，其中pytorch_geometric是最优秀的实现之一，曾被Yann LeCun推荐</li>
</ul>
<h3 id="Self-Driving"><a href="#Self-Driving" class="headerlink" title="Self-Driving"></a>Self-Driving</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/uHOSSkQgjJHuLadk7UhOwg">PonyAI小马智行 感知系统技术细节</a></li>
<li><a href="https://mp.weixin.qq.com/s/XEcuXnLD3glxKN2N5dAq2Q">传统方法还是深度学习？优点兼得的感知策略</a></li>
</ul>
<h3 id="New-Ideas"><a href="#New-Ideas" class="headerlink" title="New Ideas"></a>New Ideas</h3><ul>
<li><p><a href="https://mp.weixin.qq.com/s/OnkM6lTmATuRkhuuSQnEZQ">国内首发Nature子刊 Machine Intelligence论文：思想精妙，或对DNN有重大改进</a></p>
<blockquote>
<p>在连续学习的标准任务disjoint MNIST与shuffled MNIST任务中，OWM算法的表现超过了同类的其他算法。并且，随着学习的任务数目增加，OWM算法的性能优势会进一步加大。<br>代码 <a href="https://github.com/beijixiong3510/OWM">OWM</a> 22stars 8-9</p>
</blockquote>
</li>
<li><p>multi-Grained Cascade Forest(gcForest): 周志华教授指出了深度学习的另一方案，介绍了他们研究的技术 gcForest （multi-Grained Cascade Forest），借鉴 DNN 的特征表示学习，以及集成学习，利用决策树森林的方法，去达到深度模型的效果。</p>
</li>
<li><p>HSIC-Bottleneck： 研究者介绍了用于训练深度神经网络的希尔伯特·施密特独立准则（Hilbert-Schmidt independence criterion，HSIC）Bottleneck，用它来代替反向传播简直非常美妙了。表示，HSIC-Bottleneck 的表现在 MNIST&#x2F;FashionMNIST&#x2F;CIFAR10 分类中的表现与具有交叉熵目标函数的反向传播算法相当。</p>
</li>
<li><p>基于知识图谱的因果推理: Judea Pearl的因果革命，后面的突破口应该在基于知识图谱的因果推理上面。</p>
</li>
</ul>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li>基于深度学习的推荐系统，代码数据集缺失，大多数结果无法复现。其次，效果也不如传统推荐算法。</li>
<li>视觉计数(Visual Counting): From Open Set to Closed Set: Counting Objects by Spatial Divide-and-Conquer<blockquote>
<p>本算法在人群计数，车辆计数和植物计数这3个数据集上进行测试，表现SOTA。   From 华中科技&amp;阿德莱德大学</p>
</blockquote>
</li>
</ul>
<h3 id="geoai"><a href="#geoai" class="headerlink" title="geoai"></a>geoai</h3><ul>
<li><a href="https://medium.com/geoai/integrating-deep-learning-with-gis-70e7c5aa9dfe">geoai</a></li>
</ul>
<h3 id="ml-for-fiance"><a href="#ml-for-fiance" class="headerlink" title="ml for fiance"></a>ml for fiance</h3><ul>
<li><a href="https://www.infoq.cn/article/DeAOzoiikssW1Pgcc1ug">搞了个机器学习交易系统，5000美元投资变成了20万</a></li>
</ul>
<h3 id="ml-for-football-sports"><a href="#ml-for-football-sports" class="headerlink" title="ml for football&#x2F;sports"></a>ml for football&#x2F;sports</h3><p>football with ml</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/52956024">利用机器学习预测足球比赛</a></p>
</li>
<li><p><a href="https://www.itcodemonkey.com/article/4283.html">机器学习预测世界杯：巴西夺冠</a></p>
</li>
<li><p><a href="https://medium.com/@neoyipeng/what-ive-learnt-predicting-soccer-matches-with-machine-learning-b3f8b445149d">predicting-soccer-matches-with-machine-learning</a></p>
</li>
<li><p><a href="https://towardsdatascience.com/predicting-premier-league-odds-from-ea-player-bfdb52597392">predicting-premier-league-odds-from-ea-player</a></p>
</li>
<li><p><a href="https://medium.com/@ibigbets/how-to-be-profitable-on-football-betting-in-2019-9371f9bec46e">how-to-be-profitable-on-football-betting</a></p>
</li>
<li><p><a href="https://mc.ai/predicting-football-results-using-neural-networks/amp/">predicting-football-results-using-neural-networks&#x2F;amp</a></p>
</li>
<li><p><a href="https://dashee87.github.io/football/python/predicting-football-results-with-statistical-modelling/">predicting-football-results-with-statistical-modelling</a></p>
</li>
<li><p><a href="https://jasonfu.github.io/2016/07/18/poisson-predict-football/">poisson-predict-football</a></p>
</li>
</ul>
<p>best</p>
<ul>
<li><a href="https://www.kaggle.com/raddar">raddar</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/63795586">Sports+AI Kaggle体育比赛预测总结</a></li>
</ul>
<p>关于赔率时间序列的dataset和其中的一个kernel</p>
<ul>
<li><p><a href="https://www.kaggle.com/austro/beat-the-bookie-worldwide-football-dataset">beat-the-bookie-worldwide-football-dataset</a></p>
</li>
<li><p><a href="https://www.kaggle.com/austro/reproduction-of-winning-strategy-kernel">reproduction-of-winning-strategy-kernel</a></p>
</li>
<li><p><a href="http://www.caicai.ai/webguan/search.html">用深度学习解决体育赛事预测问题</a></p>
</li>
</ul>
<p>github repo</p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190821: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>install and configure deep learning environments on linux server</title>
    <url>//blog/quick-guide-for-dl4cv-book/</url>
    <content><![CDATA[<h2 id="Quick-Guide"><a href="#Quick-Guide" class="headerlink" title="Quick Guide"></a>Quick Guide</h2><h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h3><h4 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h4><ul>
<li>MobaXterm (for windows)</li>
<li>ssh + vscode</li>
</ul>
<blockquote>
<p>for windows:<br>drop files to MobaXterm to upload to server<br>use <code>zip</code> format</p>
</blockquote>
<h4 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h4><p>view disk </p>
<pre><code>du -d 1 -h
df -h
</code></pre>
<p>gpu and cpu usage </p>
<pre><code>watch -n 1 nvidia-smi
top 
</code></pre>
<p>view files and count </p>
<pre><code>wc -l data.csv

# count how many folders
ls -lR | grep &#39;^d&#39; | wc -l
17

# count how many jpg files
ls -lR | grep &#39;.jpg&#39; | wc -l
1360

# view 10 images 
ls train | head
ls test | head
</code></pre>
<p>link datasets</p>
<pre><code># link 
ln -s srt dest
ln -s /data_1/kezunlin/datasets/ dl4cv/datasets
</code></pre>
<p>scp </p>
<pre><code>scp -r node17:~/dl4cv  ~/git/
scp -r node17:~/.keras ~/
</code></pre>
<p>tmux for background tasks</p>
<pre><code>tmux new -s notebook
tmux ls 
tmux attach -t notebook
tmux detach
</code></pre>
<p>wget download </p>
<pre><code># wget 
# continue donwload
wget -c url 

# background donwload for large file
wget -b -c url
tail -f wget-log

# kill background wget
pkill -9 wget
</code></pre>
<p><strong>tips about training large model</strong></p>
<p>terminal 1:</p>
<pre><code>tmux new -s train
conda activate keras

time python train_alexnet.py
</code></pre>
<p>terminal 2:</p>
<pre><code>tmux detach

tmux attach -t train
</code></pre>
<p>and then close vscode, otherwise bash training process will exit when we close vscode.</p>
<h3 id="cuda-driver-and-toolkits"><a href="#cuda-driver-and-toolkits" class="headerlink" title="cuda driver and toolkits"></a>cuda driver and toolkits</h3><p>see <a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">cuda-toolkit for cuda driver version</a></p>
<blockquote>
<p>cudatookit version depends on cuda driver version.</p>
</blockquote>
<h4 id="install-nvidia-drivers"><a href="#install-nvidia-drivers" class="headerlink" title="install nvidia-drivers"></a><del>install nvidia-drivers</del></h4><pre><code>sudo add-apt-repository ppa:graphics-drivers/ppa
sudp apt-get update

sudo apt-cache search nvidia-*
# nvidia-384
# nvidia-396
sudo apt-get -y install nvidia-418

# test 
nvidia-smi
Failed to initialize NVML: Driver/library version mismatch
</code></pre>
<blockquote>
<p>reboot to test again<br><a href="https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch">https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch</a></p>
</blockquote>
<h4 id="install-cuda-toolkit-dirvers"><a href="#install-cuda-toolkit-dirvers" class="headerlink" title="install cuda-toolkit(dirvers)"></a>install cuda-toolkit(dirvers)</h4><p>remove all previous nvidia drivers</p>
<pre><code>sudo apt-get -y pruge nvidia-*
</code></pre>
<p>go to <a href="https://developer.nvidia.com/cuda-toolkit-archive">here</a> and download <code>cuda_10.1</code></p>
<pre><code>wget -b -c http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run
sudo sh cuda_10.1.243_418.87.00_linux.run

sudo ./cuda_10.1.243_418.87.00_linux.run

vim .bashrc
# for cuda and cudnn
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
</code></pre>
<p>check cuda driver version </p>
<pre><code>&gt; cat /proc/driver/nvidia/version
NVRM version: NVIDIA UNIX x86_64 Kernel Module  418.87.00  Thu Aug  8 15:35:46 CDT 2019
GCC version:  gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) 


&gt;nvidia-smi
Tue Aug 27 17:36:35 2019       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 418.87.00    Driver Version: 418.87.00    CUDA Version: 10.1     |
|-------------------------------+----------------------+----------------------+


&gt; nvidia-smi -L
GPU 0: Quadro RTX 8000 (UUID: GPU-acb01c1b-776d-cafb-ea35-430b3580d123)
GPU 1: Quadro RTX 8000 (UUID: GPU-df7f0fb8-1541-c9ce-e0f8-e92bccabf0ef)
GPU 2: Quadro RTX 8000 (UUID: GPU-67024023-20fd-a522-dcda-261063332731)
GPU 3: Quadro RTX 8000 (UUID: GPU-7f9d6a27-01ec-4ae5-0370-f0c356327913)

&gt; nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="install-conda"><a href="#install-conda" class="headerlink" title="install conda"></a>install conda</h3><pre><code>./Anaconda3-2019.03-Linux-x86_64.sh 
[yes]
[yes]
</code></pre>
<h3 id="config-channels"><a href="#config-channels" class="headerlink" title="config channels"></a>config channels</h3><pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/

conda config --set show_channel_urls yes
</code></pre>
<h3 id="install-libraries"><a href="#install-libraries" class="headerlink" title="install libraries"></a>install libraries</h3><p>conclusions:</p>
<ul>
<li>py37&#x2F;keras: conda install -y tensorflow-gpu keras&#x3D;&#x3D;2.2.5 </li>
<li>py37&#x2F;torch: conda install -y pytorch torchvision</li>
<li>py36&#x2F;mxnet: conda install -y mxnet</li>
</ul>
<blockquote>
<p>keras 2.2.5 was released on 2019&#x2F;8&#x2F;23.<br>Add new Applications: ResNet101, ResNet152, ResNet50V2, ResNet101V2, ResNet152V2.</p>
</blockquote>
<p>common libraries </p>
<pre><code>conda install -y scikit-learn scikit-image pandas matplotlib pillow opencv seaborn
pip install imutils progressbar pydot pylint
</code></pre>
<blockquote>
<p><code>pip install imutils</code>  to avoid downgrade for tensorflow-gpu </p>
</blockquote>
<h4 id="py37"><a href="#py37" class="headerlink" title="py37"></a>py37</h4><pre><code>cudatoolkit               10.0.130                  0    
cudnn                     7.6.0                cuda10.0_0    
tensorflow-gpu            1.13.1 
</code></pre>
<h4 id="py36"><a href="#py36" class="headerlink" title="py36"></a>py36</h4><pre><code>cudatoolkit        anaconda/pkgs/main/linux-64::cudatoolkit-10.1.168-0
cudnn              anaconda/pkgs/main/linux-64::cudnn-7.6.0-cuda10.1_0
tensorboard        anaconda/pkgs/main/linux-64::tensorboard-1.14.0-py36hf484d3e_0
tensorflow         anaconda/pkgs/main/linux-64::tensorflow-1.14.0-gpu_py36h3fb9ad6_0
tensorflow-base    anaconda/pkgs/main/linux-64::tensorflow-base-1.14.0-gpu_py36he45bfe2_0
tensorflow-estima~ anaconda/cloud/conda-forge/linux-64::tensorflow-estimator-1.14.0-py36h5ca1d4c_0
tensorflow-gpu     anaconda/pkgs/main/linux-64::tensorflow-gpu-1.14.0-h0d30ee6_0
</code></pre>
<blockquote>
<p>imutils only support 36 and 37.<br>mxnet only support 35 and 36.</p>
</blockquote>
<h4 id="details"><a href="#details" class="headerlink" title="details"></a>details</h4><pre><code># remove py35
conda remove -n py35 --all

conda info --envs

conda create -n py37 python==3.7
conda activate py37

# common libraries
conda install -y scikit-learn pandas pillow opencv
pip install imutils

# imutils
conda search imutils  
# py36 and py37

# Name                       Version           Build  Channel             
imutils                        0.5.2          py27_0  anaconda/cloud/conda-forge
imutils                        0.5.2          py36_0  anaconda/cloud/conda-forge
imutils                        0.5.2          py37_0  anaconda/cloud/conda-forge

# tensorflow-gpu and keras
conda install -y tensorflow-gpu keras

# install pytorch
conda install -y pytorch torchvision

# install mxnet
# method 1: pip
pip search mxnet
mxnet-cu80[mkl]/mxnet-cu90[mkl]/mxnet-cu91[mkl]/mxnet-cu92[mkl]/mxnet-cu100[mkl]/mxnet-cu101[mkl]

# method 2: conda
conda install mxnet
# py35 and py36
</code></pre>
<h4 id="TensorFlow-Object-Detection-API"><a href="#TensorFlow-Object-Detection-API" class="headerlink" title="TensorFlow Object Detection API"></a>TensorFlow Object Detection API</h4><p>home page: <a href="https://github.com/tensorflow/models/tree/master/research/object_detection">home page</a></p>
<p>download <a href="https://github.com/tensorflow/models">tensorflow models</a> and rename <code>models-master</code> to <code>tfmodels</code></p>
<p>vim ~&#x2F;.bashrc </p>
<pre><code>export PYTHONPATH=/home/kezunlin/dl4cv:/data_1/kezunlin/tfmodels/research:$PYTHONPATH
</code></pre>
<p>source ~&#x2F;.bashrc</p>
<h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><pre><code>conda activate py37
conda install -y jupyter 
</code></pre>
<h4 id="install-kernels"><a href="#install-kernels" class="headerlink" title="install kernels"></a>install kernels</h4><pre><code>python -m ipykernel install --user --name=py37
Installed kernelspec py37 in /home/kezunlin/.local/share/jupyter/kernels/py37
</code></pre>
<h4 id="config-for-server"><a href="#config-for-server" class="headerlink" title="config for server"></a>config for server</h4><pre><code>python -c &quot;import IPython;print(IPython.lib.passwd())&quot;
Enter password: 
Verify password: 
sha1:ef2fb2aacff2:4ea2998699638e58d10d594664bd87f9c3381c04

jupyter notebook --generate-config
Writing default config to: /home/kezunlin/.jupyter/jupyter_notebook_config.py

vim .jupyter/jupyter_notebook_config.py

c.NotebookApp.ip = &#39;*&#39;  
c.NotebookApp.password = u&#39;sha1:xxx:xxx&#39; 
c.NotebookApp.open_browser = False 
c.NotebookApp.port = 8888 
c.NotebookApp.enable_mathjax = True
</code></pre>
<h4 id="run-jupyter-on-background"><a href="#run-jupyter-on-background" class="headerlink" title="run jupyter on background"></a>run jupyter on background</h4><pre><code>tmux new -s notebook
jupyter notebook
# ctlr+b+d exit session and DO NOT close session
# ctlr+d exit session and close session
</code></pre>
<p>access <a href="http://192.168.100.27:8888/">web</a> and input password</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="py37-1"><a href="#py37-1" class="headerlink" title="py37"></a>py37</h4><pre><code>import cv2
cv2.__version
import tensorflow as tf
import keras 
import torch
import torchvision
</code></pre>
<p>cat .keras&#x2F;keras.json</p>
<pre><code>&#123;
    &quot;epsilon&quot;: 1e-07,
    &quot;floatx&quot;: &quot;float32&quot;,
    &quot;backend&quot;: &quot;tensorflow&quot;,
    &quot;image_data_format&quot;: &quot;channels_last&quot;
&#125;
</code></pre>
<h4 id="py36-1"><a href="#py36-1" class="headerlink" title="py36"></a>py36</h4><pre><code>import mxnet
</code></pre>
<h3 id="train-demo"><a href="#train-demo" class="headerlink" title="train demo"></a>train demo</h3><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><pre><code># use CPU only
export CUDA_VISIBLE_DEVICES=&quot;&quot;

# use gpu 0 1
export CUDA_VISIBLE_DEVICES=&quot;0,1&quot;
</code></pre>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><pre><code>import os
os.environ[&#39;CUDA_VISIBLE_DEVICES&#39;] = &quot;0,1&quot;
</code></pre>
<p>start train </p>
<pre><code>python train.py
</code></pre>
<h3 id="keras-folder"><a href="#keras-folder" class="headerlink" title=".&#x2F;keras folder"></a>.&#x2F;keras folder</h3><p>view keras models and datasets</p>
<pre><code>ls .keras/
datasets  keras.json  models
</code></pre>
<blockquote>
<p>models saved to  <code>/home/kezunlin/.keras/models/</code><br>datasets saved to  <code>/home/kezunlin/.keras/datasets/</code></p>
</blockquote>
<p>models lists</p>
<ul>
<li><a href="https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5">vgg16</a></li>
<li><a href="https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5">vgg19</a></li>
<li><a href="https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5">resnet50</a></li>
<li><a href="https://github.com/fchollet/deep-learning-models/releases/download/v0.5/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5">inceptionv3</a></li>
<li><a href="https://github.com/fchollet/deep-learning-models/releases/download/v0.4/xception_weights_tf_dim_ordering_tf_kernels_notop.h5">xception</a></li>
</ul>
<blockquote>
<p><code>xxx_kernels_notop.h5</code> for <code>include_top = False</code><br><code>xxx_kernels.h5</code> for <code>include_top = True</code></p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><h3 id="mnist"><a href="#mnist" class="headerlink" title="mnist"></a>mnist</h3><h3 id="cifar10"><a href="#cifar10" class="headerlink" title="cifar10"></a>cifar10</h3><p>to skip download </p>
<pre><code>wget http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz
mv ~/Download/cifar-10-python.tar.gz ~/.keras/datasets/cifar-10-batches-py.tar.gz
</code></pre>
<p>to load data </p>
<pre><code>(x_train, y_train), (x_test, y_test) = cifar10.load_data()
</code></pre>
<h3 id="flowers-17"><a href="#flowers-17" class="headerlink" title="flowers-17"></a>flowers-17</h3><ul>
<li><a href="http://www.robots.ox.ac.uk/~vgg/data/flowers/17/">offical flowers-17</a></li>
<li><a href="https://github.com/danqu130/classification_17flowers/tree/master/data">data</a></li>
<li><a href="https://github.com/naoya3e/17flowers-classification/tree/master/data/train.csv">train.csv</a></li>
<li><a href="https://github.com/naoya3e/17flowers-classification/blob/master/data/test.csv">test.csv</a></li>
</ul>
<h3 id="animals"><a href="#animals" class="headerlink" title="animals"></a>animals</h3><ul>
<li><a href="https://github.com/shengqishi8787/Starter_Bundle/tree/master/datasets/animals">cat dog panda</a></li>
</ul>
<blockquote>
<p>panda images are WRONG !!!</p>
</blockquote>
<p>counts </p>
<pre><code>ls -lR animals/cat | grep &quot;.jpg&quot; | wc -l
1000
ls -lR animals/dog | grep &quot;.jpg&quot; | wc -l
1000
ls -lR animals/panda | grep &quot;.jpg&quot; | wc -l
1000
</code></pre>
<h3 id="kaggle-cats-vs-dogs"><a href="#kaggle-cats-vs-dogs" class="headerlink" title="kaggle cats vs dogs"></a>kaggle cats vs dogs</h3><ul>
<li><a href="https://www.kaggle.com/c/dogs-vs-cats/data">dogs-vs-cats</a></li>
</ul>
<h3 id="caltech101"><a href="#caltech101" class="headerlink" title="caltech101"></a>caltech101</h3><ul>
<li><a href="http://www.vision.caltech.edu/Image_Datasets/Caltech101/101_ObjectCategories.tar.gz">caltech101</a></li>
</ul>
<p>download background </p>
<pre><code>wget -b -c http://www.vision.caltech.edu/Image_Datasets/Caltech101/101_ObjectCategories.tar.gz
</code></pre>
<h2 id="Kaggle-API"><a href="#Kaggle-API" class="headerlink" title="Kaggle API"></a>Kaggle API</h2><h3 id="install-and-config"><a href="#install-and-config" class="headerlink" title="install and config"></a>install and config</h3><p>see <a href="https://github.com/Kaggle/kaggle-api">kaggle-api</a></p>
<pre><code>conda activate keras
conda install kaggle

# download kaggle.json
mv kaggle.json ~/.kaggle/kaggle.json
chmod 600 ~/.kaggle/kaggle.json

cat kaggle.json
&#123;&quot;username&quot;:&quot;xxx&quot;,&quot;key&quot;:&quot;yyy&quot;&#125;
</code></pre>
<p>or by export </p>
<pre><code>export KAGGLE_USERNAME=xxx
export KAGGLE_KEY=yyy
</code></pre>
<blockquote>
<p>tips</p>
<ol>
<li>go to <a href="https://www.kaggle.com/xxx/account">account</a> and select ‘Create API Token’ and <code>keras.json</code> will be downloaded.</li>
<li>Ensure <code>kaggle.json</code> is in the location <code>~/.kaggle/kaggle.json </code>to use the API.</li>
</ol>
</blockquote>
<p>check version </p>
<pre><code>kaggle --version
Kaggle API 1.5.5
</code></pre>
<h3 id="commands-overview"><a href="#commands-overview" class="headerlink" title="commands overview"></a>commands overview</h3><p>commands </p>
<pre><code>kaggle competitions &#123;list, files, download, submit, submissions, leaderboard&#125;
kaggle datasets &#123;list, files, download, create, version, init&#125;
kaggle kernels &#123;list, init, push, pull, output, status&#125;
kaggle config &#123;view, set, unset&#125;
</code></pre>
<h3 id="download-datasets"><a href="#download-datasets" class="headerlink" title="download datasets"></a>download datasets</h3><pre><code>kaggle competitions download -c dogs-vs-cats
</code></pre>
<h3 id="show-leaderboard"><a href="#show-leaderboard" class="headerlink" title="show leaderboard"></a>show leaderboard</h3><pre><code>kaggle competitions leaderboard dogs-vs-cats --show
teamId  teamName                           submissionDate       score    
------  ---------------------------------  -------------------  -------  
71046  Pierre Sermanet                    2014-02-01 21:43:19  0.98533  
66623  Maxim Milakov                      2014-02-01 18:20:58  0.98293  
72059  Owen                               2014-02-01 17:04:40  0.97973  
74563  Paul Covington                     2014-02-01 23:05:20  0.97946  
74298  we&#39;ve been in KAIST                2014-02-01 21:15:30  0.97840  
71949  orchid                             2014-02-01 23:52:30  0.97733  
</code></pre>
<h3 id="set-default-competition"><a href="#set-default-competition" class="headerlink" title="set default competition"></a>set default competition</h3><pre><code>kaggle config set --name competition --value dogs-vs-cats
- competition is now set to: dogs-vs-cats

kaggle config set --name competition --value dogs-vs-cats-redux-kernels-edition
</code></pre>
<blockquote>
<p>dogs-vs-cats<br>dogs-vs-cats-redux-kernels-edition</p>
</blockquote>
<h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><pre><code>kaggle c submissions
- Using competition: dogs-vs-cats
- No submissions found

kaggle c submit -f ./submission.csv -m &quot;first submit&quot;
</code></pre>
<blockquote>
<p>competition has already ended, so can not submit.</p>
</blockquote>
<h2 id="Nvidia-docker-and-containers"><a href="#Nvidia-docker-and-containers" class="headerlink" title="Nvidia-docker and containers"></a>Nvidia-docker and containers</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre><code>sudo apt-get -y install docker

# Install nvidia-docker2 and reload the Docker daemon configuration
sudo apt-get install -y nvidia-docker2
sudo pkill -SIGHUP dockerd
</code></pre>
<h3 id="restart-optional"><a href="#restart-optional" class="headerlink" title="restart (optional)"></a>restart (optional)</h3><p>cat &#x2F;etc&#x2F;docker&#x2F;daemon.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>sudo systemctl enable docker
sudo systemctl start docker
</code></pre>
<blockquote>
<p>if errors occur:<br>Job for docker.service failed because the control process exited with error code.<br>See “systemctl status docker.service” and “journalctl -xe” for details.<br>check <code>/etc/docker/daemon.json</code></p>
</blockquote>
<h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><pre><code>sudo docker run --runtime=nvidia --rm nvidia/cuda:10.1-base nvidia-smi
sudo nvidia-docker run --rm nvidia/cuda:10.1-base nvidia-smi

Thu Aug 29 00:11:32 2019       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 418.87.00    Driver Version: 418.87.00    CUDA Version: 10.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Quadro RTX 8000     Off  | 00000000:02:00.0 Off |                  Off |
| 43%   67C    P2   136W / 260W |  46629MiB / 48571MiB |     17%      Default |
+-------------------------------+----------------------+----------------------+
|   1  Quadro RTX 8000     Off  | 00000000:03:00.0 Off |                  Off |
| 34%   54C    P0    74W / 260W |      0MiB / 48571MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   2  Quadro RTX 8000     Off  | 00000000:82:00.0 Off |                  Off |
| 34%   49C    P0    73W / 260W |      0MiB / 48571MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   3  Quadro RTX 8000     Off  | 00000000:83:00.0 Off |                  Off |
| 33%   50C    P0    73W / 260W |      0MiB / 48571MiB |      3%      Default |
+-------------------------------+----------------------+----------------------+
                                                                            
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
+-----------------------------------------------------------------------------+
</code></pre>
<blockquote>
<p>add user to <code>docker</code> group, and no need to use <code>sudo docker xxx</code></p>
</blockquote>
<h3 id="command-refs"><a href="#command-refs" class="headerlink" title="command refs"></a>command refs</h3><pre><code>sudo nvidia-docker run --rm nvidia/cuda:10.1-base nvidia-smi
sudo nvidia-docker -t -i --privileged nvidia/cuda bash

sudo docker run -it --name kzl -v /home/kezunlin/workspace/:/home/kezunlin/workspace nvidia/cuda
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190821: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>nvidia-docker</tag>
        <tag>dl4cv</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>compile and install cgal on ubuntu 16.04</title>
    <url>//blog/compile-and-install-cgal-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>version: 4.13.1</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/CGAL/cgal/releases/download/releases%2FCGAL-4.13.1/CGAL-4.13.1.zip</span><br><span class="line"><span class="built_in">cd</span> CGAL-4.13.1</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p>with options </p>
<pre><code>QT5_DIR            /opt/qt/5.7/gcc_64/lib/cmake/Qt5
</code></pre>
<p>compile and install </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install </span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>Scanning dependencies of target CGAL
[ 16%] Building CXX object src/CGAL/CMakeFiles/CGAL.dir/all_files.cpp.o
[ 33%] Linking CXX shared library ../../lib/libCGAL.so
[ 33%] Built target CGAL
Scanning dependencies of target CGAL_ImageIO
Scanning dependencies of target CGAL_Core
[ 50%] Building CXX object src/CGAL_Core/CMakeFiles/CGAL_Core.dir/all_files.cpp.o
[ 66%] Building CXX object src/CGAL_ImageIO/CMakeFiles/CGAL_ImageIO.dir/all_files.cpp.o
[ 83%] Linking CXX shared library ../../lib/libCGAL_ImageIO.so
[ 83%] Built target CGAL_ImageIO
[100%] Linking CXX shared library ../../lib/libCGAL_Core.so
[100%] Built target CGAL_Core
</code></pre>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(CGAL REQUIRED)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;CGAL_USE_FILE&#125;</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; CGAL_INCLUDE_DIRS = $&#123;CGAL_INCLUDE_DIRS&#125;&quot;</span>) </span><br><span class="line"><span class="keyword">MESSAGE</span>( [Main] <span class="string">&quot; CGAL_LIBRARIES = $&#123;CGAL_LIBRARIES&#125;&quot;</span>)  </span><br><span class="line"><span class="comment">#[Main] CGAL_INCLUDE_DIRS = /usr/local/include</span></span><br><span class="line"><span class="comment">#[Main] CGAL_LIBRARIES = CGAL::CGAL </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(my_executable my_source_file.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(my_executable <span class="variable">$&#123;CGAL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CGAL_USE_FILE<br>CGAL_DIR  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;CGAL</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/CGAL/cgal/blob/master/Installation/INSTALL.md">cgal install</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190902: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cgal</tag>
      </tags>
  </entry>
  <entry>
    <title>kaggle image classification competitions and solutions</title>
    <url>//blog/kaggle-competetions/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>fine-tuning</p>
<ul>
<li><a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html">keras fine-tuning</a></li>
</ul>
<h3 id="dogs-vs-cats"><a href="#dogs-vs-cats" class="headerlink" title="dogs vs cats"></a>dogs vs cats</h3><p>2 classes: binary classification</p>
<h3 id="dog-breed-identification"><a href="#dog-breed-identification" class="headerlink" title="dog-breed-identification"></a>dog-breed-identification</h3><p>120 classes </p>
<p>see <a href="https://www.kaggle.com/c/dog-breed-identification/leaderboard">dog-breed-identification</a></p>
<h3 id="plant-seedlings-classification"><a href="#plant-seedlings-classification" class="headerlink" title="plant-seedlings-classification"></a>plant-seedlings-classification</h3><p>960 unique plants belonging to 12 classes<br>(植物幼苗分类)<br>see <a href="https://www.kaggle.com/c/plant-seedlings-classification">here</a></p>
<p>solutions:</p>
<ul>
<li><a href="https://medium.com/neuralspace/kaggle-1-winning-approach-for-image-classification-challenge-9c1188157a86">top-1 solution</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/41140947">zh</a></li>
<li><a href="https://www.kaggle.com/dingkun/xception-model-training-pipeline-lb-0-9798">xception-model-training-pipeline-lb-0-9798</a></li>
</ul>
<h3 id="cdiscount-image-classification-challenge"><a href="#cdiscount-image-classification-challenge" class="headerlink" title="cdiscount-image-classification-challenge"></a>cdiscount-image-classification-challenge</h3><p><a href="https://www.kaggle.com/c/cdiscount-image-classification-challenge/discussion/45863">超大规模图像分类</a></p>
<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h3><ul>
<li><a href="https://medium.com/ymedialabs-innovation/data-augmentation-techniques-in-cnn-using-tensorflow-371ae43d5be9">数据增强</a></li>
<li><a href="https://machinelearningmastery.com/image-augmentation-deep-learning-keras/">image-augmentation-deep-learning-keras</a></li>
</ul>
<h3 id="SMOTE"><a href="#SMOTE" class="headerlink" title="SMOTE"></a>SMOTE</h3><ul>
<li>[smote解决样本不均衡问题](<a href="https://smote-variants.readthedocs.io/en/latest/installation.html%EF%BC%89">https://smote-variants.readthedocs.io/en/latest/installation.html）</a></li>
<li><a href="https://www.svds.com/learning-imbalanced-classes/">learning-imbalanced-classes</a></li>
<li><a href="https://www.dlology.com/blog/multi-class-classification-with-focal-loss-for-imbalanced-datasets/">multi-class-classification-with-focal-loss-for-imbalanced-datasets</a></li>
</ul>
<blockquote>
<p>the <code>class_weights</code> argument in <code>model.fit</code>, which you can use to make the model learn more from the minority class.</p>
</blockquote>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li><a href="https://medium.com/@ckyrkou/changing-input-size-of-pre-trained-models-in-keras-3dfbe3ca3091">changing-input-size-of-pre-trained-models-in-keras</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190902: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>serialize and deserialize json using json.net with csharp</title>
    <url>//blog/c-json-serialize-using-json-net/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>Json.NET</p>
<ul>
<li>JsonConvert.SerializeObject</li>
<li>JsonConvert.DeserializeObject</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>Use NuGet to download the package</p>
<pre><code>&quot;Project&quot; -&gt; &quot;Manage NuGet packages&quot; -&gt; &quot;Search for &quot;newtonsoft json&quot;. -&gt; click &quot;install&quot;.
</code></pre>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>reference </p>
<pre><code>using Newtonsoft.Json;
</code></pre>
<h4 id="serialize-collections"><a href="#serialize-collections" class="headerlink" title="serialize collections"></a>serialize collections</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Product p1 = <span class="keyword">new</span> Product</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Product 1&quot;</span>,</span><br><span class="line">    Price = <span class="number">99.95</span>m,</span><br><span class="line">    ExpiryDate = <span class="keyword">new</span> DateTime(<span class="number">2000</span>, <span class="number">12</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc),</span><br><span class="line">&#125;;</span><br><span class="line">Product p2 = <span class="keyword">new</span> Product</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Product 2&quot;</span>,</span><br><span class="line">    Price = <span class="number">12.50</span>m,</span><br><span class="line">    ExpiryDate = <span class="keyword">new</span> DateTime(<span class="number">2009</span>, <span class="number">7</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;Product&gt; products = <span class="keyword">new</span> List&lt;Product&gt;();</span><br><span class="line">products.Add(p1);</span><br><span class="line">products.Add(p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> json = JsonConvert.SerializeObject(products, Formatting.Indented);</span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    &quot;Name&quot;: &quot;Product 1&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;ExpiryDate&quot;: &quot;2000-12-29T00:00:00Z&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;Price&quot;: 99.95,</span></span><br><span class="line"><span class="comment">//    &quot;Sizes&quot;: null</span></span><br><span class="line"><span class="comment">//  &#125;,</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    &quot;Name&quot;: &quot;Product 2&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;ExpiryDate&quot;: &quot;2009-07-31T00:00:00Z&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;Price&quot;: 12.50,</span></span><br><span class="line"><span class="comment">//    &quot;Sizes&quot;: null</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//]</span></span><br></pre></td></tr></table></figure>

<h4 id="deserialize-collections"><a href="#deserialize-collections" class="headerlink" title="deserialize collections"></a>deserialize collections</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;[</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    &#x27;Name&#x27;: &#x27;Product 1&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;ExpiryDate&#x27;: &#x27;2000-12-29T00:00Z&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;Price&#x27;: 99.95,</span></span><br><span class="line"><span class="string">    &#x27;Sizes&#x27;: null</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    &#x27;Name&#x27;: &#x27;Product 2&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;ExpiryDate&#x27;: &#x27;2009-07-31T00:00Z&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;Price&#x27;: 12.50,</span></span><br><span class="line"><span class="string">    &#x27;Sizes&#x27;: null</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]&quot;</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Product&gt; products = JsonConvert.DeserializeObject&lt;List&lt;Product&gt;&gt;(json);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(products.Count);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Product p1 = products[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">Console.WriteLine(p1.Name);</span><br><span class="line"><span class="comment">// Product 1</span></span><br></pre></td></tr></table></figure>

<h4 id="serialize-to-json-file"><a href="#serialize-to-json-file" class="headerlink" title="serialize to json file"></a>serialize to json file</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Movie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Year &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Movie movie = <span class="keyword">new</span> Movie</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Bad Boys&quot;</span>,</span><br><span class="line">    Year = <span class="number">1995</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serialize JSON to a string and then write string to a file</span></span><br><span class="line">File.WriteAllText(<span class="string">@&quot;c:\movie.json&quot;</span>, JsonConvert.SerializeObject(movie));</span><br><span class="line"></span><br><span class="line"><span class="comment">// serialize JSON directly to a file</span></span><br><span class="line"><span class="keyword">using</span> (StreamWriter file = File.CreateText(<span class="string">@&quot;c:\movie.json&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    JsonSerializer serializer = <span class="keyword">new</span> JsonSerializer();</span><br><span class="line">    serializer.Serialize(file, movie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/18784697/how-to-import-jsonconvert-in-c-sharp-application">how-to-import-jsonconvert-in-c-sharp-application</a></li>
<li><a href="https://www.newtonsoft.com/json/help/html/SerializingCollections.htm">SerializingCollections</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190910: created.</li>
</ul>
]]></content>
      <categories>
        <category>csharp</category>
      </categories>
      <tags>
        <tag>serialize</tag>
        <tag>deserialize</tag>
        <tag>json.net</tag>
      </tags>
  </entry>
  <entry>
    <title>keras data augmentation</title>
    <url>//blog/keras-data-augmentation/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import the necessary packages</span></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> img_to_array</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> load_img</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras_util <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct the argument parse and parse the arguments</span></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--image&quot;</span>, required=<span class="literal">True</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;path to the input image&quot;</span>)</span><br><span class="line">ap.add_argument(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output&quot;</span>, required=<span class="literal">True</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;path to output directory to store augmentation examples&quot;</span>)</span><br><span class="line">ap.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--prefix&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;image&quot;</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;output filename prefix&quot;</span>)</span><br><span class="line">args = <span class="built_in">vars</span>(ap.parse_args())</span><br><span class="line"></span><br><span class="line"><span class="comment"># load the input image, convert it to a NumPy array, and then</span></span><br><span class="line"><span class="comment"># reshape it to have an extra dimension</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] loading example image...&quot;</span>)</span><br><span class="line">target_size = <span class="literal">None</span> </span><br><span class="line"><span class="comment">#target_size=(224,224)</span></span><br><span class="line">image = load_img(args[<span class="string">&quot;image&quot;</span>], target_size=target_size)</span><br><span class="line">image = img_to_array(image)</span><br><span class="line">image = np.expand_dims(image, axis=<span class="number">0</span>) <span class="comment"># 1,h,w,c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># construct the image generator for data augmentation then</span></span><br><span class="line"><span class="comment"># initialize the total number of images generated thus far</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># preprocessing_function: The function will run after the image is resized and augmented.</span></span><br><span class="line"><span class="comment"># The function should take one argument:</span></span><br><span class="line"><span class="comment">#    one image (Numpy tensor with rank 3),</span></span><br><span class="line"><span class="comment">#     and should output a Numpy tensor with the same shape.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 1 image ---&gt;(424,640,3)---&gt;aug---(424,640,3)---&gt;preprocess_input---&gt;(424,640,3)</span></span><br><span class="line"><span class="comment"># for 1 image ---&gt;resize---&gt;(224,224,3)---&gt;aug---(224,224,3)---&gt;preprocess_input---&gt;(224,224,3)</span></span><br><span class="line">aug = ImageDataGenerator(preprocessing_function=resnet.preprocess_input,</span><br><span class="line">                         rotation_range=<span class="number">30</span>, </span><br><span class="line">                         width_shift_range=<span class="number">0.1</span>,</span><br><span class="line">                         height_shift_range=<span class="number">0.1</span>, </span><br><span class="line">                         shear_range=<span class="number">0.2</span>, </span><br><span class="line">                         zoom_range=<span class="number">0.2</span>,</span><br><span class="line">                         horizontal_flip=<span class="literal">True</span>,</span><br><span class="line">                         fill_mode=<span class="string">&quot;nearest&quot;</span>)</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># construct the actual Python generator</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] generating images...&quot;</span>)</span><br><span class="line">imageGen = aug.flow(image, </span><br><span class="line">                    batch_size=<span class="number">1</span>, </span><br><span class="line">                    save_to_dir=args[<span class="string">&quot;output&quot;</span>],</span><br><span class="line">                    save_prefix=args[<span class="string">&quot;prefix&quot;</span>], </span><br><span class="line">                    save_format=<span class="string">&quot;png&quot;</span>)</span><br><span class="line"></span><br><span class="line">next_image = <span class="built_in">next</span>(imageGen)</span><br><span class="line"><span class="built_in">print</span>(next_image.shape)</span><br><span class="line"><span class="built_in">print</span>(next_image[<span class="number">0</span>, :<span class="number">5</span>,:<span class="number">5</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># loop over examples from our image data augmentation generator</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> imageGen:</span><br><span class="line">    <span class="comment"># increment our counter</span></span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if we have reached 10 examples, break from the loop</span></span><br><span class="line">    <span class="keyword">if</span> total == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>output </p>
<p>  target_size &#x3D; None:    </p>
<blockquote>
<p>1 image —&gt;(424,640,3)—&gt;aug—&gt;(424,640,3)—&gt;preprocess_input—&gt;(424,640,3)</p>
</blockquote>
<p>  target_size &#x3D; (224,224): </p>
<blockquote>
<p>1 image —&gt;resize—&gt;(224,224,3)—&gt;aug—&gt;(224,224,3)—&gt;preprocess_input—&gt;(224,224,3)</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190910: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>keras</tag>
      </tags>
  </entry>
  <entry>
    <title>keras multi gpu training</title>
    <url>//blog/keras-multi-gpu-training/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="multi-gpu-model"><a href="#multi-gpu-model" class="headerlink" title="multi_gpu_model"></a>multi_gpu_model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> keras.applications <span class="keyword">import</span> Xception</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> multi_gpu_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">G = <span class="number">8</span> </span><br><span class="line">batch_size_per_gpu = <span class="number">32</span></span><br><span class="line">batch_size = batch_size_per_gpu * G</span><br><span class="line"></span><br><span class="line">num_samples = <span class="number">1000</span></span><br><span class="line">height = <span class="number">224</span></span><br><span class="line">width = <span class="number">224</span></span><br><span class="line">num_classes = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate the base model (or &quot;template&quot; model).</span></span><br><span class="line"><span class="comment"># We recommend doing this with under a CPU device scope,</span></span><br><span class="line"><span class="comment"># so that the model&#x27;s weights are hosted on CPU memory.</span></span><br><span class="line"><span class="comment"># Otherwise they may end up hosted on a GPU, which would</span></span><br><span class="line"><span class="comment"># complicate weight sharing.</span></span><br><span class="line"><span class="keyword">with</span> tf.device(<span class="string">&#x27;/cpu:0&#x27;</span>):</span><br><span class="line">    model = Xception(weights=<span class="literal">None</span>,</span><br><span class="line">                     input_shape=(height, width, <span class="number">3</span>),</span><br><span class="line">                     classes=num_classes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replicates the model on 8 GPUs.</span></span><br><span class="line"><span class="comment"># This assumes that your machine has 8 available GPUs.</span></span><br><span class="line">parallel_model = multi_gpu_model(model, gpus=G)</span><br><span class="line">parallel_model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">                       optimizer=<span class="string">&#x27;rmsprop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate dummy data.</span></span><br><span class="line">x = np.random.random((num_samples, height, width, <span class="number">3</span>))</span><br><span class="line">y = np.random.random((num_samples, num_classes))</span><br><span class="line"></span><br><span class="line"><span class="comment"># This `fit` call will be distributed on 8 GPUs.</span></span><br><span class="line"><span class="comment"># Since the batch size is 256, each GPU will process 32 samples.</span></span><br><span class="line">parallel_model.fit(x, y, epochs=<span class="number">20</span>, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save model via the template model (which shares the same weights):</span></span><br><span class="line">model.save(<span class="string">&#x27;my_model.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="results"><a href="#results" class="headerlink" title="results"></a>results</h3><p>results from <a href="https://medium.com/@joinal/multi-gpu-training-with-keras-python-and-deep-learning-on-onepanel-io-e0eee865b423">Multi-GPU training with Keras, Python, and deep learning on Onepanel.io</a><br>To validate this, we trained MiniGoogLeNet on the CIFAR-10 dataset with 4 V100 GPU.</p>
<blockquote>
<p>Using a single GPU we were able to obtain 63 second epochs with a total training time of 74m10s.<br>However, by using multi-GPU training with Keras and Python we decreased training time to 16 second epochs with a total training time of 19m3s.<br>4x times speedup!</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://keras.io/utils/">multi_gpu_model</a></li>
<li><a href="https://medium.com/@joinal/multi-gpu-training-with-keras-python-and-deep-learning-on-onepanel-io-e0eee865b423">Multi-GPU training with Keras, Python, and deep learning on Onepanel.io</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190910:: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>karas</tag>
      </tags>
  </entry>
  <entry>
    <title>keras efficientnet introduction</title>
    <url>//blog/efficientnet/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="About-EfficientNet-Models"><a href="#About-EfficientNet-Models" class="headerlink" title="About EfficientNet Models"></a>About EfficientNet Models</h3><p><img src="https://kezunlin.me/images/posts/635233-20190912095823319-1994858033.png" alt="params"><br><img src="https://kezunlin.me/images/posts/635233-20190912095826925-710547982.png" alt="flops"></p>
<blockquote>
<p>compared with resnet50, EfficientNet-B4 improves the top-1 accuracy from 76.3% of ResNet-50 to 82.6% (+6.3%), under similar FLOPS constraint.</p>
</blockquote>
<h3 id="Using-Pretrained-EfficientNet-Checkpoints"><a href="#Using-Pretrained-EfficientNet-Checkpoints" class="headerlink" title="Using Pretrained EfficientNet Checkpoints"></a>Using Pretrained EfficientNet Checkpoints</h3><p><img src="https://kezunlin.me/images/posts/635233-20190912100138476-1059619699.png" alt="b0-b7 top-1 on imagenet"></p>
<h3 id="Keras-Models-Performance"><a href="#Keras-Models-Performance" class="headerlink" title="Keras Models Performance"></a>Keras Models Performance</h3><ul>
<li>The top-k errors were obtained using Keras Applications with the <strong>TensorFlow backend</strong> on the <strong>2012 ILSVRC ImageNet validation set</strong> and may slightly differ from the original ones.</li>
</ul>
<blockquote>
<p>The input size used was 224x224 for all models except NASNetLarge (331x331), InceptionV3 (299x299), InceptionResNetV2 (299x299), Xception (299x299),<br>EfficientNet-B0 (224x224), EfficientNet-B1 (240x240), EfficientNet-B2 (260x260), EfficientNet-B3 (300x300), EfficientNet-B4 (380x380), EfficientNet-B5 (456x456), EfficientNet-B6 (528x528), and EfficientNet-B7 (600x600).</p>
</blockquote>
<p>notice</p>
<ul>
<li>Top-1: single center crop, top-1 error</li>
<li>Top-5: single center crop, top-5 error</li>
<li>10-5: ten crops (1 center + 4 corners and those mirrored ones), top-5 error</li>
<li>Size: rounded the number of parameters when <code>include_top=True</code></li>
<li>Stem: rounded the number of parameters when <code>include_top=False</code></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Top-1</th>
<th>Top-5</th>
<th>10-5</th>
<th>Size</th>
<th>Stem</th>
<th>References</th>
</tr>
</thead>
<tbody><tr>
<td><a href="keras_applications/vgg16.py">VGG16</a></td>
<td>28.732</td>
<td>9.950</td>
<td>8.834</td>
<td>138.4M</td>
<td>14.7M</td>
<td><a href="https://arxiv.org/abs/1409.1556">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/vgg.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/vgg19.py">VGG19</a></td>
<td>28.744</td>
<td>10.012</td>
<td>8.774</td>
<td>143.7M</td>
<td>20.0M</td>
<td><a href="https://arxiv.org/abs/1409.1556">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/vgg.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet50.py">ResNet50</a></td>
<td>25.072</td>
<td>7.940</td>
<td>6.828</td>
<td>25.6M</td>
<td>23.6M</td>
<td><a href="https://arxiv.org/abs/1512.03385">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v1.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/resnet.lua">[torch]</a> <a href="https://github.com/KaimingHe/deep-residual-networks/blob/master/prototxt/ResNet-50-deploy.prototxt">[caffe]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet.py">ResNet101</a></td>
<td>23.580</td>
<td>7.214</td>
<td>6.092</td>
<td>44.7M</td>
<td>42.7M</td>
<td><a href="https://arxiv.org/abs/1512.03385">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v1.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/resnet.lua">[torch]</a> <a href="https://github.com/KaimingHe/deep-residual-networks/blob/master/prototxt/ResNet-101-deploy.prototxt">[caffe]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet.py">ResNet152</a></td>
<td>23.396</td>
<td>6.882</td>
<td>5.908</td>
<td>60.4M</td>
<td>58.4M</td>
<td><a href="https://arxiv.org/abs/1512.03385">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v1.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/resnet.lua">[torch]</a> <a href="https://github.com/KaimingHe/deep-residual-networks/blob/master/prototxt/ResNet-152-deploy.prototxt">[caffe]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet_v2.py">ResNet50V2</a></td>
<td>24.040</td>
<td>6.966</td>
<td>5.896</td>
<td>25.6M</td>
<td>23.6M</td>
<td><a href="https://arxiv.org/abs/1603.05027">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v2.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/preresnet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet_v2.py">ResNet101V2</a></td>
<td>22.766</td>
<td>6.184</td>
<td>5.158</td>
<td>44.7M</td>
<td>42.6M</td>
<td><a href="https://arxiv.org/abs/1603.05027">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v2.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/preresnet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnet_v2.py">ResNet152V2</a></td>
<td>21.968</td>
<td>5.838</td>
<td>4.900</td>
<td>60.4M</td>
<td>58.3M</td>
<td><a href="https://arxiv.org/abs/1603.05027">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/resnet_v2.py">[tf-models]</a> <a href="https://github.com/facebook/fb.resnet.torch/blob/master/models/preresnet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnext.py">ResNeXt50</a></td>
<td>22.260</td>
<td>6.190</td>
<td>5.410</td>
<td>25.1M</td>
<td>23.0M</td>
<td><a href="https://arxiv.org/abs/1611.05431">[paper]</a> <a href="https://github.com/facebookresearch/ResNeXt/blob/master/models/resnext.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/resnext.py">ResNeXt101</a></td>
<td>21.270</td>
<td>5.706</td>
<td>4.842</td>
<td>44.3M</td>
<td>42.3M</td>
<td><a href="https://arxiv.org/abs/1611.05431">[paper]</a> <a href="https://github.com/facebookresearch/ResNeXt/blob/master/models/resnext.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/inception_v3.py">InceptionV3</a></td>
<td>22.102</td>
<td>6.280</td>
<td>5.038</td>
<td>23.9M</td>
<td>21.8M</td>
<td><a href="https://arxiv.org/abs/1512.00567">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/inception_v3.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/inception_resnet_v2.py">InceptionResNetV2</a></td>
<td>19.744</td>
<td>4.748</td>
<td>3.962</td>
<td>55.9M</td>
<td>54.3M</td>
<td><a href="https://arxiv.org/abs/1602.07261">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/inception_resnet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/xception.py">Xception</a></td>
<td>20.994</td>
<td>5.548</td>
<td>4.738</td>
<td>22.9M</td>
<td>20.9M</td>
<td><a href="https://arxiv.org/abs/1610.02357">[paper]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet.py">MobileNet(alpha&#x3D;0.25)</a></td>
<td>48.418</td>
<td>24.208</td>
<td>21.196</td>
<td>0.5M</td>
<td>0.2M</td>
<td><a href="https://arxiv.org/abs/1704.04861">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet.py">MobileNet(alpha&#x3D;0.50)</a></td>
<td>35.708</td>
<td>14.376</td>
<td>12.180</td>
<td>1.3M</td>
<td>0.8M</td>
<td><a href="https://arxiv.org/abs/1704.04861">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet.py">MobileNet(alpha&#x3D;0.75)</a></td>
<td>31.588</td>
<td>11.758</td>
<td>9.878</td>
<td>2.6M</td>
<td>1.8M</td>
<td><a href="https://arxiv.org/abs/1704.04861">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet.py">MobileNet(alpha&#x3D;1.0)</a></td>
<td>29.576</td>
<td>10.496</td>
<td>8.774</td>
<td>4.3M</td>
<td>3.2M</td>
<td><a href="https://arxiv.org/abs/1704.04861">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;0.35)</a></td>
<td>39.914</td>
<td>17.568</td>
<td>15.422</td>
<td>1.7M</td>
<td>0.4M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;0.50)</a></td>
<td>34.806</td>
<td>13.938</td>
<td>11.976</td>
<td>2.0M</td>
<td>0.7M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;0.75)</a></td>
<td>30.468</td>
<td>10.824</td>
<td>9.188</td>
<td>2.7M</td>
<td>1.4M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;1.0)</a></td>
<td>28.664</td>
<td>9.858</td>
<td>8.322</td>
<td>3.5M</td>
<td>2.3M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;1.3)</a></td>
<td>25.320</td>
<td>7.878</td>
<td>6.728</td>
<td>5.4M</td>
<td>3.8M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/mobilenet_v2.py">MobileNetV2(alpha&#x3D;1.4)</a></td>
<td>24.770</td>
<td>7.578</td>
<td>6.518</td>
<td>6.2M</td>
<td>4.4M</td>
<td><a href="https://arxiv.org/abs/1801.04381">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/densenet.py">DenseNet121</a></td>
<td>25.028</td>
<td>7.742</td>
<td>6.522</td>
<td>8.1M</td>
<td>7.0M</td>
<td><a href="https://arxiv.org/abs/1608.06993">[paper]</a> <a href="https://github.com/liuzhuang13/DenseNet/blob/master/models/densenet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/densenet.py">DenseNet169</a></td>
<td>23.824</td>
<td>6.824</td>
<td>5.860</td>
<td>14.3M</td>
<td>12.6M</td>
<td><a href="https://arxiv.org/abs/1608.06993">[paper]</a> <a href="https://github.com/liuzhuang13/DenseNet/blob/master/models/densenet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/densenet.py">DenseNet201</a></td>
<td>22.680</td>
<td>6.380</td>
<td>5.466</td>
<td>20.2M</td>
<td>18.3M</td>
<td><a href="https://arxiv.org/abs/1608.06993">[paper]</a> <a href="https://github.com/liuzhuang13/DenseNet/blob/master/models/densenet.lua">[torch]</a></td>
</tr>
<tr>
<td><a href="keras_applications/nasnet.py">NASNetLarge</a></td>
<td>17.502</td>
<td>3.996</td>
<td>3.412</td>
<td>93.5M</td>
<td>84.9M</td>
<td><a href="https://arxiv.org/abs/1707.07012">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/nasnet/nasnet.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/nasnet.py">NASNetMobile</a></td>
<td>25.634</td>
<td>8.146</td>
<td>6.758</td>
<td>7.7M</td>
<td>4.3M</td>
<td><a href="https://arxiv.org/abs/1707.07012">[paper]</a> <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/nasnet/nasnet.py">[tf-models]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B0</a></td>
<td>22.810</td>
<td>6.508</td>
<td>5.858</td>
<td>5.3M</td>
<td>4.0M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B1</a></td>
<td>20.866</td>
<td>5.552</td>
<td>5.050</td>
<td>7.9M</td>
<td>6.6M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B2</a></td>
<td>19.820</td>
<td>5.054</td>
<td>4.538</td>
<td>9.2M</td>
<td>7.8M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B3</a></td>
<td>18.422</td>
<td>4.324</td>
<td>3.902</td>
<td>12.3M</td>
<td>10.8M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B4</a></td>
<td>17.040</td>
<td>3.740</td>
<td>3.344</td>
<td>19.5M</td>
<td>17.7M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B5</a></td>
<td>16.298</td>
<td>3.290</td>
<td>3.114</td>
<td>30.6M</td>
<td>28.5M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B6</a></td>
<td>15.918</td>
<td>3.102</td>
<td>2.916</td>
<td>43.3M</td>
<td>41.0M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
<tr>
<td><a href="keras_applications/efficientnet.py">EfficientNet-B7</a></td>
<td>15.570</td>
<td>3.160</td>
<td>2.906</td>
<td>66.7M</td>
<td>64.1M</td>
<td><a href="https://arxiv.org/abs/1905.11946">[paper]</a> <a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">[tf-tpu]</a></td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet">tf efficientnet</a></li>
<li><a href="https://github.com/Callidior/keras-applications">efficientnet keras pre-trained weights</a></li>
<li><a href="https://github.com/qubvel/efficientnet">Implementation of EfficientNet model. Keras and TensorFlow Keras.</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190912: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>keras</tag>
        <tag>efficientnet</tag>
      </tags>
  </entry>
  <entry>
    <title>python keras RAdam tutorial and load custom optimizer with CustomObjectScope</title>
    <url>//blog/radam/</url>
    <content><![CDATA[<h2 id="RAdam"><a href="#RAdam" class="headerlink" title="RAdam"></a>RAdam</h2><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras_radam <span class="keyword">import</span> RAdam</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build toy model with RAdam optimizer</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Dense(input_shape=(<span class="number">17</span>,), units=<span class="number">3</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(RAdam(), loss=<span class="string">&#x27;mse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate toy data</span></span><br><span class="line">x = np.random.standard_normal((<span class="number">4096</span> * <span class="number">30</span>, <span class="number">17</span>))</span><br><span class="line">w = np.random.standard_normal((<span class="number">17</span>, <span class="number">3</span>))</span><br><span class="line">y = np.dot(x, w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit</span></span><br><span class="line">model.fit(x, y, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="use-warmup"><a href="#use-warmup" class="headerlink" title="use warmup"></a>use warmup</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras_radam <span class="keyword">import</span> RAdam</span><br><span class="line"></span><br><span class="line">RAdam(total_steps=<span class="number">10000</span>, warmup_proportion=<span class="number">0.1</span>, min_lr=<span class="number">1e-5</span>)</span><br></pre></td></tr></table></figure>


<h3 id="load-custom-optimizer"><a href="#load-custom-optimizer" class="headerlink" title="load custom optimizer"></a>load custom optimizer</h3><p>keras load model with custom optimizer with CustomObjectScope</p>
<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>when load model with custom optimizer, eg <code>RAdam()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = load_model(<span class="string">&quot;resnet50_radam_model.h5&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>output error</p>
<pre><code>ValueError: Unknown optimizer: RAdam
</code></pre>
<h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras_radam <span class="keyword">import</span> RAdam</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> CustomObjectScope</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> CustomObjectScope(&#123;<span class="string">&#x27;RAdam&#x27;</span>: RAdam()&#125;):</span><br><span class="line">    best_model_filepath = <span class="string">&quot;./checkpoint/best_model_efnb0.h5&quot;</span></span><br><span class="line">    model = load_model(best_model_filepath)</span><br><span class="line">    model.save_weights(<span class="string">&quot;./checkpoint/weights_efnb0.h5&quot;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://arxiv.org/abs/1908.03265">On the Variance of the Adaptive Learning Rate and Beyond</a></li>
<li><a href="https://github.com/LiyuanLucasLiu/RAdam">RAdam official Pytorch Version</a></li>
<li><a href="https://github.com/CyberZHG/keras-radam">https://github.com/CyberZHG/keras-radam</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190912: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>keras</tag>
        <tag>radam</tag>
      </tags>
  </entry>
  <entry>
    <title>csharp key press event tutorial and app.config</title>
    <url>//blog/csharp-key-press-event/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="MainForm"><a href="#MainForm" class="headerlink" title="MainForm"></a>MainForm</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ProcessCmdKey</span>(<span class="params"><span class="keyword">ref</span> Message msg, Keys keyData</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//System.Console.WriteLine(&quot;ProcessCmdKey &quot; + cur_image_id);</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//capture up arrow key</span></span><br><span class="line">           <span class="keyword">if</span> (keyData == Keys.Left)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//this.button_prev.PerformClick();</span></span><br><span class="line">               button_prev_click();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (keyData == Keys.Right)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//System.Console.WriteLine(&quot;Enter &quot;+cur_image_id);</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//this.button_ok.PerformClick();</span></span><br><span class="line">               button_ok_click();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">base</span>.ProcessCmdKey(<span class="keyword">ref</span> msg, keyData); <span class="comment">// trigger 2 button_ok_click</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="TextBox"><a href="#TextBox" class="headerlink" title="TextBox"></a>TextBox</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">textBox_index_KeyDown</span>(<span class="params"><span class="built_in">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.KeyCode == Keys.Enter)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//enter key is down</span></span><br><span class="line">                button_goto_click();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h3 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h3><h4 id="app-config-xml"><a href="#app-config-xml" class="headerlink" title="app.config.xml"></a>app.config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startup</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">&quot;v4.0&quot;</span> <span class="attr">sku</span>=<span class="string">&quot;.NETFramework,Version=v4.5.2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;image_extension&quot;</span> <span class="attr">value</span>=<span class="string">&quot;png&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;output_filepath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./output.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><blockquote>
<p>reference <code>System.Configuration.dll</code></p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init_config</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> appSettings = System.Configuration.ConfigurationManager.AppSettings;</span><br><span class="line">            <span class="built_in">string</span> image_ext = <span class="string">&quot;*.&quot;</span>+ appSettings[<span class="string">&quot;image_extension&quot;</span>];</span><br><span class="line">            <span class="built_in">string</span> output_filepath = appSettings[<span class="string">&quot;output_filepath&quot;</span>];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/3752451/enter-key-pressed-event-handler">enter-key-pressed-event-handler</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190919:  created.</li>
</ul>
]]></content>
      <categories>
        <category>csharp</category>
      </categories>
      <tags>
        <tag>keypress</tag>
        <tag>app.config</tag>
      </tags>
  </entry>
  <entry>
    <title>pymongo and mongoengine tutorial on ubuntu 16.04</title>
    <url>//blog/pymongo-tutorial/</url>
    <content><![CDATA[<p>pymongo and mongoengine tutorial on ubuntu 16.04</p>
<span id="more"></span>
<h1 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h1><p>version </p>
<ul>
<li>mongo 2.6.10</li>
<li>mongo gui: robo3t-1.3.1</li>
<li>pymongo 3.9.0</li>
<li>MongoEngine  0.18.2</li>
</ul>
<h2 id="install-mongodb"><a href="#install-mongodb" class="headerlink" title="install mongodb"></a>install mongodb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y mongodb</span><br></pre></td></tr></table></figure>

<h2 id="allow-remote-access"><a href="#allow-remote-access" class="headerlink" title="allow remote access"></a>allow remote access</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># By default, MongoDB is listening on 127.0.0.1:27017 only:</span><br><span class="line"></span><br><span class="line">$ sudo netstat -tnlp</span><br><span class="line">Proto Recv-Q Send-Q Local Address   Foreign Address State  PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:27017 0.0.0.0:*       LISTEN 1106/mongod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /etc/mongod.conf</span><br><span class="line">#bind_ip = 127.0.0.1</span><br><span class="line">bind_ip = 0.0.0.0</span><br><span class="line"></span><br><span class="line">sudo service mongodb restart</span><br><span class="line"></span><br><span class="line">$ sudo netstat -tnlp</span><br><span class="line">Proto Recv-Q Send-Q Local Address   Foreign Address State  PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:27017   0.0.0.0:*       LISTEN 1107/mongod</span><br><span class="line">tcp        0      0 0.0.0.0:5000    0.0.0.0:*       LISTEN 2364/python  </span><br><span class="line">tcp        0      0 0.0.0.0:22      0.0.0.0:*       LISTEN 4365/sshd  </span><br></pre></td></tr></table></figure>

<h2 id="mongo-shell"><a href="#mongo-shell" class="headerlink" title="mongo shell"></a>mongo shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host mongodb0.example.com --port 27017</span><br><span class="line">mongo 127.0.0.1:27017/myfb</span><br><span class="line"></span><br><span class="line">mongo --version</span><br><span class="line">MongoDB shell version: 2.6.10</span><br></pre></td></tr></table></figure>
<blockquote>
<p>see <a href="https://docs.mongodb.com/manual/mongo/">mongo shell</a></p>
</blockquote>
<h3 id="show-dbs-and-collections"><a href="#show-dbs-and-collections" class="headerlink" title="show dbs and collections"></a>show dbs and collections</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mongo </span><br><span class="line"><span class="comment"># show all dbs</span></span><br><span class="line">&gt; show dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># display current db</span></span><br><span class="line">&gt;db</span><br><span class="line"><span class="built_in">test</span> (default database)</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch or create db</span></span><br><span class="line">&gt; use mydb</span><br><span class="line">&gt; db.help()</span><br><span class="line"></span><br><span class="line">&gt; show collections</span><br><span class="line">posts</span><br><span class="line">system.indexes</span><br><span class="line"></span><br><span class="line">&gt; db.posts.help()</span><br><span class="line"></span><br><span class="line">&gt; db.posts.find()</span><br></pre></td></tr></table></figure>

<h3 id="drop-db-and-collection"><a href="#drop-db-and-collection" class="headerlink" title="drop db and collection"></a>drop db and collection</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;db.posts.drop()</span><br></pre></td></tr></table></figure>
<h3 id="backup-copy-db"><a href="#backup-copy-db" class="headerlink" title="backup copy db"></a>backup copy db</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;db.copyDatabase(<span class="string">&quot;mydb&quot;</span>,<span class="string">&quot;backup_mydb&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="rename-field"><a href="#rename-field" class="headerlink" title="rename field"></a>rename field</h3><p>see <a href="https://stackoverflow.com/questions/9254351/how-can-i-rename-a-field-for-all-documents-in-mongodb">here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The `false, true` in the method above are: &#123; upsert:false, multi:true &#125;. </span></span><br><span class="line"><span class="comment"># You need the multi:true to update all your records.</span></span><br><span class="line"></span><br><span class="line">&gt; db.students.update(&#123;&#125;, &#123; <span class="variable">$rename</span>: &#123; <span class="string">&quot;oldname&quot;</span>: <span class="string">&quot;newname&quot;</span> &#125; &#125;, <span class="literal">false</span>, <span class="literal">true</span> )</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 48130, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 48130 &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#In MongoDB 3.2 you can also use</span></span><br><span class="line">&gt;db.students.updateMany( &#123;&#125;, &#123; <span class="variable">$rename</span>: &#123; <span class="string">&quot;oldname&quot;</span>: <span class="string">&quot;newname&quot;</span> &#125; &#125; )</span><br></pre></td></tr></table></figure>

<h3 id="add-new-field"><a href="#add-new-field" class="headerlink" title="add new field"></a>add new field</h3><p>see <a href="https://stackoverflow.com/questions/7714216/add-new-field-to-every-document-in-a-mongodb-collection">here</a></p>
<blockquote>
<p>Same as the updating existing collection field, <code>$set</code> will add a new fields if the specified field does not exist.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The `false, true` in the method above are: &#123; upsert:false, multi:true &#125;. </span></span><br><span class="line"><span class="comment"># You need the multi:true to update all your records.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.your_collection.update(&#123;&#125;,&#123; <span class="variable">$set</span>: &#123;<span class="string">&quot;new_field&quot;</span>: <span class="string">&quot;field_value&quot;</span>&#125; &#125;,<span class="literal">false</span>,<span class="literal">true</span>)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 775471, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 775471 &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="indexes"><a href="#indexes" class="headerlink" title="indexes"></a>indexes</h3><p>syntax</p>
<pre><code>#db.collection_name.createIndex(&#123;field_name: 1 or -1&#125;)
db.index_basic.createIndex(&#123;ts_code:1&#125;)

db.index_basic.getIndexes()

db.index_basic.dropIndex(&#123;ts_code:1&#125;)
db.index_basic.dropIndexes() # can not drop default `_id` index
</code></pre>
<blockquote>
<p>The value 1 is for ascending order and -1 is for descending order</p>
</blockquote>
<p>example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.index_basic.createIndex(&#123;ts_code:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.index_basic.getIndexes()</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 1,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;stock.index_basic&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 1,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;ts_code&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;ts_code_1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;stock.index_basic&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; db.index_basic.dropIndex(&#123;ts_code:1&#125;)</span><br><span class="line">&#123; <span class="string">&quot;nIndexesWas&quot;</span> : 2, <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br><span class="line">&gt; db.index_basic.getIndexes()</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 1,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;stock.index_basic&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt; db.index_basic.<span class="function"><span class="title">dropIndexes</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;nIndexesWas&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span> : <span class="string">&quot;non-_id indexes dropped for collection&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="remove-field"><a href="#remove-field" class="headerlink" title="remove field"></a>remove field</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove field from all documents</span></span><br><span class="line">&gt; db.stock_basic</span><br><span class="line">&gt; db.stock_basic.findOne()</span><br><span class="line">&gt; db.stock_basic.update(&#123;&#125;,&#123;<span class="variable">$unset</span>: &#123;list_date_obj:1&#125;&#125;,&#123;multi: <span class="literal">true</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 3717, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 3717 &#125;)</span><br><span class="line">&gt; db.stock_basic.update(&#123;&#125;,&#123;<span class="variable">$unset</span>: &#123;_StockBasic__created:1&#125;&#125;,&#123;multi: <span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.stock_basic.update(&#123;&#125;,&#123;<span class="variable">$unset</span>: &#123;_StockBasic__updated:1&#125;&#125;,&#123;multi: <span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.stock_basic.findOne()</span><br></pre></td></tr></table></figure>

<h2 id="mongo-command"><a href="#mongo-command" class="headerlink" title="mongo command"></a>mongo command</h2><h3 id="dump-and-restore-db"><a href="#dump-and-restore-db" class="headerlink" title="dump and restore db"></a>dump and restore db</h3><ul>
<li>mongoexport &#x2F; mongoimport</li>
<li>mongodump   &#x2F; mongorestore</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export db to outdb on node1</span></span><br><span class="line">mongodump --db myfb --out outdb</span><br><span class="line">zip outdb.zip -r outdb/</span><br><span class="line">scp outdb.zip myfb:~/</span><br><span class="line"></span><br><span class="line"><span class="comment"># import db on node2</span></span><br><span class="line">unzip outdb.zip</span><br><span class="line">mongorestore outdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># check db file size</span></span><br><span class="line"><span class="built_in">du</span> -h outdb.zip</span><br><span class="line">742M </span><br><span class="line"></span><br><span class="line"><span class="built_in">du</span> -h outdb</span><br><span class="line">9.1G </span><br><span class="line"></span><br><span class="line"><span class="comment"># check to see </span></span><br><span class="line">mongo</span><br><span class="line">&gt; show dbs;</span><br><span class="line">myfb 3.1G</span><br></pre></td></tr></table></figure>
<h2 id="mongo-gui"><a href="#mongo-gui" class="headerlink" title="mongo gui"></a>mongo gui</h2><p>Robomongo offically changed it’s name and released two different products <code>Studio 3T</code> and <code>Robo 3T</code>. Old <code>robomongo</code> is now called <code>Robo 3T</code>. <code>Studio 3T</code> is for professionals.</p>
<pre><code>wget https://download-test.robomongo.org/linux/robo3t-1.3.1-linux-x86_64-7419c406.tar.gz

vim .bashrc
export PATH=/home/kezunlin/program/robo3t/bin:$PATH
</code></pre>
<p>allow mongodb to access from remote.</p>
<pre><code>vim /etc/mongodb.conf
#bind_ip = 127.0.0.1
bind_ip = 0.0.0.0
</code></pre>
<blockquote>
<p>by default, mongodb only allow to access from local.</p>
</blockquote>
<p>restart mongodb again</p>
<pre><code> &gt; sudo service mongodb status
 mongodb.service - An object/document-oriented database
   Loaded: loaded (/lib/systemd/system/mongodb.service; enabled; vendor preset: enabled)
   Active: active (running) since 四 2019-09-26 16:11:03 CST; 7s ago
     Docs: man:mongod(1)
 Main PID: 4917 (mongod)
    Tasks: 10
   Memory: 3.0G
      CPU: 70ms
   CGroup: /system.slice/mongodb.service
           └─4917 /usr/bin/mongod --config /etc/mongodb.conf

9月 26 16:11:03 node17 systemd[1]: Started An object/document-oriented database.
9月 26 16:11:03 node17 mongod[4917]: warning: bind_ip of 0.0.0.0 is unnecessary; listens on all ips by default
</code></pre>
<p>access from remote now </p>
<pre><code>robo3t
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="python-mongodb"><a href="#python-mongodb" class="headerlink" title="python mongodb"></a>python mongodb</h2><pre><code>pip install pymongo
pip install mongoengine
</code></pre>
<blockquote>
<p>One library that provides a higher abstraction on top of PyMongo is MongoEngine. MongoEngine is an object document mapper (<code>ODM</code>), which is roughly equivalent to a SQL-based object relational mapper (<code>ORM</code>). The abstraction provided by MongoEngine is class-based, so all of the models you create are classes.</p>
</blockquote>
<h3 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_mongo_client</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">    client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line">    db = client[<span class="string">&#x27;mydb&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    posts = db.posts</span><br><span class="line">    post_data = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Python and MongoDB&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;PyMongo is fun, you guys&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Scott&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = posts.insert_one(post_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;One post: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.inserted_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    post_1 = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Python and MongoDB&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;PyMongo is fun, you guys&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Scott&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    post_2 = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Virtual Environments&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;Use virtual environments, you guys&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Scott&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    post_3 = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Learning Python&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;Learn Python, it is easy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Bill&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    new_result = posts.insert_many([post_1, post_2, post_3])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Multiple posts: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(new_result.inserted_ids))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># find one </span></span><br><span class="line">    bills_post = posts.find_one(&#123;<span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(bills_post)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fine many</span></span><br><span class="line">    scotts_posts = posts.find(&#123;<span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;Scott&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(scotts_posts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> scotts_posts:</span><br><span class="line">        <span class="built_in">print</span>(post)</span><br><span class="line"></span><br><span class="line">    client.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="mongoengine"><a href="#mongoengine" class="headerlink" title="mongoengine"></a>mongoengine</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_mongo_engine</span>():</span><br><span class="line">    <span class="comment"># define collection </span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Post</span>(<span class="title class_ inherited__">Document</span>):</span><br><span class="line">        title = StringField(required=<span class="literal">True</span>, max_length=<span class="number">200</span>)</span><br><span class="line">        content = StringField(required=<span class="literal">True</span>)</span><br><span class="line">        author = StringField(required=<span class="literal">True</span>, max_length=<span class="number">50</span>)</span><br><span class="line">        published = DateTimeField(default=datetime.datetime.now)</span><br><span class="line"></span><br><span class="line">    connect(<span class="string">&#x27;mydb&#x27;</span>, </span><br><span class="line">        host=<span class="string">&#x27;localhost&#x27;</span>, </span><br><span class="line">        port=<span class="number">27017</span>, </span><br><span class="line">        alias=<span class="string">&quot;default&quot;</span> <span class="comment"># must be `default`</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># mongoengine.connection.MongoEngineConnectionError: You have not defined a default connection</span></span><br><span class="line"></span><br><span class="line">    post_1 = Post(</span><br><span class="line">        title=<span class="string">&#x27;Sample Post&#x27;</span>,</span><br><span class="line">        content=<span class="string">&#x27;Some engaging content&#x27;</span>,</span><br><span class="line">        author=<span class="string">&#x27;Scott&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    post_1.save()       <span class="comment"># This will perform an insert</span></span><br><span class="line">    <span class="built_in">print</span>(post_1.title)</span><br><span class="line">    <span class="built_in">print</span>(post_1.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    post_1.title = <span class="string">&#x27;A Better Post Title&#x27;</span></span><br><span class="line">    post_1.save()       <span class="comment"># This will perform an atomic edit on &quot;title&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(post_1.title)</span><br><span class="line">    <span class="built_in">print</span>(post_1.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    disconnect(alias=<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test_mongo_engine()</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/">mongodb tutorial</a></li>
<li><a href="https://www.mongodb.com/blog/post/getting-started-with-python-and-mongodb">getting-started-with-python-and-mongodb</a></li>
<li><a href="https://realpython.com/introduction-to-mongodb-and-python/">introduction-to-mongodb-and-python</a></li>
<li><a href="https://stackoverflow.com/questions/2781682/mongodb-orm-for-python">mongodb-orm-for-python</a></li>
<li><a href="http://mongoengine.org/">mongoengine</a></li>
<li><a href="http://docs.mongoengine.org/tutorial.html">mongoengine tutorial</a></li>
<li><a href="https://robomongo.org/">robomongo</a></li>
</ul>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul>
<li>20190926: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>mongo</tag>
        <tag>pymongo</tag>
        <tag>mongoengine</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to use python flask jinja templates and a realtime video demo</title>
    <url>//blog/flask-jinja-templates/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Jinja-delimiters"><a href="#Jinja-delimiters" class="headerlink" title="Jinja delimiters"></a>Jinja delimiters</h3><p>The default Jinja delimiters are configured as follows:</p>
<pre><code>&#123;% ... %&#125; for Statements
&#123;&#123; ... &#125;&#125; for Expressions to print to the template output
 for Comments not included in the template output
#  ... ## for Line Statements
</code></pre>
<h3 id="url-for-static-css-image"><a href="#url-for-static-css-image" class="headerlink" title="url_for static(css+image)"></a>url_for static(css+image)</h3><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for('static', filename='bootstrap/bootstrap.min.css') &#125;&#125;&quot;&gt;

&lt;img src=&quot;&#123;&#123; url_for('static', filename='images/1.PNG') &#125;&#125;&quot; height=&quot;&#123;&#123;query_img_height&#125;&#125;&quot; width=&quot;&#123;&#123;query_img_width&#125;&#125;&quot;&gt;
</code></pre>
<blockquote>
<p>You have by default the <code>static</code> endpoint for static files.</p>
</blockquote>
<p>will be converted to </p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/bootstrap/bootstrap.min.css&quot;&gt;
&lt;img src=&quot;/static/images/1.PNG&quot; height=&quot;1799&quot; width=&quot;896&quot;&gt;
</code></pre>
<p>if we place js and css files in <code>static</code> folder, then we can use  </p>
<pre><code>&lt;script src=&quot;static/js/lib/jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>to replace</p>
<pre><code> &lt;script src=&quot;&#123;&#123; url_for('static', filename = 'js/lib/jquery-3.4.1.min.js') &#125;&#125;&quot;&gt;&lt;/script&gt;
</code></pre>
<h3 id="url-for-static-pass-image-path"><a href="#url-for-static-pass-image-path" class="headerlink" title="url for static(pass image path)"></a>url for static(pass image path)</h3><pre><code>&lt;h1&gt;Image  &#123;&#123;image_filename&#125;&#125;&lt;/h1&gt;
&lt;img src=&quot;&#123;&#123; url_for('static', filename = image_filename) &#125;&#125;&quot; height=&quot;&#123;&#123;query_img_height&#125;&#125;&quot; width=&quot;&#123;&#123;query_img_width&#125;&#125;&quot;&gt;
</code></pre>
<blockquote>
<p>notice we do’t use </p>
</blockquote>
<pre><code>filename = &#123;&#123;image_filename&#125;&#125;
</code></pre>
<blockquote>
<p><code>image_filename</code> will be passed to html with value <code>images/1.PNG</code></p>
</blockquote>
<p>will be converted to </p>
<pre><code>&lt;h1&gt;Image  images/1.PNG &lt;/h1&gt;
&lt;img src=&quot;/static/images/1.PNG&quot; height=&quot;1799&quot; width=&quot;896&quot;&gt;
</code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><pre><code>&#123;% set result_count = result_list | length %&#125;

&#123;&#123; index | string ) &#125;&#125;
</code></pre>
<blockquote>
<p>filter: length, string</p>
</blockquote>
<h3 id="debug-html"><a href="#debug-html" class="headerlink" title="debug html"></a>debug html</h3><p><img src="https://kezunlin.me/images/posts/635233-20191007110914605-68892998.png" alt="debug jinja2 html"></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="url-for-with-params"><a href="#url-for-with-params" class="headerlink" title="url_for with params"></a>url_for with params</h3><p>python code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;you are in the index page&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/questions/&lt;int:question_id&gt;&#x27;</span></span>):    </span></span><br><span class="line"><span class="comment">#int has been used as a filter that only integer will be passed </span></span><br><span class="line"><span class="comment"># in the url otherwise it will give a 404 error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_question</span>(<span class="params">question_id</span>):  </span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&#x27;you asked for question &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(question_id))</span><br></pre></td></tr></table></figure>

<p>html page</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;&#123;</span> <span class="attr">url_for</span>(&#x27;<span class="attr">index</span>&#x27;) &#125;&#125;&gt;</span>Index<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&#123;&#123;</span> <span class="attr">url_for</span>(&#x27;<span class="attr">find_question</span>&#x27; ,<span class="attr">question_id</span>=<span class="string">1)</span> &#125;&#125;&gt;</span>Question 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if kline_chart %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span>&#123;&#123; kline_chart | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Realtime-Video"><a href="#Realtime-Video" class="headerlink" title="Realtime Video"></a>Realtime Video</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;video_feed&#x27;) &#125;&#125;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#===================================================</span></span><br><span class="line">outputFrame = <span class="literal">None</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize a flask object</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">	<span class="comment"># return the rendered template</span></span><br><span class="line">	<span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    	<span class="comment"># grab global references to the output frame and lock variables</span></span><br><span class="line">	<span class="keyword">global</span> outputFrame, lock</span><br><span class="line"></span><br><span class="line">	<span class="comment"># loop over frames from the output stream</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="comment"># wait until the lock is acquired</span></span><br><span class="line">		<span class="keyword">with</span> lock:</span><br><span class="line">			<span class="comment"># check if the output frame is available, otherwise skip</span></span><br><span class="line">			<span class="comment"># the iteration of the loop</span></span><br><span class="line">			<span class="keyword">if</span> outputFrame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">			<span class="comment"># encode the frame in JPEG format</span></span><br><span class="line">			(flag, encodedImage) = cv2.imencode(<span class="string">&quot;.jpg&quot;</span>, outputFrame)</span><br><span class="line"></span><br><span class="line">			<span class="comment"># ensure the frame was successfully encoded</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># yield the output frame in the byte format</span></span><br><span class="line">		<span class="keyword">yield</span>(<span class="string">b&#x27;--frame\r\n&#x27;</span> <span class="string">b&#x27;Content-Type: image/jpeg\r\n\r\n&#x27;</span> +</span><br><span class="line">			<span class="built_in">bytearray</span>(encodedImage) + <span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/video_feed&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video_feed</span>():</span><br><span class="line">	<span class="comment"># return the response generated along with the specific media</span></span><br><span class="line">	<span class="comment"># type (mime type)</span></span><br><span class="line">	<span class="keyword">return</span> Response(generate(),</span><br><span class="line">		mimetype = <span class="string">&quot;multipart/x-mixed-replace; boundary=frame&quot;</span>)</span><br><span class="line"><span class="comment">#===================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start the flask app</span></span><br><span class="line">args = &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">8888</span>&#125;</span><br><span class="line">app.run(host=args[<span class="string">&quot;ip&quot;</span>], port=args[<span class="string">&quot;port&quot;</span>], debug=<span class="literal">True</span>,</span><br><span class="line">		threaded=<span class="literal">True</span>, use_reloader=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for web</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,Response,render_template</span><br><span class="line"></span><br><span class="line">web_params = &#123;</span><br><span class="line">    <span class="string">&quot;query_key&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;query_segimg_filepath&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;query_segmask_filepath&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;query_img_height&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;query_img_width&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;result_list&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize a flask object</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">_<span class="built_in">dir</span> = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">app.template_folder = os.path.join(_<span class="built_in">dir</span>, <span class="string">&quot;templates&quot;</span>)</span><br><span class="line">app.static_folder = os.path.join(_<span class="built_in">dir</span>, <span class="string">&quot;static&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(app.template_folder)</span><br><span class="line"><span class="built_in">print</span>(app.static_folder)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">global</span> web_params</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;search.html&quot;</span>,**web_params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start the flask app</span></span><br><span class="line">args = &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">8888</span>&#125;</span><br><span class="line">app.run(host=args[<span class="string">&quot;ip&quot;</span>], port=args[<span class="string">&quot;port&quot;</span>], debug=<span class="literal">True</span>,threaded=<span class="literal">True</span>, use_reloader=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Query &#123;&#123;query_key&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Query Image &#123;&#123; query_segimg_filepath &#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;# </span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/1.PNG&#x27;) &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">&quot;30&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    #&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = query_segimg_filepath) &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">height</span>=<span class="string">&quot;&#123;&#123;query_img_height&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">&quot;&#123;&#123;query_img_width&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;# </span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = query_segmask_filepath) &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">&quot;&#123;&#123;query_img_height&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;&#123;&#123;query_img_width&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% set result_count = result_list | length %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Search Results #&#123;&#123;result_count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    &#123;% for i in range(0,result_count) %&#125;</span><br><span class="line">      &#123;% set item = result_list[i] %&#125;</span><br><span class="line">      &#123;% set segimg_filepath = item[&quot;segimg_filepath&quot;] %&#125;</span><br><span class="line">      &#123;% set segmask_filepath = item[&quot;segmask_filepath&quot;] %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;% set img_height = item[&quot;height&quot;] %&#125;</span><br><span class="line">      &#123;% set img_width = item[&quot;width&quot;] %&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Top # &#123;&#123;i&#125;&#125;  &#123;&#123; segimg_filepath &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = segimg_filepath) &#125;&#125;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&#123;&#123;img_height&#125;&#125;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&#123;&#123;img_width&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      &#123;# </span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = segmask_filepath) &#125;&#125;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&#123;&#123;img_height&#125;&#125;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&#123;&#123;img_width&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      #&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/16351826/link-to-flask-static-files-with-url-for">link-to-flask-static-files-with-url-for</a></li>
<li><a href="https://jinja.palletsprojects.com/en/2.10.x/templates/#length">Template Designer Documentation</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191005: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>jinja</tag>
      </tags>
  </entry>
  <entry>
    <title>use colorwheel to print colored message in console with cpp programs</title>
    <url>//blog/colorwheel-for-colored-print-and-trace-for-cpp-programs/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget -O /usr/include/colorwheel.h https://raw.githubusercontent.com/Totoditoto/colorwheel/master/colorwheel.h</span><br></pre></td></tr></table></figure>
<blockquote>
<p>install to <code>/usr/include/colorwheel.h</code></p>
</blockquote>
<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p>only include header</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;colorwheel.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="macros"><a href="#macros" class="headerlink" title="macros"></a>macros</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Predefined printf styled messages */</span></span><br><span class="line"><span class="built_in">CW_PRINT_NORMAL</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_PRINT_ALARM</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_PRINT_CRITICAL</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_PRINT_FAULT</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_PRINT_VALID</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_PRINT_INFO</span>(message, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Predefined trace styled messages (indicates file, function and line) */</span></span><br><span class="line"><span class="built_in">CW_TRACE_NORMAL</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_TRACE_ALARM</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_TRACE_CRITICAL</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_TRACE_FAULT</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_TRACE_VALID</span>(message, ...);</span><br><span class="line"><span class="built_in">CW_TRACE_INFO</span>(message, ...);</span><br></pre></td></tr></table></figure>

<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;colorwheel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">demo_colorwheel</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CW_TRACE_NORMAL</span>(<span class="string">&quot;This is a normal information&quot;</span>);</span><br><span class="line">    <span class="built_in">CW_TRACE_INFO</span>(<span class="string">&quot;This is a noticeable information&quot;</span>);</span><br><span class="line">    <span class="built_in">CW_TRACE_FAULT</span>(<span class="string">&quot;Ooops something might have gone wrong&quot;</span>);</span><br><span class="line">    <span class="built_in">CW_TRACE_VALID</span>(<span class="string">&quot;Finally it&#x27;s okay, don&#x27;t worry&quot;</span>);</span><br><span class="line">    <span class="comment">//CW_TRACE_NORMAL(&quot;Nevermind&quot;);</span></span><br><span class="line">	<span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">CW_TRACE_CRITICAL</span>(<span class="string">&quot;It was way worse than expected! Computer will explode in %d s&quot;</span>, value);</span><br><span class="line">    <span class="built_in">CW_TRACE_ALARM</span>(<span class="string">&quot;IT IS TOO LATE RUN AWAY&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/635233-20191010163305986-2138562051.png" alt="colored print"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/Totoditoto/colorwheel">colorwheel</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191010: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>colorwheel</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv and numpy matrix multiplication vs element-wise multiplication</title>
    <url>//blog/opencv-matrix-multiplication-vs-element-wise-multiplication/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h3><p><code>Matrix multiplication</code> is where two matrices are multiplied directly. This operation multiplies matrix A of size <code>[a x b]</code> with matrix B of size <code>[b x c]</code> to produce matrix C of size <code>[a x c]</code>. </p>
<p>In OpenCV it is achieved using the simple <code>*</code> operator:</p>
<pre><code>C = A * B  // Aab * Bbc = Cac
</code></pre>
<p><code>Element-wise multiplication</code> is where each pixel in the output matrix is formed by multiplying that pixel in matrix A by its corresponding entry in matrix B. The input matrices should be the same size, and the output will be the same size as well. This is achieved using the <code>mul()</code> function:</p>
<pre><code>output = A.mul(B); // A B must have same size !!!
</code></pre>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">cv_matmul</span><span class="params">(<span class="type">const</span> cv::Mat&amp; A, <span class="type">const</span> cv::Mat&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// matrix multipication    m*k,  k*n ===&gt; m*n</span></span><br><span class="line">	cv::Mat C = A * B; </span><br><span class="line">	<span class="keyword">return</span> C; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">cv_mul</span><span class="params">(<span class="type">const</span> cv::Mat&amp; image, <span class="type">const</span> cv::Mat&amp; mask)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// element-wise multiplication  output[i,j] = image[i,j] * mask[i,j]</span></span><br><span class="line">	cv::Mat output = image.<span class="built_in">mul</span>(mask, <span class="number">1.0</span>); <span class="comment">// m*n,  m*n</span></span><br><span class="line">	<span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">cv_multiply3x1</span><span class="params">(<span class="type">const</span> cv::Mat&amp; mat3, <span class="type">const</span> cv::Mat&amp; mat1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::vector&lt;cv::Mat&gt; channels;</span><br><span class="line">	cv::<span class="built_in">split</span>(mat3, channels);</span><br><span class="line"></span><br><span class="line">	std::vector&lt;cv::Mat&gt; result_channels;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; channels.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		result_channels.<span class="built_in">push_back</span>(channels[i].<span class="built_in">mul</span>(mat1));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cv::Mat result3;</span><br><span class="line">	cv::<span class="built_in">merge</span>(result_channels, result3);</span><br><span class="line">	<span class="keyword">return</span> result3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">cv_multiply3x3</span><span class="params">(<span class="type">const</span> cv::Mat&amp; mat3_a, <span class="type">const</span> cv::Mat&amp; mat3_b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cv::Mat a;</span><br><span class="line">	cv::Mat b;</span><br><span class="line">	cv::Mat c;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;cv::Mat&gt; a_channels;</span><br><span class="line">	std::vector&lt;cv::Mat&gt; b_channels;</span><br><span class="line">	std::vector&lt;cv::Mat&gt; c_channels;</span><br><span class="line"></span><br><span class="line">	cv::<span class="built_in">split</span>(mat3_a, a_channels);</span><br><span class="line">	cv::<span class="built_in">split</span>(mat3_b, b_channels);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a_channels.<span class="built_in">size</span>() || b_channels.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c_channels.<span class="built_in">push_back</span>(a_channels[i].<span class="built_in">mul</span>(b_channels[i]));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cv::<span class="built_in">merge</span>(c_channels, c);</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><blockquote>
<p>numpy arrays are not matrices, and the standard operations <code>*, +, -, /</code> work element-wise on arrays.</p>
</blockquote>
<blockquote>
<p>Instead, you could try using <code>numpy.matrix</code>, and <code>*</code> will be treated like <code>matrix multiplication</code>.</p>
</blockquote>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><p><code>Element-wise multiplication</code> code</p>
<pre><code>&gt;&gt;&gt; img = np.array([1,2,3,4,5,6,7,8]).reshape(2,4)
&gt;&gt;&gt; mask = np.array([1,1,1,1,0,0,0,0]).reshape(2,4)
&gt;&gt;&gt; img * mask 
array([[1, 2, 3, 4],
       [0, 0, 0, 0]])
&gt;&gt;&gt; 
&gt;&gt;&gt; np.multiply(img, mask)
array([[1, 2, 3, 4],
       [0, 0, 0, 0]])
</code></pre>
<blockquote>
<p>for <code>numpy.array</code>, <code>*</code>and <code>multiply</code> work element-wise  </p>
</blockquote>
<p><code>matrix multiplication</code> code</p>
<pre><code>&gt;&gt;&gt; a = np.array([1,2,3,4,5,6,7,8]).reshape(2,4)
&gt;&gt;&gt; b = np.array([1,1,1,1,0,0,0,0]).reshape(4,2)
&gt;&gt;&gt; np.matmul(a,b)
array([[ 3,  3],
       [11, 11]])

&gt;&gt;&gt; np.dot(a,b)
array([[ 3,  3],
       [11, 11]])

&gt;&gt;&gt; a = np.matrix([1,2,3,4,5,6,7,8]).reshape(2,4)
&gt;&gt;&gt; b = np.matrix([1,1,1,1,0,0,0,0]).reshape(4,2)
&gt;&gt;&gt; a
matrix([[1, 2, 3, 4],
        [5, 6, 7, 8]])
&gt;&gt;&gt; b
matrix([[1, 1],
        [1, 1],
        [0, 0],
        [0, 0]])
&gt;&gt;&gt; a*b
matrix([[ 3,  3],
        [11, 11]])

&gt;&gt;&gt; np.matmul(a,b)
matrix([[ 3,  3],
        [11, 11]])
</code></pre>
<blockquote>
<p>for 2-dim, <code>np.dot</code> equals <code>np.matmul</code><br>for <code>numpy.array</code>, <code>np.matmul</code> means <code>matrix multiplication</code>;<br>for <code>numpy.matrix</code>, <code>*</code> and <code>np.matmul</code> means <code>matrix multiplication</code>;</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/10936099/matrix-multiplication-in-opencv">matrix-multiplication-in-opencv</a></li>
<li><a href="https://answers.opencv.org/question/63026/cvmat-element-matrix-multiplication/">cvmat-element-matrix-multiplication</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20190109: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp macro like function to implement a performance profiler</title>
    <url>//blog/cpp-macro-like-function/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="macro-expansions"><a href="#macro-expansions" class="headerlink" title="macro expansions"></a>macro expansions</h3><ul>
<li>#name &#x3D;&#x3D;&#x3D;&gt;  quote as strings  “xxx”</li>
<li>##name, name  &#x3D;&#x3D;&#x3D;&gt;  xxx</li>
<li>a ## b &#x3D;&#x3D;&#x3D;&gt;  concatenate the preceding and following tokens.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #name ===&gt;  &quot;xxx&quot;</span></span><br><span class="line"><span class="comment">// name,  ##name ===&gt; xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ##name ===&gt; concatenate  </span></span><br><span class="line"><span class="comment">// #name ===&gt;  quote as strings</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a ## b ===&gt;  concatenate the preceding and following tokens.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUOTE(name) #name</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT(x,y) x##y   <span class="comment">// x ## y   space in ommited</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MACRO(name)  #name <span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MACRO2(name) name <span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MACRO3(name) ##name <span class="string">&quot;foo&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAT(a, ...) a ## __VA_ARGS__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IIF(c) CAT(IIF_, c)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IIF_0(t, ...) __VA_ARGS__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IIF_1(t, ...) t</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">macro_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">QUOTE</span>(test); <span class="comment">// &quot;test&quot;</span></span><br><span class="line">	<span class="built_in">CONCAT</span>(test, foo); <span class="comment">// testfoo</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">MACRO</span>(test); <span class="comment">// &quot;test&quot; &quot;foo&quot;</span></span><br><span class="line">	<span class="built_in">MACRO2</span>(test);<span class="comment">// test &quot;foo&quot;</span></span><br><span class="line">	<span class="built_in">MACRO3</span>(test);<span class="comment">// test &quot;foo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="macro-function"><a href="#macro-function" class="headerlink" title="macro function"></a>macro function</h3><h4 id="define"><a href="#define" class="headerlink" title="define"></a>define</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(a,b)  (a+b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYDEBUG(...)   fprintf(stderr, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure>

<h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> c = <span class="built_in">SUM</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">MYDEBUG</span>(<span class="string">&quot;%d,%d \n&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);     <span class="comment">/*   Becomes fprintf(stderr,&quot;%d,%d \n&quot;,1,2);   */</span></span><br></pre></td></tr></table></figure>

<h3 id="with-class-object"><a href="#with-class-object" class="headerlink" title="with class object"></a>with class object</h3><h4 id="define-1"><a href="#define-1" class="headerlink" title="define"></a>define</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">profiler</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">profiler</span>(<span class="type">const</span> <span class="type">char</span>* func_name, <span class="type">unsigned</span> <span class="type">int</span> times = <span class="number">1</span>);</span><br><span class="line">	~<span class="built_in">profiler</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	boost::posix_time::ptime pt1;</span><br><span class="line">	boost::posix_time::ptime pt2;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> * m_func_name;</span><br><span class="line">	<span class="type">int</span> m_times = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONCE_PROFILER() profiler _profiler_instance##__LINE__(__FUNCTION__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_PROFILE_ONE(name) profiler _profiler_##name(#name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_PROFILE_TIMES(name,times) profiler _profiler_##name(#name,times)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_PROFILE(name,...) profiler _profiler_##name(#name, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END_PROFILE(name)  _profiler_##name.stop()			</span></span><br></pre></td></tr></table></figure>

<h4 id="usage-1"><a href="#usage-1" class="headerlink" title="usage"></a>usage</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_PROFILE</span>(LoadImage);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">load_image</span>();</span><br><span class="line">	</span><br><span class="line"><span class="built_in">END_PROFILE</span>(LoadImage); </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">BEGIN_PROFILE_TIMES</span>(ProcessImageTimes, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//BEGIN_PROFILE(ProcessImageTimes, 100);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">process_image</span>();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="built_in">END_PROFILE</span>(ProcessImageTimes);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/pfultz2/Cloak/wiki/C-Preprocessor-tricks,-tips,-and-idioms">C-Preprocessor-tricks,-tips,-and-idioms</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191010: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>macro</tag>
        <tag>profiler</tag>
      </tags>
  </entry>
  <entry>
    <title>your first golang tutorial</title>
    <url>//blog/golang-tutorial/</url>
    <content><![CDATA[<h2 id="go-tutorial"><a href="#go-tutorial" class="headerlink" title="go tutorial"></a>go tutorial</h2><p>versions:</p>
<ul>
<li>go:  1.13.1</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> tar -C /usr/local -xzf go1.13.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">ll /usr/local/go</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>zsh uses env profile <code>~/.zshrc</code>, bash use env profile <code>~/.bashrc</code>.</p>
</blockquote>
</blockquote>
<p>check version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br><span class="line">go version go1.13.1 linux/amd64</span><br></pre></td></tr></table></figure>

<h3 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h3><p>just delete <code> /usr/local/go</code></p>
<h3 id="set-GOPATH"><a href="#set-GOPATH" class="headerlink" title="set GOPATH"></a>set GOPATH</h3><p>Create your workspace directory, <code>$HOME/go</code>.</p>
<blockquote>
<p>The <code>GOPATH</code> environment variable specifies the location of your workspace. If no <code>GOPATH</code> is set, it is assumed to be <code>$HOME/go</code> on Unix systems.</p>
</blockquote>
<blockquote>
<p>Note that <code>GOPATH</code> must not be the same path as your Go installation.</p>
</blockquote>
<p>issue the commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bashrc </span><br><span class="line"><span class="comment"># for golang</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/go/bin:<span class="variable">$GOPATH</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#go env -w GOPATH=$HOME/go</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$GOPATH</span> </span><br><span class="line">/home/kezunlin/go</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> GOPATH</span><br><span class="line">/home/kezunlin/go</span><br></pre></td></tr></table></figure>

<h3 id="code-organization"><a href="#code-organization" class="headerlink" title="code organization"></a>code organization</h3><ul>
<li>Go programmers typically keep all their Go code in a single workspace.</li>
<li>A workspace contains many version control repositories (managed by Git, for example).</li>
<li>Each repository contains one or more packages.</li>
<li>Each package consists of one or more Go source files in a single directory.</li>
<li>The path to a package’s directory determines its import path.</li>
</ul>
<p>like this </p>
<pre><code>bin/
    hello                          # command executable
    outyet                         # command executable
src/
    github.com/golang/example/
        .git/                      # Git repository metadata
        hello/
            hello.go               # command source
        outyet/
            main.go                # command source
            main_test.go           # test source
        stringutil/
            reverse.go             # package source
            reverse_test.go        # test source
    golang.org/x/image/
        .git/                      # Git repository metadata
        bmp/
            reader.go              # package source
            writer.go              # package source
    ... (many more repositories and packages omitted) ...
</code></pre>
<blockquote>
<p>Note that <code>symbolic links</code> should not be used to link files or directories into your workspace.</p>
</blockquote>
<blockquote>
<p>An <code>import path</code> is a string that uniquely identifies a package.</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="go-example"><a href="#go-example" class="headerlink" title="go example"></a>go example</h3><h4 id="your-first-program"><a href="#your-first-program" class="headerlink" title="your first program"></a>your first program</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$GOPATH</span>/src/github.com/kezunlin/hello</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/kezunlin/hello</span><br><span class="line">vim hello.go</span><br></pre></td></tr></table></figure>

<p>hello.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;hello, world\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>build and run </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build</span><br><span class="line">./hello</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>

<p>install and clean binary files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install hello to $HOME/go/bin</span></span><br><span class="line">go install  </span><br><span class="line"></span><br><span class="line"><span class="comment"># clean $HOME/go/bin/*</span></span><br><span class="line">go clean -i</span><br></pre></td></tr></table></figure>

<blockquote>
<p>~&#x2F;go&#x2F;src$ <code>go build github.com/kezunlin/hello/</code><br>~&#x2F;go&#x2F;src$ <code>go install github.com/kezunlin/hello/</code></p>
</blockquote>
<h4 id="your-first-library"><a href="#your-first-library" class="headerlink" title="your first library"></a>your first library</h4><p>stringutil library</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$GOPATH</span>/src/github.com/kezunlin/stringutil</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/kezunlin/stringutil</span><br><span class="line">vim reverse.go</span><br></pre></td></tr></table></figure>

<p>reverse.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package stringutil contains utility functions for working with strings.</span></span><br><span class="line"><span class="keyword">package</span> stringutil</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse returns its argument string reversed rune-wise left to right.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    r := []<span class="type">rune</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(r)<span class="number">-1</span>; i &lt; <span class="built_in">len</span>(r)/<span class="number">2</span>; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        r[i], r[j] = r[j], r[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>package &lt;name&gt;
</code></pre>
<blockquote>
<p>where <code>name</code> is the package’s default name for imports. (All files in a package must use the same name.)<br>executable commands must always use <code>package main</code>.</p>
</blockquote>
<p>build library</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build github.com/kezunlin/stringutil</span><br><span class="line"><span class="comment">#This won&#x27;t produce an output file. Instead it saves </span></span><br><span class="line"><span class="comment">#the compiled package in the local build cache.</span></span><br></pre></td></tr></table></figure>

<p>use <code>stringutil</code> in <code>hello.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/kezunlin/stringutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;hello, world\n&quot;</span>)</span><br><span class="line">    fmt.Println(stringutil.Reverse(<span class="string">&quot;!oG ,olleH&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>build and install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build github.com/kezunlin/hello</span><br><span class="line">go install github.com/kezunlin/hello</span><br><span class="line"></span><br><span class="line">~/go/bin$ ./hello </span><br><span class="line">hello, world</span><br><span class="line">Hello, Go!</span><br></pre></td></tr></table></figure>

<p>folder structure</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree .</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   └── hello</span><br><span class="line">└── src</span><br><span class="line">    └── github.com</span><br><span class="line">        └── kezunlin</span><br><span class="line">            ├── hello</span><br><span class="line">            │   └── hello.go</span><br><span class="line">            └── stringutil</span><br><span class="line">                └── reverse.go</span><br><span class="line"></span><br><span class="line">6 directories, 3 files</span><br></pre></td></tr></table></figure>

<h4 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h4><p>You write a test by creating a file with a name ending in <code>_test.go</code> that contains functions named <code>TestXXX</code> with signature func <code>(t *testing.T)</code>. The test framework runs each such function; if the function calls a failure function such as <code>t.Error</code> or <code>t.Fail</code>, the test is considered to have failed.</p>
<ul>
<li>file name: xxx_test.go</li>
<li>function name:  TextXXX</li>
<li>error:  <code>t.Error</code> or <code>t.Fail</code></li>
</ul>
<p>reverse_test.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stringutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReverse</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">		in, want <span class="type">string</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		&#123;<span class="string">&quot;Hello, world&quot;</span>, <span class="string">&quot;dlrow ,olleH&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;Hello, 世界&quot;</span>, <span class="string">&quot;界世 ,olleH&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, c := <span class="keyword">range</span> cases &#123;</span><br><span class="line">		got := Reverse(c.in)</span><br><span class="line">		<span class="keyword">if</span> got != c.want &#123;</span><br><span class="line">			t.Errorf(<span class="string">&quot;Reverse(%q) == %q, want %q&quot;</span>, c.in, got, c.want)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test ok</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> github.com/kezunlin/stringutil</span><br><span class="line">ok  	github.com/kezunlin/stringutil 0.165s</span><br></pre></td></tr></table></figure>

<p>test error </p>
<pre><code>--- FAIL: TestReverse (0.00s)
    reverse_test.go:16: Reverse(&quot;Hello, 世界2&quot;) == &quot;2界世 ,olleH&quot;, want &quot;界世 ,olleH&quot;
FAIL
exit status 1
FAIL    github.com/kezunlin/stringutil  0.003s    
</code></pre>
<h3 id="remote-packages"><a href="#remote-packages" class="headerlink" title="remote packages"></a>remote packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get github.com/golang/example/hello</span><br><span class="line">$ <span class="variable">$GOPATH</span>/bin/hello</span><br><span class="line">Hello, Go examples!</span><br></pre></td></tr></table></figure>

<h3 id="go-commands"><a href="#go-commands" class="headerlink" title="go commands"></a>go commands</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">help</span> gopath </span><br><span class="line">go <span class="built_in">help</span> importpath </span><br><span class="line">go <span class="built_in">help</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">go build</span><br><span class="line">go install </span><br><span class="line">go clean</span><br><span class="line"></span><br><span class="line">go get <span class="comment"># fetch,build and install</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://golang.org/doc/install#install">go</a></li>
<li><a href="https://golang.org/doc/code.html">how to write go code</a></li>
<li><a href="https://tour.golang.org/welcome/1">tour</a></li>
<li><a href="https://golang.org/doc/effective_go.html">effective_go</a></li>
<li><a href="https://gocv.io/getting-started/">gocv.io</a></li>
<li><a href="https://github.com/hybridgroup/gocv">gocv</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191011: created.</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>concurrent queue or blocking queue implemented in cpp</title>
    <url>//blog/concurrent-queue-or-blocking-queue-implemented-in-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>Where <code>produce-consumer</code> pattern is present it is often the case that <code>one is faster that the other</code>: </p>
<ul>
<li>a parsing producer reads records faster than a processing consumer; </li>
<li>a disk reading producer is faster than network sending consumer.</li>
</ul>
<p>Producer and consumer often communicate by queues: <strong>the producer will put items on a queue while the consumer will pop items off a queue</strong>. What happens when the queue becomes full, or empty? </p>
<p>One approach of the producer is to try to put an item on a queue and if it’s full yield the thread and repeat. Similarly the consumer can try to pop an item off a queue and if it’s empty, ditto. This approach of try-fail-yield can unnecessarily burn CPU cycles in tight loops that constantly try to put or pop items off a queue.</p>
<p>Another approach is to temporarily grow the queue, but that doesn’t scale well. When do we stop growing? And once we stop we have to fall back onto the try-fail-yield method.</p>
<p>What if we could implement a <code>blocking queue</code>: </p>
<ul>
<li><strong>a queue who’s put operation blocks when the queue if full, and unblocks only when another thread pops an item off the queue</strong></li>
<li><strong>Similarly a queue who’s pop operation blocks when the queue is empty, and unblocks only when another thread puts an item on the queue.</strong></li>
</ul>
<blockquote>
<p>Quote from <a href="https://www.justsoftwaresolutions.co.uk/threading/implementing-a-thread-safe-queue-using-condition-variables.html">here</a></p>
</blockquote>
<p>An example of using such a queue would look like this (notice a fast producer and slow consumer in the code below):</p>
<h3 id="blocking-queue-v1"><a href="#blocking-queue-v1" class="headerlink" title="blocking queue v1"></a>blocking queue v1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//std</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boost</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> my &#123; </span><br><span class="line"><span class="keyword">namespace</span> algorithm &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Data&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHARED_EXPORT</span> blocking_queue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::queue&lt;Data&gt; the_queue;</span><br><span class="line">	<span class="keyword">mutable</span> boost::mutex the_mutex;</span><br><span class="line">	boost::condition_variable the_condition_variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Data <span class="type">const</span>&amp; data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">		the_queue.<span class="built_in">push</span>(data);</span><br><span class="line">		lock.<span class="built_in">unlock</span>();</span><br><span class="line">		the_condition_variable.<span class="built_in">notify_one</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> the_queue.<span class="built_in">empty</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> the_queue.<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">try_pop</span><span class="params">(Data&amp; popped_value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (the_queue.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		popped_value = the_queue.<span class="built_in">front</span>();</span><br><span class="line">		the_queue.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">wait_and_pop</span><span class="params">(Data&amp; popped_value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		boost::<span class="function">mutex::scoped_lock <span class="title">lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (the_queue.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			the_condition_variable.<span class="built_in">wait</span>(lock);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		popped_value = the_queue.<span class="built_in">front</span>();</span><br><span class="line">		the_queue.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">signal_exit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Data data;</span><br><span class="line">		<span class="built_in">push</span>(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">// end namespace</span></span><br></pre></td></tr></table></figure>


<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="blocking-queue-v2"><a href="#blocking-queue-v2" class="headerlink" title="blocking queue v2"></a>blocking queue v2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CAPACITY 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> my &#123;</span><br><span class="line"><span class="keyword">namespace</span> algorithm &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHARED_EXPORT</span> BlockingQueue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">BlockingQueue</span>() </span><br><span class="line">	:<span class="built_in">mtx</span>(), <span class="built_in">full_</span>(), <span class="built_in">empty_</span>(), <span class="built_in">capacity_</span>(MAX_CAPACITY) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">const</span> T&amp; data)</span></span>&#123;</span><br><span class="line">		<span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(queue_.<span class="built_in">size</span>() == capacity_)&#123;</span><br><span class="line">			full_.<span class="built_in">wait</span>(lock );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">assert</span>(queue_.<span class="built_in">size</span>() &lt; capacity_);</span><br><span class="line">		queue_.<span class="built_in">push</span>(data);</span><br><span class="line">		empty_.<span class="built_in">notify_all</span>(); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(queue_.<span class="built_in">empty</span>())&#123;</span><br><span class="line">			empty_.<span class="built_in">wait</span>(lock );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">assert</span>(!queue_.<span class="built_in">empty</span>());</span><br><span class="line">		<span class="function">T <span class="title">front</span><span class="params">(queue_.front())</span></span>;</span><br><span class="line">		queue_.<span class="built_in">pop</span>();</span><br><span class="line">		full_.<span class="built_in">notify_all</span>();</span><br><span class="line">		<span class="keyword">return</span> front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T <span class="title">Front</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(queue_.<span class="built_in">empty</span>())&#123;</span><br><span class="line">			empty_.<span class="built_in">wait</span>(lock );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">assert</span>(!queue_.<span class="built_in">empty</span>());</span><br><span class="line">		<span class="function">T <span class="title">front</span><span class="params">(queue_.front())</span></span>;</span><br><span class="line">		<span class="keyword">return</span> front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T <span class="title">Back</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(queue_.<span class="built_in">empty</span>())&#123;</span><br><span class="line">			empty_.<span class="built_in">wait</span>(lock );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">assert</span>(!queue_.<span class="built_in">empty</span>());</span><br><span class="line">		<span class="function">T <span class="title">back</span><span class="params">(queue_.back())</span></span>;</span><br><span class="line">		<span class="keyword">return</span> back;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">Size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> queue_.<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> queue_.<span class="built_in">empty</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetCapacity</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> capacity)</span></span>&#123;</span><br><span class="line">		capacity_ = (capacity &gt; <span class="number">0</span> ? capacity : MAX_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//DISABLE_COPY_AND_ASSIGN(BlockingQueue);</span></span><br><span class="line">	<span class="built_in">BlockingQueue</span>(<span class="type">const</span> BlockingQueue&amp; rhs);</span><br><span class="line">	BlockingQueue&amp; <span class="keyword">operator</span>= (<span class="type">const</span> BlockingQueue&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">mutable</span> std::mutex mtx;</span><br><span class="line">	std::condition_variable full_;</span><br><span class="line">	std::condition_variable empty_;</span><br><span class="line">	std::queue&lt;T&gt; queue_;</span><br><span class="line">	<span class="type">size_t</span> capacity_; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">// end namespace</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.justsoftwaresolutions.co.uk/threading/implementing-a-thread-safe-queue-using-condition-variables.html">implementing-a-thread-safe-queue-using-condition-variables</a></li>
<li><a href="https://vorbrodt.blog/2019/02/03/blocking-queue/">blocking-queue</a></li>
<li><a href="https://github.com/renbozqin/blocking_queue">blocking_queue v1</a></li>
<li><a href="https://github.com/marso329/BlockingQueue/blob/master/BlockingQueue.cpp">blocking_queue v1  Simple Blockingqueue I have used in many projects</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191012: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>concurrent queue</tag>
        <tag>blocking queue</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to compile and use esay profiler with c++ on ubuntu 16.04</title>
    <url>//blog/esay-profiler-for-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yse/easy_profiler.git</span><br><span class="line"><span class="built_in">cd</span> easy_profiler &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(easy_profiler REQUIRED)</span><br><span class="line"><span class="comment">#easy_profiler_Dir /usr/local/lib/cmake/easy_profiler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(my_application easy_profiler) </span><br></pre></td></tr></table></figure>

<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;easy/profiler.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EASY_FUNCTION</span>(profiler::colors::Magenta); <span class="comment">// Magenta block with name &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">EASY_BLOCK</span>(<span class="string">&quot;Calculating sum&quot;</span>); <span class="comment">// Begin block with default color == Amber100</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">EASY_BLOCK</span>(<span class="string">&quot;Addition&quot;</span>, profiler::colors::Red); <span class="comment">// Scoped red block (no EASY_END_BLOCK needed)</span></span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    EASY_END_BLOCK; <span class="comment">// End of &quot;Calculating sum&quot; block</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">EASY_BLOCK</span>(<span class="string">&quot;Calculating multiplication&quot;</span>, profiler::colors::Blue500); <span class="comment">// Blue block</span></span><br><span class="line">    <span class="type">int</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; ++i)</span><br><span class="line">        mul *= i;</span><br><span class="line">    <span class="comment">//EASY_END_BLOCK; // This is not needed because all blocks are ended on destructor when closing braces met</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EASY_FUNCTION</span>(<span class="number">0xfff080aa</span>); <span class="comment">// Function block with custom ARGB color</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EASY_FUNCTION</span>(); <span class="comment">// Function block with default color == Amber100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/yse/easy_profiler">easy_profiler</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191010: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>profiler</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to use nlohmann json for serializing data with modern cpp</title>
    <url>//blog/nlohmann-json-for-modern-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nlohmann/json.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for convenience</span></span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br></pre></td></tr></table></figure>

<p>compile with </p>
<blockquote>
<p>-std&#x3D;c++11</p>
</blockquote>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(nlohmann_json <span class="number">3.2</span>.<span class="number">0</span> REQUIRED)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">add_library</span>(foo ...)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">target_link_libraries</span>(foo PRIVATE nlohmann_json::nlohmann_json)</span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="json-demo"><a href="#json-demo" class="headerlink" title="json demo"></a>json demo</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pi&quot;</span><span class="punctuation">:</span> <span class="number">3.141</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;happy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Niels&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nothing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;everything&quot;</span><span class="punctuation">:</span> <span class="number">42</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">42.99</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>with code </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create an empty structure (null)</span></span><br><span class="line">json j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add a number that is stored as double (note the implicit conversion of j to an object)</span></span><br><span class="line">j[<span class="string">&quot;pi&quot;</span>] = <span class="number">3.141</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add a Boolean that is stored as bool</span></span><br><span class="line">j[<span class="string">&quot;happy&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add a string that is stored as std::string</span></span><br><span class="line">j[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Niels&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add another null object by passing nullptr</span></span><br><span class="line">j[<span class="string">&quot;nothing&quot;</span>] = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add an object inside the object</span></span><br><span class="line">j[<span class="string">&quot;answer&quot;</span>][<span class="string">&quot;everything&quot;</span>] = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add an array that is stored as std::vector (using an initializer list)</span></span><br><span class="line">j[<span class="string">&quot;list&quot;</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add another object (using an initializer list of pairs)</span></span><br><span class="line">j[<span class="string">&quot;object&quot;</span>] = &#123; &#123;<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;USD&quot;</span>&#125;, &#123;<span class="string">&quot;value&quot;</span>, <span class="number">42.99</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instead, you could also write (which looks very similar to the JSON above)</span></span><br><span class="line">json j2 = &#123;</span><br><span class="line">  &#123;<span class="string">&quot;pi&quot;</span>, <span class="number">3.141</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;happy&quot;</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Niels&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;nothing&quot;</span>, <span class="literal">nullptr</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;answer&quot;</span>, &#123;</span><br><span class="line">    &#123;<span class="string">&quot;everything&quot;</span>, <span class="number">42</span>&#125;</span><br><span class="line">  &#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;list&quot;</span>, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>&#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;object&quot;</span>, &#123;</span><br><span class="line">    &#123;<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;USD&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;value&quot;</span>, <span class="number">42.99</span>&#125;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="serialization"><a href="#serialization" class="headerlink" title="serialization"></a>serialization</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create object from string literal</span></span><br><span class="line">json j = <span class="string">&quot;&#123; \&quot;happy\&quot;: true, \&quot;pi\&quot;: 3.141 &#125;&quot;</span>_json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or even nicer with a raw string literal</span></span><br><span class="line"><span class="keyword">auto</span> j2 = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    &quot;happy&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;pi&quot;: 3.141</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">)&quot;</span>_json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse explicitly</span></span><br><span class="line"><span class="keyword">auto</span> j3 = json::<span class="built_in">parse</span>(<span class="string">&quot;&#123; \&quot;happy\&quot;: true, \&quot;pi\&quot;: 3.141 &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// explicit conversion to string</span></span><br><span class="line">std::string s = j.<span class="built_in">dump</span>();    <span class="comment">// &#123;\&quot;happy\&quot;:true,\&quot;pi\&quot;:3.141&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// serialization with pretty printing</span></span><br><span class="line"><span class="comment">// pass in the amount of spaces to indent</span></span><br><span class="line">std::cout &lt;&lt; j.<span class="built_in">dump</span>(<span class="number">4</span>) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;happy&quot;: true,</span></span><br><span class="line"><span class="comment">//     &quot;pi&quot;: 3.141</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="read-from-file-save-to-file"><a href="#read-from-file-save-to-file" class="headerlink" title="read from file&#x2F;save to file"></a>read from file&#x2F;save to file</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// read a JSON file</span></span><br><span class="line"><span class="function">std::ifstream <span class="title">i</span><span class="params">(<span class="string">&quot;file.json&quot;</span>)</span></span>;</span><br><span class="line">json j;</span><br><span class="line">i &gt;&gt; j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// write prettified JSON to another file</span></span><br><span class="line"><span class="function">std::ofstream <span class="title">o</span><span class="params">(<span class="string">&quot;pretty.json&quot;</span>)</span></span>;</span><br><span class="line">o &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">4</span>) &lt;&lt; j &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="Arbitrary-types-conversions"><a href="#Arbitrary-types-conversions" class="headerlink" title="Arbitrary types conversions"></a>Arbitrary types conversions</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ns &#123;</span><br><span class="line">    <span class="comment">// a simple struct to model a person</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">person</span> &#123;</span><br><span class="line">        std::string name;</span><br><span class="line">        std::string address;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="normal-method"><a href="#normal-method" class="headerlink" title="normal method"></a>normal method</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ns::person p = &#123;<span class="string">&quot;Ned Flanders&quot;</span>, <span class="string">&quot;744 Evergreen Terrace&quot;</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert to JSON: copy each value into the JSON object</span></span><br><span class="line">json j;</span><br><span class="line">j[<span class="string">&quot;name&quot;</span>] = p.name;</span><br><span class="line">j[<span class="string">&quot;address&quot;</span>] = p.address;</span><br><span class="line">j[<span class="string">&quot;age&quot;</span>] = p.age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// convert from JSON: copy each value from the JSON object</span></span><br><span class="line">ns::person p &#123;</span><br><span class="line">    j[<span class="string">&quot;name&quot;</span>].<span class="built_in">get</span>&lt;std::string&gt;(),</span><br><span class="line">    j[<span class="string">&quot;address&quot;</span>].<span class="built_in">get</span>&lt;std::string&gt;(),</span><br><span class="line">    j[<span class="string">&quot;age&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="better-method"><a href="#better-method" class="headerlink" title="better method"></a>better method</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ns &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">to_json</span><span class="params">(json&amp; j, <span class="type">const</span> person&amp; p)</span> </span>&#123;</span><br><span class="line">        j = json&#123;&#123;<span class="string">&quot;name&quot;</span>, p.name&#125;, &#123;<span class="string">&quot;address&quot;</span>, p.address&#125;, &#123;<span class="string">&quot;age&quot;</span>, p.age&#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">from_json</span><span class="params">(<span class="type">const</span> json&amp; j, person&amp; p)</span> </span>&#123;</span><br><span class="line">        j.<span class="built_in">at</span>(<span class="string">&quot;name&quot;</span>).<span class="built_in">get_to</span>(p.name);</span><br><span class="line">        j.<span class="built_in">at</span>(<span class="string">&quot;address&quot;</span>).<span class="built_in">get_to</span>(p.address);</span><br><span class="line">        j.<span class="built_in">at</span>(<span class="string">&quot;age&quot;</span>).<span class="built_in">get_to</span>(p.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace ns</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// create a person</span></span><br><span class="line">ns::person p &#123;<span class="string">&quot;Ned Flanders&quot;</span>, <span class="string">&quot;744 Evergreen Terrace&quot;</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion: person -&gt; json</span></span><br><span class="line">json j = p;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; j &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// &#123;&quot;address&quot;:&quot;744 Evergreen Terrace&quot;,&quot;age&quot;:60,&quot;name&quot;:&quot;Ned Flanders&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion: json -&gt; person</span></span><br><span class="line"><span class="keyword">auto</span> p2 = j.<span class="built_in">get</span>&lt;ns::person&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// that&#x27;s it</span></span><br><span class="line"><span class="built_in">assert</span>(p == p2);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>That’s all! When calling the json constructor with your type, your custom <code>to_json</code> method will be automatically called. Likewise, when calling <code>get&lt;your_type&gt;()</code> or <code>get_to(your_type&amp;)</code>, the <code>from_json</code> method will be called.</p>
</blockquote>
<h3 id="How-do-I-convert-third-party-types"><a href="#How-do-I-convert-third-party-types" class="headerlink" title="How do I convert third-party types?"></a>How do I convert third-party types?</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> nlohmann &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">adl_serializer</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">to_json</span><span class="params">(json&amp; j, <span class="type">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// calls the &quot;to_json&quot; method in T&#x27;s namespace</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">from_json</span><span class="params">(<span class="type">const</span> json&amp; j, T&amp; value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// same thing, but with the &quot;from_json&quot; method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="How-can-I-use-get-for-non-default-constructible-non-copyable-types"><a href="#How-can-I-use-get-for-non-default-constructible-non-copyable-types" class="headerlink" title="How can I use get() for non-default constructible&#x2F;non-copyable types?"></a>How can I use get() for non-default constructible&#x2F;non-copyable types?</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">move_only_type</span> &#123;</span><br><span class="line">    <span class="built_in">move_only_type</span>() = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">move_only_type</span>(<span class="type">int</span> ii): <span class="built_in">i</span>(ii) &#123;&#125;</span><br><span class="line">    <span class="built_in">move_only_type</span>(<span class="type">const</span> move_only_type&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">move_only_type</span>(move_only_type&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> nlohmann &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">adl_serializer</span>&lt;move_only_type&gt; &#123;</span><br><span class="line">        <span class="comment">// note: the return type is no longer &#x27;void&#x27;, and the method only takes</span></span><br><span class="line">        <span class="comment">// one argument</span></span><br><span class="line">        <span class="function"><span class="type">static</span> move_only_type <span class="title">from_json</span><span class="params">(<span class="type">const</span> json&amp; j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;j.<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here&#x27;s the catch! You must provide a to_json method! Otherwise you</span></span><br><span class="line">        <span class="comment">// will not be able to convert move_only_type to json, since you fully</span></span><br><span class="line">        <span class="comment">// specialized adl_serializer on that type</span></span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">to_json</span><span class="params">(json&amp; j, move_only_type t)</span> </span>&#123;</span><br><span class="line">            j = t.i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>examples </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nlohmann/json.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sensor_data.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rfid_info.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> nlohmann &#123;</span><br><span class="line">	<span class="keyword">template</span> &lt;&gt;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">adl_serializer</span>&lt;SensorData&gt; &#123;</span><br><span class="line">		<span class="comment">// note: the return type is no longer &#x27;void&#x27;, and the method only takes</span></span><br><span class="line">		<span class="comment">// one argument</span></span><br><span class="line">		<span class="function"><span class="type">static</span> SensorData <span class="title">from_json</span><span class="params">(<span class="type">const</span> json&amp; j)</span> </span>&#123;</span><br><span class="line">			SensorData sensor_data;</span><br><span class="line">			sensor_data.sensor_identify = j.<span class="built_in">at</span>(<span class="string">&quot;SensorIdentify&quot;</span>).<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">			<span class="keyword">return</span> sensor_data;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Here&#x27;s the catch! You must provide a to_json method! Otherwise you</span></span><br><span class="line">		<span class="comment">// will not be able to convert move_only_type to json, since you fully</span></span><br><span class="line">		<span class="comment">// specialized adl_serializer on that type</span></span><br><span class="line">		<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">to_json</span><span class="params">(json&amp; j, SensorData t)</span> </span>&#123;</span><br><span class="line">			j = json&#123; &#123;<span class="string">&quot;SensorIdentify&quot;</span>,t.sensor_identify&#125;,&#123;<span class="string">&quot;SensorType&quot;</span>,t.sensor_type &#125;,&#123;<span class="string">&quot;Data&quot;</span>,t.data&#125; &#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">template</span> &lt;&gt;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">adl_serializer</span>&lt;RfidInfo&gt; &#123;</span><br><span class="line">		<span class="comment">// note: the return type is no longer &#x27;void&#x27;, and the method only takes</span></span><br><span class="line">		<span class="comment">// one argument</span></span><br><span class="line">		<span class="function"><span class="type">static</span> RfidInfo <span class="title">from_json</span><span class="params">(<span class="type">const</span> json&amp; j)</span> </span>&#123;</span><br><span class="line">			RfidInfo rfid_info;</span><br><span class="line">			rfid_info.identify = j.<span class="built_in">at</span>(<span class="string">&quot;Identify&quot;</span>).<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">			<span class="keyword">return</span> rfid_info;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Here&#x27;s the catch! You must provide a to_json method! Otherwise you</span></span><br><span class="line">		<span class="comment">// will not be able to convert move_only_type to json, since you fully</span></span><br><span class="line">		<span class="comment">// specialized adl_serializer on that type</span></span><br><span class="line">		<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">to_json</span><span class="params">(json&amp; j, RfidInfo t)</span> </span>&#123;</span><br><span class="line">			j = json&#123; &#123; <span class="string">&quot;Identify&quot;</span>,t.identify &#125;,&#123; <span class="string">&quot;Position&quot;</span>,<span class="number">0</span> &#125; &#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Binary-formats-BSON…"><a href="#Binary-formats-BSON…" class="headerlink" title="Binary formats(BSON…)"></a>Binary formats(BSON…)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a JSON value</span></span><br><span class="line">json j = <span class="string">R&quot;(&#123;&quot;compact&quot;: true, &quot;schema&quot;: 0&#125;)&quot;</span>_json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serialize to BSON</span></span><br><span class="line">std::vector&lt;std::<span class="type">uint8_t</span>&gt; v_bson = json::<span class="built_in">to_bson</span>(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1B, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6F, ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// roundtrip</span></span><br><span class="line">json j_from_bson = json::<span class="built_in">from_bson</span>(v_bson);</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/nlohmann/json">nlohmann json</a></li>
<li><a href="https://nlohmann.github.io/json/">json doc</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191012: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>nlohmann</tag>
      </tags>
  </entry>
  <entry>
    <title>5 methods for c++ shared_ptr point to an array</title>
    <url>//blog/shared-ptr-to-array/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p>Prior to <code>C++17</code>, <code>shared_ptr</code> could not be used to manage dynamically allocated arrays. By default, <code>shared_ptr</code> will call <code>delete</code> on the managed object when no more references remain to it. However, when you allocate using <code>new[]</code> you need to call <code>delete[]</code>, and not <code>delete</code>, to free the resource.</p>
<p>In order to correctly use <code>shared_ptr</code> with an array, you must supply a custom deleter.</p>
<h4 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OK, pointer to int 999</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">999</span>))</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">array_deleter</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">( T <span class="type">const</span> * p)</span></span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">delete</span>[] p; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pointer to int array, </span></span><br><span class="line"><span class="comment">// (1) provide array deleter</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>], array_deleter&lt;<span class="type">int</span>&gt;())</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) or lambda expression </span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>], [](<span class="type">int</span> *p) &#123; <span class="keyword">delete</span>[] p; &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) or use default_delete</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>], std::default_delete&lt;<span class="type">int</span>[]&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) or we can use unique_ptr</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>[]&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>])</span></span>; <span class="comment">// this will correctly call delete[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (5) or we use vector&lt;int&gt;, no need to provide deleter </span></span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;<span class="type">int</span>&gt; <span class="type">int_array_t</span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int_array_t</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int_array_t</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">memcpy</span>(sp.<span class="built_in">get</span>()-&gt;<span class="built_in">data</span>(), arr, size);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>std::unique_ptr&lt;int[]&gt;</code> has built-in support for arrays to properly <code>delete[] </code> .</p>
</blockquote>
<h4 id="image-buffer"><a href="#image-buffer" class="headerlink" title="image buffer"></a>image buffer</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;uchar&gt; <span class="title">pImage</span><span class="params">(<span class="keyword">new</span> uchar[length], std::default_delete&lt;uchar[]&gt;())</span></span>;</span><br><span class="line"><span class="built_in">memcpy</span>(pImage.<span class="built_in">get</span>(), (<span class="type">void</span>*)(data.<span class="built_in">sync_image</span>().<span class="built_in">data</span>().<span class="built_in">c_str</span>()), length);</span><br><span class="line">cv::Mat image = cv::<span class="built_in">Mat</span>(height, width, CV_8UC3, pImage.<span class="built_in">get</span>());</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/13061979/shared-ptr-to-an-array-should-it-be-used">shared-ptr-to-an-array-should-it-be-used</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191012: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>shared_ptr</tag>
        <tag>unique_ptr</tag>
      </tags>
  </entry>
  <entry>
    <title>how to implement a template class with c++ and export in dll/so</title>
    <url>//blog/template-class-implemention-for-cpp/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h3><blockquote>
<p>模板类必须在header中实现，而不能在cpp中实现，否则作为dll调用进行链接的时候回出错。</p>
</blockquote>
<h3 id="common-solutions-Recommend"><a href="#common-solutions-Recommend" class="headerlink" title="common solutions(Recommend)"></a>common solutions(Recommend)</h3><blockquote>
<p>implement template functions in header.</p>
</blockquote>
<p>ThreadPool.h </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">SHARED_EXPORT</span> ThreadPool &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> ThreadPool* <span class="title">Instance</span><span class="params">(<span class="type">size_t</span> max_thread_pool_size)</span></span>;</span><br><span class="line">	~<span class="built_in">ThreadPool</span>(); </span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add new work item to the pool.</span></span><br><span class="line">	<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt; </span></span><br><span class="line"><span class="function">	<span class="keyword">inline</span> <span class="type">void</span> <span class="title">Enqueue</span><span class="params">(F f)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		io_service_.<span class="built_in">post</span>(f);<span class="comment">//sync, return immediately</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Free</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> std::shared_ptr&lt;ThreadPool&gt; m_pInstance;</span><br><span class="line">	<span class="type">bool</span> bfree;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">ThreadPool</span>(<span class="type">size_t</span> size);</span><br><span class="line">	<span class="built_in">DISABLE_COPY_AND_ASSIGN</span>(ThreadPool);</span><br><span class="line"></span><br><span class="line">	boost::thread_group workers_;</span><br><span class="line">	boost::asio::io_service io_service_;</span><br><span class="line">	boost::asio::io_service::work work_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Seperate-from-headers"><a href="#Seperate-from-headers" class="headerlink" title="Seperate from headers"></a>Seperate from headers</h2><h3 id="solutions-1"><a href="#solutions-1" class="headerlink" title="solutions 1"></a>solutions 1</h3><blockquote>
<p>A common solution to this is to write the template declaration in a header file, then implement the class in an implementation file (for example .tpp), and include this implementation file at the end of the header.</p>
</blockquote>
<h4 id="Foo-h"><a href="#Foo-h" class="headerlink" title="Foo.h"></a>Foo.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">(T param)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Foo.cpp&quot;</span> <span class="comment">// here</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Foo-cpp"><a href="#Foo-cpp" class="headerlink" title="Foo.cpp"></a>Foo.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Foo&lt;T&gt;::<span class="built_in">doSomething</span>(T param)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="solutions-2"><a href="#solutions-2" class="headerlink" title="solutions 2"></a>solutions 2</h3><p>Another solution is to keep the implementation separated, and explicitly instantiate all the template instances you’ll need:</p>
<h4 id="Foo-h-1"><a href="#Foo-h-1" class="headerlink" title="Foo.h"></a>Foo.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// no implementation</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">Foo</span> &#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Foo-cpp-1"><a href="#Foo-cpp-1" class="headerlink" title="Foo.cpp"></a>Foo.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Foo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implementation of Foo&#x27;s methods</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// explicit instantiations</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">Foo</span>&lt;<span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">Foo</span>&lt;<span class="type">float</span>&gt;;</span><br><span class="line"><span class="comment">// You will only be able to use Foo with int or float</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template void TestClass::templateFunction&lt;int, int&gt;(int, int);</span></span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file">why-can-templates-only-be-implemented-in-the-header-file</a></li>
<li><a href="http://blog.ethanlim.net/2014/07/separate-c-template-headers-h-and.html">separate-c-template-headers-h-and</a></li>
<li><a href="https://raymii.org/s/snippets/Cpp_template_definitions_in_a_cpp_file_instead_of_header.html">Cpp_template_definitions_in_a_cpp_file_instead_of_header</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191012: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>how to implement deep learning activation kernels with cuda in c++</title>
    <url>//blog/cuda-activation-kernels/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li><a href="https://kezunlin.me/post/7d7131f4/">Part 1:cpp cuda programming tutorial</a></li>
<li><strong><a href="https://kezunlin.me/post/ee123cac/">Part 2: cuda activation kernels</a></strong></li>
<li><a href="https://kezunlin.me/post/ad5c5bd9/">Part 3: cublasSgemm for large matrix multiplication on gpu</a></li>
</ul>
<h3 id="cuda-utils"><a href="#cuda-utils" class="headerlink" title="cuda utils"></a>cuda utils</h3><h4 id="cuda-h"><a href="#cuda-h" class="headerlink" title="cuda.h"></a>cuda.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CUDA_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CUDA_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;curand.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cublas_v2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK 512</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check_error</span><span class="params">(cudaError_t status)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">dim3 <span class="title">cuda_gridsize</span><span class="params">(<span class="type">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span>* <span class="title">cuda_make_array</span><span class="params">(<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_free</span><span class="params">(<span class="type">float</span>* x_gpu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_push_array</span><span class="params">(<span class="type">float</span> *x_gpu,<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_pull_array</span><span class="params">(<span class="type">float</span> *x_gpu,<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h4 id="cuda-cpp"><a href="#cuda-cpp" class="headerlink" title="cuda.cpp"></a>cuda.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;blas.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">perror</span>(s);</span><br><span class="line">    <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check_error</span><span class="params">(cudaError_t status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cudaDeviceSynchronize();</span></span><br><span class="line">    cudaError_t status2 = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">    <span class="keyword">if</span> (status != cudaSuccess)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *s = <span class="built_in">cudaGetErrorString</span>(status);</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CUDA Error: %s\n&quot;</span>, s);</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(buffer, <span class="number">256</span>, <span class="string">&quot;CUDA Error: %s&quot;</span>, s);</span><br><span class="line">        <span class="built_in">error</span>(buffer);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (status2 != cudaSuccess)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *s = <span class="built_in">cudaGetErrorString</span>(status);</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CUDA Error Prev: %s\n&quot;</span>, s);</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(buffer, <span class="number">256</span>, <span class="string">&quot;CUDA Error Prev: %s&quot;</span>, s);</span><br><span class="line">        <span class="built_in">error</span>(buffer);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dim3 <span class="title">cuda_gridsize</span><span class="params">(<span class="type">size_t</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> k = (n<span class="number">-1</span>) / BLOCK + <span class="number">1</span>;</span><br><span class="line">    <span class="type">size_t</span> x = k;</span><br><span class="line">    <span class="type">size_t</span> y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">65535</span>)&#123;</span><br><span class="line">        x = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(k));</span><br><span class="line">        y = (n<span class="number">-1</span>)/(x*BLOCK) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dim3 d = &#123;x, y, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//printf(&quot;%ld %ld %ld %ld\n&quot;, n, x, y, x*y*BLOCK);</span></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span>* <span class="title">cuda_make_array</span><span class="params">(<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> *x_gpu;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">sizeof</span>(<span class="type">float</span>)*n;</span><br><span class="line">    cudaError_t status = <span class="built_in">cudaMalloc</span>((<span class="type">void</span> **)&amp;x_gpu, size);</span><br><span class="line">    <span class="built_in">check_error</span>(status);</span><br><span class="line">    <span class="keyword">if</span>(x)&#123;</span><br><span class="line">        status = <span class="built_in">cudaMemcpy</span>(x_gpu, x, size, cudaMemcpyHostToDevice);</span><br><span class="line">        <span class="built_in">check_error</span>(status);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fill_gpu</span>(n, <span class="number">0</span>, x_gpu, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!x_gpu) <span class="built_in">error</span>(<span class="string">&quot;Cuda malloc failed\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> x_gpu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_free</span><span class="params">(<span class="type">float</span>* x_gpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cudaError_t status = <span class="built_in">cudaFree</span>(x_gpu);</span><br><span class="line">    <span class="built_in">check_error</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_push_array</span><span class="params">(<span class="type">float</span> *x_gpu,<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">sizeof</span>(<span class="type">float</span>)*n;</span><br><span class="line">    cudaError_t status = <span class="built_in">cudaMemcpy</span>(x_gpu,x,size,cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">check_error</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cuda_pull_array</span><span class="params">(<span class="type">float</span> *x_gpu,<span class="type">float</span>* x,<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">sizeof</span>(<span class="type">float</span>)*n;</span><br><span class="line">    cudaError_t status = <span class="built_in">cudaMemcpy</span>(x,x_gpu,size,cudaMemcpyDeviceToHost);</span><br><span class="line">    <span class="built_in">check_error</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>




<h3 id="activation-kernels"><a href="#activation-kernels" class="headerlink" title="activation kernels"></a>activation kernels</h3><h4 id="activations-h"><a href="#activations-h" class="headerlink" title="activations.h"></a>activations.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ACTIVATIONS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ACTIVATIONS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, \</span><br><span class="line">    LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN</span><br><span class="line">&#125; ACTIVATION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">activate_array_gpu</span><span class="params">(<span class="type">float</span>* x,<span class="type">int</span> n,ACTIVATION a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h4 id="activation-kernels-cu"><a href="#activation-kernels-cu" class="headerlink" title="activation_kernels.cu"></a>activation_kernels.cu</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;activations.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;blas.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">lhtan_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">.001f</span>*x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">.001f</span>*(x<span class="number">-1.f</span>) + <span class="number">1.f</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">hardtan_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">linear_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">logistic_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">1.f</span>/(<span class="number">1.f</span> + <span class="built_in">expf</span>(-x));&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">loggy_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">2.f</span>/(<span class="number">1.f</span> + <span class="built_in">expf</span>(-x)) - <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">relu_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> x*(x&gt;<span class="number">0</span>);&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">elu_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> (x &gt;= <span class="number">0</span>)*x + (x &lt; <span class="number">0</span>)*(<span class="built_in">expf</span>(x)<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">relie_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> (x&gt;<span class="number">0</span>) ? x : <span class="number">.01f</span>*x;&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">ramp_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> x*(x&gt;<span class="number">0</span>)<span class="number">+.1f</span>*x;&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">leaky_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> (x&gt;<span class="number">0</span>) ? x : <span class="number">.1f</span>*x;&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">tanh_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;<span class="keyword">return</span> (<span class="number">2.f</span>/(<span class="number">1</span> + <span class="built_in">expf</span>(<span class="number">-2</span>*x)) - <span class="number">1</span>);&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">plse_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">-4</span>) <span class="keyword">return</span> <span class="number">.01f</span> * (x + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">4</span>)  <span class="keyword">return</span> <span class="number">.01f</span> * (x - <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">.125f</span>*x + <span class="number">.5f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">stair_activate_kernel</span><span class="params">(<span class="type">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">floorf</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">floorf</span>(x/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> (x - n) + <span class="built_in">floorf</span>(x/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">activate_kernel</span><span class="params">(<span class="type">float</span> x, ACTIVATION a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">        <span class="keyword">case</span> LINEAR:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">linear_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> LOGISTIC:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">logistic_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> LOGGY:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">loggy_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> RELU:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">relu_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> ELU:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">elu_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> RELIE:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">relie_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> RAMP:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">ramp_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> LEAKY:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">leaky_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> TANH:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">tanh_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> PLSE:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">plse_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> STAIR:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">stair_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> HARDTAN:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hardtan_activate_kernel</span>(x);</span><br><span class="line">        <span class="keyword">case</span> LHTAN:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lhtan_activate_kernel</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">activate_array_kernel</span><span class="params">(<span class="type">float</span> *x, <span class="type">int</span> n, ACTIVATION a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = (blockIdx.x + blockIdx.y*gridDim.x) * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; n) x[i] = <span class="built_in">activate_kernel</span>(x[i], a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">activate_array_gpu</span><span class="params">(<span class="type">float</span> *x, <span class="type">int</span> n, ACTIVATION a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    activate_array_kernel&lt;&lt;&lt;<span class="built_in">cuda_gridsize</span>(n), BLOCK&gt;&gt;&gt;(x, n, a);</span><br><span class="line">    <span class="built_in">check_error</span>(<span class="built_in">cudaPeekAtLastError</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191014: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>load model from file and stream for caffe and pytorch</title>
    <url>//blog/load-model-from-file-and-stream-for-caffe-and-pytorch/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="caffe"><a href="#caffe" class="headerlink" title="caffe"></a>caffe</h3><h4 id="load-from-file"><a href="#load-from-file" class="headerlink" title="load from file"></a>load from file</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">caffe</span>::Phase phase = caffe::Phase::TEST;</span><br><span class="line"></span><br><span class="line">std::string proto_filepath = <span class="string">&quot;yolov3.prototxt&quot;</span>;</span><br><span class="line">std::string weight_filepath = <span class="string">&quot;yolov3.caffemodel&quot;</span>;</span><br><span class="line">caffe::Net&lt;<span class="type">float</span>&gt; net = caffe::<span class="built_in">Net</span>&lt;<span class="type">float</span>&gt;(proto_filepath, phase));</span><br><span class="line">net.<span class="built_in">CopyTrainedLayersFrom</span>(weight_filepath);</span><br></pre></td></tr></table></figure>

<h4 id="load-from-stream"><a href="#load-from-stream" class="headerlink" title="load from stream"></a>load from stream</h4><blockquote>
<p>no caffe method to load directly from stream.<br>we can override <code>ReadProtoFromTextFile</code> and <code>ReadProtoFromBinaryFile</code> in <code>src/caffe/util/io.cpp</code>  to implement this fuction.</p>
</blockquote>
<p>Replace </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ReadProtoFromTextFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, Message* proto)</span> </span>&#123;</span><br><span class="line">    Encryption encryption;</span><br><span class="line">  <span class="type">int</span> fd = <span class="built_in">open</span>(filename, O_RDONLY);</span><br><span class="line">  <span class="built_in">CHECK_NE</span>(fd, <span class="number">-1</span>) &lt;&lt; <span class="string">&quot;File not found: &quot;</span> &lt;&lt; filename;</span><br><span class="line">  FileInputStream* input = <span class="keyword">new</span> <span class="built_in">FileInputStream</span>(fd);</span><br><span class="line">  <span class="type">bool</span> success = google::protobuf::TextFormat::<span class="built_in">Parse</span>(input, proto);</span><br><span class="line">  <span class="keyword">delete</span> input;</span><br><span class="line">  <span class="built_in">close</span>(fd);</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ReadProtoFromBinaryFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, Message* proto)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> fd = <span class="built_in">open</span>(filename, O_RDONLY);</span><br><span class="line">  <span class="built_in">CHECK_NE</span>(fd, <span class="number">-1</span>) &lt;&lt; <span class="string">&quot;File not found: &quot;</span> &lt;&lt; filename;</span><br><span class="line">  ZeroCopyInputStream* raw_input = <span class="keyword">new</span> <span class="built_in">FileInputStream</span>(fd);</span><br><span class="line">  CodedInputStream* coded_input = <span class="keyword">new</span> <span class="built_in">CodedInputStream</span>(raw_input);</span><br><span class="line">  coded_input-&gt;<span class="built_in">SetTotalBytesLimit</span>(kProtoReadBytesLimit, <span class="number">536870912</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> success = proto-&gt;<span class="built_in">ParseFromCodedStream</span>(coded_input);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> coded_input;</span><br><span class="line">  <span class="keyword">delete</span> raw_input;</span><br><span class="line">  <span class="built_in">close</span>(fd);</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>load from <code>demo.prototxt</code> and <code>demo.caffemodel</code></p>
</blockquote>
<p>with </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ReadProtoFromTextFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, Message *proto)</span> </span>&#123;</span><br><span class="line">    Encryption encryption;</span><br><span class="line">    string res = encryption.<span class="built_in">decryptTextFile</span>(filename); <span class="comment">// demo.prototxt</span></span><br><span class="line">    <span class="function">istringstream <span class="title">ss</span><span class="params">(res)</span></span>;</span><br><span class="line"></span><br><span class="line">    IstreamInputStream *input = <span class="keyword">new</span> <span class="built_in">IstreamInputStream</span>(&amp;ss);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> success = google::protobuf::TextFormat::<span class="built_in">Parse</span>(input, proto);</span><br><span class="line">    <span class="keyword">delete</span> input;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ReadProtoFromBinaryFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, Message *proto)</span> </span>&#123;</span><br><span class="line">    Encryption encryption;</span><br><span class="line">    string res = encryption.<span class="built_in">decryptModelFile</span>(filename); <span class="comment">// demo.caffemodel</span></span><br><span class="line">    <span class="function">istringstream <span class="title">ss</span><span class="params">(res)</span></span>;</span><br><span class="line">    </span><br><span class="line">    IstreamInputStream *input = <span class="keyword">new</span> <span class="built_in">IstreamInputStream</span>(&amp;ss);</span><br><span class="line">    CodedInputStream *coded_input = <span class="keyword">new</span> <span class="built_in">CodedInputStream</span>(input);</span><br><span class="line">    coded_input-&gt;<span class="built_in">SetTotalBytesLimit</span>(kProtoReadBytesLimit, <span class="number">536870912</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> success = proto-&gt;<span class="built_in">ParseFromCodedStream</span>(coded_input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> coded_input;</span><br><span class="line">    <span class="keyword">delete</span> input;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>load from <code>demo_encrypt.prototxt</code> and <code>demo_encrypt.caffemodel</code></p>
</blockquote>
<h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><ul>
<li><code>torch::jit::script::Module load(const std::string&amp; filename,...);</code></li>
<li><code>torch::jit::script::Module load(const std::istream&amp; in,...);</code></li>
</ul>
<h4 id="load-from-file-1"><a href="#load-from-file-1" class="headerlink" title="load from file"></a>load from file</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string model_path = <span class="string">&quot;model.libpt&quot;</span>;</span><br><span class="line">torch::jit::script::Module net = torch::jit::<span class="built_in">load</span>(model_path);</span><br><span class="line"><span class="built_in">assert</span>(net != <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure>

<h4 id="load-from-stream-1"><a href="#load-from-stream-1" class="headerlink" title="load from stream"></a>load from stream</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string model_content = <span class="string">&quot;&quot;</span>; <span class="comment">// read from file</span></span><br><span class="line"><span class="function">std::istringstream <span class="title">ss</span><span class="params">(model_content)</span></span>;</span><br><span class="line">torch::jit::script::Module net = torch::jit::<span class="built_in">load</span>(ss);</span><br><span class="line"><span class="built_in">assert</span>(net != <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191014: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>cublasSgemm for large matrix multiplication on gpu in C++</title>
    <url>//blog/cublasSgemm-for-large-matrix-multiplication-on-gpu/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li><a href="https://kezunlin.me/post/7d7131f4/">Part 1:cpp cuda programming tutorial</a></li>
<li><a href="https://kezunlin.me/post/ee123cac/">Part 2: cuda activation kernels</a></li>
<li><strong><a href="https://kezunlin.me/post/ad5c5bd9/">Part 3: cublasSgemm for large matrix multiplication on gpu</a></strong></li>
</ul>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>demo.cu</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cublas.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cublas_api.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cublas_v2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CompareFeatureMtoN_gpu</span><span class="params">(<span class="type">float</span> * featureM, <span class="type">float</span> * featureN, <span class="type">float</span> * result, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="type">int</span> count_m, <span class="type">int</span> count_n, <span class="type">int</span> size, <span class="type">int</span> gpu_id)</span> </span>&#123;</span><br><span class="line">	<span class="type">float</span> *dev_featureM = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> *dev_featureN = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> *dev_result = <span class="number">0</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">float</span> alpha = <span class="number">1</span>, beta = <span class="number">0</span>;</span><br><span class="line">	cublasHandle_t handle;</span><br><span class="line">	cudaError_t cudaStatus;</span><br><span class="line"></span><br><span class="line">	cudaStatus = <span class="built_in">cudaSetDevice</span>(gpu_id);</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;cudaSetDevice failed!  Do you have a CUDA-capable GPU installed?\n&quot;</span>);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cublasCreate</span>(&amp;handle);</span><br><span class="line"></span><br><span class="line">	cudaStatus = <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;dev_featureM, count_m * size * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMalloc failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	cudaStatus = <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;dev_featureN, count_n * size * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMalloc failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	cudaStatus = <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;dev_result, count_m * count_n * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMalloc failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cudaStatus = <span class="built_in">cudaMemcpy</span>(dev_featureM, featureM, count_m * size * <span class="built_in">sizeof</span>(<span class="type">float</span>), </span><br><span class="line">		cudaMemcpyHostToDevice);</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMalloc failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	cudaStatus = <span class="built_in">cudaMemcpy</span>(dev_featureN, featureN, count_n * size * <span class="built_in">sizeof</span>(<span class="type">float</span>), </span><br><span class="line">		cudaMemcpyHostToDevice);</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMalloc failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	CUBLAS assumes that the matrix in the device is stored in column major:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	&quot; where α and β are scalars, and A , B and C are matrices stored in column-major </span></span><br><span class="line"><span class="comment">	format with dimensions op ( A ) m × k , op ( B ) k × n and C m × n , respectively. </span></span><br><span class="line"><span class="comment">	 </span></span><br><span class="line"><span class="comment">	 Also, for matrix A</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	 // Multiply the arrays A and B on GPU and save the result in C (coloum-major)</span></span><br><span class="line"><span class="comment"> 	 // C(m,n) = A(m,k) * B(k,n)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	  cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_N, m, n, k, &amp;alpha, A, lda, B, ldb, &amp;beta, C, ldc);</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cublasSgemm</span>(handle, CUBLAS_OP_T, CUBLAS_OP_N, count_n, count_m, size, </span><br><span class="line">		&amp;alpha, dev_featureN, size, dev_featureM, size, &amp;beta, dev_result, count_n);</span><br><span class="line">	cudaStatus = <span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	cudaStatus = <span class="built_in">cudaMemcpy</span>(result, dev_result, count_m * count_n  * <span class="built_in">sizeof</span>(<span class="type">float</span>), </span><br><span class="line">		cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="keyword">if</span> (cudaStatus != cudaSuccess) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s, line %d, cudaMemcpy failed!\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">	<span class="keyword">if</span>(dev_featureM) <span class="built_in">cudaFree</span>(dev_featureM);</span><br><span class="line">	<span class="keyword">if</span>(dev_featureN) <span class="built_in">cudaFree</span>(dev_featureN);</span><br><span class="line">	<span class="keyword">if</span>(dev_result) <span class="built_in">cudaFree</span>(dev_result);</span><br><span class="line">	<span class="built_in">cublasDestroy</span>(handle);</span><br><span class="line">	<span class="keyword">return</span> cudaStatus == cudaSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p>demo.cu</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_feature_compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	[a1]</span></span><br><span class="line"><span class="comment">	[a2]</span></span><br><span class="line"><span class="comment">	[a3]  </span></span><br><span class="line"><span class="comment">		 * [b1]</span></span><br><span class="line"><span class="comment">		   [b2]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	[10,35]</span></span><br><span class="line"><span class="comment">	[10,35]</span></span><br><span class="line"><span class="comment">	[10,35]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	std::vector&lt;<span class="type">float</span>&gt; f1&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">	std::vector&lt;<span class="type">float</span>&gt; f2&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,f22&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;std::vector&lt;<span class="type">float</span>&gt;&gt; A,B;</span><br><span class="line">	<span class="comment">// 3*10</span></span><br><span class="line">	A.<span class="built_in">push_back</span>(f1);</span><br><span class="line">	A.<span class="built_in">push_back</span>(f1);</span><br><span class="line">	A.<span class="built_in">push_back</span>(f1);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 10 * 2</span></span><br><span class="line">	B.<span class="built_in">push_back</span>(f2);</span><br><span class="line">	B.<span class="built_in">push_back</span>(f22);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> m = <span class="number">3</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">2</span>; </span><br><span class="line">	<span class="type">int</span> dim = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> gpu_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span>* feature_m = <span class="keyword">new</span> <span class="type">float</span>[ m*dim ];</span><br><span class="line">	<span class="type">float</span>* feature_n = <span class="keyword">new</span> <span class="type">float</span>[ n*dim ];</span><br><span class="line">	<span class="keyword">auto</span> tmp = feature_m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dim; j++)</span><br><span class="line">			*tmp++ = A[i][j];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tmp = feature_n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dim; j++)</span><br><span class="line">			*tmp++ = B[i][j];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;m = %d, n= %d, size= %d \n&quot;</span>, m, n, dim); <span class="comment">// 3, 2, 10</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//float* result = CompareFeatureMtoN(feature_m, m*dim, feature_n, n*dim, dim, gpu_id);</span></span><br><span class="line"></span><br><span class="line">	<span class="type">float</span>* result = <span class="keyword">new</span> <span class="type">float</span>[m*n];</span><br><span class="line">	<span class="built_in">CompareFeatureMtoN_gpu</span>(feature_m, feature_n, result, m, n, dim, gpu_id);</span><br><span class="line"></span><br><span class="line">	tmp = result;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%f &quot;</span>, *(tmp++));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">delete</span> []feature_m;</span><br><span class="line">	<span class="keyword">delete</span> []feature_n;</span><br><span class="line">	<span class="keyword">delete</span> []result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>m = 3, n= 2, size= 10 
10.000000 35.000000 10.000000 35.000000 10.000000 35.000000
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191015: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>cublas</tag>
        <tag>gemm</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install and use resty command line client for interacting with rest services</title>
    <url>//blog/resty-a-command-line-client-for-interacting-with-rest-services/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>You have curl, right? Okay.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/micha/resty/master/resty &gt; resty</span><br></pre></td></tr></table></figure>

<p>Source the script before using it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. resty</span><br></pre></td></tr></table></figure>

<p>Once resty is installed, set your REST host to which you will be making your requests.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resty http://127.0.0.1:8080/data</span><br><span class="line">http://127.0.0.1:8080/data*</span><br></pre></td></tr></table></figure>

<p>And now you can Make some HTTP requests.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GET /blogs.json</span><br><span class="line">[ &#123;<span class="string">&quot;id&quot;</span> : 1, <span class="string">&quot;title&quot;</span> : <span class="string">&quot;first post&quot;</span>, <span class="string">&quot;body&quot;</span> : <span class="string">&quot;This is the first post&quot;</span>&#125;, ... ]</span><br><span class="line"></span><br><span class="line">$ PUT /blogs/2.json <span class="string">&#x27;&#123;&quot;id&quot; : 2, &quot;title&quot; : &quot;updated post&quot;, &quot;body&quot; : &quot;This is the new.&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span> : 2, <span class="string">&quot;title&quot;</span> : <span class="string">&quot;updated post&quot;</span>, <span class="string">&quot;body&quot;</span> : <span class="string">&quot;This is the new.&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ DELETE /blogs/2</span><br><span class="line"></span><br><span class="line">$ POST /blogs.json <span class="string">&#x27;&#123;&quot;title&quot; : &quot;new post&quot;, &quot;body&quot; : &quot;This is the new new.&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span> : 204, <span class="string">&quot;title&quot;</span> : <span class="string">&quot;new post&quot;</span>, <span class="string">&quot;body&quot;</span> : <span class="string">&quot;This is the new new.&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> resty [-W] [remote] [OPTIONS]    <span class="comment"># load functions into shell</span></span><br><span class="line">  resty [-v]                              <span class="comment"># prints current request URI base</span></span><br><span class="line">  resty &lt;remote&gt; [OPTIONS]                <span class="comment"># sets the base request URI</span></span><br><span class="line"></span><br><span class="line">  HEAD [path] [OPTIONS]                   <span class="comment"># HEAD request</span></span><br><span class="line">  OPTIONS [path] [OPTIONS]                <span class="comment"># OPTIONS request</span></span><br><span class="line">  GET [path] [OPTIONS]                    <span class="comment"># GET request</span></span><br><span class="line">  DELETE [path] [OPTIONS]                 <span class="comment"># DELETE request</span></span><br><span class="line">  PUT [path] [data] [OPTIONS]             <span class="comment"># PUT request</span></span><br><span class="line">  PATCH [path] [data] [OPTIONS]           <span class="comment"># PATCH request</span></span><br><span class="line">  POST [path] [data] [OPTIONS]            <span class="comment"># POST request</span></span><br><span class="line">  TRACE [path] [OPTIONS]                  <span class="comment"># TRACE request</span></span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">  -Q            Don<span class="string">&#x27;t URL encode the path.</span></span><br><span class="line"><span class="string">  -q &lt;query&gt;    Send query string with the path. A &#x27;</span>?<span class="string">&#x27; is prepended to</span></span><br><span class="line"><span class="string">                &lt;query&gt; and concatenated onto the &lt;path&gt;.</span></span><br><span class="line"><span class="string">  -W            Don&#x27;</span>t write to <span class="built_in">history</span> file (only when sourcing script).</span><br><span class="line">  -V            Edit the input data interactively <span class="keyword">in</span> <span class="string">&#x27;vi&#x27;</span>. (PUT, PATCH,</span><br><span class="line">                and POST requests only, with data piped to stdin.)</span><br><span class="line">  -Z            Raw output. This disables any processing of HTML <span class="keyword">in</span> the</span><br><span class="line">                response.</span><br><span class="line">  -v            Verbose output. When used with the resty <span class="built_in">command</span> itself</span><br><span class="line">                this prints the saved curl options along with the current</span><br><span class="line">                URI base. Otherwise this is passed to curl <span class="keyword">for</span> verbose</span><br><span class="line">                curl output.</span><br><span class="line">  --dry-run     Just output the curl <span class="built_in">command</span>.</span><br><span class="line">  &lt;curl opt&gt;    Any curl options will be passed down to curl.</span><br></pre></td></tr></table></figure>

<h2 id="Other-Tools"><a href="#Other-Tools" class="headerlink" title="Other Tools"></a>Other Tools</h2><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><blockquote>
<p>Postman is a collaboration platform for API development. Postman’s features simplify each step of building an API and streamline collaboration so you can create better APIs—faster</p>
</blockquote>
<p>download <code>Postman-linux-x64-7.10.0.tar.gz</code> from <a href="https://www.getpostman.com/downloads/">here</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf Postman-linux-x64-7.10.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> Postman</span><br><span class="line">./Postman</span><br></pre></td></tr></table></figure>
<p>now we can create free account and play with postman.</p>
<h3 id="chrome-developer-tools"><a href="#chrome-developer-tools" class="headerlink" title="chrome developer tools"></a>chrome developer tools</h3><p>F12—&gt;Network. </p>
<h3 id="httpbin"><a href="#httpbin" class="headerlink" title="httpbin"></a>httpbin</h3><p>A simple HTTP Request &amp; Response Service. </p>
<p>see <a href="https://httpbin.org/">httpbin</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/micha/resty">resty</a></li>
<li><a href="https://learning.getpostman.com/docs/postman/api-documentation/intro-to-api-documentation/">postman doc</a></li>
<li><a href="http://infoheap.com/chrome-add-custom-http-request-headers/">chrome developer tools</a></li>
<li><a href="https://httpbin.org/">httpbin</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>20191106: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>resty</tag>
        <tag>postman</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp i++ vs ++i for user defined class</title>
    <url>//blog/cpp-i-vs-i/</url>
    <content><![CDATA[<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Integer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Integer</span>(<span class="type">int</span> value): <span class="built_in">v</span>(value)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;default constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Integer</span>(<span class="type">const</span> Integer &amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">        v = other.v;</span><br><span class="line">    &#125;</span><br><span class="line">    Integer &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Integer &amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy assignment&quot;</span> &lt;&lt; endl;</span><br><span class="line">        v = other.v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++i  first +1,then return new value</span></span><br><span class="line">    Integer &amp;<span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Integer::operator++()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        v++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i++  first save old value,then +1,last return old value</span></span><br><span class="line">    Integer <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Integer::operator++(int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        Integer old = *<span class="keyword">this</span>;</span><br><span class="line">        v++;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;value &quot;</span> &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_case</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    Integer obj2 = obj;</span><br><span class="line">    <span class="function">Integer <span class="title">obj3</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    obj3 = obj;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;++i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ++obj;</span><br><span class="line">    obj.<span class="built_in">output</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;i++&quot;</span> &lt;&lt; endl;</span><br><span class="line">    obj++;</span><br><span class="line">    obj.<span class="built_in">output</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test_case</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>default constructor
copy constructor
default constructor
copy assignment
--------------
++i
Integer::operator++()
value 11
i++
Integer::operator++(int)
copy constructor
value 12
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/hellogiser/p/iplusplus_plusplusi.html">iplusplus_plusplusi</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;08: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>increment</tag>
        <tag>decrement</tag>
      </tags>
  </entry>
  <entry>
    <title>use article publisher artipub to publish your article to multiple platforms</title>
    <url>//blog/use-article-publisher-artipub-to-publish-your-article-to-multiple-platforms/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>use article publisher <code>artipub</code> to publish your article to multiple platforms</p>
<ul>
<li>csdn</li>
<li>cnblog</li>
<li>zhihu</li>
<li>jianshu</li>
<li>segmentfault</li>
<li>toutiao</li>
<li>…</li>
</ul>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install mongodb</span><br><span class="line"><span class="built_in">sudo</span> npm install -g artipub --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p>start server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">artipub start</span><br></pre></td></tr></table></figure>

<blockquote>
<p>by default, artipub will use <code>localhost:27017/artipub</code> as connection to mongodb.</p>
</blockquote>
<p>check mongodb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin    (empty)</span><br><span class="line">artipub  0.078GB</span><br><span class="line">db       (empty)</span><br><span class="line"><span class="built_in">local</span>    0.078GB</span><br></pre></td></tr></table></figure>
<p>now access <a href="http://localhost:8000/">http://localhost:8000</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/crawlab-team/artipub">https://github.com/crawlab-team/artipub</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;08: created.</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>artipub</tag>
      </tags>
  </entry>
  <entry>
    <title>Why does the order of the loops affect performance when iterating over a 2D array ?</title>
    <url>//blog/Why%20does%20the%20order%20of%20the%20loops%20affect%20performance%20when%20iterating%20over%20a%202D%20array/</url>
    <content><![CDATA[<h2 id="loop-2d-array"><a href="#loop-2d-array" class="headerlink" title="loop 2d array"></a>loop 2d array</h2><p>Why does the order of the loops affect performance when iterating over a 2D array ?</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/9936132/why-does-the-order-of-the-loops-affect-performance-when-iterating-over-a-2d-arra?answertab=votes#tab-top">Why does the order of the loops affect performance when iterating over a 2D array?</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/16699247/what-is-cache-friendly-code">What is “cache-friendly” code?</a></p>
</li>
</ul>
<p>When fetching a certain element of a matrix from memory, elements near it(15 ints) will be fetched as well and stored in a cache line(64 bytes &#x3D; 16 ints). </p>
<p>For simplicity, assume the cache comprises a single cache line which can contain 2 matrix elements and that when a given element is fetched from memory, the next one is too. Say we want to take the sum over all elements in the example 2x2 matrix above (lets call it M):</p>
<p>Exploiting the ordering (e.g. changing column index first in c++):</p>
<pre><code>M[0][0] (memory) + M[0][1] (cached) + M[1][0] (memory) + M[1][1] (cached)
= 1 + 2 + 3 + 4
--&gt; 2 cache hits, 2 memory accesses
</code></pre>
<p>Not exploiting the ordering (e.g. changing row index first in c++):</p>
<pre><code>M[0][0] (memory) + M[1][0] (memory) + M[0][1] (memory) + M[1][1] (memory)
= 1 + 3 + 2 + 4
--&gt; 0 cache hits, 4 memory accesses
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/9936132/why-does-the-order-of-the-loops-affect-performance-when-iterating-over-a-2d-arra">why-does-the-order-of-the-loops-affect-performance-when-iterating-over-a-2d-arra</a></li>
<li><a href="https://stackoverflow.com/questions/16699247/what-is-cache-friendly-code">What is “cache-friendly” code?</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;08: created.</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>stackoverflow</tag>
      </tags>
  </entry>
  <entry>
    <title>python useful tools and code snippets</title>
    <url>//blog/python-useful-code-snippets/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = cv2.imread(<span class="string">&quot;demo.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flipped Horizontally 水平翻转</span></span><br><span class="line">h_flip = cv2.flip(image, <span class="number">1</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;demo-h.jpg&quot;</span>, h_flip)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flipped Vertically 垂直翻转</span></span><br><span class="line">v_flip = cv2.flip(image, <span class="number">0</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;demo-v.jpg&quot;</span>, v_flip)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flipped Horizontally &amp; Vertically 水平垂直翻转</span></span><br><span class="line">hv_flip = cv2.flip(image, -<span class="number">1</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;demo-hv.jpg&quot;</span>, hv_flip)</span><br></pre></td></tr></table></figure>

<h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rotate_anti_90</span>(<span class="params">image</span>):</span><br><span class="line">    image = cv2.transpose(image)</span><br><span class="line">    image = cv2.flip(image, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate_anti_180</span>(<span class="params">image</span>):</span><br><span class="line">    image = cv2.flip(image, <span class="number">0</span>)</span><br><span class="line">    image = cv2.flip(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate_anti_270</span>(<span class="params">image</span>):</span><br><span class="line">    image = cv2.transpose(image)</span><br><span class="line">    image = cv2.flip(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">image, angle, center=<span class="literal">None</span>, scale=<span class="number">1.0</span></span>):</span><br><span class="line">    <span class="comment"># rotate by angle</span></span><br><span class="line">    (h, w) = image.shape[:<span class="number">2</span>] <span class="comment"># hwc</span></span><br><span class="line">    <span class="keyword">if</span> center <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        center = (w / <span class="number">2.</span>, h / <span class="number">2.</span>)</span><br><span class="line"></span><br><span class="line">    M = cv2.getRotationMatrix2D(center, angle, scale)</span><br><span class="line"></span><br><span class="line">    rotated = cv2.warpAffine(image, M, (w, h))</span><br><span class="line">    <span class="keyword">return</span> rotated</span><br></pre></td></tr></table></figure>

<h3 id="compression"><a href="#compression" class="headerlink" title="compression"></a>compression</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(full_image_path, image, [<span class="built_in">int</span>( cv2.IMWRITE_JPEG_QUALITY), <span class="number">100</span>]) <span class="comment"># no compression for jpg</span></span><br><span class="line"><span class="comment"># [int(cv2.IMWRITE_PNG_COMPRESSION), 9]  0-9 for png</span></span><br><span class="line"><span class="comment"># [int( cv2.IMWRITE_JPEG_QUALITY), 100]  0-100 for jpg</span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="get-video-info"><a href="#get-video-info" class="headerlink" title="get video info"></a>get video info</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_video_info</span>(<span class="params">video_path</span>):</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    frame_number = cap.get(cv2.CAP_PROP_FRAME_COUNT)</span><br><span class="line">    h  = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    w  = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    fps = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FPS))</span><br><span class="line"></span><br><span class="line">    cap.release() <span class="comment"># release video capture</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fps = &quot;</span>,fps)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;frame_number = &quot;</span>,frame_number)</span><br><span class="line">    size = (w,h)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;size = &quot;</span>,size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># frame number MAY BE WRONG ! so video time may be also wrong!</span></span><br><span class="line">    duration = <span class="built_in">int</span>(frame_number / fps)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;seconds=&quot;</span>,duration)</span><br><span class="line">    video_time = <span class="built_in">str</span>(datetime.timedelta(seconds = duration))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;video_time=&quot;</span>,video_time)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------using VideoFileClip------------------&quot;</span>)</span><br><span class="line">    clip = VideoFileClip(video_path)</span><br><span class="line">    duration = clip.duration</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;video duration is &quot;</span>+ <span class="built_in">str</span>(duration) + <span class="string">&quot; seconds&quot;</span>)</span><br><span class="line">    video_time = <span class="built_in">str</span>(datetime.timedelta(seconds = <span class="built_in">int</span>(duration)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;video_time=&quot;</span>,video_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clip_video</span>():</span><br><span class="line">    clip = VideoFileClip(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    starting_point = <span class="number">120</span>  <span class="comment"># start at second minute</span></span><br><span class="line">    end_point = <span class="number">420</span>  <span class="comment"># record for 300 seconds (120+300)</span></span><br><span class="line">    subclip = clip.subclip(starting_point, end_point)</span><br><span class="line">    subclip.write_videofile(<span class="string">&quot;/path/to/new/video.mp4&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="numpy-argmax"><a href="#numpy-argmax" class="headerlink" title="numpy argmax"></a>numpy argmax</h3><p>numpy argmax for 2-dim and 3-dim </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 2-dim</span></span><br><span class="line">array = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;array.shape=&quot;</span>,array.shape)</span><br><span class="line">result1 = array.argmax(axis=<span class="number">0</span>) <span class="comment"># hw  axis-0 ===&gt; h  shape=(w,) value range[0,1,2,3,4]</span></span><br><span class="line">result2 = array.argmax(axis=<span class="number">1</span>) <span class="comment"># hw  axis-0 ===&gt; w  shape=(h,) value range[0,1,2]</span></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result1.shape)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="built_in">print</span>(result2.shape)</span><br></pre></td></tr></table></figure>
<p>output</p>
<pre><code>(&#39;array.shape=&#39;, (5, 3))
[4 2 2]
(3,)
[2 2 0 2 0]
(5,)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 3-dim</span></span><br><span class="line">array2 = np.array([</span><br><span class="line">    [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>]</span><br><span class="line">])</span><br><span class="line">image = np.array([</span><br><span class="line">    array,array2</span><br><span class="line">])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image.shape=&quot;</span>,image.shape)</span><br><span class="line"><span class="built_in">print</span>(image)</span><br><span class="line"></span><br><span class="line">out = image.argmax(axis=<span class="number">0</span>) <span class="comment"># chw  axis=0 ===&gt; c  shape=(h,w) value range[0,1]</span></span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"><span class="built_in">print</span>(out.shape)</span><br><span class="line"><span class="built_in">print</span>(out.dtype)</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>(&#39;image.shape=&#39;, (2, 5, 3))
[[[ 1  2  3]
  [ 4  5  6]
  [ 9  8  7]
  [ 1  2  3]
  [10  1  2]]

 [[ 3  2  1]
  [ 6  5  4]
  [ 7  8  9]
  [ 1  2  3]
  [ 1  1 10]]]
[[1 0 0]
 [1 0 0]
 [0 0 1]
 [0 0 0]
 [0 0 1]]
(5, 3)
int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for view segmentation output</span></span><br><span class="line">output = np.load(<span class="string">&#x27;output.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output.shape=&quot;</span>,output.shape) <span class="comment"># 1, 2, 512, 512</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output.dtype=&quot;</span>,output.dtype)</span><br><span class="line"></span><br><span class="line">image = output[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image.shape=&quot;</span>,image.shape) <span class="comment"># 2, 512, 512</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image.dtype=&quot;</span>,image.dtype)</span><br><span class="line"></span><br><span class="line">out = image.argmax(axis=<span class="number">0</span>)     <span class="comment"># chw   axis=0 ===&gt; c </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out.shape=&quot;</span>,out.shape) <span class="comment"># 512, 512</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out.dtype=&quot;</span>,out.dtype) <span class="comment"># int64</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(out.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure>

<p>output</p>
<pre><code>(&#39;output.shape=&#39;, (1, 2, 512, 512))
(&#39;output.dtype=&#39;, dtype(&#39;float32&#39;))
(&#39;image.shape=&#39;, (2, 512, 512))
(&#39;image.dtype=&#39;, dtype(&#39;float32&#39;))
(&#39;out.shape=&#39;, (512, 512))
(&#39;out.dtype=&#39;, dtype(&#39;int64&#39;))
0
1
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="pandas-quantile"><a href="#pandas-quantile" class="headerlink" title="pandas quantile"></a>pandas quantile</h3><h4 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">for array of length n:</span></span><br><span class="line"><span class="string">1. pos = 1 + (n-1)*p</span></span><br><span class="line"><span class="string">2. get integer part and fraction part of pos: i, f </span></span><br><span class="line"><span class="string">3. return a[i-1] + (a[i]-a[i-1])*f</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quantile_p</span>(<span class="params">data, p, method=<span class="number">1</span></span>):</span><br><span class="line">    data.sort()</span><br><span class="line">    <span class="keyword">if</span> method == <span class="number">2</span>:</span><br><span class="line">        pos = <span class="number">1</span> + (<span class="built_in">len</span>(data)-<span class="number">1</span>)*p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos = (<span class="built_in">len</span>(data) + <span class="number">1</span>)*p</span><br><span class="line">    i = <span class="built_in">int</span>(math.modf(pos)[<span class="number">1</span>])</span><br><span class="line">    f = pos - i</span><br><span class="line">    Q = data[i-<span class="number">1</span>] + (data[i]-data[i-<span class="number">1</span>])*f</span><br><span class="line">    Q1 = quantile_p(data, <span class="number">0.25</span>)</span><br><span class="line">    Q2 = quantile_p(data, <span class="number">0.5</span>)</span><br><span class="line">    Q3 = quantile_p(data, <span class="number">0.75</span>)</span><br><span class="line">    IQR = Q3 - Q1</span><br><span class="line">    <span class="keyword">return</span> Q1, Q2, Q3, IQR</span><br></pre></td></tr></table></figure>

<h4 id="quantile"><a href="#quantile" class="headerlink" title="quantile"></a>quantile</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.Series(np.array([<span class="number">6</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">7</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">40</span>, <span class="number">36</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Q1:&#x27;</span>, df.quantile(<span class="number">.25</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Q2:&#x27;</span>, df.quantile(<span class="number">.5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Q3:&#x27;</span>, df.quantile(<span class="number">.75</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>pandas</code> use method 2: <code>pos = 1 + (n-1)*p</code></p>
</blockquote>
<h3 id="image-to-from-base64-string"><a href="#image-to-from-base64-string" class="headerlink" title="image to&#x2F;from base64 string"></a>image to&#x2F;from base64 string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_base64_str_from_file</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bytes_content = f.read() <span class="comment"># bytes</span></span><br><span class="line">        bytes_64 = base64.b64encode(bytes_content)</span><br><span class="line">    <span class="keyword">return</span> bytes_64.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># bytes---&gt;str  (remove `b`)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_base64_str_to_file</span>(<span class="params">str_base64, to_file</span>):</span><br><span class="line">    bytes_64 = str_base64.encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># str---&gt; bytes (add `b`)</span></span><br><span class="line">    bytes_content = base64.decodebytes(bytes_64) <span class="comment"># bytes</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(to_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bytes_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_base64</span>():</span><br><span class="line">    <span class="comment"># image to/from base64</span></span><br><span class="line">    image_path = <span class="string">&quot;images/1.jpg&quot;</span></span><br><span class="line">    str_base64 = get_base64_str_from_file(image_path)</span><br><span class="line">    save_base64_str_to_file(str_base64, <span class="string">&quot;images/2.jpg&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_base64()</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>OK
</code></pre>
<h3 id="normal-string-to-from-base64-string"><a href="#normal-string-to-from-base64-string" class="headerlink" title="normal string to&#x2F;from base64 string"></a>normal string to&#x2F;from base64 string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_base64</span>(<span class="params">normal_str</span>):</span><br><span class="line">    bytes_str = normal_str.encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># str ===&gt; bytes</span></span><br><span class="line">    bytes_64 = base64.b64encode(bytes_str) <span class="comment"># bytes ===&gt; bytes</span></span><br><span class="line">    <span class="keyword">return</span> bytes_64.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># bytes ===&gt; str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_to_str</span>(<span class="params">base64_str</span>):</span><br><span class="line">    bytes_64 = base64_str.encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># str ===&gt; bytes</span></span><br><span class="line">    bytes_content = base64.decodebytes(bytes_64) <span class="comment"># bytes ===&gt; bytes</span></span><br><span class="line">    <span class="keyword">return</span> bytes_content.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># bytes ===&gt; str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_base64</span>():</span><br><span class="line">    normal_str = <span class="string">&quot;Hello World !&quot;</span></span><br><span class="line">    str_base64 = str_to_base64(normal_str)</span><br><span class="line">    normal_str2 = base64_to_str(str_base64)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;normal_str = &quot;</span>,normal_str)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str_base64 = &quot;</span>,str_base64)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;normal_str2 = &quot;</span>,normal_str2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_base64()</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>normal_str =  Hello World !
str_base64 =  SGVsbG8gV29ybGQgIQ==
normal_str2 =  Hello World !
</code></pre>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="json-loads-and-dumps"><a href="#json-loads-and-dumps" class="headerlink" title="json loads and dumps"></a>json loads and dumps</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str_text=<span class="string">&#x27;&#123;&quot;status&quot;:0,&quot;msg&quot;:&quot;成功&quot;&#125;&#x27;</span></span><br><span class="line">dict_json = json.loads(str_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict_json)) <span class="comment"># dict </span></span><br><span class="line"><span class="built_in">print</span>(dict_json)</span><br><span class="line"></span><br><span class="line">str_pretty_result = json.dumps(</span><br><span class="line">    dict_json, indent=<span class="number">4</span>, </span><br><span class="line">    sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str_pretty_result)) <span class="comment"># str</span></span><br><span class="line"><span class="built_in">print</span>(str_pretty_result)</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>&lt;class &#39;dict&#39;&gt;
&#123;&#39;status&#39;: 0, &#39;msg&#39;: &#39;成功&#39;&#125;
&lt;class &#39;str&#39;&gt;
&#123;
    &quot;msg&quot;: &quot;成功&quot;,
    &quot;status&quot;: 0
&#125;
</code></pre>
<blockquote>
<p>str to dict<br>dict to str</p>
</blockquote>
<h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo_string_datetime</span>():</span><br><span class="line">    <span class="comment"># date_time = now.strftime(&quot;%m/%d/%Y, %H:%M:%S&quot;)</span></span><br><span class="line">    </span><br><span class="line">    datetime_str = <span class="string">&#x27;09/19/18 13:55:26&#x27;</span></span><br><span class="line">    datetime_object = datetime.datetime.strptime(datetime_str, <span class="string">&#x27;%m/%d/%y %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(datetime_object))</span><br><span class="line">    <span class="built_in">print</span>(datetime_object)  <span class="comment"># printed in default format</span></span><br><span class="line">    </span><br><span class="line">    datetime_str = <span class="string">&#x27;19910403&#x27;</span></span><br><span class="line">    datetime_object = datetime.datetime.strptime(datetime_str, <span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(datetime_object))</span><br><span class="line">    <span class="built_in">print</span>(datetime_object)  <span class="comment"># printed in default format</span></span><br><span class="line">    </span><br><span class="line">    datetime_result_str = datetime_object.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(datetime_result_str)</span><br></pre></td></tr></table></figure>

<h3 id="simplekml"><a href="#simplekml" class="headerlink" title="simplekml"></a>simplekml</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> simplekml</span><br><span class="line">kml = simplekml.Kml()</span><br><span class="line">kml.newpoint(name=<span class="string">&quot;point a&quot;</span>, coords=[(<span class="number">18.432314</span>,-<span class="number">33.988862</span>)])  <span class="comment"># lon, lat, optional height</span></span><br><span class="line">kml.newpoint(name=<span class="string">&quot;point b&quot;</span>, coords=[(<span class="number">28.432314</span>,-<span class="number">43.988862</span>)])  <span class="comment"># lon, lat, optional height</span></span><br><span class="line">kml.save(<span class="string">&quot;1.kml&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>1.kml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.opengis.net/kml/2.2&quot;</span> <span class="attr">xmlns:gx</span>=<span class="string">&quot;http://www.google.com/kml/ext/2.2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Document</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Placemark</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>point a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Point</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>18.432314,-33.988862,0.0<span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Point</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Placemark</span> <span class="attr">id</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>point b<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Point</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>28.432314,-43.988862,0.0<span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Point</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kml</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="python-requests"><a href="#python-requests" class="headerlink" title="python requests"></a>python requests</h3><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><pre><code>pip install requests
conda install requests
</code></pre>
<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><pre><code>&gt;&gt;&gt; requests.get(&#39;https://httpbin.org/get&#39;)
&gt;&gt;&gt; requests.post(&#39;https://httpbin.org/post&#39;, data=&#123;&#39;key&#39;:&#39;value&#39;&#125;)
&gt;&gt;&gt; requests.put(&#39;https://httpbin.org/put&#39;, data=&#123;&#39;key&#39;:&#39;value&#39;&#125;)
&gt;&gt;&gt; requests.delete(&#39;https://httpbin.org/delete&#39;)
&gt;&gt;&gt; requests.head(&#39;https://httpbin.org/get&#39;)
&gt;&gt;&gt; requests.patch(&#39;https://httpbin.org/patch&#39;, data=&#123;&#39;key&#39;:&#39;value&#39;&#125;)
&gt;&gt;&gt; requests.options(&#39;https://httpbin.org/get&#39;)
</code></pre>
<h4 id="code-example"><a href="#code-example" class="headerlink" title="code example"></a>code example</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>:<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>&#125;</span><br><span class="line">r = requests.post(</span><br><span class="line">    <span class="string">&quot;127.0.0.1/api/login&quot;</span>,</span><br><span class="line">    headers=&#123;<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>, </span><br><span class="line">             <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;,</span><br><span class="line">    data=json.dumps(data)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">r = requests.post(</span><br><span class="line">    <span class="string">&quot;127.0.0.1/api/login&quot;</span>,</span><br><span class="line">    headers=&#123;<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>, </span><br><span class="line">             <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;,</span><br><span class="line">    json=data</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session_id = <span class="string">&quot;157480890@kezunlin.me&quot;</span></span><br><span class="line">myheaders=&#123;<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>, </span><br><span class="line">           <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>, </span><br><span class="line">           <span class="string">&quot;session_id&quot;</span>:session_id&#125;</span><br><span class="line">r=requests.get(</span><br><span class="line">    <span class="string">&quot;127.0.0.1/api/book&quot;</span>, </span><br><span class="line">    headers=myheaders</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>


<h3 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a>requests-html</h3><p>requests-html for human</p>
<p>install </p>
<pre><code>pip install requests-html
</code></pre>
<p>usage </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> requests_html <span class="keyword">import</span> HTMLSession</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session = HTMLSession()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = session.get(<span class="string">&#x27;https://python.org/&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.html.find(<span class="string">&#x27;title&#x27;</span>, first=<span class="literal">True</span>).text</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="selenium-chromedriver"><a href="#selenium-chromedriver" class="headerlink" title="selenium chromedriver"></a>selenium chromedriver</h3><p>versions </p>
<ul>
<li>Selenium – version 3.11.0</li>
<li>Chrome Browser – version 77</li>
<li>ChromeDriver – version 77</li>
</ul>
<p>steps</p>
<ol>
<li>download and install chrome browser 77</li>
<li>download <a href="https://chromedriver.storage.googleapis.com/77.0.3865.40/chromedriver_linux64.zip">ChromeDriver for Chrome Browser 77</a> </li>
<li>install and check version</li>
</ol>
<p>commands</p>
<pre><code>sudo cp chromedriver /usr/local/bin
chromedriver -v
ChromeDriver 77.0.3865.40
</code></pre>
<h3 id="smote"><a href="#smote" class="headerlink" title="smote"></a>smote</h3><p>using smote to over sampling datasets</p>
<p>install </p>
<pre><code>pip install smote_variants
pip install imbalanced_databases
</code></pre>
<h3 id="class-member-vs-instance-member"><a href="#class-member-vs-instance-member" class="headerlink" title="class member vs instance member"></a>class member vs instance member</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    rects = []   <span class="comment"># by ref (object):  all instances has only 1 same copy.</span></span><br><span class="line">    counter = <span class="number">0</span>  <span class="comment"># by value: all instances has 1 different copy</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.new_rects = []</span><br><span class="line">        <span class="variable language_">self</span>.new_counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    it = Info()</span><br><span class="line">    <span class="keyword">return</span> it</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    info = func()</span><br><span class="line"></span><br><span class="line">    info.rects.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    info.counter += <span class="number">1</span></span><br><span class="line">    info.new_rects.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    info.new_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rect size&quot;</span>, <span class="built_in">len</span>(info.rects),<span class="built_in">len</span>(info.new_rects))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;counter&quot;</span>, info.counter,info.new_counter)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    info2 = func()</span><br><span class="line">    info2.rects.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    info2.counter += <span class="number">1</span></span><br><span class="line">    info2.new_rects.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    info2.new_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rect size&quot;</span>, <span class="built_in">len</span>(info2.rects),<span class="built_in">len</span>(info2.new_rects))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;counter&quot;</span>, info2.counter,info2.new_counter)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rect size 5 5</span></span><br><span class="line"><span class="string">counter 1 1</span></span><br><span class="line"><span class="string">--------------------------</span></span><br><span class="line"><span class="string">rect size 10 5</span></span><br><span class="line"><span class="string">counter 1 1</span></span><br><span class="line"><span class="string">--------------------------</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="pyyaml"><a href="#pyyaml" class="headerlink" title="pyyaml"></a>pyyaml</h3><p>install </p>
<pre><code>pip install pyyaml
pip freeze &gt; requirements.txt
</code></pre>
<p>usage<br>cfg.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># cfg.yaml</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span> <span class="comment"># debug or not (default: false)</span></span><br><span class="line"><span class="attr">input_dir:</span> <span class="string">&quot;./input/&quot;</span> <span class="comment"># input dir </span></span><br><span class="line"><span class="attr">output_dir:</span> <span class="string">&quot;./output/&quot;</span> <span class="comment"># output dir</span></span><br></pre></td></tr></table></figure>

<p>code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_cfg</span>(<span class="params">cfg_path=<span class="string">&#x27;./cfg.yaml&#x27;</span></span>):</span><br><span class="line">    cfg = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(cfg_path):</span><br><span class="line">        cfg = yaml.load(<span class="built_in">open</span>(cfg_path))</span><br><span class="line">        input_dir = cfg.get(<span class="string">&quot;input_dir&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; not exist&quot;</span>.<span class="built_in">format</span>(cfg_path))</span><br><span class="line">    <span class="keyword">return</span> cfg </span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="cupy"><a href="#cupy" class="headerlink" title="cupy"></a>cupy</h3><blockquote>
<p>CuPy: NumPy-like API accelerated with CUDA.<br>CuPy: numpy on GPU</p>
</blockquote>
<h4 id="install-1"><a href="#install-1" class="headerlink" title="install"></a>install</h4><pre><code>(For CUDA 8.0)
% pip install cupy-cuda80

(For CUDA 9.0)
% pip install cupy-cuda90

(For CUDA 9.1)
% pip install cupy-cuda91

(For CUDA 9.2)
% pip install cupy-cuda92

(For CUDA 10.0)
% pip install cupy-cuda100

(For CUDA 10.1)
% pip install cupy-cuda101

(Install CuPy from source)
% pip install cupy
</code></pre>
<h4 id="usage-1"><a href="#usage-1" class="headerlink" title="usage"></a>usage</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cupy <span class="keyword">as</span> cp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = cp.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>).astype(<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>]], dtype=float32)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">array([  <span class="number">3.</span>,  <span class="number">12.</span>], dtype=float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = cp.arange(<span class="number">6</span>, dtype=<span class="string">&#x27;f&#x27;</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = cp.arange(<span class="number">3</span>, dtype=<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kernel = cp.ElementwiseKernel(</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;float32 x, float32 y&#x27;</span>, <span class="string">&#x27;float32 z&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;&#x27;&#x27;if (x - 2 &gt; y) &#123;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      z = x * y;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &#125; else &#123;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>      z = x + y;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &#125;&#x27;&#x27;&#x27;</span>, <span class="string">&#x27;my_kernel&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kernel(x, y)</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">4.</span>,  <span class="number">10.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure>


<h3 id="SORT"><a href="#SORT" class="headerlink" title="SORT"></a>SORT</h3><p>SORT: A Simple, Online and Realtime Tracker based on Kalman</p>
<p>code </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sort <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#create instance of SORT</span></span><br><span class="line">mot_tracker = Sort() </span><br><span class="line"></span><br><span class="line"><span class="comment"># get detections</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># update SORT</span></span><br><span class="line">track_bbs_ids = mot_tracker.update(detections)</span><br><span class="line"></span><br><span class="line"><span class="comment"># track_bbs_ids is a np array where each row contains a valid bounding box and track_id (last column)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tutorialexample.com/a-beginner-guide-to-python-get-video-duration-with-opencv-python-tutorial/">a-beginner-guide-to-python-get-video-duration-with-opencv-python-tutorial</a></li>
<li><a href="https://www.learnopencv.com/read-write-and-display-a-video-using-opencv-cpp-python/">read-write-and-display-a-video-using-opencv-cpp-python</a></li>
<li><a href="https://www.cnblogs.com/brightyuxl/p/9815780.html">pandas quantile</a></li>
<li><a href="https://simplekml.readthedocs.io/en/latest/gettingstarted.html#getting-started">simplekml</a></li>
<li><a href="https://pythonhosted.org/pykml/tutorial.html">pykml</a></li>
<li><a href="https://realpython.com/python-requests/">python-requests</a></li>
<li><a href="https://stackoverflow.com/questions/6260457/using-headers-with-the-python-requests-librarys-get-method">using-headers-with-the-python-requests-librarys-get-method</a></li>
<li><a href="http://www.automationtestinghub.com/selenium-chromedriver/">selenium-chromedriver</a></li>
<li><a href="https://smote-variants.readthedocs.io/en/latest/installation.html">smote-variants</a></li>
<li><a href="https://github.com/gykovacs/smote_variants/blob/master/examples/000_binary_oversampling.ipynb">examples</a></li>
<li><a href="https://github.com/psf/requests-html">requests-html</a></li>
<li><a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/">is-python-callbyvalue-or-callbyreference-neither</a></li>
<li><a href="https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/">pythons-pass-by-object-reference-as-explained-by-philip-k-dick</a></li>
<li><a href="https://github.com/cupy/cupy">cupy</a></li>
<li><a href="https://cupy.chainer.org/">cupy</a></li>
<li><a href="https://github.com/abewley/sort">sort</a></li>
<li><a href="https://github.com/yasenh/sort-cpp">sort-cpp</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;08: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>simplekml</tag>
        <tag>smote</tag>
        <tag>yaml</tag>
        <tag>requests</tag>
        <tag>base64</tag>
        <tag>cupy</tag>
      </tags>
  </entry>
  <entry>
    <title>how to find string and replace with python regex</title>
    <url>//blog/how-to-find-string-and-replace-with-python-regex/</url>
    <content><![CDATA[<h2 id="Regex-Online-Demo"><a href="#Regex-Online-Demo" class="headerlink" title="Regex Online Demo"></a>Regex Online Demo</h2><p><img src="https://kezunlin.me/images/posts/1864218-20191213112902864-1854703985.png" alt="regex online demo"></p>
<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">regrex_demo</span>():</span><br><span class="line">    pattern = <span class="string">r&#x27;https://img201[7-9].cnblogs.com/blog/\d&#123;6&#125;/20\d&#123;4&#125;/\d&#123;6&#125;-\d&#123;,&#125;-\d&#123;,&#125;.png&#x27;</span></span><br><span class="line">    string = <span class="string">&quot;&quot;&quot;![flops](https://kezunlin.me/images/posts/635233-20190912095826925-710547982.png)</span></span><br><span class="line"><span class="string">            hello world</span></span><br><span class="line"><span class="string">            ![flops](https://kezunlin.me/images/posts/635233-20190912095826925-710547982.png)&quot;&quot;&quot;</span></span><br><span class="line">    results = re.findall(pattern,string) <span class="comment"># list</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_filepaths</span>(<span class="params">root_dir</span>):</span><br><span class="line">    filepaths = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(root_dir):</span><br><span class="line">        filepath = os.path.sep.join([root_dir, filename]) </span><br><span class="line">        filepaths.append(filepath)</span><br><span class="line">    <span class="keyword">return</span> filepaths </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makesure_dir</span>(<span class="params"><span class="built_in">dir</span></span>):  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="built_in">dir</span>):</span><br><span class="line">        os.makedirs(<span class="built_in">dir</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_cnblog_image_urls</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="comment"># img2017 img2018  img2019</span></span><br><span class="line">    <span class="comment"># images2017 images2018  images2019</span></span><br><span class="line">    <span class="comment">#pattern = r&#x27;https*://img201[0-9].cnblogs.com/blog/\d&#123;6,8&#125;/20\d&#123;4&#125;/\d&#123;6,8&#125;-\d&#123;,&#125;-\d&#123;,&#125;.png&#x27;</span></span><br><span class="line">    <span class="comment">#pattern = r&#x27;https*://img201[0-9].cnblogs.com/blog/\d&#123;6,8&#125;/20\d&#123;4&#125;/\d&#123;6,8&#125;-\d&#123;,&#125;-\d&#123;,&#125;.jpg&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#pattern = r&#x27;https*://images201[0-9].cnblogs.com/blog/\d&#123;6,8&#125;/20\d&#123;4&#125;/\d&#123;6,8&#125;-\d&#123;,&#125;-\d&#123;,&#125;.png&#x27;</span></span><br><span class="line">    pattern = <span class="string">r&#x27;https*://images201[0-9].cnblogs.com/blog/\d&#123;6,8&#125;/20\d&#123;4&#125;/\d&#123;6,8&#125;-\d&#123;,&#125;-\d&#123;,&#125;.jpg&#x27;</span></span><br><span class="line">    </span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># read file into one string </span></span><br><span class="line">        urls = re.findall(pattern,contents) <span class="comment"># list</span></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, to_file</span>):</span><br><span class="line">    r = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(to_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment">#r.raw.decode_content = True</span></span><br><span class="line">            shutil.copyfileobj(r.raw, f) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Save to &quot;</span>,to_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image_by_chunk</span>(<span class="params">url, to_file</span>):</span><br><span class="line">    r = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(to_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(<span class="number">1024</span>):</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Save to &quot;</span>,to_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_inplace</span>(<span class="params">filepath, old_string, new_string</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(filepath,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    filedata = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    newdata = filedata.replace(old_string,new_string)</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(filepath,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(newdata)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image_wrapper</span>(<span class="params">url, to_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    donwnload image from url and return new url</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    filename = url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]  </span><br><span class="line">    to_file = os.path.sep.join([to_dir, filename])</span><br><span class="line">    download_image(url,to_file)</span><br><span class="line">    </span><br><span class="line">    new_url = <span class="string">&quot;https://kezunlin.me/images/posts/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename)</span><br><span class="line">    <span class="keyword">return</span> new_url </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_all_posts</span>():</span><br><span class="line">    to_dir = <span class="string">&quot;images/posts&quot;</span> <span class="comment"># images dir</span></span><br><span class="line">    makesure_dir(to_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#posts_dir = &quot;../source/_posts/&quot;</span></span><br><span class="line">    posts_dir = <span class="string">&quot;test_posts&quot;</span></span><br><span class="line">    posts_dir = <span class="string">&quot;_posts&quot;</span></span><br><span class="line">    filepaths = get_filepaths(posts_dir)</span><br><span class="line">    <span class="keyword">for</span> filepath <span class="keyword">in</span> filepaths:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(filepath)</span><br><span class="line">        urls = find_cnblog_image_urls(filepath)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            new_url = download_image_wrapper(url,to_dir)</span><br><span class="line">            replace_inplace(filepath,url,new_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#regrex_demo()</span></span><br><span class="line">    process_all_posts()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">grep -r &quot;cnblogs.com/blog&quot; source/_posts</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.pyregex.com/">pyregex</a></li>
<li><a href="https://stackoverflow.com/questions/13137817/how-to-download-image-using-requests">how-to-download-image-using-requests</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;12&#x2F;13: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Getting Started with Nvidia Jetson Nano</title>
    <url>//blog/Nvidia-Jetson-Nano-Quick-Start/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><strong><a href="https://kezunlin.me/post/4eb7fcec">Getting Started with Nvidia Jetson Nano</a></strong></li>
<li><a href="https://kezunlin.me/post/974aaa0a">how to install vscode on Nvidia Jetson Nano</a></li>
<li><a href="https://kezunlin.me/post/d7b68f88">how to use vscode remote-ssh for Linux arm64 aarch64 platform such as Nvidia Jetson TX1 TX2 Nano</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a><a id="MyGuide"></a>Guide</h2><h3 id="Jetson-Family"><a href="#Jetson-Family" class="headerlink" title="Jetson Family"></a>Jetson Family</h3><ul>
<li>Jetson TX1 Developer Kit</li>
<li>Jetson TX2 Developer Kit</li>
<li>Jetson AGX Xaiver Developer Kit</li>
<li>Jetson Nano Developer Kit</li>
</ul>
<h3 id="SDKs-and-Tools"><a href="#SDKs-and-Tools" class="headerlink" title="SDKs and Tools"></a>SDKs and Tools</h3><ul>
<li>NVIDIA JetPack </li>
<li>NVIDIA DeepStream SDK</li>
<li>NVIDIA DIGITS for training</li>
</ul>
<p>JetPack includes:<br>• Full desktop Linux with NVIDIA drivers<br>• AI and Computer Vision libraries and APIs<br>• Developer tools<br>• Documentation and sample code</p>
<h3 id="Recommended-System-Requirements"><a href="#Recommended-System-Requirements" class="headerlink" title="Recommended System Requirements"></a>Recommended System Requirements</h3><p>Training GPU: </p>
<ul>
<li>Maxwell, Pascal, Volta, or Turing-based GPU (ideally with at least 6GB video memory) optionally, AWS P2&#x2F;P3 instance or Microsoft Azure N-series</li>
<li>Ubuntu 16.04&#x2F;18.04 x86_64</li>
</ul>
<p>Deployment:   </p>
<ul>
<li>Jetson Nano Developer Kit with JetPack 4.2 or newer (Ubuntu 18.04 aarch64).</li>
<li>Jetson Xavier Developer Kit with JetPack 4.0 or newer (Ubuntu 18.04 aarch64)</li>
<li>Jetson TX2 Developer Kit with JetPack 3.0 or newer (Ubuntu 16.04 aarch64).</li>
<li>Jetson TX1 Developer Kit with JetPack 2.3 or newer (Ubuntu 16.04 aarch64).</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Jetson-Nano-Developer-Kit"><a href="#Jetson-Nano-Developer-Kit" class="headerlink" title="Jetson Nano Developer Kit"></a>Jetson Nano Developer Kit</h2><h3 id="Jetson-Nano-Device"><a href="#Jetson-Nano-Device" class="headerlink" title="Jetson Nano Device"></a>Jetson Nano Device</h3><p>Jetson Nano was introduced in April 2019 for only $99.</p>
<p>jetson nano<br><img src="https://kezunlin.me/images/posts/1864218-20191213113956256-311630041.png" alt="Jetson Nano image"></p>
<ol>
<li>microSD card slot for main storage</li>
<li>40-pin expansion header</li>
<li>Micro-USB port for 5V power input or for data</li>
<li>Gigabit Ethernet port</li>
<li>USB 3.0 ports (x4)</li>
<li>HDMI output port</li>
<li>DisplayPort connector</li>
<li>DC Barrel jack for 5V power input</li>
<li>MIPI CSI camera connector</li>
</ol>
<blockquote>
<p>power input: 3 and 8<br>camera: 9 (MIPI CSI camera)<br>green LED (D53) close to the micro USB port should turn green</p>
</blockquote>
<p>inference performance<br><img src="https://kezunlin.me/images/posts/1864218-20191213114023081-1271978158.png" alt="Jetson Nano inference performance"></p>
<p>multiple cameras with jetson nano</p>
<ul>
<li><a href="https://www.arducam.com/multi-camera-solutions-for-nvidia-jetson-nano/">multi-camera-solutions-for-nvidia-jetson-nano</a></li>
<li><a href="https://devtalk.nvidia.com/default/topic/1055320/jetson-nano/how-to-connect-more-than-one-camera-to-jetson-nano/">how-to-connect-more-than-one-camera-to-jetson-nano</a></li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="Write-Image-to-the-microSD-Card"><a href="#Write-Image-to-the-microSD-Card" class="headerlink" title="Write Image to the microSD Card"></a>Write Image to the microSD Card</h3><ol>
<li>Download the <a href="https://developer.nvidia.com/jetson-nano-sd-card-image-r3223">jetson-nano-sd-card-image-r3223.zip</a></li>
<li>Format the microSD card to ExFAT if it’s a 64Gb or higher card, and to FAT if it’s less.</li>
<li>Use <a href="https://www.balena.io/etcher/">etcher</a> or linux command to write image to microSD.   <blockquote>
<p>Image size about 5G, so be patient to download<br>Recommend use <code>ether</code> to write image to write image to microSD</p>
</blockquote>
</li>
</ol>
<p>linux command to write image to microSD</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h </span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs           1.6G   18M  1.6G   2% /run</span><br><span class="line">/dev/sdb6       184G  162G   13G  93% /</span><br><span class="line">tmpfs           7.8G   71M  7.8G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sdb5       453M  157M  270M  37% /boot</span><br><span class="line">tmpfs           1.6G   56K  1.6G   1% /run/user/1000</span><br><span class="line">/dev/sdb4       388G  337G   52G  87% /media/kezunlin/Workspace</span><br><span class="line">/dev/sdc1        30G   32K   30G   1% /media/kezunlin/nano</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ dmesg | <span class="built_in">tail</span> | awk <span class="string">&#x27;$3 == &quot;sd&quot; &#123;print&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#In this example, we can see the 32GB microSD card was assigned /dev/sdc:</span></span><br><span class="line">[  613.537818] sd 4:0:0:0: Attached scsi generic sg2 <span class="built_in">type</span> 0</span><br><span class="line">[  613.940079] sd 4:0:0:0: [sdc] 62333952 512-byte logical blocks: (31.9 GB/29.7 GiB)</span><br><span class="line">[  613.940664] sd 4:0:0:0: [sdc] Write Protect is off</span><br><span class="line">[  613.940672] sd 4:0:0:0: [sdc] Mode Sense: 87 00 00 00</span><br><span class="line">[  613.942730] sd 4:0:0:0: [sdc] Write cache: disabled, <span class="built_in">read</span> cache: enabled, doesnt support DPO or FUA</span><br><span class="line">[  613.956666] sd 4:0:0:0: [sdc] Attached SCSI removable disk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this command to write the zipped SD card image to the microSD card:</span></span><br><span class="line"></span><br><span class="line">$ /usr/bin/unzip -p ~/Downloads/jetson-nano-sd-card-image-r3223.zip | <span class="built_in">sudo</span> /bin/dd of=/dev/sdc bs=1M status=progress</span><br><span class="line"></span><br><span class="line">0+167548 records <span class="keyword">in</span></span><br><span class="line">0+167548 records out</span><br><span class="line">12884901888 bytes (13 GB, 12 GiB) copied, 511.602 s, 25.2 MB/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12 partitions generated by the writing process ???</span></span><br><span class="line">$ <span class="built_in">sudo</span> fdisk -l </span><br><span class="line"></span><br><span class="line">GPT PMBR size mismatch (25165823 != 62333951) will be corrected by w(rite).</span><br><span class="line">Disk /dev/sde: 29.7 GiB, 31914983424 bytes, 62333952 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: E696E264-F2EA-434A-900C-D9ACA2F99E43</span><br><span class="line"></span><br><span class="line">Device     Start      End  Sectors  Size Type</span><br><span class="line">/dev/sde1  24576 25165790 25141215   12G Linux filesystem</span><br><span class="line">/dev/sde2   2048     2303      256  128K Linux filesystem</span><br><span class="line">/dev/sde3   4096     4991      896  448K Linux filesystem</span><br><span class="line">/dev/sde4   6144     7295     1152  576K Linux filesystem</span><br><span class="line">/dev/sde5   8192     8319      128   64K Linux filesystem</span><br><span class="line">/dev/sde6  10240    10623      384  192K Linux filesystem</span><br><span class="line">/dev/sde7  12288    13439     1152  576K Linux filesystem</span><br><span class="line">/dev/sde8  14336    14463      128   64K Linux filesystem</span><br><span class="line">/dev/sde9  16384    17663     1280  640K Linux filesystem</span><br><span class="line">/dev/sde10 18432    19327      896  448K Linux filesystem</span><br><span class="line">/dev/sde11 20480    20735      256  128K Linux filesystem</span><br><span class="line">/dev/sde12 22528    22687      160   80K Linux filesystem</span><br><span class="line"></span><br><span class="line">Partition table entries are not <span class="keyword">in</span> disk order.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the dd command finishes, eject the disk device from the command line:</span></span><br><span class="line">$ <span class="built_in">sudo</span> eject /dev/sdc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Physically remove microSD card from the computer.</span></span><br></pre></td></tr></table></figure>

<p>Steps:</p>
<ol>
<li>Insert the microSD card into the appropriate slot</li>
<li>Connect the display and USB keyboard &#x2F;mouse and Ethernet cable.</li>
<li>Depending on the power supply you want to use, you may have to add or remove the jumper for power selection:<br> – If using a jack(part 8), the jumper must be set.<br> – if using USB (part 3), the jumper must be off.</li>
<li>Plug in the power supply. The green LED (D53) close to the micro USB port should turn green, and the display should show the NVIDIA logo before booting begins.</li>
</ol>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Prepare-Nano-System"><a href="#Prepare-Nano-System" class="headerlink" title="Prepare Nano System"></a>Prepare Nano System</h2><hr>
<ul>
<li>Jetson Nano L4T 32.2.1-20190812212815 (JetPack 4.2.2)</li>
<li>nv-jetson-nano-sd-card-image-r32.2.1.zip</li>
<li>DeepStream SDK 4.0.1 (gstreamer1.0)</li>
</ul>
<hr>
<ul>
<li>Jetson Nano L4T 32.3-20191217(JetPack 4.3)</li>
<li>nv-jetson-nano-sd-card-image-r32.3.1.zip</li>
<li>DeepStream SDK 4.0.2 (gstreamer1.0)</li>
</ul>
<hr>
<ul>
<li>Ubuntu 18.04 aarch64 (bionic)</li>
<li>CUDA 10.0  SM_72  (installed)</li>
<li>TensorRT-5.1.6.0  (installed)</li>
<li>OpenCV 3.3.1 (installed)</li>
<li>Python 2.7 (installed) </li>
<li>Python 3.6.9</li>
<li>Numpy 1.13.3</li>
<li>QT 5.9.5</li>
</ul>
<blockquote>
<p><code>CUDA-10.0</code> and <code>TensorRT-5.1.6.0</code> has already installed on Jetson Nano.<br> ARM 64 machines such as the Jetson Nano and Raspberry Pi.</p>
</blockquote>
<blockquote>
<p><code>DeepStream SDK 4.0.1</code> requires the installation of <code>JetPack 4.2.2</code>.<br><code>DeepStream SDK 4.0.2</code> requires the installation of <code>JetPack 4.3</code>.</p>
</blockquote>
<h3 id="SSH-for-nano-with-ForwardX11"><a href="#SSH-for-nano-with-ForwardX11" class="headerlink" title="SSH for nano with ForwardX11"></a>SSH for nano with ForwardX11</h3><p><del>for nano, edit <code>/etc/ssh/ssh_config</code></del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">X11Forwarding <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<p><del>and restart ssh</del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/ssh restart</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> nano: </span><br><span class="line">[ ok ] Restarting ssh (via systemctl): ssh.service.</span><br></pre></td></tr></table></figure>

<p>for my ubuntu client</p>
<p>edit <code>~/.ssh/config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host nano</span><br><span class="line">  HostName 192.168.0.63</span><br><span class="line">  User nano</span><br><span class="line">  ForwardX11 <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ForwardX11 yes</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1: `~/.ssh/config` with  `ForwardX11 yes`</span></span><br><span class="line">$ ssh nano@192.168.0.63</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2: with `-X`</span></span><br><span class="line">$ ssh -X nano@192.168.0.63 </span><br><span class="line"><span class="comment"># `-X` means enabling ForwardX11</span></span><br></pre></td></tr></table></figure>


<h3 id="add-CUDA-envs"><a href="#add-CUDA-envs" class="headerlink" title="add CUDA envs"></a>add CUDA envs</h3><p>edit <code>~.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add this to your .bashrc file</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line"><span class="comment"># Adds the CUDA compiler to the PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$CUDA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># Adds the libraries</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<p>check cuda version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ nvcc --version</span><br><span class="line"></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Mon_Mar_11_22:13:24_CDT_2019</span><br><span class="line">Cuda compilation tools, release 10.0, V10.0.326</span><br></pre></td></tr></table></figure>

<h3 id="check-versions"><a href="#check-versions" class="headerlink" title="check versions"></a>check versions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a </span><br><span class="line">Linux nano-desktop 4.9.140-tegra <span class="comment">#1 SMP PREEMPT Sat Oct 19 15:54:06 PDT 2019 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">$ dpkg-query --show nvidia-l4t-core</span><br><span class="line">nvidia-l4t-core	32.2.1-20190812212815</span><br><span class="line"></span><br><span class="line">$ python --version</span><br><span class="line">Python 2.7.15+</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version 2.17.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># check tensorrt version</span></span><br><span class="line">$ ll -al /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.5</span><br><span class="line">lrwxrwxrwx 1 root root 26 Jun  5  2019 /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.5 -&gt; libnvinfer_plugin.so.5.1.6</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NO NEED TO download <code>TensorRT 5.1.5.0 GA for Ubuntu 18.04 and CUDA 10.0 tar package</code> from <a href="https://developer.nvidia.com/nvidia-tensorrt-5x-download">here</a> and place at <code>/opt/TensorRT-5.1.5.0</code></p>
</blockquote>
<h3 id="install-packages"><a href="#install-packages" class="headerlink" title="install packages"></a>install packages</h3><ul>
<li>cmake 3.10.2</li>
<li>cmake-gui 3.10.2</li>
<li>python 3.6.9</li>
<li>QT 5.9.5</li>
</ul>
<blockquote>
<p><strong>use official ubuntu source</strong><br>do not replace <code>/etc/opt/sources.list</code> with aliyun source,otherwise lots of packages will fail to install</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install cmake</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install cmake</span><br><span class="line"></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 cmake arm64 3.10.2-1ubuntu2.18.04.1 [2,971 kB]</span><br><span class="line"></span><br><span class="line"><span class="comment"># install cmake-gui </span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install cmake-gui cmake-qt-gui</span><br><span class="line"></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/universe arm64 cmake-qt-gui arm64 3.10.2-1ubuntu2.18.04.1 [1,527 kB]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># install python 3.6.9</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt -y install libpython3-dev python3-numpy</span><br><span class="line"></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libpython3.6 arm64 3.6.9-1~18.04 [1,307 kB]</span><br><span class="line">Get:2 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 python3.6 arm64 3.6.9-1~18.04 [203 kB]                                           </span><br><span class="line">Get:3 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libpython3.6-stdlib arm64 3.6.9-1~18.04 [1,609 kB]                               </span><br><span class="line">Get:4 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 python3.6-minimal arm64 3.6.9-1~18.04 [1,327 kB]                                 </span><br><span class="line">Get:5 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libpython3.6-minimal arm64 3.6.9-1~18.04 [528 kB]                                </span><br><span class="line">Get:6 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libpython3.6-dev arm64 3.6.9-1~18.04 [45.0 MB]                                   </span><br><span class="line">Get:7 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libpython3-dev arm64 3.6.7-1~18.04 [7,328 B]                                     </span><br><span class="line">Get:8 http://ports.ubuntu.com/ubuntu-ports bionic/main arm64 python3-numpy arm64 1:1.13.3-2ubuntu1 [1,734 kB]</span><br><span class="line"></span><br><span class="line"><span class="comment"># install qt5</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install qtbase5-dev</span><br><span class="line"></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main arm64 libqt5core5a arm64 5.9.5+dfsg-0ubuntu2.4 [1933 kB]</span><br></pre></td></tr></table></figure>


<h3 id="packages-conclusion"><a href="#packages-conclusion" class="headerlink" title="packages conclusion"></a>packages conclusion</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt -y install cmake cmake-gui cmake-qt-gui</span><br><span class="line"><span class="built_in">sudo</span> apt -y install libpython3-dev python3-numpy python3-pip</span><br><span class="line"><span class="built_in">sudo</span> apt -y install qtbase5-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># other packages for c++ programs</span></span><br><span class="line"><span class="built_in">sudo</span> apt -y install libcrypto++-dev </span><br><span class="line"><span class="built_in">sudo</span> apt -y install libgoogle-glog-dev </span><br><span class="line"><span class="built_in">sudo</span> apt -y install libgflags-dev</span><br><span class="line"><span class="built_in">sudo</span> apt -y install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># top and jtop </span></span><br><span class="line"><span class="built_in">sudo</span> -H pip3 install jetson-stats</span><br><span class="line"><span class="built_in">sudo</span> jtop -h</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="Build-jetson-inference"><a href="#Build-jetson-inference" class="headerlink" title="Build jetson-inference"></a>Build jetson-inference</h2><p>see <a href="https://github.com/dusty-nv/jetson-inference">jetson-inference</a></p>
<h3 id="cmake-and-configure"><a href="#cmake-and-configure" class="headerlink" title="cmake and configure"></a>cmake and configure</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/dusty-nv/jetson-inference</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">git submodule update --init</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">sudo</span> cmake ..</span><br></pre></td></tr></table></figure>

<p>congigure</p>
<blockquote>
<p> do not donwload models<br> do not download pytorch</p>
</blockquote>
<p>run download models and pytorch later if you really need</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> jetson-inference/tools</span><br><span class="line">$ ./download-models.sh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> jetson-inference/build</span><br><span class="line">$ ./install-pytorch.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>or download models from <a href="https://github.com/dusty-nv/jetson-inference/releases">here</a><br><code>wget -b -c https://github.com/dusty-nv/jetson-inference/releases/download/model-mirror-190618/ResNet-18.tar.gz </code></p>
</blockquote>
<p>congigure output<br><img src="https://kezunlin.me/images/posts/1864218-20191219154424278-1963790396.png" alt="cmake-gui jetson-inference"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[jetson-inference]  Checking <span class="keyword">for</span> <span class="string">&#x27;dialog&#x27;</span> deb package...installed</span><br><span class="line">[jetson-inference]  FOUND_DIALOG=INSTALLED</span><br><span class="line"></span><br><span class="line">[jetson-inference]  Model selection status:  0</span><br><span class="line">[jetson-inference]  No models were selected <span class="keyword">for</span> download.</span><br><span class="line"></span><br><span class="line">[jetson-inference]  to run this tool again, use the following commands:</span><br><span class="line">    $ <span class="built_in">cd</span> &lt;jetson-inference&gt;/tools</span><br><span class="line">    $ ./download-models.sh</span><br><span class="line"></span><br><span class="line">[jetson-inference]  Checking <span class="keyword">for</span> <span class="string">&#x27;dialog&#x27;</span> deb package...installed</span><br><span class="line">[jetson-inference]  FOUND_DIALOG=INSTALLED</span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span>: cannot open <span class="string">&#x27;/etc/nv_tegra_release&#x27;</span> <span class="keyword">for</span> reading: No such file or directory</span><br><span class="line">[jetson-inference]  reading L4T version from <span class="string">&quot;dpkg-query --show nvidia-l4t-core&quot;</span></span><br><span class="line">[jetson-inference]  Jetson BSP Version:  L4T R32.2</span><br><span class="line"></span><br><span class="line">[jetson-inference]  Package selection status:  1</span><br><span class="line">[jetson-inference]  Package selection cancelled.</span><br><span class="line"></span><br><span class="line">[jetson-inference]  installation complete, exiting with status code 0</span><br><span class="line">[jetson-inference]  to run this tool again, use the following commands:</span><br><span class="line">    $ <span class="built_in">cd</span> &lt;jetson-inference&gt;/build</span><br><span class="line">    $ ./install-pytorch.sh</span><br><span class="line"></span><br><span class="line">[Pre-build]  Finished CMakePreBuild script</span><br><span class="line"></span><br><span class="line">-- Finished installing dependencies</span><br><span class="line">-- using patched FindCUDA.cmake</span><br><span class="line">Looking <span class="keyword">for</span> pthread.h</span><br><span class="line">Looking <span class="keyword">for</span> pthread.h - found</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create - not found</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthreads - not found</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread</span><br><span class="line">Looking <span class="keyword">for</span> pthread_create <span class="keyword">in</span> pthread - found</span><br><span class="line">Found Threads: TRUE  </span><br><span class="line"></span><br><span class="line">-- using patched FindCUDA.cmake</span><br><span class="line">-- CUDA version: 10.0</span><br><span class="line">-- CUDA 10 detected, enabling SM_72</span><br><span class="line">-- OpenCV version:  3.3.1</span><br><span class="line">-- OpenCV version &gt;= 3.0.0, enabling OpenCV</span><br><span class="line">-- system <span class="built_in">arch</span>:  aarch64</span><br><span class="line">-- output path:  /home/nano/git/jetson-inference/build/aarch64</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/detectNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/homographyNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/imageNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/segNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/superResNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/tensorNet.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/c/imageNet.cuh</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/calibration/randInt8Calibrator.h</span><br><span class="line">Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE) </span><br><span class="line">-- found Qt5Widgets version:  5.9.5</span><br><span class="line">-- found Qt5Widgets defines:  -DQT_WIDGETS_LIB;-DQT_GUI_LIB;-DQT_CORE_LIB</span><br><span class="line">-- found Qt5Widgets library:  Qt5::Widgets</span><br><span class="line">-- found Qt5Widgets include:  /usr/include/aarch64-linux-gnu/qt5/;/usr/include/aarch64-linux-gnu/qt5/QtWidgets;/usr/include/aarch64-linux-gnu/qt5/QtGui;/usr/include/aarch64-linux-gnu/qt5/QtCore;/usr/lib/aarch64-linux-gnu/qt5//mkspecs/linux-g++</span><br><span class="line">-- camera-capture:  building as submodule, /home/nano/git/jetson-inference/tools</span><br><span class="line">-- jetson-utils:  building as submodule, /home/nano/git/jetson-inference</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/XML.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/commandLine.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/filesystem.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/mat33.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/pi.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/rand.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/timespec.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/camera/gstCamera.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/camera/v4l2Camera.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/codec/gstDecoder.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/codec/gstEncoder.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/codec/gstUtility.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaFont.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaMappedMemory.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaNormalize.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaOverlay.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaRGB.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaResize.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaUtility.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaWarp.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/cuda/cudaYUV.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/display/glDisplay.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/display/glTexture.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/display/glUtility.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/image/imageIO.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/image/loadImage.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/input/devInput.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/input/devJoystick.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/input/devKeyboard.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/network/Endian.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/network/IPv4.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/network/NetworkAdapter.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/network/Socket.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/threads/Event.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/threads/Mutex.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/threads/Process.h</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/utils/threads/Thread.h</span><br><span class="line">-- trying to build Python bindings <span class="keyword">for</span> Python versions:  2.7;3.6;3.7</span><br><span class="line">-- detecting Python 2.7...</span><br><span class="line">-- found Python version:  2.7 (2.7.15+)</span><br><span class="line">-- found Python include:  /usr/include/python2.7</span><br><span class="line">-- found Python library:  /usr/lib/aarch64-linux-gnu/libpython2.7.so</span><br><span class="line">-- CMake module path:  /home/nano/git/jetson-inference/utils/cuda;/home/nano/git/jetson-inference/utils/python/bindings</span><br><span class="line">NumPy ver. 1.13.3 found (include: /usr/lib/python2.7/dist-packages/numpy/core/include)</span><br><span class="line">-- found NumPy version:  1.13.3</span><br><span class="line">-- found NumPy include:  /usr/lib/python2.7/dist-packages/numpy/core/include</span><br><span class="line">-- detecting Python 3.6...</span><br><span class="line">-- found Python version:  3.6 (3.6.9)</span><br><span class="line">-- found Python include:  /usr/include/python3.6m</span><br><span class="line">-- found Python library:  /usr/lib/aarch64-linux-gnu/libpython3.6m.so</span><br><span class="line">-- CMake module path:  /home/nano/git/jetson-inference/utils/cuda;/home/nano/git/jetson-inference/utils/python/bindings</span><br><span class="line">NumPy ver. 1.13.3 found (include: /usr/lib/python3/dist-packages/numpy/core/include)</span><br><span class="line">-- found NumPy version:  1.13.3</span><br><span class="line">-- found NumPy include:  /usr/lib/python3/dist-packages/numpy/core/include</span><br><span class="line">-- detecting Python 3.7...</span><br><span class="line">-- Python 3.7 wasn<span class="string">&#x27;t found</span></span><br><span class="line"><span class="string">-- Copying /home/nano/git/jetson-inference/utils/python/examples/camera-viewer.py</span></span><br><span class="line"><span class="string">-- Copying /home/nano/git/jetson-inference/utils/python/examples/cuda-from-numpy.py</span></span><br><span class="line"><span class="string">-- Copying /home/nano/git/jetson-inference/utils/python/examples/cuda-to-numpy.py</span></span><br><span class="line"><span class="string">-- Copying /home/nano/git/jetson-inference/utils/python/examples/gl-display-test.py</span></span><br><span class="line"><span class="string">-- trying to build Python bindings for Python versions:  2.7;3.6;3.7</span></span><br><span class="line"><span class="string">-- detecting Python 2.7...</span></span><br><span class="line"><span class="string">-- found Python version:  2.7 (2.7.15+)</span></span><br><span class="line"><span class="string">-- found Python include:  /usr/include/python2.7</span></span><br><span class="line"><span class="string">-- found Python library:  /usr/lib/aarch64-linux-gnu/libpython2.7.so</span></span><br><span class="line"><span class="string">-- detecting Python 3.6...</span></span><br><span class="line"><span class="string">-- found Python version:  3.6 (3.6.9)</span></span><br><span class="line"><span class="string">-- found Python include:  /usr/include/python3.6m</span></span><br><span class="line"><span class="string">-- found Python library:  /usr/lib/aarch64-linux-gnu/libpython3.6m.so</span></span><br><span class="line"><span class="string">-- detecting Python 3.7...</span></span><br><span class="line"><span class="string">-- Python 3.7 wasn&#x27;</span>t found</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/detectnet-camera.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/detectnet-console.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/imagenet-camera.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/imagenet-console.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/my-detection.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/my-recognition.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/segnet-batch.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/segnet-camera.py</span><br><span class="line">-- Copying /home/nano/git/jetson-inference/python/examples/segnet-console.py</span><br><span class="line">Configuring <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="compile-and-install"><a href="#compile-and-install" class="headerlink" title="compile and install"></a>compile and install</h3><p>generate and compile </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> make</span><br></pre></td></tr></table></figure>

<p>install jetson-inference </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br></pre></td></tr></table></figure>
<p>output </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[  1%] Linking CXX shared library ../aarch64/lib/libjetson-utils.so</span><br><span class="line">[ 31%] Built target jetson-utils</span><br><span class="line">[ 32%] Linking CXX shared library aarch64/lib/libjetson-inference.so</span><br><span class="line">[ 43%] Built target jetson-inference</span><br><span class="line">[ 44%] Linking CXX executable ../../aarch64/bin/imagenet-console</span><br><span class="line">[ 45%] Built target imagenet-console</span><br><span class="line">[ 46%] Linking CXX executable ../../aarch64/bin/imagenet-camera</span><br><span class="line">[ 47%] Built target imagenet-camera</span><br><span class="line">[ 47%] Linking CXX executable ../../aarch64/bin/detectnet-console</span><br><span class="line">[ 48%] Built target detectnet-console</span><br><span class="line">[ 49%] Linking CXX executable ../../aarch64/bin/detectnet-camera</span><br><span class="line">[ 50%] Built target detectnet-camera</span><br><span class="line">[ 50%] Linking CXX executable ../../aarch64/bin/segnet-console</span><br><span class="line">[ 51%] Built target segnet-console</span><br><span class="line">[ 52%] Linking CXX executable ../../aarch64/bin/segnet-camera</span><br><span class="line">[ 53%] Built target segnet-camera</span><br><span class="line">[ 54%] Linking CXX executable ../../aarch64/bin/superres-console</span><br><span class="line">[ 55%] Built target superres-console</span><br><span class="line">[ 56%] Linking CXX executable ../../aarch64/bin/homography-console</span><br><span class="line">[ 57%] Built target homography-console</span><br><span class="line">[ 58%] Linking CXX executable ../../aarch64/bin/homography-camera</span><br><span class="line">[ 59%] Built target homography-camera</span><br><span class="line">[ 60%] Automatic MOC <span class="keyword">for</span> target camera-capture</span><br><span class="line">[ 60%] Built target camera-capture_autogen</span><br><span class="line">[ 61%] Linking CXX executable ../../aarch64/bin/camera-capture</span><br><span class="line">[ 64%] Built target camera-capture</span><br><span class="line">[ 65%] Linking CXX executable ../../aarch64/bin/trt-bench</span><br><span class="line">[ 66%] Built target trt-bench</span><br><span class="line">[ 67%] Linking CXX executable ../../aarch64/bin/trt-console</span><br><span class="line">[ 68%] Built target trt-console</span><br><span class="line">[ 69%] Linking CXX executable ../../../aarch64/bin/camera-viewer</span><br><span class="line">[ 70%] Built target camera-viewer</span><br><span class="line">[ 71%] Linking CXX executable ../../../aarch64/bin/v4l2-console</span><br><span class="line">[ 72%] Built target v4l2-console</span><br><span class="line">[ 73%] Linking CXX executable ../../../aarch64/bin/v4l2-display</span><br><span class="line">[ 74%] Built target v4l2-display</span><br><span class="line">[ 75%] Linking CXX executable ../../../aarch64/bin/gl-display-test</span><br><span class="line">[ 76%] Built target gl-display-test</span><br><span class="line">[ 76%] Linking CXX shared library ../../../aarch64/lib/python/2.7/jetson_utils_python.so</span><br><span class="line">[ 82%] Built target jetson-utils-python-27</span><br><span class="line">[ 83%] Linking CXX shared library ../../../aarch64/lib/python/3.6/jetson_utils_python.so</span><br><span class="line">[ 89%] Built target jetson-utils-python-36</span><br><span class="line">[ 90%] Linking CXX shared library ../../aarch64/lib/python/2.7/jetson_inference_python.so</span><br><span class="line">[ 95%] Built target jetson-inference-python-27</span><br><span class="line">[ 96%] Linking CXX shared library ../../aarch64/lib/python/3.6/jetson_inference_python.so</span><br><span class="line">[100%] Built target jetson-inference-python-36</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/detectNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/homographyNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/imageNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/segNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/superResNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/tensorNet.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/imageNet.cuh</span><br><span class="line">-- Installing: /usr/local/include/jetson-inference/randInt8Calibrator.h</span><br><span class="line">-- Installing: /usr/local/lib/libjetson-inference.so</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/lib/libjetson-inference.so&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/share/jetson-inference/cmake/jetson-inferenceConfig.cmake</span><br><span class="line">-- Installing: /usr/local/share/jetson-inference/cmake/jetson-inferenceConfig-noconfig.cmake</span><br><span class="line">-- Installing: /usr/local/bin/imagenet-console</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/imagenet-console&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/imagenet-camera</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/imagenet-camera&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/detectnet-console</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/detectnet-console&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/detectnet-camera</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/detectnet-camera&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/segnet-console</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/segnet-console&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/segnet-camera</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/segnet-camera&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/superres-console</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/superres-console&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/homography-console</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/homography-console&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/homography-camera</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/homography-camera&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/camera-capture</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/camera-capture&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/XML.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/commandLine.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/filesystem.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/mat33.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/pi.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/rand.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/timespec.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/gstCamera.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/v4l2Camera.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/gstDecoder.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/gstEncoder.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/gstUtility.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaFont.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaMappedMemory.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaNormalize.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaOverlay.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaRGB.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaResize.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaUtility.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaWarp.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/cudaYUV.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/glDisplay.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/glTexture.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/glUtility.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/imageIO.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/loadImage.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/devInput.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/devJoystick.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/devKeyboard.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Endian.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/IPv4.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/NetworkAdapter.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Socket.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Event.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Mutex.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Process.h</span><br><span class="line">-- Installing: /usr/local/include/jetson-utils/Thread.h</span><br><span class="line">-- Installing: /usr/local/lib/libjetson-utils.so</span><br><span class="line">-- Installing: /usr/local/share/jetson-utils/cmake/jetson-utilsConfig.cmake</span><br><span class="line">-- Installing: /usr/local/share/jetson-utils/cmake/jetson-utilsConfig-noconfig.cmake</span><br><span class="line">-- Installing: /usr/local/bin/camera-viewer</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/camera-viewer&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/gl-display-test</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/local/bin/gl-display-test&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/local/bin/camera-viewer.py</span><br><span class="line">-- Installing: /usr/local/bin/cuda-from-numpy.py</span><br><span class="line">-- Installing: /usr/local/bin/cuda-to-numpy.py</span><br><span class="line">-- Installing: /usr/local/bin/gl-display-test.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson_utils_python.so</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/lib/python2.7/dist-packages/jetson_utils_python.so&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/Utils</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/Utils/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/utils</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/utils/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson_utils_python.so</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/lib/python3.6/dist-packages/jetson_utils_python.so&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/Utils</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/Utils/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/utils</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/utils/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/__init__.py</span><br><span class="line">-- Installing: /usr/local/bin/detectnet-camera.py</span><br><span class="line">-- Installing: /usr/local/bin/detectnet-console.py</span><br><span class="line">-- Installing: /usr/local/bin/imagenet-camera.py</span><br><span class="line">-- Installing: /usr/local/bin/imagenet-console.py</span><br><span class="line">-- Installing: /usr/local/bin/my-detection.py</span><br><span class="line">-- Installing: /usr/local/bin/my-recognition.py</span><br><span class="line">-- Installing: /usr/local/bin/segnet-batch.py</span><br><span class="line">-- Installing: /usr/local/bin/segnet-camera.py</span><br><span class="line">-- Installing: /usr/local/bin/segnet-console.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson_inference_python.so</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/lib/python2.7/dist-packages/jetson_inference_python.so&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Up-to-date: /usr/lib/python2.7/dist-packages/Jetson</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/Inference</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/Jetson/Inference/__init__.py</span><br><span class="line">-- Up-to-date: /usr/lib/python2.7/dist-packages/jetson</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/inference</span><br><span class="line">-- Installing: /usr/lib/python2.7/dist-packages/jetson/inference/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson_inference_python.so</span><br><span class="line">-- Set runtime path of <span class="string">&quot;/usr/lib/python3.6/dist-packages/jetson_inference_python.so&quot;</span> to <span class="string">&quot;&quot;</span></span><br><span class="line">-- Up-to-date: /usr/lib/python3.6/dist-packages/Jetson</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/Inference</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/Jetson/Inference/__init__.py</span><br><span class="line">-- Up-to-date: /usr/lib/python3.6/dist-packages/jetson</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/__init__.py</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/inference</span><br><span class="line">-- Installing: /usr/lib/python3.6/dist-packages/jetson/inference/__init__.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The project will be built to <code>jetson-inference/build/aarch64</code>, with the following directory structure:</p>
<pre><code>|-build
  \aarch64
      \bin             where the sample binaries are built to
        \networks     where the network models are stored
        \images       where the test images are stored
      \include         where the headers reside
      \lib             where the libraries are build to
</code></pre>
<blockquote>
<p>These also get installed under <code>/usr/local/</code><br>The Python bindings for the <code>jetson.inference</code> and <code>jetson.utils</code> modules also get installed under <code>/usr/lib/python*/dist-packages/</code>. </p>
</blockquote>
<p>view <code>libjetson-utils</code> and <code>libjetson-inference</code> in <code>lib</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree build/aarch64/lib</span><br><span class="line">.</span><br><span class="line">├── libjetson-inference.so</span><br><span class="line">├── libjetson-utils.so</span><br><span class="line">└── python</span><br><span class="line">    ├── 2.7</span><br><span class="line">    │   ├── jetson_inference_python.so</span><br><span class="line">    │   └── jetson_utils_python.so</span><br><span class="line">    └── 3.6</span><br><span class="line">        ├── jetson_inference_python.so</span><br><span class="line">        └── jetson_utils_python.so</span><br><span class="line"></span><br><span class="line">3 directories, 6 files</span><br></pre></td></tr></table></figure>

<p><code>libjetson-inference.so</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldd libjetson-inference.so </span><br><span class="line"></span><br><span class="line">	linux-vdso.so.1 (0x0000007fa6e8c000)</span><br><span class="line">	libpthread.so.0 =&gt; /lib/aarch64-linux-gnu/libpthread.so.0 (0x0000007fa6cf3000)</span><br><span class="line">	libdl.so.2 =&gt; /lib/aarch64-linux-gnu/libdl.so.2 (0x0000007fa6cde000)</span><br><span class="line">	librt.so.1 =&gt; /lib/aarch64-linux-gnu/librt.so.1 (0x0000007fa6cc7000)</span><br><span class="line">	libjetson-utils.so =&gt; /home/nano/git/jetson-inference/build/aarch64/lib/libjetson-utils.so (0x0000007fa6b6f000)</span><br><span class="line">	libnvinfer.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvinfer.so.5 (0x0000007f9dc23000)</span><br><span class="line">	libnvinfer_plugin.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.5 (0x0000007f9d94d000)</span><br><span class="line">	libnvparsers.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvparsers.so.5 (0x0000007f9d60e000)</span><br><span class="line">	libnvonnxparser.so.0 =&gt; /usr/lib/aarch64-linux-gnu/libnvonnxparser.so.0 (0x0000007f9d1ea000)</span><br><span class="line">	libopencv_calib3d.so.3.3 =&gt; /usr/lib/libopencv_calib3d.so.3.3 (0x0000007f9d0be000)</span><br><span class="line">	libopencv_core.so.3.3 =&gt; /usr/lib/libopencv_core.so.3.3 (0x0000007f9cde9000)</span><br><span class="line">	libstdc++.so.6 =&gt; /usr/lib/aarch64-linux-gnu/libstdc++.so.6 (0x0000007f9cc56000)</span><br><span class="line">	libm.so.6 =&gt; /lib/aarch64-linux-gnu/libm.so.6 (0x0000007f9cb9c000)</span><br><span class="line">	libgcc_s.so.1 =&gt; /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000007f9cb78000)</span><br><span class="line">	libc.so.6 =&gt; /lib/aarch64-linux-gnu/libc.so.6 (0x0000007f9ca1f000)</span><br><span class="line">	/lib/ld-linux-aarch64.so.1 (0x0000007fa6e61000)</span><br><span class="line">	libGL.so.1 =&gt; /usr/lib/aarch64-linux-gnu/libGL.so.1 (0x0000007f9c920000)</span><br><span class="line">	libGLEW.so.2.0 =&gt; /usr/lib/aarch64-linux-gnu/libGLEW.so.2.0 (0x0000007f9c874000)</span><br><span class="line">	libgstreamer-1.0.so.0 =&gt; /usr/lib/aarch64-linux-gnu/libgstreamer-1.0.so.0 (0x0000007f9c744000)</span><br><span class="line">	libgstapp-1.0.so.0 =&gt; /usr/lib/aarch64-linux-gnu/libgstapp-1.0.so.0 (0x0000007f9c726000)</span><br><span class="line">	libcudnn.so.7 =&gt; /usr/lib/aarch64-linux-gnu/libcudnn.so.7 (0x0000007f858c0000)</span><br><span class="line">	libcublas.so.10.0 =&gt; /usr/local/cuda-10.0/targets/aarch64-linux/lib/libcublas.so.10.0 (0x0000007f7ff59000)</span><br><span class="line">	libcudart.so.10.0 =&gt; /usr/local/cuda-10.0/targets/aarch64-linux/lib/libcudart.so.10.0 (0x0000007f7fee8000)</span><br><span class="line">	libopencv_flann.so.3.3 =&gt; /usr/lib/libopencv_flann.so.3.3 (0x0000007f7fe85000)</span><br><span class="line">	libopencv_imgproc.so.3.3 =&gt; /usr/lib/libopencv_imgproc.so.3.3 (0x0000007f7f6b8000)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="imageNet-demo"><a href="#imageNet-demo" class="headerlink" title="imageNet demo"></a>imageNet demo</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><pre><code>$ cd etson-inference/build/aarch64/bin
$ sudo ./imagenet-console --network=resnet-18 images/orange_0.jpg output_0.jpg
</code></pre>
<p>output</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">imageNet -- loading classification network model from:</span><br><span class="line">         -- prototxt     networks/ResNet-18/deploy.prototxt</span><br><span class="line">         -- model        networks/ResNet-18/ResNet-18.caffemodel</span><br><span class="line">         -- class_labels networks/ilsvrc12_synset_words.txt</span><br><span class="line">         -- input_blob   <span class="string">&#x27;data&#x27;</span></span><br><span class="line">         -- output_blob  <span class="string">&#x27;prob&#x27;</span></span><br><span class="line">         -- batch_size   1</span><br><span class="line"></span><br><span class="line">[TRT]   TensorRT version 5.1.6</span><br><span class="line">[TRT]   loading NVIDIA plugins...</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - GridAnchor_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - NMS_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Reorg_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Region_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Clip_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - LReLU_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - PriorBox_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Normalize_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - RPROI_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - BatchedNMS_TRT</span><br><span class="line">[TRT]   completed loading NVIDIA plugins.</span><br><span class="line">[TRT]   detected model format - caffe  (extension <span class="string">&#x27;.caffemodel&#x27;</span>)</span><br><span class="line">[TRT]   desired precision specified <span class="keyword">for</span> GPU: FASTEST</span><br><span class="line">[TRT]   requested fasted precision <span class="keyword">for</span> device GPU without providing valid calibrator, disabling INT8</span><br><span class="line">[TRT]   native precisions detected <span class="keyword">for</span> GPU:  FP32, FP16</span><br><span class="line">[TRT]   selecting fastest native precision <span class="keyword">for</span> GPU:  FP16</span><br><span class="line">[TRT]   attempting to open engine cache file networks/ResNet-18/ResNet-18.caffemodel.1.1.GPU.FP16.engine</span><br><span class="line">[TRT]   cache file not found, profiling network model on device GPU</span><br><span class="line">[TRT]   device GPU, loading networks/ResNet-18/deploy.prototxt networks/ResNet-18/ResNet-18.caffemodel</span><br><span class="line">[TRT]   retrieved Output tensor <span class="string">&quot;prob&quot;</span>:  1000x1x1</span><br><span class="line">[TRT]   retrieved Input tensor <span class="string">&quot;data&quot;</span>:  3x224x224</span><br><span class="line">[TRT]   device GPU, configuring CUDA engine</span><br><span class="line">[TRT]   device GPU, building FP16:  ON</span><br><span class="line">[TRT]   device GPU, building INT8:  OFF</span><br><span class="line">[TRT]   device GPU, building CUDA engine (this may take a few minutes the first time a network is loaded)</span><br><span class="line">[TRT]   device GPU, completed building CUDA engine</span><br><span class="line">[TRT]   network profiling complete, writing engine cache to networks/ResNet-18/ResNet-18.caffemodel.1.1.GPU.FP16.engine</span><br><span class="line">[TRT]   device GPU, completed writing engine cache to networks/ResNet-18/ResNet-18.caffemodel.1.1.GPU.FP16.engine</span><br><span class="line">[TRT]   device GPU, networks/ResNet-18/ResNet-18.caffemodel loaded</span><br><span class="line">[TRT]   device GPU, CUDA engine context initialized with 2 bindings</span><br><span class="line">[TRT]   binding -- index   0</span><br><span class="line">               -- name    <span class="string">&#x27;data&#x27;</span></span><br><span class="line">               -- <span class="built_in">type</span>    FP32</span><br><span class="line">               -- <span class="keyword">in</span>/out  INPUT</span><br><span class="line">               -- <span class="comment"># dims  3</span></span><br><span class="line">               -- dim <span class="comment">#0  3 (CHANNEL)</span></span><br><span class="line">               -- dim <span class="comment">#1  224 (SPATIAL)</span></span><br><span class="line">               -- dim <span class="comment">#2  224 (SPATIAL)</span></span><br><span class="line">[TRT]   binding -- index   1</span><br><span class="line">               -- name    <span class="string">&#x27;prob&#x27;</span></span><br><span class="line">               -- <span class="built_in">type</span>    FP32</span><br><span class="line">               -- <span class="keyword">in</span>/out  OUTPUT</span><br><span class="line">               -- <span class="comment"># dims  3</span></span><br><span class="line">               -- dim <span class="comment">#0  1000 (CHANNEL)</span></span><br><span class="line">               -- dim <span class="comment">#1  1 (SPATIAL)</span></span><br><span class="line">               -- dim <span class="comment">#2  1 (SPATIAL)</span></span><br><span class="line">[TRT]   binding to input 0 data  binding index:  0</span><br><span class="line">[TRT]   binding to input 0 data  dims (b=1 c=3 h=224 w=224) size=602112</span><br><span class="line">[TRT]   binding to output 0 prob  binding index:  1</span><br><span class="line">[TRT]   binding to output 0 prob  dims (b=1 c=1000 h=1 w=1) size=4000</span><br><span class="line">device GPU, networks/ResNet-18/ResNet-18.caffemodel initialized.</span><br><span class="line">[TRT]   networks/ResNet-18/ResNet-18.caffemodel loaded</span><br><span class="line">imageNet -- loaded 1000 class info entries</span><br><span class="line">networks/ResNet-18/ResNet-18.caffemodel initialized.</span><br><span class="line">[image] loaded <span class="string">&#x27;images/orange_0.jpg&#x27;</span>  (1920 x 1920, 3 channels)</span><br><span class="line">class 0950 - 0.996028  (orange)</span><br><span class="line">imagenet-console:  <span class="string">&#x27;images/orange_0.jpg&#x27;</span> -&gt; 99.60276% class <span class="comment">#950 (orange)</span></span><br><span class="line"></span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line">[TRT]   Timing Report networks/ResNet-18/ResNet-18.caffemodel</span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line">[TRT]   Pre-Process   CPU   0.10824ms  CUDA   0.34156ms</span><br><span class="line">[TRT]   Network       CPU  12.91854ms  CUDA  12.47026ms</span><br><span class="line">[TRT]   Post-Process  CPU   0.80311ms  CUDA   0.82672ms</span><br><span class="line">[TRT]   Total         CPU  13.82989ms  CUDA  13.63854ms</span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line"></span><br><span class="line">[TRT]   note -- when processing a single image, run <span class="string">&#x27;sudo jetson_clocks&#x27;</span> before</span><br><span class="line">                to <span class="built_in">disable</span> DVFS <span class="keyword">for</span> more accurate profiling/timing measurements</span><br><span class="line"></span><br><span class="line">imagenet-console:  attempting to save output image to <span class="string">&#x27;output_0.jpg&#x27;</span></span><br><span class="line">imagenet-console:  completed saving <span class="string">&#x27;output_0.jpg&#x27;</span></span><br><span class="line">imagenet-console:  shutting down...</span><br><span class="line">imagenet-console:  shutdown complete</span><br></pre></td></tr></table></figure>


<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre><code>$ cd etson-inference/build/aarch64/bin
$ sudo ./imagenet-console.py --network=resnet-18 images/orange_0.jpg output_0.jpg
</code></pre>
<p>output</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jetson.inference.__init__.py</span><br><span class="line">jetson.inference -- initializing Python 2.7 bindings...</span><br><span class="line">jetson.inference -- registering module types...</span><br><span class="line">jetson.inference -- <span class="keyword">done</span> registering module types</span><br><span class="line">jetson.inference -- <span class="keyword">done</span> Python 2.7 binding initialization</span><br><span class="line">jetson.utils.__init__.py</span><br><span class="line">jetson.utils -- initializing Python 2.7 bindings...</span><br><span class="line">jetson.utils -- registering module <span class="built_in">functions</span>...</span><br><span class="line">jetson.utils -- <span class="keyword">done</span> registering module <span class="built_in">functions</span></span><br><span class="line">jetson.utils -- registering module types...</span><br><span class="line">jetson.utils -- <span class="keyword">done</span> registering module types</span><br><span class="line">jetson.utils -- <span class="keyword">done</span> Python 2.7 binding initialization</span><br><span class="line">[image] loaded <span class="string">&#x27;images/orange_0.jpg&#x27;</span>  (1920 x 1920, 3 channels)</span><br><span class="line">jetson.inference -- PyTensorNet_New()</span><br><span class="line">jetson.inference -- PyImageNet_Init()</span><br><span class="line">jetson.inference -- imageNet loading network using argv <span class="built_in">command</span> line params</span><br><span class="line">jetson.inference -- imageNet.__init__() argv[0] = <span class="string">&#x27;./imagenet-console.py&#x27;</span></span><br><span class="line">jetson.inference -- imageNet.__init__() argv[1] = <span class="string">&#x27;--network=resnet-18&#x27;</span></span><br><span class="line">jetson.inference -- imageNet.__init__() argv[2] = <span class="string">&#x27;images/orange_0.jpg&#x27;</span></span><br><span class="line">jetson.inference -- imageNet.__init__() argv[3] = <span class="string">&#x27;output_0.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">imageNet -- loading classification network model from:</span><br><span class="line">         -- prototxt     networks/ResNet-18/deploy.prototxt</span><br><span class="line">         -- model        networks/ResNet-18/ResNet-18.caffemodel</span><br><span class="line">         -- class_labels networks/ilsvrc12_synset_words.txt</span><br><span class="line">         -- input_blob   <span class="string">&#x27;data&#x27;</span></span><br><span class="line">         -- output_blob  <span class="string">&#x27;prob&#x27;</span></span><br><span class="line">         -- batch_size   1</span><br><span class="line"></span><br><span class="line">[TRT]   TensorRT version 5.1.6</span><br><span class="line">[TRT]   loading NVIDIA plugins...</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - GridAnchor_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - NMS_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Reorg_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Region_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Clip_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - LReLU_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - PriorBox_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - Normalize_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - RPROI_TRT</span><br><span class="line">[TRT]   Plugin Creator registration succeeded - BatchedNMS_TRT</span><br><span class="line">[TRT]   completed loading NVIDIA plugins.</span><br><span class="line">[TRT]   detected model format - caffe  (extension <span class="string">&#x27;.caffemodel&#x27;</span>)</span><br><span class="line">[TRT]   desired precision specified <span class="keyword">for</span> GPU: FASTEST</span><br><span class="line">[TRT]   requested fasted precision <span class="keyword">for</span> device GPU without providing valid calibrator, disabling INT8</span><br><span class="line">[TRT]   native precisions detected <span class="keyword">for</span> GPU:  FP32, FP16</span><br><span class="line">[TRT]   selecting fastest native precision <span class="keyword">for</span> GPU:  FP16</span><br><span class="line">[TRT]   attempting to open engine cache file networks/ResNet-18/ResNet-18.caffemodel.1.1.GPU.FP16.engine</span><br><span class="line">[TRT]   loading network profile from engine cache... networks/ResNet-18/ResNet-18.caffemodel.1.1.GPU.FP16.engine</span><br><span class="line">[TRT]   device GPU, networks/ResNet-18/ResNet-18.caffemodel loaded</span><br><span class="line">[TRT]   device GPU, CUDA engine context initialized with 2 bindings</span><br><span class="line">[TRT]   binding -- index   0</span><br><span class="line">               -- name    <span class="string">&#x27;data&#x27;</span></span><br><span class="line">               -- <span class="built_in">type</span>    FP32</span><br><span class="line">               -- <span class="keyword">in</span>/out  INPUT</span><br><span class="line">               -- <span class="comment"># dims  3</span></span><br><span class="line">               -- dim <span class="comment">#0  3 (CHANNEL)</span></span><br><span class="line">               -- dim <span class="comment">#1  224 (SPATIAL)</span></span><br><span class="line">               -- dim <span class="comment">#2  224 (SPATIAL)</span></span><br><span class="line">[TRT]   binding -- index   1</span><br><span class="line">               -- name    <span class="string">&#x27;prob&#x27;</span></span><br><span class="line">               -- <span class="built_in">type</span>    FP32</span><br><span class="line">               -- <span class="keyword">in</span>/out  OUTPUT</span><br><span class="line">               -- <span class="comment"># dims  3</span></span><br><span class="line">               -- dim <span class="comment">#0  1000 (CHANNEL)</span></span><br><span class="line">               -- dim <span class="comment">#1  1 (SPATIAL)</span></span><br><span class="line">               -- dim <span class="comment">#2  1 (SPATIAL)</span></span><br><span class="line">[TRT]   binding to input 0 data  binding index:  0</span><br><span class="line">[TRT]   binding to input 0 data  dims (b=1 c=3 h=224 w=224) size=602112</span><br><span class="line">[TRT]   binding to output 0 prob  binding index:  1</span><br><span class="line">[TRT]   binding to output 0 prob  dims (b=1 c=1000 h=1 w=1) size=4000</span><br><span class="line">device GPU, networks/ResNet-18/ResNet-18.caffemodel initialized.</span><br><span class="line">[TRT]   networks/ResNet-18/ResNet-18.caffemodel loaded</span><br><span class="line">imageNet -- loaded 1000 class info entries</span><br><span class="line">networks/ResNet-18/ResNet-18.caffemodel initialized.</span><br><span class="line">class 0950 - 0.996028  (orange)</span><br><span class="line">image is recognized as <span class="string">&#x27;orange&#x27;</span> (class <span class="comment">#950) with 99.602759% confidence</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line">[TRT]   Timing Report networks/ResNet-18/ResNet-18.caffemodel</span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line">[TRT]   Pre-Process   CPU   0.06884ms  CUDA   0.32849ms</span><br><span class="line">[TRT]   Network       CPU  11.44888ms  CUDA  11.01536ms</span><br><span class="line">[TRT]   Post-Process  CPU   0.20783ms  CUDA   0.20708ms</span><br><span class="line">[TRT]   Total         CPU  11.72555ms  CUDA  11.55094ms</span><br><span class="line">[TRT]   ------------------------------------------------</span><br><span class="line"></span><br><span class="line">[TRT]   note -- when processing a single image, run <span class="string">&#x27;sudo jetson_clocks&#x27;</span> before</span><br><span class="line">                to <span class="built_in">disable</span> DVFS <span class="keyword">for</span> more accurate profiling/timing measurements</span><br><span class="line"></span><br><span class="line">jetson.utils -- PyFont_New()</span><br><span class="line">jetson.utils -- PyFont_Init()</span><br><span class="line">jetson.utils -- PyFont_Dealloc()</span><br><span class="line">jetson.utils -- freeing CUDA mapped memory</span><br><span class="line">PyTensorNet_Dealloc()</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="my-recognition"><a href="#my-recognition" class="headerlink" title="my-recognition"></a>my-recognition</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build</span></span><br><span class="line">$ <span class="built_in">cd</span> jetson-inference/examples/my-recognition</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake-gui ..</span><br></pre></td></tr></table></figure>

<p><img src="https://kezunlin.me/images/posts/1864218-20191220111051661-1411779322.png" alt="my-recognition cmake-gui"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile </span></span><br><span class="line">$ make </span><br><span class="line"></span><br><span class="line">Scanning dependencies of target my-recognition</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/my-recognition.dir/my-recognition.cpp.o</span><br><span class="line">[100%] Linking CXX executable my-recognition</span><br><span class="line">[100%] Built target my-recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># view libraries</span></span><br><span class="line">$ ldd my-recognition </span><br><span class="line">	linux-vdso.so.1 (0x0000007fb5546000)</span><br><span class="line">	libjetson-inference.so =&gt; /usr/local/lib/libjetson-inference.so (0x0000007fb53ea000)</span><br><span class="line">	libjetson-utils.so =&gt; /usr/local/lib/libjetson-utils.so (0x0000007fb5292000)</span><br><span class="line">	libstdc++.so.6 =&gt; /usr/lib/aarch64-linux-gnu/libstdc++.so.6 (0x0000007fb50db000)</span><br><span class="line">	libc.so.6 =&gt; /lib/aarch64-linux-gnu/libc.so.6 (0x0000007fb4f82000)</span><br><span class="line">	/lib/ld-linux-aarch64.so.1 (0x0000007fb551b000)</span><br><span class="line">	libpthread.so.0 =&gt; /lib/aarch64-linux-gnu/libpthread.so.0 (0x0000007fb4f56000)</span><br><span class="line">	libdl.so.2 =&gt; /lib/aarch64-linux-gnu/libdl.so.2 (0x0000007fb4f41000)</span><br><span class="line">	librt.so.1 =&gt; /lib/aarch64-linux-gnu/librt.so.1 (0x0000007fb4f2a000)</span><br><span class="line">	libnvinfer.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvinfer.so.5 (0x0000007fabfde000)</span><br><span class="line">	libnvinfer_plugin.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.5 (0x0000007fabd08000)</span><br><span class="line">	libnvparsers.so.5 =&gt; /usr/lib/aarch64-linux-gnu/libnvparsers.so.5 (0x0000007fab9c9000)</span><br><span class="line">	libnvonnxparser.so.0 =&gt; /usr/lib/aarch64-linux-gnu/libnvonnxparser.so.0 (0x0000007fab5a5000)</span><br><span class="line">	libopencv_calib3d.so.3.3 =&gt; /usr/lib/libopencv_calib3d.so.3.3 (0x0000007fab479000)</span><br><span class="line">	libopencv_core.so.3.3 =&gt; /usr/lib/libopencv_core.so.3.3 (0x0000007fab1a4000)</span><br></pre></td></tr></table></figure>

<p>run and get result</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./build/my-recognition polar_bear.jpg</span><br><span class="line"></span><br><span class="line">class 0296 - 0.997434  (ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus)</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- kzl in-article ad -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5653382914441020"
     data-ad-slot="7925631830"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="imagenet-camera"><a href="#imagenet-camera" class="headerlink" title="imagenet-camera"></a>imagenet-camera</h3><p><code>imagenet-camera</code> usage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./imagenet-camera --<span class="built_in">help</span></span><br><span class="line">usage: imagenet-camera [-h] [--network NETWORK] [--camera CAMERA]</span><br><span class="line">                       [--width WIDTH] [--height HEIGHT]</span><br><span class="line"></span><br><span class="line">Classify a live camera stream using an image recognition DNN.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --network NETWORK pre-trained model to load (see below <span class="keyword">for</span> options)</span><br><span class="line">  --camera CAMERA   index of the MIPI CSI camera to use (e.g. CSI camera 0),</span><br><span class="line">                    or <span class="keyword">for</span> VL42 cameras, the /dev/video device to use.</span><br><span class="line">                    by default, MIPI CSI camera 0 will be used.</span><br><span class="line">  --width WIDTH     desired width of camera stream (default is 1280 pixels)</span><br><span class="line">  --height HEIGHT   desired height of camera stream (default is 720 pixels)</span><br><span class="line"></span><br><span class="line">imageNet arguments: </span><br><span class="line">  --network NETWORK    pre-trained model to load, one of the following:</span><br><span class="line">                           * alexnet</span><br><span class="line">                           * googlenet (default)</span><br><span class="line">                           * googlenet-12</span><br><span class="line">                           * resnet-18</span><br><span class="line">                           * resnet-50</span><br><span class="line">                           * resnet-101</span><br><span class="line">                           * resnet-152</span><br><span class="line">                           * vgg-16</span><br><span class="line">                           * vgg-19</span><br><span class="line">                           * inception-v4</span><br><span class="line">  --model MODEL        path to custom model to load (caffemodel, uff, or onnx)</span><br><span class="line">  --prototxt PROTOTXT  path to custom prototxt to load (<span class="keyword">for</span> .caffemodel only)</span><br><span class="line">  --labels LABELS      path to text file containing the labels <span class="keyword">for</span> each class</span><br><span class="line">  --input_blob INPUT   name of the input layer (default is <span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">  --output_blob OUTPUT name of the output layer (default is <span class="string">&#x27;prob&#x27;</span>)</span><br><span class="line">  --batch_size BATCH   maximum batch size (default is 1)</span><br><span class="line">  --profile            <span class="built_in">enable</span> layer profiling <span class="keyword">in</span> TensorRT</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>camera type </p>
<ul>
<li><code>MIPI CSI cameras</code> are used by specifying the sensor index (<code>0</code> or <code>1</code>, ect.)</li>
<li><code>V4L2 USB cameras</code> are used by specifying their &#x2F;dev&#x2F;video node (<code>/dev/video0</code>, <code>/dev/video1</code>, ect.)<blockquote>
<p>The default is to use MIPI CSI sensor 0 (<code>--camera=0</code>)</p>
</blockquote>
</li>
</ul>
<p>Query the available formats with the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install -y v4l-utils</span><br><span class="line">$ v4l2-ctl --list-formats-ext</span><br><span class="line"></span><br><span class="line">ioctl: VIDIOC_ENUM_FMT</span><br><span class="line">	Index       : 0</span><br><span class="line">	Type        : Video Capture</span><br><span class="line">	Pixel Format: <span class="string">&#x27;MJPG&#x27;</span> (compressed)</span><br><span class="line">	Name        : Motion-JPEG</span><br><span class="line">		Size: Discrete 1920x1080</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 160x120</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 176x144</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 320x240</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 352x288</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 640x360</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 640x480</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 1280x720</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 1280x1024</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line"></span><br><span class="line">	Index       : 1</span><br><span class="line">	Type        : Video Capture</span><br><span class="line">	Pixel Format: <span class="string">&#x27;YUYV&#x27;</span></span><br><span class="line">	Name        : YUYV 4:2:2</span><br><span class="line">		Size: Discrete 1920x1080</span><br><span class="line">			Interval: Discrete 0.200s (5.000 fps)</span><br><span class="line">		Size: Discrete 160x120</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 176x144</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 320x240</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 352x288</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 640x360</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 640x480</span><br><span class="line">			Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">		Size: Discrete 1280x720</span><br><span class="line">			Interval: Discrete 0.100s (10.000 fps)</span><br><span class="line">		Size: Discrete 1280x1024</span><br><span class="line">			Interval: Discrete 0.200s (5.000 fps)</span><br></pre></td></tr></table></figure>

<p>run demo </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./imagenet-camera --network=resnet-18  --camera=0 --width=640 --height=480</span><br></pre></td></tr></table></figure>


<h3 id="nvpmodel"><a href="#nvpmodel" class="headerlink" title="nvpmodel"></a>nvpmodel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nvpmodel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -q –-verbose <span class="comment"># 查看当前的模式</span></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -p –-verbose <span class="comment"># 打印支持的所有模式及其配置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -m 0 <span class="comment"># 启动最高性能，此时所有CPU均已启动，但对应的主频还不是最高的</span></span><br><span class="line"><span class="built_in">sudo</span> ~/jetson_clocks.sh <span class="comment"># 开启最大频率</span></span><br></pre></td></tr></table></figure>


<h2 id="Use-DeepStream-On-Jetson-Nano"><a href="#Use-DeepStream-On-Jetson-Nano" class="headerlink" title="Use DeepStream On Jetson Nano"></a>Use DeepStream On Jetson Nano</h2><h3 id="install-DeepStream-SDK"><a href="#install-DeepStream-SDK" class="headerlink" title="install DeepStream SDK"></a>install DeepStream SDK</h3><ul>
<li><p>DeepStream SDK 4.0.1 </p>
<blockquote>
<p><code>DeepStream SDK 4.0.1</code> requires the installation of <code>JetPack 4.2.2</code>.<br> donwload <code>deepstream_sdk_v4.0.1_jetson.tbz2</code> from <a href="https://developer.nvidia.com/deepstream-download">here</a></p>
</blockquote>
</li>
<li><p>DeepStream SDK 4.0.2 </p>
<blockquote>
<p><code>DeepStream SDK 4.0.2</code> requires the installation of <code>JetPack 4.3</code>.<br>donwload <code>deepstream_sdk_v4.0.2_jetson.tbz2</code> or <code>deepstream-4.0_4.0.2-1_arm64.deb</code> from <a href="https://developer.nvidia.com/deepstream-download">here</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (1) install prerequisite packages for installing the DeepStream SDK </span></span><br><span class="line"><span class="built_in">sudo</span> apt install \</span><br><span class="line">    libssl1.0.0 \</span><br><span class="line">    libgstreamer1.0-0 \</span><br><span class="line">    gstreamer1.0-tools \</span><br><span class="line">    gstreamer1.0-plugins-good \</span><br><span class="line">    gstreamer1.0-plugins-bad \</span><br><span class="line">    gstreamer1.0-plugins-ugly \</span><br><span class="line">    gstreamer1.0-libav \</span><br><span class="line">    libgstrtspserver-1.0-0 \</span><br><span class="line">    libjansson4=2.11-1</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install librdkafka1=0.11.3-1build1</span><br><span class="line"></span><br><span class="line"><span class="comment"># (1) install deepstream sdk from tar file </span></span><br><span class="line">tar -xpvf deepstream_sdk_v4.0.2_jetson.tbz2</span><br><span class="line"><span class="built_in">cd</span> deepstream_sdk_v4.0.2_jetson</span><br><span class="line"><span class="built_in">sudo</span> tar -xvpf binaries.tbz2 -C /</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) or install deepstream sdk from deb </span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install ./deepstream-4.0_4.0.2-1_arm64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment">## NOTE: sources and samples folders will be found in /opt/nvidia/deepstream/deepstream-4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># To boost the clocks</span></span><br><span class="line"><span class="comment"># After you have installed DeepStream SDK, </span></span><br><span class="line"><span class="comment"># run these commands on the Jetson device to boost the clocks:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nvpmodel -m 0 </span><br><span class="line"><span class="built_in">sudo</span> jetson_clocks</span><br></pre></td></tr></table></figure>

<h3 id="running-deepstream-app"><a href="#running-deepstream-app" class="headerlink" title="running deepstream-app"></a>running deepstream-app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ deepstream-app --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  deepstream-app [OPTION?] Nvidia DeepStream Demo</span><br><span class="line"></span><br><span class="line">Help Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>                        Show <span class="built_in">help</span> options</span><br><span class="line">  --help-all                        Show all <span class="built_in">help</span> options</span><br><span class="line">  --help-gst                        Show GStreamer Options</span><br><span class="line"></span><br><span class="line">Application Options:</span><br><span class="line">  -v, --version                     Print DeepStreamSDK version</span><br><span class="line">  -t, --tiledtext                   Display Bounding box labels <span class="keyword">in</span> tiled mode</span><br><span class="line">  --version-all                     Print DeepStreamSDK and dependencies version</span><br><span class="line">  -c, --cfg-file                    Set the config file</span><br><span class="line">  -i, --input-file                  Set the input file</span><br></pre></td></tr></table></figure>

<blockquote>
<p>deepstream-app -c <path_to_config_file></p>
</blockquote>
<p>export GST_PLUGIN_PATH&#x3D;”&#x2F;usr&#x2F;lib&#x2F;aarch64-linux-gnu&#x2F;gstreamer-1.0&#x2F;“</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/nvidia/deepstream/deepstream-4.0/sources/apps/sample_apps/deepstream-test1$ deepstream-test1-app ~/video/pengpeng.avi </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/nvidia/deepstream/deepstream-4.0/samples/configs/deepstream-app</span><br><span class="line">deepstream-app -c config_infer_primary_nano.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># error occurs</span></span><br><span class="line">** ERROR: &lt;create_multi_source_bin:682&gt;: Failed to create element <span class="string">&#x27;src_bin_muxer&#x27;</span></span><br><span class="line">** ERROR: &lt;create_multi_source_bin:745&gt;: create_multi_source_bin failed</span><br><span class="line">** ERROR: &lt;create_pipeline:1045&gt;: create_pipeline failed</span><br><span class="line">** ERROR: &lt;main:632&gt;: Failed to create pipeline</span><br><span class="line">Quitting</span><br><span class="line">App run failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># solutions </span></span><br><span class="line"><span class="built_in">rm</span> ~/.cache/gstreamer-1.0/registry.aarch64.bin </span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line">deepstream-app -c config_infer_primary_nano.txt </span><br><span class="line"></span><br><span class="line">(deepstream-app:16051): GStreamer-CRITICAL **: 16:31:26.057: gst_element_get_static_pad: assertion <span class="string">&#x27;GST_IS_ELEMENT (element)&#x27;</span> failed</span><br><span class="line">Segmentation fault (core dumped)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.nvidia.com/embedded/twodaystoademo">twodaystoademo</a></li>
<li><a href="https://developer.nvidia.com/embedded/jetson-nano-dl-inference-benchmarks">jetson-nano-dl-inference-benchmarks</a></li>
<li><a href="https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write">get-started-jetson-nano-devkit</a></li>
<li><a href="https://www.stereolabs.com/blog/getting-started-with-jetson-nano/">getting-started-with-jetson-nano</a></li>
<li><a href="https://devtalk.nvidia.com/default/topic/1049855/jetson-nano/jetson-nano-sd-card-image-abnormal/">jetson-nano-sd-card-image-abnormal</a></li>
<li><a href="https://www.pyimagesearch.com/2019/05/06/getting-started-with-the-nvidia-jetson-nano/">getting-started-with-the-nvidia-jetson-nano</a></li>
<li><a href="https://www.jetsonhacks.com/2019/10/01/jetson-nano-visual-studio-code-python/">jetson-nano-visual-studio-code-python</a></li>
<li><a href="https://github.com/JetsonHacksNano/installVSCode">installVSCode on jetson nano</a></li>
<li><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/index.html#page/DeepStream_Development_Guide/deepstream_quick_start.html#wwpID0E2HA">deepstream sdk</a></li>
<li><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/index.html#page/DeepStream%2520Development%2520Guide%2Fdeepstream_quick_start.html%23wwpID0E0BB0HA">deepstream app</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;12&#x2F;09: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>Jetson Nano</tag>
        <tag>Jetson TX1</tag>
        <tag>Jetson TX2</tag>
        <tag>Jetson AGX Xaiver</tag>
        <tag>JetPack SDK</tag>
        <tag>TensorRT</tag>
        <tag>jetson-inference</tag>
      </tags>
  </entry>
  <entry>
    <title>how to get alexa rank with python xml and save to csv using pandas</title>
    <url>//blog/how-to-get-alexa-rank-with-python-xml-and-save-to-csv-using-pandas/</url>
    <content><![CDATA[<h2 id="How-to-get-alexa-rank"><a href="#How-to-get-alexa-rank" class="headerlink" title="How to get alexa rank"></a>How to get alexa rank</h2><h3 id="xml-demo"><a href="#xml-demo" class="headerlink" title="xml demo"></a>xml demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;ALEXA VER=&quot;0.9&quot; URL=&quot;kezunlin.me/&quot; HOME=&quot;0&quot; AID=&quot;=&quot; IDN=&quot;kezunlin.me/&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;RLS PREFIX=&quot;http://&quot; more=&quot;0&quot;&gt; &lt;/RLS&gt;</span></span><br><span class="line"><span class="string">    &lt;SD TITLE=&quot;A&quot; FLAGS=&quot;&quot; HOST=&quot;kezunlin.me&quot;&gt; &lt;/SD&gt;</span></span><br><span class="line"><span class="string">    &lt;SD&gt;</span></span><br><span class="line"><span class="string">        &lt;POPULARITY URL=&quot;kezunlin.me/&quot; TEXT=&quot;2489312&quot; SOURCE=&quot;panel&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;REACH RANK=&quot;2141483&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;RANK DELTA=&quot;-1406486&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/SD&gt;</span></span><br><span class="line"><span class="string">&lt;/ALEXA&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">root = ElementTree.fromstring(content) </span><br><span class="line"><span class="comment"># obj.tag, obj.attrib </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, value <span class="keyword">in</span> root.attrib.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;=&quot;&#123;1&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(name, value))</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line">    <span class="built_in">print</span>(child.tag, child.attrib)</span><br></pre></td></tr></table></figure>

<h3 id="pandas-demo"><a href="#pandas-demo" class="headerlink" title="pandas demo"></a>pandas demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo_create_dataframe_1</span>():</span><br><span class="line">    <span class="comment"># initialize list of lists </span></span><br><span class="line">    data = [[<span class="string">&#x27;tom&#x27;</span>, <span class="number">10</span>], [<span class="string">&#x27;nick&#x27;</span>, <span class="number">15</span>], [<span class="string">&#x27;juli&#x27;</span>, <span class="number">14</span>]] </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create the pandas DataFrame </span></span><br><span class="line">    df = pd.DataFrame(data, columns = [<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># print dataframe. </span></span><br><span class="line">    <span class="built_in">print</span>(df) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_create_dataframe_2</span>():</span><br><span class="line">    <span class="comment"># intialise data of lists. </span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;krish&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>:[<span class="number">20</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">18</span>]&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create DataFrame </span></span><br><span class="line">    df = pd.DataFrame(data) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Print the output. </span></span><br><span class="line">    <span class="built_in">print</span>(df) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_append_dataframe</span>():</span><br><span class="line">    <span class="comment"># Creating the first Dataframe using dictionary </span></span><br><span class="line">    df1 = df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], </span><br><span class="line">                            <span class="string">&quot;b&quot;</span>:[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]&#125;) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Creating the Second Dataframe using dictionary </span></span><br><span class="line">    df2 = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">                        <span class="string">&quot;b&quot;</span>:[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]&#125;) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Print df1 </span></span><br><span class="line">    <span class="built_in">print</span>(df1, <span class="string">&quot;\n&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># to append df2 at the end of df1 dataframe </span></span><br><span class="line">    new_df = df1.append(df2, ignore_index = <span class="literal">True</span>)  <span class="comment"># 更新index</span></span><br><span class="line">    <span class="built_in">print</span>(new_df)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_pandas_index</span>():</span><br><span class="line">    data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;krish&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>:[<span class="number">20</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">18</span>]&#125; </span><br><span class="line">    df = pd.DataFrame(data) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># case1:</span></span><br><span class="line">    df.to_csv(<span class="string">&#x27;data.csv&#x27;</span>,index=<span class="literal">False</span>) </span><br><span class="line">    df = pd.read_csv(<span class="string">&#x27;file_name.csv&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># case2</span></span><br><span class="line">    df.to_csv(<span class="string">&#x27;data.csv &#x27;</span>, index=<span class="literal">True</span>) <span class="comment"># default with index</span></span><br><span class="line">    df_new = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>).drop([<span class="string">&#x27;unnamed 0&#x27;</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="get-rank-and-save-to-csv"><a href="#get-rank-and-save-to-csv" class="headerlink" title="get rank and save to csv"></a>get rank and save to csv</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_alexa_rank</span>(<span class="params">site=<span class="string">&quot;kezunlin.me&quot;</span></span>):</span><br><span class="line">    url = <span class="string">&quot;http://data.alexa.com/data?cli=10&amp;dat=snbamz&amp;url=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(site)</span><br><span class="line">    <span class="comment">#print(url)</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    rank = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment">#print(r.content)</span></span><br><span class="line">        root = ElementTree.fromstring(r.content) </span><br><span class="line">        rank = <span class="built_in">int</span>(root[<span class="number">2</span>][<span class="number">0</span>].attrib[<span class="string">&quot;TEXT&quot;</span>]) <span class="comment"># by index</span></span><br><span class="line">    <span class="keyword">return</span> rank </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;ALEXA VER=&quot;0.9&quot; URL=&quot;kezunlin.me/&quot; HOME=&quot;0&quot; AID=&quot;=&quot; IDN=&quot;kezunlin.me/&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;RLS PREFIX=&quot;http://&quot; more=&quot;0&quot;&gt; &lt;/RLS&gt;</span></span><br><span class="line"><span class="string">    &lt;SD TITLE=&quot;A&quot; FLAGS=&quot;&quot; HOST=&quot;kezunlin.me&quot;&gt; &lt;/SD&gt;</span></span><br><span class="line"><span class="string">    &lt;SD&gt;</span></span><br><span class="line"><span class="string">        &lt;POPULARITY URL=&quot;kezunlin.me/&quot; TEXT=&quot;2489312&quot; SOURCE=&quot;panel&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;REACH RANK=&quot;2141483&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;RANK DELTA=&quot;-1406486&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/SD&gt;</span></span><br><span class="line"><span class="string">&lt;/ALEXA&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_csv</span>(<span class="params">date_str,rank,csv_filepath=<span class="string">&#x27;rank.csv&#x27;</span></span>):</span><br><span class="line">    <span class="comment"># load existing df1</span></span><br><span class="line">    df1 = pd.read_csv(csv_filepath)</span><br><span class="line">    <span class="comment">#print(df1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create df2</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Date&#x27;</span>:[date_str], <span class="string">&#x27;Rank&#x27;</span>:[rank]&#125; </span><br><span class="line">    df2 = pd.DataFrame(data) </span><br><span class="line">    <span class="comment">#print(df2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># append </span></span><br><span class="line">    df = df1.append(df2, ignore_index = <span class="literal">True</span>)  <span class="comment"># 更新index</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save new df to csv</span></span><br><span class="line">    df.to_csv(csv_filepath, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(df)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Appending to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(csv_filepath))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># get rank</span></span><br><span class="line">    rank = get_alexa_rank(<span class="string">&quot;kezunlin.me&quot;</span>)</span><br><span class="line">    date = datetime.datetime.now()</span><br><span class="line">    date_str = date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;date = &#123;&#125; , rank = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(date_str, rank))</span><br><span class="line">    </span><br><span class="line">    save_to_csv(date_str,rank)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>output </p>
<pre><code>date = 2019-12-16 , rank = 2486318
Appending to rank.csv
</code></pre>
<p>view results</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> rank.csv </span><br><span class="line">Date,Rank</span><br><span class="line">2019-12-13,2489312</span><br><span class="line">2019-12-16,2486318</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/2/library/xml.etree.elementtree.html">xml.etree.elementtree</a></li>
<li><a href="https://stackoverflow.com/questions/20845213/how-to-avoid-python-pandas-creating-an-index-in-a-saved-csv">how-to-avoid-python-pandas-creating-an-index-in-a-saved-csv</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;12&#x2F;16: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>requests</tag>
        <tag>xml</tag>
        <tag>pandas</tag>
        <tag>alexa</tag>
      </tags>
  </entry>
  <entry>
    <title>python convert yaml to json</title>
    <url>//blog/python-convert-yaml-to-json/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="links-yaml"><a href="#links-yaml" class="headerlink" title="links.yaml"></a>links.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mylinks:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">nickname:</span> <span class="string">官方博客</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://kezunlin.me/images/kezunlin_avatar.jpg</span></span><br><span class="line">  <span class="attr">site:</span> <span class="string">https://kezunlin.me</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">C++</span> <span class="string">&amp;&amp;</span> <span class="string">Python.</span> <span class="string">CV</span> <span class="string">&amp;&amp;</span> <span class="string">DL.</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">nickname:</span> <span class="string">闪烁之狐</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://blinkfox.github.io/medias/logo.png</span></span><br><span class="line">  <span class="attr">site:</span> <span class="string">https://blinkfox.github.io/</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">blinkfox</span></span><br></pre></td></tr></table></figure>

<h3 id="output-json"><a href="#output-json" class="headerlink" title="output.json"></a>output.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://kezunlin.me/images/kezunlin_avatar.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;官方博客&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ &amp;&amp; Python. CV &amp;&amp; DL.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://kezunlin.me&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blinkfox.github.io/medias/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;闪烁之狐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blinkfox&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blinkfox.github.io/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">result_list = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./links.yaml&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    obj = yaml.load(f) <span class="comment"># dict </span></span><br><span class="line">    <span class="comment">#print(obj[&quot;mylinks&quot;])</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> obj[<span class="string">&quot;mylinks&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&quot;nickname&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&quot;avatar&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&quot;site&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&quot;info&quot;</span>])</span><br><span class="line">        new_item = &#123;</span><br><span class="line">            <span class="string">&quot;avatar&quot;</span>: item[<span class="string">&quot;avatar&quot;</span>],</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: item[<span class="string">&quot;nickname&quot;</span>],</span><br><span class="line">            <span class="string">&quot;introduction&quot;</span>: item[<span class="string">&quot;info&quot;</span>],</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: item[<span class="string">&quot;site&quot;</span>],</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;前去学习&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        result_list.append(new_item)</span><br><span class="line"></span><br><span class="line">str_pretty_result = json.dumps(</span><br><span class="line">    result_list, indent=<span class="number">4</span>, </span><br><span class="line">    sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;friends.json&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str_pretty_result)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;29: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install vscode on Nvidia Jetson Nano</title>
    <url>//blog/how-to-install-vscode-on-Nvidia-Jetson-Nano/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/4eb7fcec">Getting Started with Nvidia Jetson Nano</a></li>
<li><strong><a href="https://kezunlin.me/post/974aaa0a">how to install vscode on Nvidia Jetson Nano</a></strong></li>
<li><a href="https://kezunlin.me/post/d7b68f88">how to use vscode remote-ssh for Linux arm64 aarch64 platform such as Nvidia Jetson TX1 TX2 Nano</a></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/JetsonHacksNano/installVSCode.git</span><br><span class="line">$ <span class="built_in">cd</span> installVSCode</span><br><span class="line">$ ./installVSCode.sh</span><br><span class="line"></span><br><span class="line">Get:1 https://packagecloud.io/headmelted/codebuilds/debian stretch/main arm64 code-oss arm64 1.42.0-1575969886 [57.0 MB]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>code-oss</code> 1.42.0</p>
</blockquote>
<h3 id="method-2"><a href="#method-2" class="headerlink" title="method 2"></a>method 2</h3><p>download vscode from <a href="https://github.com/toolboc/vscode/releases/download/1.32.3/code-oss_1.32.3-arm64.deb">code-oss_1.32.3-arm64.deb</a> and install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dpkg -i code-oss_1.32.3-arm64.deb</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>code-oss</code> 1.32.3</p>
</blockquote>
<h2 id="Start-VSCode"><a href="#Start-VSCode" class="headerlink" title="Start VSCode"></a>Start VSCode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check version</span></span><br><span class="line">$ code-oss --version</span><br><span class="line">1.42.0</span><br><span class="line">d01e111fb0e6e27378fcd049bbc9b36d0833d78e</span><br><span class="line">arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># start vscode on nano</span></span><br><span class="line">$ code-oss</span><br></pre></td></tr></table></figure>

<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;12&#x2F;20: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>Jetson Nano</tag>
        <tag>code-oss</tag>
      </tags>
  </entry>
  <entry>
    <title>how to use vscode remote-ssh for Linux arm64 aarch64 platform such as Nvidia Jetson TX1 TX2 Nano</title>
    <url>//blog/how-to-use-vscode-remote-ssh-for-Linux-arm64-aarch64-platform-such-as-Nvidia-Jetson-TX1-TX2-Nano/</url>
    <content><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul>
<li><a href="https://kezunlin.me/post/4eb7fcec">Getting Started with Nvidia Jetson Nano</a></li>
<li><a href="https://kezunlin.me/post/974aaa0a">how to install vscode on Nvidia Jetson Nano</a></li>
<li><strong><a href="https://kezunlin.me/post/d7b68f88">how to use vscode remote-ssh for Linux arm64 aarch64 platform such as Nvidia Jetson TX1 TX2 Nano</a></strong></li>
</ul>
<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul>
<li>Host: Ubuntu 16.04&#x2F;18.04, VS Code Insiders</li>
<li>Target: ARM64 Jetson Nano, Ubuntu 18.04</li>
</ul>
<blockquote>
<p>for using <code>Remote-SSH</code> for Linux arm64 aarch64 platform such as Nvidia<br>  Jetson TX1 TX2 Nano, we have to install <code>VS Code Insiders</code> instead of normal <code>VS Code</code></p>
</blockquote>
<p>Steps as follow:</p>
<ol>
<li><p>donwload <code>code-insiders_1.42.0-1576733727_amd64.deb</code> from <a href="https://code.visualstudio.com/insiders/">here</a>.</p>
</li>
<li><p>install <code>VS Code Insiders</code> by </p>
<p> $ sudo dpkg -i code-insiders_1.42.0-1576733727_amd64.deb</p>
</li>
<li><p>start <code>VS Code Insiders</code></p>
<p> $ code-insiders</p>
</li>
<li><p>install <code>Remote-SSH</code> extension for <code>VS Code Insiders</code> and restart</p>
</li>
<li><p>Now we can use <code>VS Code Insiders</code> to connect to your Linux arm64 aarch64 platform such as Nvidia<br>  Jetson TX1 TX2 Nano</p>
</li>
</ol>
<p>check vscode version</p>
<ul>
<li><code>code</code>  1.40.1</li>
<li><code>code-insiders</code> 1.42.0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vscode </span></span><br><span class="line">$ code --version</span><br><span class="line">1.40.1</span><br><span class="line">8795a9889db74563ddd43eb0a897a2384129a619</span><br><span class="line">x64</span><br><span class="line">                                                                                              </span><br><span class="line"><span class="comment"># vscode insiders        </span></span><br><span class="line">$ code-insiders --version</span><br><span class="line">1.42.0-insider</span><br><span class="line">e74405d11443c5361c31e2bc341866d146eee206</span><br><span class="line">x64</span><br></pre></td></tr></table></figure>

<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;12&#x2F;20: created.</li>
</ul>
]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>Jetson Nano</tag>
        <tag>Jetson TX1</tag>
        <tag>Jetson TX2</tag>
        <tag>vscode-insiders</tag>
      </tags>
  </entry>
  <entry>
    <title>python requests exceptions proxyerror and solution</title>
    <url>//blog/python-requests-exceptions-proxyerror/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>when <code>r = requests.get(url)</code>, error occur:</p>
<blockquote>
<p>requests.exceptions.ProxyError: HTTPConnectionPool(host&#x3D;’127.0.0.1’, port&#x3D;8888):<br>Max retries exceeded with url: <a href="http://www.baidu.com/">http://www.baidu.com/</a> (Caused by ProxyError(‘Cannot<br>connect to proxy.’, NewConnectionError(‘&lt;urllib3.connection.HTTPConnection object<br>at 0x7f5611990080&gt;: Failed to establish a new connection: [Errno 111] Connection<br>refused’)))</p>
</blockquote>
<h3 id="solutions"><a href="#solutions" class="headerlink" title="solutions"></a>solutions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">env</span> | grep -i proxy </span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;127.0.0.1:8888&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;127.0.0.1:8888&#x27;</span></span><br><span class="line"><span class="built_in">export</span> ftp_proxy=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> socks_proxy=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>edit <code>~/.bashrc</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> ftp_proxy=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> socks_proxy=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>and run <code>source ~.bashrc</code></p>
<p>Now OK.</p>
<p>or by code </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://baidu.com&quot;</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2019&#x2F;11&#x2F;08: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>requests</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>crate graph with dot file using graphviz on linux</title>
    <url>//blog/crate-graph-with-dot-file-using-graphviz-on-linux/</url>
    <content><![CDATA[<h2 id="dot"><a href="#dot" class="headerlink" title="dot"></a>dot</h2><p>input.dot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph demo&#123;</span><br><span class="line">    1 -- 2</span><br><span class="line">    2 -- 3</span><br><span class="line">    3 -- 4</span><br><span class="line">    1 -- 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dot -Tpng input.dot &gt; out.png<br>dot -Tps input.dot &gt; output.eps</p>
<p>view results<br><img src="https://kezunlin.me/images/posts/1864218-20200117083221334-46055166.png" alt="out.png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://graphviz.org/">graphviz.org</a></li>
<li><a href="https://www.linux.com/news/create-relationship-diagrams-graphviz/">create-relationship-diagrams-graphviz</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;1&#x2F;17: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>dot</tag>
        <tag>graphviz</tag>
      </tags>
  </entry>
  <entry>
    <title>running cronjob using crontab on ubuntu linux</title>
    <url>//blog/running-cronjob-using-crontab-on-ubuntu-linux/</url>
    <content><![CDATA[<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><h3 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h3><pre><code>sudo crontab -e
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># every 5 minutes</span></span><br><span class="line">*/5 * * * * /home/user/git/repo/python-demo/run.sh</span><br></pre></td></tr></table></figure>

<pre><code>  * * * * * command to be executed
  - - - - -
  | | | | |
  | | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
  | | | ------- Month (1 - 12)
  | | --------- Day of month (1 - 31)
  | ----------- Hour (0 - 23)
  ------------- Minute (0 - 59)
</code></pre>
<h3 id="crontab-FAQs"><a href="#crontab-FAQs" class="headerlink" title="crontab FAQs"></a>crontab FAQs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (1) how to edit crontab file ?</span></span><br><span class="line"><span class="built_in">sudo</span> crontab -e </span><br><span class="line"><span class="built_in">sudo</span> crontab -l </span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) how to enable crontab log </span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/rsyslog.d/50-default.conf</span><br><span class="line">cron.*              /var/log/cron.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># restart rsyslog</span></span><br><span class="line"><span class="built_in">sudo</span> service rsyslog restart</span><br><span class="line"><span class="comment"># now we can see </span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/cron.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (3) how to run a crontab job and see ENVS</span></span><br><span class="line"><span class="built_in">sudo</span> crontab -e </span><br><span class="line"></span><br><span class="line">* * * * * <span class="built_in">env</span> &gt; /home/kezunlin/env.log  </span><br><span class="line"><span class="comment"># 由root用户生成</span></span><br><span class="line"><span class="comment"># -rw-r--r-- 1 root root 411 3月  17 17:37 /home/kezunlin/env.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line">LC_TIME=zh_CN.UTF-8</span><br><span class="line"><span class="comment">#MYFB_ROOT=/home/kezunlin/git/repo/myproject/</span></span><br><span class="line"><span class="comment">#HOME=/root</span></span><br><span class="line"><span class="comment">#PYTHON_BIN=/home/kezunlin/anaconda3/bin/python</span></span><br><span class="line">LC_MONETARY=zh_CN.UTF-8</span><br><span class="line">LOGNAME=root</span><br><span class="line"><span class="comment">#PATH=/usr/bin:/bin</span></span><br><span class="line">LC_ADDRESS=zh_CN.UTF-8</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LC_TELEPHONE=zh_CN.UTF-8</span><br><span class="line">LC_NAME=zh_CN.UTF-8</span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">LC_MEASUREMENT=zh_CN.UTF-8</span><br><span class="line">LC_IDENTIFICATION=zh_CN.UTF-8</span><br><span class="line">PWD=/root</span><br><span class="line"><span class="comment">#PYTHONPATH=$PYHONPATH:$MYFB_ROOT../</span></span><br><span class="line">LC_NUMERIC=zh_CN.UTF-8</span><br><span class="line">LC_PAPER=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到,系统执行crontab job则只会加载默认的ENVS+ /etc/environment中的ENVS，不会设置任何用户ENVS</span></span><br><span class="line"><span class="comment"># 如果scripts中使用了来自.bashrc, .profile中的ENVs，肯定会导致导致scripts执行失败</span></span><br><span class="line"><span class="comment"># **方案**</span></span><br><span class="line"><span class="comment"># 将用户自定义ENVS放置在/etc/environment</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他示例</span></span><br><span class="line"><span class="comment"># crontab 中最好使用绝对路径 (不能使用~等,  可以使用$HOME,  source需要用.代替)</span></span><br><span class="line">* * * * * <span class="built_in">sleep</span> 5s &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;yo&quot;</span></span><br><span class="line">* * * * * <span class="built_in">env</span> &gt;&gt; <span class="variable">$HOME</span>/env.log </span><br><span class="line">* * * * * <span class="built_in">export</span> LC_ALL=nb_NO.UTF-8; <span class="built_in">sleep</span> 5s &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;yo&quot;</span></span><br><span class="line">*/5 * * * * /home/ubuntu/scripts/run5.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (5) 既然crontab可以加载/etc/environment中的ENVS，那么可以在crontab中使用来自/etc/environment中的ENVS，比如</span></span><br><span class="line">*/1 * * * * <span class="variable">$MYFB_ROOT</span>/scripts/run5.sh  <span class="comment">#OK 可以替换下面的路径</span></span><br><span class="line">*/1 * * * * /home/ubuntu/project/scripts/run5.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (6) crontab和手动运行scripts的区别</span></span><br><span class="line"><span class="comment"># A: 手动运行,开启terminal,除了加载系统/etc/environment中的ENVS,</span></span><br><span class="line"><span class="comment"># 还会加载当前user的.bashrc .profile文件,设置好ENVS,可以在scripts中使用</span></span><br><span class="line"><span class="comment"># B: 然而crontab则不会加载用户ENVS</span></span><br><span class="line"><span class="comment"># ***所以crontab执行的scripts中最好使用绝对路径，不要使用用户ENVS，否则执行失败***</span></span><br><span class="line"><span class="comment"># 或者将用户ENVS写入到/etc/environment中</span></span><br></pre></td></tr></table></figure>

<h3 id="crontab-终极方案"><a href="#crontab-终极方案" class="headerlink" title="crontab 终极方案"></a>crontab 终极方案</h3><h4 id="ENVS"><a href="#ENVS" class="headerlink" title="ENVS"></a>ENVS</h4><p>vim <code>/etc/environment</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/environment （可以被crontab加载,.bashrc则不行) </span></span><br><span class="line"><span class="comment"># ~/git会被crontab替换为/root/git/repo/myproject，所以使用/home/kezunlin代替</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (1) ubuntu 16.04</span></span><br><span class="line">MYFB_ROOT=/home/kezunlin/git/repo/myproject/</span><br><span class="line">PYTHONPATH=<span class="variable">$PYHONPATH</span>:<span class="variable">$MYFB_ROOT</span>../</span><br><span class="line">PYTHON_BIN=/home/kezunlin/anaconda3/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) WSL   </span></span><br><span class="line">MYFB_ROOT=/home/ubuntu/git/myproject/</span><br><span class="line">PYTHONPATH=<span class="variable">$PYHONPATH</span>:<span class="variable">$MYFB_ROOT</span>../</span><br><span class="line">PYTHON_BIN=/usr/bin/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3) cloud server </span></span><br><span class="line">MYFB_ROOT=/home/ubuntu/git/myproject/</span><br><span class="line">PYTHONPATH=<span class="variable">$PYHONPATH</span>:<span class="variable">$MYFB_ROOT</span>../</span><br><span class="line">PYTHON_BIN=/usr/bin/python3</span><br></pre></td></tr></table></figure>

<h4 id="crontab-e"><a href="#crontab-e" class="headerlink" title="crontab -e"></a>crontab -e</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts的路径可以使用来自/etc/environment的ENVS</span></span><br><span class="line"><span class="comment"># 可以统一各个不同平台的写法</span></span><br><span class="line"><span class="comment"># for ubuntu 16.04 / WSL / cloud server</span></span><br><span class="line">* * * * * <span class="built_in">env</span> &gt; <span class="variable">$MYFB_ROOT</span>/scripts/env.log</span><br><span class="line">*/5 * * * * <span class="variable">$MYFB_ROOT</span>/scripts/run5.sh  </span><br><span class="line">*/10 * * * * <span class="variable">$MYFB_ROOT</span>/scripts/run10.sh</span><br></pre></td></tr></table></figure>

<h4 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h4><p><code>scripts/run5.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. /etc/environment</span><br><span class="line"><span class="comment"># MYFB_ROOT  PYTHONPATH  PYTHON_BIN</span></span><br><span class="line"><span class="comment">#env &gt; $MYFB_ROOT/env_test.log</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$MYFB_ROOT</span>  <span class="comment"># 代码中使用了.flag.txt必须cd到此目录</span></span><br><span class="line"><span class="variable">$PYTHON_BIN</span> run5.py &gt;&gt; <span class="built_in">log</span>/log5.txt</span><br></pre></td></tr></table></figure>

<p><code>scripts/run10.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. /etc/environment</span><br><span class="line"><span class="comment">##env &gt; $MYFB_ROOT/env_test.log</span></span><br><span class="line"><span class="comment"># MYFB_ROOT  PYTHONPATH  PYTHON_BIN</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$MYFB_ROOT</span>  <span class="comment"># 代码中使用了.flag.txt必须cd到此目录</span></span><br><span class="line"><span class="variable">$PYTHON_BIN</span> run10.py &gt;&gt; <span class="built_in">log</span>/log10.txt</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/22743548/cronjob-not-running">cronjob-not-running</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;1&#x2F;17: created.</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cronjob</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>using pyppetter to scrap dynamic javascript web content</title>
    <url>//blog/using-pyppetter-to-scrap-dynamic-javascript-web-content/</url>
    <content><![CDATA[<h2 id="pyppetter"><a href="#pyppetter" class="headerlink" title="pyppetter"></a>pyppetter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3 -c &#x27;import pyppeteer; pyppeteer.chromium_downloader.download_chromium()&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># [W:pyppeteer.chromium_downloader] chromium extracted to: /home/ubuntu/.local/share/pyppeteer/local-chromium/575458</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo 1"></a>demo 1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://quotes.toscrape.com/js/&#x27;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">doc = pq(response.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Quotes:&#x27;</span>, doc(<span class="string">&#x27;.quote&#x27;</span>).length)</span><br></pre></td></tr></table></figure>

<p>0 </p>
<h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo 2"></a>demo 2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://quotes.toscrape.com/js/&#x27;</span>)</span><br><span class="line">    doc = pq(<span class="keyword">await</span> page.content())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Quotes:&#x27;</span>, doc(<span class="string">&#x27;.quote&#x27;</span>).length)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"> </span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>
<p>10</p>
<h3 id="demo-3"><a href="#demo-3" class="headerlink" title="demo 3"></a>demo 3</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://quotes.toscrape.com/js/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(path=<span class="string">&#x27;example.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.pdf(path=<span class="string">&#x27;example.pdf&#x27;</span>)</span><br><span class="line">    dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">            height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">            deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(dimensions)</span><br><span class="line">    <span class="comment"># &gt;&gt;&gt; &#123;&#x27;width&#x27;: 800, &#x27;height&#x27;: 600, &#x27;deviceScaleFactor&#x27;: 1&#125;</span></span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"> </span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<h3 id="demo-4"><a href="#demo-4" class="headerlink" title="demo 4"></a>demo 4</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># https://github.com/miyakogi/pyppeteer/issues/171</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(&#123;</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--no-sandbox&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1:5000/tool?1784076_1_1_1_1_1&quot;</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(url)</span><br><span class="line">    <span class="comment">#await page.waitFor(3000) # wait for 3 seconds</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#===================================================</span></span><br><span class="line">    <span class="comment"># JS逻辑, 如果echart图像render finished,则在html页面中动态添加echartReadyDiv</span></span><br><span class="line">    <span class="comment"># 表示图像ready，可以download/send to server.</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;#echartReadyDiv&#x27;</span>)</span><br><span class="line">    <span class="comment">#===================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 页面渲染完毕后，开始截图</span></span><br><span class="line">    <span class="comment"># 如果没有加载完毕就生产image了，内容不完整</span></span><br><span class="line">    <span class="keyword">await</span> page.screenshot(path=<span class="string">&#x27;example.png&#x27;</span>) </span><br><span class="line">    <span class="comment">#await page.pdf(path=&#x27;example.pdf&#x27;)</span></span><br><span class="line">    dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">            height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">            deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(dimensions)</span><br><span class="line">    <span class="comment"># &gt;&gt;&gt; &#123;&#x27;width&#x27;: 800, &#x27;height&#x27;: 600, &#x27;deviceScaleFactor&#x27;: 1&#125;</span></span><br><span class="line">    <span class="keyword">await</span> page.close()</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"> </span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<p>Page APIs:</p>
<ul>
<li>page.waitFor(3000) # wait for 3 seconds</li>
<li>page.waitForSelector(‘#echartReadyDiv’) # wait for selector</li>
<li>page.page.waitForXPath(‘&#x2F;&#x2F;*[@id&#x3D;”echartReadyDiv”]’) # wait for xpath</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/miyakogi/pyppeteer">pyppeteer</a></li>
<li><a href="https://github.com/puppeteer/puppeteer/blob/master/docs/api.md">puppetter Page APIs</a></li>
<li><a href="https://github.com/puppeteer/puppeteer/issues/4546">puppetter waitFor issues</a></li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;1&#x2F;17: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyppetter</tag>
        <tag>puppetter</tag>
        <tag>selenium</tag>
        <tag>waitFor</tag>
      </tags>
  </entry>
  <entry>
    <title>enable WSL on Windows 10 and install Ubuntu 16.04 Ubuntu 18.04</title>
    <url>//blog/enable-WSL-on-Windows-10-and-install-Ubuntu-16-04-Ubuntu-18-04/</url>
    <content><![CDATA[<h2 id="WLS-for-windows"><a href="#WLS-for-windows" class="headerlink" title="WLS for windows"></a>WLS for windows</h2><ul>
<li>Enable WSL for Windows</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start powershell as admin</span></span><br><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br><span class="line"></span><br><span class="line"><span class="comment"># or by 控制面板的&quot;启动或关闭Windows功能&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启电脑</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Microsoft Store - Search Ubuntu16.04&#x2F;Ubuntu18.04 and Install</li>
<li>CMD+R  \wsl$</li>
<li>VS Code + WSL Bash (CMD,Powershell)</li>
</ul>
<p>windows 10 配置默认Linux发行版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd&gt; wsl</span><br><span class="line">cmd&gt; wslconfig /l</span><br><span class="line">Ubuntu-16.04(默认)</span><br><span class="line">Ubuntu-18.04</span><br><span class="line"></span><br><span class="line">cmd&gt; wslconfig /s Ubuntu-18.04</span><br><span class="line">Ubuntu-18.04(默认)</span><br><span class="line">Ubuntu-16.04</span><br></pre></td></tr></table></figure>

<p>卸载WSL Ubuntu 16.04</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Windows Search ---- Ubuntu 16.04 LTS --- 菜单选择卸载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check if uninstall successfully</span></span><br><span class="line">cmd&gt; wslconfig /s Ubuntu-18.04</span><br><span class="line">Ubuntu-18.04(默认)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;3&#x2F;20: created.</li>
</ul>
]]></content>
      <categories>
        <category>window</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>python atexit and CTRL-C CTRL-Z signal handler</title>
    <url>//blog/python-atexit-and-CTRL-C-CTRL-Z-signal-handler/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h2 id="atexit"><a href="#atexit" class="headerlink" title="atexit"></a>atexit</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exit_handler</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;exit&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import atexit</span></span><br><span class="line"><span class="string">atexit.register(exit_handler)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">    print(&quot;</span>OK)</span><br></pre></td></tr></table></figure>


<h2 id="ctrl-c-ctrl-z"><a href="#ctrl-c-ctrl-z" class="headerlink" title="ctrl+c&#x2F; ctrl+z"></a>ctrl+c&#x2F; ctrl+z</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">signal_received, frame</span>):</span><br><span class="line">    <span class="comment"># Handle any cleanup here</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;SIGINT or CTRL-C detected. Exiting gracefully&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Tell Python to run the handler() function when SIGINT is recieved</span></span><br><span class="line">    signal.signal(signal.SIGINT, <span class="variable language_">self</span>.ctrl_exit_handler) <span class="comment"># ctlr + c</span></span><br><span class="line">    signal.signal(signal.SIGTSTP, <span class="variable language_">self</span>.ctrl_exit_handler) <span class="comment"># ctlr + z</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Running. Press CTRL-C to exit.&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Do nothing and hog CPU forever until SIGINT received.</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;3&#x2F;20: created.</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>atexit</tag>
        <tag>signal</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 16.04 18.04 sources.list</title>
    <url>//blog/ubuntu-16-04-18-04-sources-list/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04"></a>Ubuntu 16.04</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;3&#x2F;20: created.</li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>tutorial to install and configure deep learning environments on ubuntu 18.04</title>
    <url>//blog/tutorial-to-install-and-configure-deep-learning-environments-on-ubuntu-18-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h2 id="prepare-ubuntu-18-04"><a href="#prepare-ubuntu-18-04" class="headerlink" title="prepare ubuntu 18.04"></a>prepare ubuntu 18.04</h2><blockquote>
<p>主机支持8个口才能使用GeForce RTX 2080 Ti(11GB显存)<br>Ubuntu 18.04(刻录Ubuntu 18.04系统并通过U盘安装.)<br>Mem: 64GB<br>CPU: 2 core 10<br>GPU: RTX 2080 Ti</p>
</blockquote>
<h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><ul>
<li>Anaconda3-2019.03-Linux-x86_64.sh</li>
</ul>
<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install openssh-server</span><br><span class="line"><span class="built_in">sudo</span> ap-get -y install net-tools</span><br><span class="line"><span class="built_in">sudo</span> ifconfig</span><br><span class="line"><span class="comment"># 192.168.0.114</span></span><br></pre></td></tr></table></figure>

<h2 id="install-packages"><a href="#install-packages" class="headerlink" title="install packages"></a>install packages</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt -y install git vim tree build-essential cmake-gui</span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libleveldb-dev liblmdb-dev libsnappy-dev libhdf5-serial-dev </span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line">apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>

<h2 id="Nvidia-driver"><a href="#Nvidia-driver" class="headerlink" title="Nvidia driver"></a>Nvidia driver</h2><ul>
<li>see <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#runfile-nouveau">nvidia driver</a></li>
<li>see <a href="https://kezunlin.me/post/3f33896b/">install and configure cuda 9.2 with cudnn 7.1 on ubuntu 16.04</a></li>
</ul>
<h3 id="Disable-the-Nouveau-drivers"><a href="#Disable-the-Nouveau-drivers" class="headerlink" title="Disable the Nouveau drivers"></a>Disable the Nouveau drivers</h3><p>To install the Display Driver, the Nouveau drivers must first be disabled. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nouveau is loaded</span></span><br><span class="line">lsmod | grep nouveau</span><br><span class="line"></span><br><span class="line">vim /etc/modprobe.d/blacklist-nouveau.conf </span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#Regenerate the kernel initramfs:</span></span><br><span class="line"><span class="built_in">sudo</span> update-initramfs -u</span><br><span class="line"><span class="built_in">sudo</span> reboot </span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot and verify that the Nouveau drivers are not loaded.</span></span><br><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>

<h3 id="install-driver-by-CUDA-linux-run-not"><a href="#install-driver-by-CUDA-linux-run-not" class="headerlink" title="install driver by CUDA_linux.run(not)"></a><del>install driver by CUDA_linux.run(not)</del></h3><p>The Runfile installation installs the NVIDIA Driver, the CUDA Toolkit, and CUDA Samples, via an interactive ncurses-based interface.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge nvidia-*</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> ./cuda_10.1.243_418.87.00_linux.run --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">sudo</span> ./cuda_10.1.243_418.87.00_linux.run --driver</span><br><span class="line"></span><br><span class="line"><span class="comment"># test </span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&#x2F;var&#x2F;log&#x2F;nvidia-installer.log<br>&#x2F;var&#x2F;log&#x2F;cuda-installer.log</p>
</blockquote>
<blockquote>
<p>ERROR: The Nouveau kernel driver is currently in use by your system.  This driver is incompatible with the NVIDIA driver, and must be disabled before proceeding. </p>
</blockquote>
<h3 id="install-driver-by-PPA-推荐"><a href="#install-driver-by-PPA-推荐" class="headerlink" title="install driver by PPA(推荐)"></a>install driver by PPA(推荐)</h3><p>see <a href="https://linuxhint.com/ubuntu_nvidia_ppa/">ubuntu_nvidia_ppa</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudp apt-get update</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-cache search nvidia-driver-*</span><br><span class="line"><span class="comment"># nvidia-driver-418</span></span><br><span class="line"><span class="comment"># nvidia-driver-440</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install nvidia-driver-440</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="check-dirver"><a href="#check-dirver" class="headerlink" title="check dirver"></a>check dirver</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">Thu Jun  4 17:12:59 2020       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce RTX 208...  Off  | 00000000:17:00.0 Off |                  N/A |</span><br><span class="line">| 30%   42C    P8    19W / 250W |      1MiB / 11019MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  GeForce RTX 208...  Off  | 00000000:65:00.0  On |                  N/A |</span><br><span class="line">| 31%   44C    P8    10W / 250W |     80MiB / 11018MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    1      1309      G   /usr/lib/xorg/Xorg                            21MiB |</span><br><span class="line">|    1      1399      G   /usr/bin/gnome-shell                          56MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="cuda-toolkit-9-1"><a href="#cuda-toolkit-9-1" class="headerlink" title="cuda-toolkit(9.1)"></a><del>cuda-toolkit(9.1)</del></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install nvidia-cuda-toolkit</span><br><span class="line"></span><br><span class="line">nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class="line">Built on Fri_Nov__3_21:07:56_CDT_2017</span><br><span class="line">Cuda compilation tools, release 9.1, V9.1.85</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./Anaconda3-2019.03-Linux-x86_64.sh </span><br><span class="line">[<span class="built_in">yes</span>]</span><br><span class="line">[<span class="built_in">yes</span>]</span><br></pre></td></tr></table></figure>

<h3 id="install-torch"><a href="#install-torch" class="headerlink" title="install torch"></a>install torch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n py37 python==3.7</span><br><span class="line">conda activate py37</span><br><span class="line"></span><br><span class="line">conda install -y pytorch torchvision</span><br></pre></td></tr></table></figure>

<h3 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opencv-contrib-python</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">Python 3.7.0 (default, Oct  9 2018, 10:31:47) </span><br><span class="line">[GCC 7.3.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt; cv2.__version__</span><br><span class="line"><span class="string">&#x27;4.2.0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="qt"><a href="#qt" class="headerlink" title="qt"></a>qt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pyqt</span><br></pre></td></tr></table></figure>

<h2 id="other-libraries"><a href="#other-libraries" class="headerlink" title="other libraries"></a>other libraries</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;06&#x2F;04: created.</li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>install windows wechat on ubuntu 16.04</title>
    <url>//blog/install-windows-wechat-on-ubuntu-16-04/</url>
    <content><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="wechat"><a href="#wechat" class="headerlink" title="wechat"></a>wechat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O- https://deepin-wine.i-m.dev/setup.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install deepin.com.wechat</span><br><span class="line"><span class="comment">#版本还是比较新的，这下比网页版微信方便多了。（发帖时Windows上的微信最新是2.8.0版）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装QQ只需要一条命令：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install deepin.com.qq.im</span><br></pre></td></tr></table></figure>

<h3 id="screen-recorder"><a href="#screen-recorder" class="headerlink" title="screen recorder"></a>screen recorder</h3><h4 id="obs"><a href="#obs" class="headerlink" title="obs"></a>obs</h4><p>see <a href="https://obsproject.com/">obs</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:obsproject/obs-studio</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install obs-studio</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>2020&#x2F;06&#x2F;05: created.</li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>wechat</tag>
        <tag>deepin-wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Back Again</title>
    <url>//blog/back-again/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-next</tag>
        <tag>nodejs</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
